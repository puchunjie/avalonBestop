webpackJsonp([0,1],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/**
	 * Created by Jeremy Pu on 16/06/27.
	 */
	/*======================== 核心库加载 -start ============================*/
	var avalon = __webpack_require__(3);
	__webpack_require__(4);
	var cf = __webpack_require__(5);//载入通用配置项
	/*======================== 核心库加载 -end ============================*/
	
	
	/*======================== 样式加载 -start ============================*/
	__webpack_require__(6);
	__webpack_require__(7);
	__webpack_require__(8);
	/*======================== 样式加载 -end ============================*/
	
	
	/*======================== 工具库 -start ============================*/
	var watch = __webpack_require__(9)//引入vm监听器
	var T = __webpack_require__(10) //一些封装的公共小方法
	//通栏模版数据
	var bannerMod = __webpack_require__(11)
	/*======================== 工具库 -end ============================*/
	
	
	/*======================== 模块载入 -start ============================*/
	__webpack_require__(12)
	__webpack_require__(15)
	__webpack_require__(19)
	__webpack_require__(22)
	__webpack_require__(25)
	__webpack_require__(28)
	__webpack_require__(32)
	__webpack_require__(41)
	__webpack_require__(45)//导航设置面板
	/*======================== 模块载入 -end ============================*/
	
	//加载avalon配置项目
	cf.config.avalonInit();
	
	/*======================== 定义一个顶层的vmodel，用来放置全局共享数据 -start ============================*/
	var vm = avalon.define({
	    $id: 'app',
	    width: 1400,
	    maskShow: false,//页面蒙板显隐
	    copyModule: {},//空对象,用于存放模块复制的数据
	    //添加通栏到页面方法
	    addModuel: function () {
	        //添加到layouts中,页面添加一个通栏模块
	        bannerMod.moduleId = "drag_" + new Date().getTime()
	        this.layouts.push(bannerMod)
	    },
	    layouts: []
	})
	/*======================== 定义一个顶层的vmodel，用来放置全局共享数据 -end ============================*/
	
	
	
	
	/*======================== 顶层工具条 -start ============================*/
	var topBar = avalon.define({
	    $id: 'topbar',
	    left: 0,
	    top: 0,
	    layoutKey: NaN,
	    slotModeulesKey: '',
	    moduleName: '',
	    save: function () {
	        var page = vm.$model.layouts
	        $.when($.ajax({
	            type: "POST",
	            data: JSON.stringify({"key": "page", "data": page}),
	            url: cf.config.uploadUrl, dataType: "json"
	        })).then(function (data) {
	            alert("上传成功")
	        }, function () {
	            alert("上传失败")
	        })
	    }
	})
	/*======================== 顶层工具条 -end ============================*/
	
	
	
	
	/*======================== 左侧栏vm -start ============================*/
	var leftSidebar = avalon.define({
	    $id: 'leftsidebar',
	    isViewbox: false,//模块缩略图容器显隐
	    bars: [
	        {
	            name: "页面",
	            icon: "icon-weibiaoti104",
	            active: false,
	            views: []
	        },
	        {
	            name: "基础",
	            icon: "icon-xingxing",
	            active: false,
	            views: [
	                {
	                    name: "通栏",
	                    widget: "drag"
	                },
	                {
	                    name: "文字模块",
	                    widget: "word",
	                    jsonKey: "word"
	                },
	                {
	                    name: "图片模块",
	                    widget: "picture",
	                    jsonKey: "picture"
	                },
	                {
	                    name: "图文模块",
	                    widget: "graphic",
	                    jsonKey: "graphic"
	                },
	                {
	                    name: "基本导航",
	                    widget: "menubase",
	                    jsonKey: "menubase"
	                },
	                {
	                    name: "特殊导航",
	                    widget: "menuspe",
	                    jsonKey: "menuspe"
	                }
	            ]
	        },
	        {
	            name: "控件",
	            icon: "icon-kongjian",
	            active: false,
	            views: []
	        },
	        {
	            name: "插件",
	            icon: "icon-yingxiaochajian",
	            active: false,
	            views: []
	        },
	        {
	            name: "设置",
	            icon: "icon-guanlichajian",
	            active: false,
	            views: []
	        }
	    ],
	    viewModule: {},
	    //模块缩略图容器显示数据
	    showViewModules: function (view) {
	        $("#left_bar li").removeClass("active")
	        view.active = true
	        this.viewModule = view.$model
	        //点击大分类显示对应的模块
	        this.isViewbox = !this.isViewbox
	    },
	    //初始化模块缩略图容器中的模块为可拖拽
	    draggleInit: function () {
	        $(".side-module").draggable({
	            revert: "valid",
	            revertDuration: 100,
	            start: function () {
	                $("#left_bar li").removeClass("active")
	                leftSidebar.isViewbox = false
	            }
	        });
	    },
	    closeViewbox: function () {
	        $("#left_bar li").removeClass("active")
	        this.isViewbox = !this.isViewbox
	    }
	
	})
	/*======================== 左侧栏vm -end ============================*/
	
	
	
	
	/*======================== 设置面板vm -start ============================*/
	var settingsPanel = avalon.define({
	    $id: 'settingspanel',
	    baseSettingObj: null,
	    isOpen: false,  //面板显示/隐藏样式
	    layoutKey: '',
	    slotModeulesKey: '',
	    closePanel: function () {
	        //关闭设置面板
	        this.isOpen = !this.isOpen
	        //关闭遮罩
	        vm.maskShow = !vm.maskShow
	        //初始化高级设置数据,否则数据混乱
	        this.baseSettingObj.moduleSet.advancedSetting = null
	    }
	})
	/*======================== 设置面板vm -end ============================*/
	
	
	
	
	/*======================== NAV设置面板vm -start ============================*/
	var navPanel = avalon.define({
	    $id: 'navpanel',
	    isOpen: false,  //面板显示/隐藏样式
	    layoutKey: '',
	    slotModeulesKey: '',
	    settingObj: null,
	    closePanel: function () {
	        this.isOpen = !this.isOpen
	        vm.maskShow = !vm.maskShow
	        //初始化高级设置数据,否则数据混乱
	        this.baseSettingObj.moduleSet.advancedSetting = null
	    }
	})
	/*======================== NAV设置面板vm -end ============================*/
	
	
	
	
	/*======================== 模块工具条vm -start ============================*/
	var toolBar = avalon.define({
	    $id: 'toolbar',
	    layoutKey: NaN,
	    slotModeulesKey: '',
	    moduleName: '',
	    ishide: false,
	    position: {
	        top: 200,
	        left: 300
	    },
	    tools: [],
	    toolAction: function (type) {
	        //打开模块设置面板
	        if (type == 'settings') {
	            vm.maskShow = !vm.maskShow
	            toolBar.ishide = false
	            if (this.moduleName !== 'menu') {
	                //把模块数据传入设置面板
	                settingsPanel.isOpen = !settingsPanel.isOpen
	                settingsPanel.layoutKey = this.layoutKey
	                settingsPanel.slotModeulesKey = this.slotModeulesKey
	                //把默认数据保存下来用于设置面板恢复默认用
	                var moduleJson
	                var key = this.layoutKey
	                //console.log(avalon.vmodels['public' + this.layoutKey].$model[this.layoutKey + 'Layouts'].slotModeules[this.slotModeulesKey])
	                //判断是否是顶部或者底部通栏
	                if(key !== 'header' && key !== 'footer'){
	                    moduleJson = vm.$model.layouts[this.layoutKey].slotModeules[this.slotModeulesKey]
	                }else{
	                    moduleJson = avalon.vmodels['public' + this.layoutKey].$model[this.layoutKey + 'Layouts'].slotModeules[this.slotModeulesKey]
	                }
	                moduleJson.defaultObj = moduleJson.moduleSet
	                settingsPanel.baseSettingObj = moduleJson
	            } else {
	                //把模块数据传入导航设置面板
	                navPanel.isOpen = !navPanel.isOpen
	                navPanel.layoutKey = this.layoutKey
	                navPanel.slotModeulesKey = this.slotModeulesKey
	                //navPanel.settingObj = vm.layouts[this.layoutKey].slotModeules[this.slotModeulesKey].$model
	                var moduleJson = vm.layouts[this.layoutKey].slotModeules[this.slotModeulesKey].$model
	                moduleJson.defaultObj = moduleJson.moduleSet
	                navPanel.settingObj = moduleJson
	            }
	        }
	        //模块内容编辑
	        else if (type == 'edit') {
	
	        }
	        //删除当前模块
	        else if (type == 'delete') {
	            var old = vm.layouts[this.layoutKey].slotModeules.$model
	            delete old[this.slotModeulesKey]
	            delete avalon.vmodels[this.slotModeulesKey]//彻底删除组件自动生成的vm
	            //如果对象为空了就设置成null
	            old = T.Tools.isEmptyObject(old) ? null : old
	            vm.layouts[this.layoutKey].slotModeules = old
	            //删除完隐藏工具条
	            toolBar.ishide = false
	        }
	        //复制当前模块
	        else if (type == 'copy') {
	            //把当前选中模块的数据,存放进模块复制对象中
	            //vm.copyModule = vm.layouts[this.layoutKey].slotModeules[this.slotModeulesKey].$model
	            copyMode(vm.layouts[this.layoutKey].slotModeules[this.slotModeulesKey].$model)
	            //console.log(vm.copyModule)
	        }
	    }
	
	})
	/*======================== 模块工具条vm -end ============================*/
	
	
	
	
	/*======================== dom渲染完毕后执行 -start ============================*/
	$(function () {
	    //设置面板可拖拽
	    $(".bst-settings").draggable({
	        containment: "document",
	        handle: ".settings-header"
	    })
	
	    //给所有模块绑定点击事件,返回点击模块的数据
	    $(".bst-main-view").on("click", ".bst-module", function () {
	        var moduleKey = $(this).attr("wid")
	        var dragKey = $(this).parent().attr("wid").split("_")[1]
	        //当前选中模块的数据
	        var choiseModule
	        //判断是否是顶部或者底部通栏
	        if(dragKey !== 'header' && dragKey !== 'footer'){
	            dragKey = Number(dragKey)
	            choiseModule = vm.$model.layouts[dragKey].slotModeules[moduleKey]
	        }else{
	            choiseModule = avalon.vmodels['public' + dragKey][dragKey + 'Layouts'].slotModeules[moduleKey]
	        }
	
	        //把当前模块的偏移值传入顶部工具栏中
	        //topBar.left = choiseModule.moduleSet.outLook.styles.left
	        //topBar.top = choiseModule.moduleSet.outLook.styles.top
	        //记录当前数据的key值
	        toolBar.layoutKey = topBar.layoutKey = dragKey
	        toolBar.slotModeulesKey = topBar.slotModeulesKey = moduleKey
	        toolBar.moduleName = topBar.moduleName = choiseModule.moduleName
	        //把当前模块的工具条数据塞进工具条vm中
	        toolBar.tools = choiseModule.tools
	        //工具条为鼠标点击模块当前位置
	        var nowPosition = $(this).offset()
	        nowPosition.top = nowPosition.top - 30
	        nowPosition.left = nowPosition.left - 10
	        toolBar.position = nowPosition
	        //显示工具条
	        toolBar.ishide = true
	    })
	});
	/*======================== dom渲染完毕后执行 -end ============================*/
	
	
	
	
	/*======================== 根vm加载完毕后的数据处理 -start ============================*/
	vm.$watch('onReady', function () {
	    $.when($.ajax({
	        type: "GET",
	        url: cf.config.downloadUrl + "page",
	        dataType: "json"
	    })).then(function (data) {
	        vm.layouts = data
	    })
	    watch.addWatch()
	})
	/*======================== 根vm加载完毕后的数据处理 -end ============================*/
	
	
	//开始扫描编译
	avalon.scan(document.body)
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.1.0
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2014-01-23T21:10Z
	 */
	
	(function( global, factory ) {
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper window is present,
			// execute the factory and get jQuery
			// For environments that do not inherently posses a window with a document
			// (such as Node.js), expose a jQuery-making factory as module.exports
			// This accentuates the need for the creation of a real window
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Can't do this because several apps including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	// Support: Firefox 18+
	//
	
	var arr = [];
	
	var slice = arr.slice;
	
	var concat = arr.concat;
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var trim = "".trim;
	
	var support = {};
	
	
	
	var
		// Use the correct document accordingly with window argument (sandbox)
		document = window.document,
	
		version = "2.1.0",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// Start with an empty selector
		selector: "",
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?
	
				// Return a 'clean' array
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :
	
				// Return just the object
				slice.call( this );
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		// (You can seed the arguments with an array of args, but this is
		// only used internally.)
		each: function( callback, args ) {
			return jQuery.each( this, callback, args );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map(this, function( elem, i ) {
				return callback.call( elem, i, elem );
			}));
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor(null);
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[0] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
			target = {};
		}
	
		// extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
			// Only deal with non-null/undefined values
			if ( (options = arguments[ i ]) != null ) {
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend({
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		// See test/unit/core.js for details concerning isFunction.
		// Since version 1.3, DOM methods and functions like alert
		// aren't supported. They return false on IE (#2968).
		isFunction: function( obj ) {
			return jQuery.type(obj) === "function";
		},
	
		isArray: Array.isArray,
	
		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},
	
		isNumeric: function( obj ) {
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			return obj - parseFloat( obj ) >= 0;
		},
	
		isPlainObject: function( obj ) {
			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}
	
			// Support: Firefox <20
			// The try/catch suppresses exceptions thrown when attempting to access
			// the "constructor" property of certain host objects, ie. |window.location|
			// https://bugzilla.mozilla.org/show_bug.cgi?id=814622
			try {
				if ( obj.constructor &&
						!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
					return false;
				}
			} catch ( e ) {
				return false;
			}
	
			// If the function hasn't returned already, we're confident that
			// |obj| is a plain object, created by {} or constructed with new Object
			return true;
		},
	
		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
			// Support: Android < 4.0, iOS < 6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call(obj) ] || "object" :
				typeof obj;
		},
	
		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;
	
			code = jQuery.trim( code );
	
			if ( code ) {
				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf("use strict") === 1 ) {
					script = document.createElement("script");
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {
				// Otherwise, avoid the DOM node creation, insertion
				// and removal by using an indirect global eval
					indirect( code );
				}
			}
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},
	
		// args is for internal usage only
		each: function( obj, callback, args ) {
			var value,
				i = 0,
				length = obj.length,
				isArray = isArraylike( obj );
	
			if ( args ) {
				if ( isArray ) {
					for ( ; i < length; i++ ) {
						value = callback.apply( obj[ i ], args );
	
						if ( value === false ) {
							break;
						}
					}
				} else {
					for ( i in obj ) {
						value = callback.apply( obj[ i ], args );
	
						if ( value === false ) {
							break;
						}
					}
				}
	
			// A special, fast, case for the most common use of each
			} else {
				if ( isArray ) {
					for ( ; i < length; i++ ) {
						value = callback.call( obj[ i ], i, obj[ i ] );
	
						if ( value === false ) {
							break;
						}
					}
				} else {
					for ( i in obj ) {
						value = callback.call( obj[ i ], i, obj[ i ] );
	
						if ( value === false ) {
							break;
						}
					}
				}
			}
	
			return obj;
		},
	
		trim: function( text ) {
			return text == null ? "" : trim.call( text );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArraylike( Object(arr) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var value,
				i = 0,
				length = elems.length,
				isArray = isArraylike( elems ),
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: Date.now,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});
	
	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	});
	
	function isArraylike( obj ) {
		var length = obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		if ( obj.nodeType === 1 && length ) {
			return true;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v1.10.16
	 * http://sizzlejs.com/
	 *
	 * Copyright 2013 jQuery Foundation, Inc. and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2014-01-13
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		compile,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + -(new Date()),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// General-purpose constants
		strundefined = typeof undefined,
		MAX_NEGATIVE = 1 << 31,
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf if we can't use a native one
		indexOf = arr.indexOf || function( elem ) {
			var i = 0,
				len = this.length;
			for ( ; i < len; i++ ) {
				if ( this[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
		// http://www.w3.org/TR/css3-syntax/#characters
		characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	
		// Loosely modeled on CSS identifier characters
		// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
		// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = characterEncoding.replace( "w", "w#" ),
	
		// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
			"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",
	
		// Prefer arguments quoted,
		//   then not containing pseudos/brackets,
		//   then attribute selectors/non-parenthetical expressions,
		//   then anything else
		// These preferences are here to reduce the number of selectors
		//   needing tokenize in the PSEUDO preFilter
		pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + characterEncoding + ")" ),
			"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
			"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
		rescape = /'|\\/g,
	
		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		};
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var match, elem, m, nodeType,
			// QSA vars
			i, groups, old, nid, newContext, newSelector;
	
		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
	
		context = context || document;
		results = results || [];
	
		if ( !selector || typeof selector !== "string" ) {
			return results;
		}
	
		if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
			return [];
		}
	
		if ( documentIsHTML && !seed ) {
	
			// Shortcuts
			if ( (match = rquickExpr.exec( selector )) ) {
				// Speed-up: Sizzle("#ID")
				if ( (m = match[1]) ) {
					if ( nodeType === 9 ) {
						elem = context.getElementById( m );
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document (jQuery #6963)
						if ( elem && elem.parentNode ) {
							// Handle the case where IE, Opera, and Webkit return items
							// by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}
					} else {
						// Context is not a document
						if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
							contains( context, elem ) && elem.id === m ) {
							results.push( elem );
							return results;
						}
					}
	
				// Speed-up: Sizzle("TAG")
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;
	
				// Speed-up: Sizzle(".CLASS")
				} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}
	
			// QSA path
			if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
				nid = old = expando;
				newContext = context;
				newSelector = nodeType === 9 && selector;
	
				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					groups = tokenize( selector );
	
					if ( (old = context.getAttribute("id")) ) {
						nid = old.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", nid );
					}
					nid = "[id='" + nid + "'] ";
	
					i = groups.length;
					while ( i-- ) {
						groups[i] = nid + toSelector( groups[i] );
					}
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
					newSelector = groups.join(",");
				}
	
				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch(qsaError) {
					} finally {
						if ( !old ) {
							context.removeAttribute("id");
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");
	
		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = attrs.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== strundefined && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare,
			doc = node ? node.ownerDocument || node : preferredDoc,
			parent = doc.defaultView;
	
		// If no document and documentElement is available, return
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Set our document
		document = doc;
		docElem = doc.documentElement;
	
		// Support tests
		documentIsHTML = !isXML( doc );
	
		// Support: IE>8
		// If iframe document is assigned to "document" variable and if iframe has been reloaded,
		// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
		// IE6-8 do not support the defaultView property so parent will be undefined
		if ( parent && parent !== parent.top ) {
			// IE11 does not have attachEvent, so all must suffer
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", function() {
					setDocument();
				}, false );
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", function() {
					setDocument();
				});
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( doc.createComment("") );
			return !div.getElementsByTagName("*").length;
		});
	
		// Check if getElementsByClassName can be trusted
		support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
			div.innerHTML = "<div class='a'></div><div class='a i'></div>";
	
			// Support: Safari<4
			// Catch class over-caching
			div.firstChild.className = "i";
			// Support: Opera<10
			// Catch gEBCN failure to find non-leading classes
			return div.getElementsByClassName("i").length === 2;
		});
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
		});
	
		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
					var m = context.getElementById( id );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					return m && m.parentNode ? [m] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];
	
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== strundefined ) {
					return context.getElementsByTagName( tag );
				}
			} :
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				div.innerHTML = "<select t=''><option selected=''></option></select>";
	
				// Support: IE8, Opera 10-12
				// Nothing should be selected when empty strings follow ^= or $= or *=
				if ( div.querySelectorAll("[t^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
			});
	
			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = doc.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully does not implement inclusive descendent
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === doc ? -1 :
					b === doc ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return doc;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch(e) {}
		}
	
		return Sizzle( expr, document, null, [elem] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[5] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] && match[4] !== undefined ) {
					match[2] = match[4];
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, outerCache, node, diff, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
								// Seek `elem` from a previously-cached index
								outerCache = parent[ expando ] || (parent[ expando ] = {});
								cache = outerCache[ type ] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = cache[0] === dirruns && cache[2];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										outerCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							// Use previously-cached element index if available
							} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
								diff = cache[1];
	
							// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
							} else {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
										// Cache the index of each encountered element
										if ( useCache ) {
											(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
										}
	
										if ( node === elem ) {
											break;
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf.call( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},
	
			"disabled": function( elem ) {
				return elem.disabled === true;
			},
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	function tokenize( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	}
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
							if ( (oldCache = outerCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								outerCache[ dir ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf.call( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context !== document && context;
				}
	
				// Add elements passing elementMatchers directly to results
				// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context, xml ) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// Apply set filters to unmatched elements
				matchedCount += i;
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !group ) {
				group = tokenize( selector );
			}
			i = group.length;
			while ( i-- ) {
				cached = matcherFromTokens( group[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
		}
		return cached;
	};
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function select( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			match = tokenize( selector );
	
		if ( !seed ) {
			// Try to minimize operations if there is only one group
			if ( match.length === 1 ) {
	
				// Take a shortcut and set the context if the root selector is an ID
				tokens = match[0] = match[0].slice( 0 );
				if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
						support.getById && context.nodeType === 9 && documentIsHTML &&
						Expr.relative[ tokens[1].type ] ) {
	
					context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
					if ( !context ) {
						return results;
					}
					selector = selector.slice( tokens.shift().value.length );
				}
	
				// Fetch a seed set for right-to-left matching
				i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
				while ( i-- ) {
					token = tokens[i];
	
					// Abort if we hit a combinator
					if ( Expr.relative[ (type = token.type) ] ) {
						break;
					}
					if ( (find = Expr.find[ type ]) ) {
						// Search, expanding context for leading sibling combinators
						if ( (seed = find(
							token.matches[0].replace( runescape, funescape ),
							rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
						)) ) {
	
							// If seed is empty or no tokens remain, we can return early
							tokens.splice( i, 1 );
							selector = seed.length && toSelector( tokens );
							if ( !selector ) {
								push.apply( results, seed );
								return results;
							}
	
							break;
						}
					}
				}
			}
		}
	
		// Compile and execute a filtering function
		// Provide `match` to avoid retokenization if we modified the selector above
		compile( selector, match )(
			seed,
			context,
			!documentIsHTML,
			results,
			rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	}
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome<14
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			});
	
		}
	
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			});
	
		}
	
		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}
	
			qualifier = jQuery.filter( qualifier, elements );
		}
	
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
		});
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	};
	
	jQuery.fn.extend({
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter(function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				}) );
			}
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow(this, selector || [], false) );
		},
		not: function( selector ) {
			return this.pushStack( winnow(this, selector || [], true) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	});
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	
		init = jQuery.fn.init = function( selector, context ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && (match[1] || !context) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[1] ) {
						context = context instanceof jQuery ? context[0] : context;
	
						// scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[1],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[2] );
	
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
							// Inject the element directly into the jQuery object
							this.length = 1;
							this[0] = elem;
						}
	
						this.context = document;
						this.selector = selector;
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || rootjQuery ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[0] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return typeof rootjQuery.ready !== "undefined" ?
					rootjQuery.ready( selector ) :
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
		// methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.extend({
		dir: function( elem, dir, until ) {
			var matched = [],
				truncate = until !== undefined;
	
			while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
				if ( elem.nodeType === 1 ) {
					if ( truncate && jQuery( elem ).is( until ) ) {
						break;
					}
					matched.push( elem );
				}
			}
			return matched;
		},
	
		sibling: function( n, elem ) {
			var matched = [];
	
			for ( ; n; n = n.nextSibling ) {
				if ( n.nodeType === 1 && n !== elem ) {
					matched.push( n );
				}
			}
	
			return matched;
		}
	});
	
	jQuery.fn.extend({
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter(function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[i] ) ) {
						return true;
					}
				}
			});
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;
	
			for ( ; i < l; i++ ) {
				for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
					// Always skip document fragments
					if ( cur.nodeType < 11 && (pos ?
						pos.index(cur) > -1 :
	
						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector(cur, selectors)) ) {
	
						matched.push( cur );
						break;
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
		},
	
		// Determine the position of an element within
		// the matched set of elements
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.unique(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter(selector)
			);
		}
	});
	
	function sibling( cur, dir ) {
		while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each({
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return jQuery.dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return jQuery.dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return jQuery.dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return jQuery.sibling( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.unique( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	});
	var rnotwhite = (/\S+/g);
	
	
	
	// String to Object options format cache
	var optionsCache = {};
	
	// Convert String-formatted options into Object-formatted ones and store in cache
	function createOptions( options ) {
		var object = optionsCache[ options ] = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		});
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			( optionsCache[ options ] || createOptions( options ) ) :
			jQuery.extend( {}, options );
	
		var // Last fire value (for non-forgettable lists)
			memory,
			// Flag to know if list was already fired
			fired,
			// Flag to know if list is currently firing
			firing,
			// First callback to fire (used internally by add and fireWith)
			firingStart,
			// End of the loop when firing
			firingLength,
			// Index of currently firing callback (modified by remove if needed)
			firingIndex,
			// Actual callback list
			list = [],
			// Stack of fire calls for repeatable lists
			stack = !options.once && [],
			// Fire callbacks
			fire = function( data ) {
				memory = options.memory && data;
				fired = true;
				firingIndex = firingStart || 0;
				firingStart = 0;
				firingLength = list.length;
				firing = true;
				for ( ; list && firingIndex < firingLength; firingIndex++ ) {
					if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
						memory = false; // To prevent further calls using add
						break;
					}
				}
				firing = false;
				if ( list ) {
					if ( stack ) {
						if ( stack.length ) {
							fire( stack.shift() );
						}
					} else if ( memory ) {
						list = [];
					} else {
						self.disable();
					}
				}
			},
			// Actual Callbacks object
			self = {
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
						// First, we save the current length
						var start = list.length;
						(function add( args ) {
							jQuery.each( args, function( _, arg ) {
								var type = jQuery.type( arg );
								if ( type === "function" ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && type !== "string" ) {
									// Inspect recursively
									add( arg );
								}
							});
						})( arguments );
						// Do we need to add the callbacks to the
						// current firing batch?
						if ( firing ) {
							firingLength = list.length;
						// With memory, if we're not firing then
						// we should call right away
						} else if ( memory ) {
							firingStart = start;
							fire( memory );
						}
					}
					return this;
				},
				// Remove a callback from the list
				remove: function() {
					if ( list ) {
						jQuery.each( arguments, function( _, arg ) {
							var index;
							while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
								list.splice( index, 1 );
								// Handle firing indexes
								if ( firing ) {
									if ( index <= firingLength ) {
										firingLength--;
									}
									if ( index <= firingIndex ) {
										firingIndex--;
									}
								}
							}
						});
					}
					return this;
				},
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
				},
				// Remove all callbacks from the list
				empty: function() {
					list = [];
					firingLength = 0;
					return this;
				},
				// Have the list do nothing anymore
				disable: function() {
					list = stack = memory = undefined;
					return this;
				},
				// Is it disabled?
				disabled: function() {
					return !list;
				},
				// Lock the list in its current state
				lock: function() {
					stack = undefined;
					if ( !memory ) {
						self.disable();
					}
					return this;
				},
				// Is it locked?
				locked: function() {
					return !stack;
				},
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( list && ( !fired || stack ) ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						if ( firing ) {
							stack.push( args );
						} else {
							fire( args );
						}
					}
					return this;
				},
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	jQuery.extend({
	
		Deferred: function( func ) {
			var tuples = [
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks("memory") ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred(function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[1] ](function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.done( newDefer.resolve )
											.fail( newDefer.reject )
											.progress( newDefer.notify );
									} else {
										newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
									}
								});
							});
							fns = null;
						}).promise();
					},
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Keep pipe for back-compat
			promise.pipe = promise.then;
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];
	
				// promise[ done | fail | progress ] = list.add
				promise[ tuple[1] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add(function() {
						// state = [ resolved | rejected ]
						state = stateString;
	
					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}
	
				// deferred[ resolve | reject | notify ]
				deferred[ tuple[0] ] = function() {
					deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[0] + "With" ] = list.fireWith;
			});
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,
	
				// the count of uncompleted subordinates
				remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,
	
				// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
	
				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},
	
				progressValues, progressContexts, resolveContexts;
	
			// add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject )
							.progress( updateFunc( i, progressContexts, progressValues ) );
					} else {
						--remaining;
					}
				}
			}
	
			// if we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}
	
			return deferred.promise();
		}
	});
	
	
	// The deferred used on DOM ready
	var readyList;
	
	jQuery.fn.ready = function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );
	
		return this;
	};
	
	jQuery.extend({
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
	
			// Trigger any bound ready events
			if ( jQuery.fn.trigger ) {
				jQuery( document ).trigger("ready").off("ready");
			}
		}
	});
	
	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );
		jQuery.ready();
	}
	
	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {
	
			readyList = jQuery.Deferred();
	
			// Catch cases where $(document).ready() is called after the browser event has already occurred.
			// we once tried to use readyState "interactive" here, but it caused issues like the one
			// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
			if ( document.readyState === "complete" ) {
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				setTimeout( jQuery.ready );
	
			} else {
	
				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed, false );
	
				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed, false );
			}
		}
		return readyList.promise( obj );
	};
	
	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}
	
		return chainable ?
			elems :
	
			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[0], key ) : emptyGet;
	};
	
	
	/**
	 * Determines whether an object can have data
	 */
	jQuery.acceptData = function( owner ) {
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	function Data() {
		// Support: Android < 4,
		// Old WebKit does not have Object.preventExtensions/freeze method,
		// return new empty object instead with no [[set]] accessor
		Object.defineProperty( this.cache = {}, 0, {
			get: function() {
				return {};
			}
		});
	
		this.expando = jQuery.expando + Math.random();
	}
	
	Data.uid = 1;
	Data.accepts = jQuery.acceptData;
	
	Data.prototype = {
		key: function( owner ) {
			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return the key for a frozen object.
			if ( !Data.accepts( owner ) ) {
				return 0;
			}
	
			var descriptor = {},
				// Check if the owner object already has a cache key
				unlock = owner[ this.expando ];
	
			// If not, create one
			if ( !unlock ) {
				unlock = Data.uid++;
	
				// Secure it in a non-enumerable, non-writable property
				try {
					descriptor[ this.expando ] = { value: unlock };
					Object.defineProperties( owner, descriptor );
	
				// Support: Android < 4
				// Fallback to a less secure definition
				} catch ( e ) {
					descriptor[ this.expando ] = unlock;
					jQuery.extend( owner, descriptor );
				}
			}
	
			// Ensure the cache object
			if ( !this.cache[ unlock ] ) {
				this.cache[ unlock ] = {};
			}
	
			return unlock;
		},
		set: function( owner, data, value ) {
			var prop,
				// There may be an unlock assigned to this node,
				// if there is no entry for this "owner", create one inline
				// and set the unlock as though an owner entry had always existed
				unlock = this.key( owner ),
				cache = this.cache[ unlock ];
	
			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
				// Fresh assignments by object are shallow copied
				if ( jQuery.isEmptyObject( cache ) ) {
					jQuery.extend( this.cache[ unlock ], data );
				// Otherwise, copy the properties one-by-one to the cache object
				} else {
					for ( prop in data ) {
						cache[ prop ] = data[ prop ];
					}
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			// Either a valid cache is found, or will be created.
			// New caches will be created and the unlock returned,
			// allowing direct access to the newly created
			// empty data object. A valid owner object must be provided.
			var cache = this.cache[ this.key( owner ) ];
	
			return key === undefined ?
				cache : cache[ key ];
		},
		access: function( owner, key, value ) {
			var stored;
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					((key && typeof key === "string") && value === undefined) ) {
	
				stored = this.get( owner, key );
	
				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase(key) );
			}
	
			// [*]When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				unlock = this.key( owner ),
				cache = this.cache[ unlock ];
	
			if ( key === undefined ) {
				this.cache[ unlock ] = {};
	
			} else {
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );
					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {
						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}
	
				i = name.length;
				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}
		},
		hasData: function( owner ) {
			return !jQuery.isEmptyObject(
				this.cache[ owner[ this.expando ] ] || {}
			);
		},
		discard: function( owner ) {
			if ( owner[ this.expando ] ) {
				delete this.cache[ owner[ this.expando ] ];
			}
		}
	};
	var data_priv = new Data();
	
	var data_user = new Data();
	
	
	
	/*
		Implementation Summary
	
		1. Enforce API surface and semantic compatibility with 1.9.x branch
		2. Improve the module's maintainability by reducing the storage
			paths to a single mechanism.
		3. Use the same single mechanism to support "private" and "user" data.
		4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
		5. Avoid exposing implementation details on user objects (eg. expando properties)
		6. Provide a clear path for implementation upgrade to WeakMap in 2014
	*/
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /([A-Z])/g;
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch( e ) {}
	
				// Make sure we set the data so it isn't changed later
				data_user.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend({
		hasData: function( elem ) {
			return data_user.hasData( elem ) || data_priv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return data_user.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			data_user.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to data_priv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return data_priv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			data_priv.remove( elem, name );
		}
	});
	
	jQuery.fn.extend({
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = data_user.get( elem );
	
					if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
							name = attrs[ i ].name;
	
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
						data_priv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each(function() {
					data_user.set( this, key );
				});
			}
	
			return access( this, function( value ) {
				var data,
					camelKey = jQuery.camelCase( key );
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
					// Attempt to get data from the cache
					// with the key as-is
					data = data_user.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to get data from the cache
					// with the key camelized
					data = data_user.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				this.each(function() {
					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = data_user.get( this, camelKey );
	
					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					data_user.set( this, camelKey, value );
	
					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf("-") !== -1 && data !== undefined ) {
						data_user.set( this, key, value );
					}
				});
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each(function() {
				data_user.remove( this, key );
			});
		}
	});
	
	
	jQuery.extend({
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = data_priv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = data_priv.access( elem, type, jQuery.makeArray(data) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// not intended for public consumption - generates a queueHooks object, or returns the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return data_priv.get( elem, key ) || data_priv.access( elem, key, {
				empty: jQuery.Callbacks("once memory").add(function() {
					data_priv.remove( elem, [ type + "queue", key ] );
				})
			});
		}
	});
	
	jQuery.fn.extend({
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[0], type );
			}
	
			return data === undefined ?
				this :
				this.each(function() {
					var queue = jQuery.queue( this, type, data );
	
					// ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[0] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				});
		},
		dequeue: function( type ) {
			return this.each(function() {
				jQuery.dequeue( this, type );
			});
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = data_priv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	});
	var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHidden = function( elem, el ) {
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
		};
	
	var rcheckableType = (/^(?:checkbox|radio)$/i);
	
	
	
	(function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) );
	
		// #11217 - WebKit loses check when the name is after the checked attribute
		div.innerHTML = "<input type='radio' checked='checked' name='t'/>";
	
		// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
		// old WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		// Support: IE9-IE11+
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	})();
	var strundefined = typeof undefined;
	
	
	
	support.focusinBubbles = "onfocusin" in window;
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|contextmenu)|click/,
		rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = data_priv.get( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !(events = elemData.events) ) {
				events = elemData.events = {};
			}
			if ( !(eventHandle = elemData.handle) ) {
				eventHandle = elemData.handle = function( e ) {
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[t] ) || [];
				type = origType = tmp[1];
				namespaces = ( tmp[2] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join(".")
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !(handlers = events[ type ]) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle, false );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = data_priv.hasData( elem ) && data_priv.get( elem );
	
			if ( !elemData || !(events = elemData.events) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[t] ) || [];
				type = origType = tmp[1];
				namespaces = ( tmp[2] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				delete elemData.handle;
				data_priv.remove( elem, "events" );
			}
		},
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf(".") >= 0 ) {
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.namespace_re = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === (elem.ownerDocument || document) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
					jQuery.acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		dispatch: function( event ) {
	
			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );
	
			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or
					// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
								.apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( (event.result = ret) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			// Avoid non-left-click bubbling in Firefox (#3861)
			if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.disabled !== true || event.type !== "click" ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) >= 0 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push({ elem: cur, handlers: matches });
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
			}
	
			return handlerQueue;
		},
	
		// Includes some event props shared by KeyEvent and MouseEvent
		props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
	
		fixHooks: {},
	
		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function( event, original ) {
	
				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}
	
				return event;
			}
		},
	
		mouseHooks: {
			props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;
	
				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;
	
					event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}
	
				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}
	
				return event;
			}
		},
	
		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}
	
			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];
	
			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
	
			event = new jQuery.Event( originalEvent );
	
			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}
	
			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}
	
			// Support: Safari 6.0+, Chrome < 28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}
	
			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},
	
		special: {
			load: {
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		},
	
		simulate: function( type, elem, event, bubble ) {
			// Piggyback on a donor event to simulate a different one.
			// Fake originalEvent to avoid donor's stopPropagation, but if the
			// simulated event prevents default then we do the same on the donor.
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true,
					originalEvent: {}
				}
			);
			if ( bubble ) {
				jQuery.event.trigger( e, null, elem );
			} else {
				jQuery.event.dispatch.call( elem, e );
			}
			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}
	};
	
	jQuery.removeEvent = function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	};
	
	jQuery.Event = function( src, props ) {
		// Allow instantiation without the 'new' keyword
		if ( !(this instanceof jQuery.Event) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					// Support: Android < 4.0
					src.defaultPrevented === undefined &&
					src.getPreventDefault && src.getPreventDefault() ?
				returnTrue :
				returnFalse;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e && e.preventDefault ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e && e.stopPropagation ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			this.isImmediatePropagationStopped = returnTrue;
			this.stopPropagation();
		}
	};
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// Support: Chrome 15+
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mousenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	});
	
	// Create "bubbling" focus and blur events
	// Support: Firefox, Chrome, Safari
	if ( !support.focusinBubbles ) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
					jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
				};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = data_priv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = data_priv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						data_priv.remove( doc, fix );
	
					} else {
						data_priv.access( doc, fix, attaches );
					}
				}
			};
		});
	}
	
	jQuery.fn.extend({
	
		on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
			var origFn, type;
	
			// Types can be a map of types/handlers
			if ( typeof types === "object" ) {
				// ( types-Object, selector, data )
				if ( typeof selector !== "string" ) {
					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for ( type in types ) {
					this.on( type, selector, data, types[ type ], one );
				}
				return this;
			}
	
			if ( data == null && fn == null ) {
				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if ( fn == null ) {
				if ( typeof selector === "string" ) {
					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {
					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if ( fn === false ) {
				fn = returnFalse;
			} else if ( !fn ) {
				return this;
			}
	
			if ( one === 1 ) {
				origFn = fn;
				fn = function( event ) {
					// Can use an empty set, since event contains the info
					jQuery().off( event );
					return origFn.apply( this, arguments );
				};
				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
			}
			return this.each( function() {
				jQuery.event.add( this, types, fn, data, selector );
			});
		},
		one: function( types, selector, data, fn ) {
			return this.on( types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each(function() {
				jQuery.event.remove( this, types, fn, selector );
			});
		},
	
		trigger: function( type, data ) {
			return this.each(function() {
				jQuery.event.trigger( type, data, this );
			});
		},
		triggerHandler: function( type, data ) {
			var elem = this[0];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	});
	
	
	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
		rtagName = /<([\w:]+)/,
		rhtml = /<|&#?\w+;/,
		rnoInnerhtml = /<(?:script|style|link)/i,
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptType = /^$|\/(?:java|ecma)script/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
	
		// We have to close these tags to support XHTML (#13200)
		wrapMap = {
	
			// Support: IE 9
			option: [ 1, "<select multiple='multiple'>", "</select>" ],
	
			thead: [ 1, "<table>", "</table>" ],
			col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
			tr: [ 2, "<table><tbody>", "</tbody></table>" ],
			td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
			_default: [ 0, "", "" ]
		};
	
	// Support: IE 9
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	// Support: 1.x compatibility
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?
	
			elem.getElementsByTagName("tbody")[0] ||
				elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
			elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
	
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute("type");
		}
	
		return elem;
	}
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			data_priv.set(
				elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( data_priv.hasData( src ) ) {
			pdataOld = data_priv.access( src );
			pdataCur = data_priv.set( dest, pdataOld );
			events = pdataOld.events;
	
			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( data_user.hasData( src ) ) {
			udataOld = data_user.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			data_user.set( dest, udataCur );
		}
	}
	
	function getAll( context, tag ) {
		var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
				context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
				[];
	
		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}
	
	// Support: IE >= 9
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	jQuery.extend({
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			// Support: IE >= 9
			// Fix Cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		buildFragment: function( elems, context, scripts, selection ) {
			var elem, tmp, tag, wrap, contains, j,
				fragment = context.createDocumentFragment(),
				nodes = [],
				i = 0,
				l = elems.length;
	
			for ( ; i < l; i++ ) {
				elem = elems[ i ];
	
				if ( elem || elem === 0 ) {
	
					// Add nodes directly
					if ( jQuery.type( elem ) === "object" ) {
						// Support: QtWebKit
						// jQuery.merge because push.apply(_, arraylike) throws
						jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
					// Convert non-html into a text node
					} else if ( !rhtml.test( elem ) ) {
						nodes.push( context.createTextNode( elem ) );
	
					// Convert html into DOM nodes
					} else {
						tmp = tmp || fragment.appendChild( context.createElement("div") );
	
						// Deserialize a standard representation
						tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
						wrap = wrapMap[ tag ] || wrapMap._default;
						tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];
	
						// Descend through wrappers to the right content
						j = wrap[ 0 ];
						while ( j-- ) {
							tmp = tmp.lastChild;
						}
	
						// Support: QtWebKit
						// jQuery.merge because push.apply(_, arraylike) throws
						jQuery.merge( nodes, tmp.childNodes );
	
						// Remember the top-level container
						tmp = fragment.firstChild;
	
						// Fixes #12346
						// Support: Webkit, IE
						tmp.textContent = "";
					}
				}
			}
	
			// Remove wrapper from fragment
			fragment.textContent = "";
	
			i = 0;
			while ( (elem = nodes[ i++ ]) ) {
	
				// #4087 - If origin and destination elements are the same, and this is
				// that element, do not do anything
				if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
					continue;
				}
	
				contains = jQuery.contains( elem.ownerDocument, elem );
	
				// Append to fragment
				tmp = getAll( fragment.appendChild( elem ), "script" );
	
				// Preserve script evaluation history
				if ( contains ) {
					setGlobalEval( tmp );
				}
	
				// Capture executables
				if ( scripts ) {
					j = 0;
					while ( (elem = tmp[ j++ ]) ) {
						if ( rscriptType.test( elem.type || "" ) ) {
							scripts.push( elem );
						}
					}
				}
			}
	
			return fragment;
		},
	
		cleanData: function( elems ) {
			var data, elem, events, type, key, j,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
				if ( jQuery.acceptData( elem ) ) {
					key = elem[ data_priv.expando ];
	
					if ( key && (data = data_priv.cache[ key ]) ) {
						events = Object.keys( data.events || {} );
						if ( events.length ) {
							for ( j = 0; (type = events[j]) !== undefined; j++ ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
						if ( data_priv.cache[ key ] ) {
							// Discard any remaining `private` data
							delete data_priv.cache[ key ];
						}
					}
				}
				// Discard any remaining `user` data
				delete data_user.cache[ elem[ data_user.expando ] ];
			}
		}
	});
	
	jQuery.fn.extend({
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each(function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					});
			}, null, value, arguments.length );
		},
	
		append: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			});
		},
	
		prepend: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			});
		},
	
		before: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			});
		},
	
		after: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			});
		},
	
		remove: function( selector, keepData /* Internal Use Only */ ) {
			var elem,
				elems = selector ? jQuery.filter( selector, this ) : this,
				i = 0;
	
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}
	
				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}
	
			return this;
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; (elem = this[i]) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map(function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			});
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = value.replace( rxhtmlTag, "<$1></$2>" );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var arg = arguments[ 0 ];
	
			// Make the changes, replacing each context element with the new content
			this.domManip( arguments, function( elem ) {
				arg = this.parentNode;
	
				jQuery.cleanData( getAll( this ) );
	
				if ( arg ) {
					arg.replaceChild( elem, this );
				}
			});
	
			// Force removal if there was no new content (e.g., from empty arguments)
			return arg && (arg.length || arg.nodeType) ? this : this.remove();
		},
	
		detach: function( selector ) {
			return this.remove( selector, true );
		},
	
		domManip: function( args, callback ) {
	
			// Flatten any nested arrays
			args = concat.apply( [], args );
	
			var fragment, first, scripts, hasScripts, node, doc,
				i = 0,
				l = this.length,
				set = this,
				iNoClone = l - 1,
				value = args[ 0 ],
				isFunction = jQuery.isFunction( value );
	
			// We can't cloneNode fragments that contain checked, in WebKit
			if ( isFunction ||
					( l > 1 && typeof value === "string" &&
						!support.checkClone && rchecked.test( value ) ) ) {
				return this.each(function( index ) {
					var self = set.eq( index );
					if ( isFunction ) {
						args[ 0 ] = value.call( this, index, self.html() );
					}
					self.domManip( args, callback );
				});
			}
	
			if ( l ) {
				fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
				first = fragment.firstChild;
	
				if ( fragment.childNodes.length === 1 ) {
					fragment = first;
				}
	
				if ( first ) {
					scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
					hasScripts = scripts.length;
	
					// Use the original fragment for the last item instead of the first because it can end up
					// being emptied incorrectly in certain situations (#8070).
					for ( ; i < l; i++ ) {
						node = fragment;
	
						if ( i !== iNoClone ) {
							node = jQuery.clone( node, true, true );
	
							// Keep references to cloned scripts for later restoration
							if ( hasScripts ) {
								// Support: QtWebKit
								// jQuery.merge because push.apply(_, arraylike) throws
								jQuery.merge( scripts, getAll( node, "script" ) );
							}
						}
	
						callback.call( this[ i ], node, i );
					}
	
					if ( hasScripts ) {
						doc = scripts[ scripts.length - 1 ].ownerDocument;
	
						// Reenable scripts
						jQuery.map( scripts, restoreScript );
	
						// Evaluate executable scripts on first document insertion
						for ( i = 0; i < hasScripts; i++ ) {
							node = scripts[ i ];
							if ( rscriptType.test( node.type || "" ) &&
								!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {
	
								if ( node.src ) {
									// Optional AJAX dependency, but won't run scripts if not present
									if ( jQuery._evalUrl ) {
										jQuery._evalUrl( node.src );
									}
								} else {
									jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
								}
							}
						}
					}
				}
			}
	
			return this;
		}
	});
	
	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	});
	
	
	var iframe,
		elemdisplay = {};
	
	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
	
			// getDefaultComputedStyle might be reliably used only on attached element
			display = window.getDefaultComputedStyle ?
	
				// Use of this method is a temporary fix (more like optmization) until something better comes along,
				// since it was removed from specification and supported only in FF
				window.getDefaultComputedStyle( elem[ 0 ] ).display : jQuery.css( elem[ 0 ], "display" );
	
		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();
	
		return display;
	}
	
	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];
	
		if ( !display ) {
			display = actualDisplay( nodeName, doc );
	
			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {
	
				// Use the already-created iframe if possible
				iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );
	
				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;
	
				// Support: IE
				doc.write();
				doc.close();
	
				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}
	
			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}
	
		return display;
	}
	var rmargin = (/^margin/);
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		};
	
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;
	
		computed = computed || getStyles( elem );
	
		// Support: IE9
		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];
		}
	
		if ( computed ) {
	
			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}
	
			// Support: iOS < 6
			// A tribute to the "awesome hack by Dean Edwards"
			// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
			// Support: IE
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
					// Hook not needed (or it's not possible to use it due to missing dependency),
					// remove it.
					// Since there are no other hooks for marginRight, remove the whole object.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
	
				return (this.get = hookFn).apply( this, arguments );
			}
		};
	}
	
	
	(function() {
		var pixelPositionVal, boxSizingReliableVal,
			// Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
			divReset = "padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;" +
				"-moz-box-sizing:content-box;box-sizing:content-box",
			docElem = document.documentElement,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;" +
			"margin-top:1px";
		container.appendChild( div );
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computePixelPositionAndBoxSizingReliable() {
			// Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
			div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
				"box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;" +
				"position:absolute;top:1%";
			docElem.appendChild( container );
	
			var divStyle = window.getComputedStyle( div, null );
			pixelPositionVal = divStyle.top !== "1%";
			boxSizingReliableVal = divStyle.width === "4px";
	
			docElem.removeChild( container );
		}
	
		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			jQuery.extend(support, {
				pixelPosition: function() {
					// This test is executed only once but we still do memoizing
					// since we can use the boxSizingReliable pre-computing.
					// No need to check if the test was already performed, though.
					computePixelPositionAndBoxSizingReliable();
					return pixelPositionVal;
				},
				boxSizingReliable: function() {
					if ( boxSizingReliableVal == null ) {
						computePixelPositionAndBoxSizingReliable();
					}
					return boxSizingReliableVal;
				},
				reliableMarginRight: function() {
					// Support: Android 2.3
					// Check if div with explicit width and no margin-right incorrectly
					// gets computed margin-right based on width of container. (#3333)
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// This support function is only executed once so no memoizing is needed.
					var ret,
						marginDiv = div.appendChild( document.createElement( "div" ) );
					marginDiv.style.cssText = div.style.cssText = divReset;
					marginDiv.style.marginRight = marginDiv.style.width = "0";
					div.style.width = "1px";
					docElem.appendChild( container );
	
					ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );
	
					docElem.removeChild( container );
	
					// Clean up the div for other support tests.
					div.innerHTML = "";
	
					return ret;
				}
			});
		}
	})();
	
	
	// A method for quickly swapping in/out CSS properties to get correct calculations.
	jQuery.swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	var
		// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
		// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
		rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),
	
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: 0,
			fontWeight: 400
		},
	
		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];
	
	// return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( style, name ) {
	
		// shortcut for names that are not vendor prefixed
		if ( name in style ) {
			return name;
		}
	
		// check for vendor prefixed names
		var capName = name[0].toUpperCase() + name.slice(1),
			origName = name,
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in style ) {
				return name;
			}
		}
	
		return origName;
	}
	
	function setPositiveNumber( elem, value, subtract ) {
		var matches = rnumsplit.exec( value );
		return matches ?
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
			// If we already have the right measurement, avoid augmentation
			4 :
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
	
			val = 0;
	
		for ( ; i < 4; i += 2 ) {
			// both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// at this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
				// at this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// at this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}
	
			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test(val) ) {
				return val;
			}
	
			// we need the check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );
	
			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}
	
		// use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;
	
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			values[ index ] = data_priv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}
	
				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
				}
			} else {
	
				if ( !values[ index ] ) {
					hidden = isHidden( elem );
	
					if ( display && display !== "none" || !hidden ) {
						data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css(elem, "display") );
					}
				}
			}
		}
	
		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}
	
		return elements;
	}
	
	jQuery.extend({
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"columnCount": true,
			"fillOpacity": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			// normalize float css property
			"float": "cssFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;
	
			name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );
	
			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// convert relative number strings (+= or -=) to relative numbers. #7345
				if ( type === "string" && (ret = rrelNum.exec( value )) ) {
					value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set. See: #7116
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add 'px' to the (except for certain CSS properties)
				if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
					value += "px";
				}
	
				// Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
				// but it would mean to define eight (for every problematic property) identical functions
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
					// Support: Chrome, Safari
					// Setting style to blank string required to delete "style: x !important;"
					style[ name ] = "";
					style[ name ] = value;
				}
	
			} else {
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );
	
			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );
	
			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			//convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Return, converting to number if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
			}
			return val;
		}
	});
	
	jQuery.each([ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
					// certain elements can have dimension info if we invisibly show them
					// however, it must have a current display style that would benefit from this
					return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
						jQuery.swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						}) :
						getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var styles = extra && getStyles( elem );
				return setPositiveNumber( elem, value, extra ?
					augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					) : 0
				);
			}
		};
	});
	
	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				return jQuery.swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// assumes a single number if not a string
					parts = typeof value === "string" ? value.split(" ") : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	});
	
	jQuery.fn.extend({
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each(function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			});
		}
	});
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || "swing";
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				if ( tween.elem[ tween.prop ] != null &&
					(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
					return tween.elem[ tween.prop ];
				}
	
				// passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails
				// so, simple values such as "10px" are parsed to Float.
				// complex values such as "rotate(1rad)" are returned as is.
				result = jQuery.css( tween.elem, tween.prop, "" );
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
				// use step hook for back compat - use cssHook if its there - use .style if its
				// available and use plain properties where available
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		}
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back Compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
		rrun = /queueHooks$/,
		animationPrefilters = [ defaultPrefilter ],
		tweeners = {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value ),
					target = tween.cur(),
					parts = rfxnum.exec( value ),
					unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
					// Starting value computation is required for potential unit mismatches
					start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
						rfxnum.exec( jQuery.css( tween.elem, prop ) ),
					scale = 1,
					maxIterations = 20;
	
				if ( start && start[ 3 ] !== unit ) {
					// Trust units reported by jQuery.css
					unit = unit || start[ 3 ];
	
					// Make sure we update the tween properties later on
					parts = parts || [];
	
					// Iteratively approximate from a nonzero starting point
					start = +target || 1;
	
					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";
	
						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );
	
					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}
	
				// Update tween properties
				if ( parts ) {
					start = tween.start = +start || +target || 0;
					tween.unit = unit;
					// If a +=/-= token was provided, we're doing a relative animation
					tween.end = parts[ 1 ] ?
						start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
						+parts[ 2 ];
				}
	
				return tween;
			} ]
		};
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		setTimeout(function() {
			fxNow = undefined;
		});
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// if we include width, step value is 1 to do all cssExpand values,
		// if we don't include width, step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( (tween = collection[ index ].call( animation, prop, value )) ) {
	
				// we're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = data_priv.get( elem, "fxshow" );
	
		// handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always(function() {
				// doing this makes sure that the complete handler will be called
				// before this completes
				anim.always(function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				});
			});
		}
	
		// height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );
			// Get default display if display is currently "none"
			if ( display === "none" ) {
				display = defaultDisplay( elem.nodeName );
			}
			if ( display === "inline" &&
					jQuery.css( elem, "float" ) === "none" ) {
	
				style.display = "inline-block";
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	
		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}
	
		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = data_priv.access( elem, "fxshow", {} );
			}
	
			// store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done(function() {
					jQuery( elem ).hide();
				});
			}
			anim.done(function() {
				var prop;
	
				data_priv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			});
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
	
				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// not quite $.extend, this wont overwrite keys already present.
				// also - reusing 'index' from above because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = animationPrefilters.length,
			deferred = jQuery.Deferred().always( function() {
				// don't match elem in the :animated selector
				delete tick.elem;
			}),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
					// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ]);
	
				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise({
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, { specialEasing: {} }, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
						// if we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// resolve when we played the last frame
					// otherwise, reject
					if ( gotoEnd ) {
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			}),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length ; index++ ) {
			result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			})
		);
	
		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.split(" ");
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				tweeners[ prop ] = tweeners[ prop ] || [];
				tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				animationPrefilters.unshift( callback );
			} else {
				animationPrefilters.push( callback );
			}
		}
	});
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	
		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend({
		fadeTo: function( speed, to, easing, callback ) {
	
			// show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()
	
				// animate to the value specified
				.end().animate({ opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || data_priv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each(function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = data_priv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// start the next in the queue if the last step wasn't forced
				// timers currently will call their complete callbacks, which will dequeue
				// but only if they were gotoEnd
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			});
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each(function() {
				var index,
					data = data_priv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// enable finishing flag on private data
				data.finish = true;
	
				// empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// turn off finishing flag
				delete data.finish;
			});
		}
	});
	
	jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	});
	
	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	});
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};
	
	jQuery.fx.interval = 13;
	
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};
	
	jQuery.fx.stop = function() {
		clearInterval( timerId );
		timerId = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	};
	
	
	(function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: iOS 5.1, Android 4.x, Android 2.3
		// Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
		support.checkOn = input.value !== "";
	
		// Must access the parent to make an option select properly
		// Support: IE9, IE10
		support.optSelected = opt.selected;
	
		// Make sure that the options inside disabled selects aren't marked as disabled
		// (WebKit marks them as disabled)
		select.disabled = true;
		support.optDisabled = !opt.disabled;
	
		// Check if an input maintains its value after becoming a radio
		// Support: IE9, IE10
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();
	
	
	var nodeHook, boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend({
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each(function() {
				jQuery.removeAttr( this, name );
			});
		}
	});
	
	jQuery.extend({
		attr: function( elem, name, value ) {
			var hooks, ret,
				nType = elem.nodeType;
	
			// don't get/set attributes on text, comment and attribute nodes
			if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === strundefined ) {
				return jQuery.prop( elem, name, value );
			}
	
			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
			}
	
			if ( value !== undefined ) {
	
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
	
				} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
					return ret;
	
				} else {
					elem.setAttribute( name, value + "" );
					return value;
				}
	
			} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;
	
			} else {
				ret = jQuery.find.attr( elem, name );
	
				// Non-existent attributes return null, we normalize to undefined
				return ret == null ?
					undefined :
					ret;
			}
		},
	
		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( (name = attrNames[i++]) ) {
					propName = jQuery.propFix[ name ] || name;
	
					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
						// Set corresponding property to false
						elem[ propName ] = false;
					}
	
					elem.removeAttribute( name );
				}
			}
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						// Setting the type on a radio button after the value resets the value in IE6-9
						// Reset value to default in case type is set after value during creation
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		}
	});
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	});
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i;
	
	jQuery.fn.extend({
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each(function() {
				delete this[ jQuery.propFix[ name ] || name ];
			});
		}
	});
	
	jQuery.extend({
		propFix: {
			"for": "htmlFor",
			"class": "className"
		},
	
		prop: function( elem, name, value ) {
			var ret, hooks, notxml,
				nType = elem.nodeType;
	
			// don't get/set properties on text, comment and attribute nodes
			if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			notxml = nType !== 1 || !jQuery.isXMLDoc( elem );
	
			if ( notxml ) {
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
					ret :
					( elem[ name ] = value );
	
			} else {
				return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
					ret :
					elem[ name ];
			}
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
					return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
						elem.tabIndex :
						-1;
				}
			}
		}
	});
	
	// Support: IE9+
	// Selectedness for an option in an optgroup can be inaccurate
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			}
		};
	}
	
	jQuery.each([
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	});
	
	
	
	
	var rclass = /[\t\r\n\f]/g;
	
	jQuery.fn.extend({
		addClass: function( value ) {
			var classes, elem, cur, clazz, j, finalValue,
				proceed = typeof value === "string" && value,
				i = 0,
				len = this.length;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each(function( j ) {
					jQuery( this ).addClass( value.call( this, j, this.className ) );
				});
			}
	
			if ( proceed ) {
				// The disjunction here is for better compressibility (see removeClass)
				classes = ( value || "" ).match( rnotwhite ) || [];
	
				for ( ; i < len; i++ ) {
					elem = this[ i ];
					cur = elem.nodeType === 1 && ( elem.className ?
						( " " + elem.className + " " ).replace( rclass, " " ) :
						" "
					);
	
					if ( cur ) {
						j = 0;
						while ( (clazz = classes[j++]) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( elem.className !== finalValue ) {
							elem.className = finalValue;
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, clazz, j, finalValue,
				proceed = arguments.length === 0 || typeof value === "string" && value,
				i = 0,
				len = this.length;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each(function( j ) {
					jQuery( this ).removeClass( value.call( this, j, this.className ) );
				});
			}
			if ( proceed ) {
				classes = ( value || "" ).match( rnotwhite ) || [];
	
				for ( ; i < len; i++ ) {
					elem = this[ i ];
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( elem.className ?
						( " " + elem.className + " " ).replace( rclass, " " ) :
						""
					);
	
					if ( cur ) {
						j = 0;
						while ( (clazz = classes[j++]) ) {
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// only assign if different to avoid unneeded rendering.
						finalValue = value ? jQuery.trim( cur ) : "";
						if ( elem.className !== finalValue ) {
							elem.className = finalValue;
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each(function( i ) {
					jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
				});
			}
	
			return this.each(function() {
				if ( type === "string" ) {
					// toggle individual class names
					var className,
						i = 0,
						self = jQuery( this ),
						classNames = value.match( rnotwhite ) || [];
	
					while ( (className = classNames[ i++ ]) ) {
						// check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( type === strundefined || type === "boolean" ) {
					if ( this.className ) {
						// store className if set
						data_priv.set( this, "__className__", this.className );
					}
	
					// If the element has a class name or if we're passed "false",
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
				}
			});
		},
	
		hasClass: function( selector ) {
			var className = " " + selector + " ",
				i = 0,
				l = this.length;
			for ( ; i < l; i++ ) {
				if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
					return true;
				}
			}
	
			return false;
		}
	});
	
	
	
	
	var rreturn = /\r/g;
	
	jQuery.fn.extend({
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[0];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
						return ret;
					}
	
					ret = elem.value;
	
					return typeof ret === "string" ?
						// handle most common string cases
						ret.replace(rreturn, "") :
						// handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each(function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					});
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			});
		}
	});
	
	jQuery.extend({
		valHooks: {
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// IE6-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
						if ( (option.selected = jQuery.inArray( jQuery(option).val(), values ) >= 0) ) {
							optionSet = true;
						}
					}
	
					// force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});
	
	// Radios and checkboxes getter/setter
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				// Support: Webkit
				// "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	});
	
	jQuery.fn.extend({
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		},
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
		}
	});
	
	
	var nonce = jQuery.now();
	
	var rquery = (/\?/);
	
	
	
	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE9
		try {
			tmp = new DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		// Document location
		ajaxLocParts,
		ajaxLocation,
	
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
		rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat("*");
	
	// #8138, IE may throw an exception when accessing
	// a field from window.location if document.domain has been set
	try {
		ajaxLocation = location.href;
	} catch( e ) {
		// Use the href attribute of an A element
		// since IE will modify it given document.location
		ajaxLocation = document.createElement( "a" );
		ajaxLocation.href = "";
		ajaxLocation = ajaxLocation.href;
	}
	
	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
				// For each dataType in the dataTypeExpression
				while ( (dataType = dataTypes[i++]) ) {
					// Prepend if requested
					if ( dataType[0] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						(structure[ dataType ] = structure[ dataType ] || []).unshift( func );
	
					// Otherwise append
					} else {
						(structure[ dataType ] = structure[ dataType ] || []).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			});
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s[ "throws" ] ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend({
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: ajaxLocation,
			type: "GET",
			isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /xml/,
				html: /html/,
				json: /json/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
				// URL without anti-cache param
				cacheURL,
				// Response headers
				responseHeadersString,
				responseHeaders,
				// timeout handle
				timeoutTimer,
				// Cross-domain detection vars
				parts,
				// To know if global events are to be dispatched
				fireGlobals,
				// Loop variable
				i,
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
				// Callbacks context
				callbackContext = s.context || s,
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks("once memory"),
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
				// The jqXHR state
				state = 0,
				// Default abort message
				strAbort = "canceled",
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( (match = rheaders.exec( responseHeadersString )) ) {
									responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
	
			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
				.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];
	
			// A cross-domain request is in order when we have a protocol:host:port mismatch
			if ( s.crossDomain == null ) {
				parts = rurl.exec( s.url.toLowerCase() );
				s.crossDomain = !!( parts &&
					( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
						( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
							( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
				);
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			fireGlobals = s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger("ajaxStart");
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?
	
						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :
	
						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
					s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = setTimeout(function() {
						jqXHR.abort("timeout");
					}, s.timeout );
				}
	
				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Called once
				if ( state === 2 ) {
					return;
				}
	
				// State is "done" now
				state = 2;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
					// We extract error from statusText
					// then normalize statusText and status for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	});
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
			// shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			return jQuery.ajax({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			});
		};
	});
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	});
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	};
	
	
	jQuery.fn.extend({
		wrapAll: function( html ) {
			var wrap;
	
			if ( jQuery.isFunction( html ) ) {
				return this.each(function( i ) {
					jQuery( this ).wrapAll( html.call(this, i) );
				});
			}
	
			if ( this[ 0 ] ) {
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map(function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				}).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each(function( i ) {
					jQuery( this ).wrapInner( html.call(this, i) );
				});
			}
	
			return this.each(function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			});
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each(function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
			});
		},
	
		unwrap: function() {
			return this.parent().each(function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			}).end();
		}
	});
	
	
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
	};
	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
	
	
	
	
	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( jQuery.isArray( obj ) ) {
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
				}
			});
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};
	
		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			});
	
		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};
	
	jQuery.fn.extend({
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map(function() {
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			})
			.filter(function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			})
			.map(function( i, elem ) {
				var val = jQuery( this ).val();
	
				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						}) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			}).get();
		}
	});
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new XMLHttpRequest();
		} catch( e ) {}
	};
	
	var xhrId = 0,
		xhrCallbacks = {},
		xhrSuccessStatus = {
			// file protocol always yields status code 0, assume 200
			0: 200,
			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	// Support: IE9
	// Open requests must be manually aborted on unload (#5280)
	if ( window.ActiveXObject ) {
		jQuery( window ).on( "unload", function() {
			for ( var key in xhrCallbacks ) {
				xhrCallbacks[ key ]();
			}
		});
	}
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport(function( options ) {
		var callback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;
	
					xhr.open( options.type, options.url, options.async, options.username, options.password );
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								delete xhrCallbacks[ id ];
								callback = xhr.onload = xhr.onerror = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
									complete(
										// file: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
										// Support: IE9
										// Accessing binary-data responseText throws an exception
										// (#11426)
										typeof xhr.responseText === "string" ? {
											text: xhr.responseText
										} : undefined,
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					xhr.onerror = callback("error");
	
					// Create the abort callback
					callback = xhrCallbacks[ id ] = callback("abort");
	
					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( options.hasContent && options.data || null );
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	});
	
	
	
	
	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /(?:java|ecma)script/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	});
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	});
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery("<script>").prop({
						async: true,
						charset: s.scriptCharset,
						src: s.url
					}).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	});
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	});
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always(function() {
				// Restore preexisting value
				window[ callbackName ] = overwritten;
	
				// Save back as free
				if ( s[ callbackName ] ) {
					// make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			});
	
			// Delegate to script
			return "script";
		}
	});
	
	
	
	
	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;
	
		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}
	
		parsed = jQuery.buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	// Keep a copy of the old load method
	var _load = jQuery.fn.load;
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}
	
		var selector, type, response,
			self = this,
			off = url.indexOf(" ");
	
		if ( off >= 0 ) {
			selector = url.slice( off );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax({
				url: url,
	
				// if "type" variable is undefined, then "GET" method will be used
				type: type,
				dataType: "html",
				data: params
			}).done(function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			}).complete( callback && function( jqXHR, status ) {
				self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
			});
		}
	
		return this;
	};
	
	
	
	
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
	
	
	
	
	var docElem = window.document.documentElement;
	
	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf("auto") > -1;
	
			// Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
				options = options.call( elem, i, curOffset );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend({
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each(function( i ) {
						jQuery.offset.setOffset( this, options, i );
					});
			}
	
			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;
	
			if ( !doc ) {
				return;
			}
	
			docElem = doc.documentElement;
	
			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}
	
			// If we don't have gBCR, just use 0,0 rather than error
			// BlackBerry 5, iOS 3 (original iPhone)
			if ( typeof elem.getBoundingClientRect !== strundefined ) {
				box = elem.getBoundingClientRect();
			}
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
				// We assume that getBoundingClientRect is available when computed position is fixed
				offset = elem.getBoundingClientRect();
	
			} else {
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		offsetParent: function() {
			return this.map(function() {
				var offsetParent = this.offsetParent || docElem;
	
				while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || docElem;
			});
		}
	});
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : window.pageXOffset,
						top ? val : window.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length, null );
		};
	});
	
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
					// if curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	});
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
			// margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		});
	});
	
	
	// The number of elements contained in the matched element set
	jQuery.fn.size = function() {
		return this.length;
	};
	
	jQuery.fn.andSelf = jQuery.fn.addBack;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	
	var
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in
	// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( typeof noGlobal === strundefined ) {
		window.jQuery = window.$ = jQuery;
	}
	
	
	
	
	return jQuery;
	
	}));


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * built in 2016-6-29:23 version 2.12 by 司徒正美
	 * 修正isSkip方法,阻止regexp, window, date被转换成子VM
	 * checkbox改用click事件来同步VM #1532
	 * ms-duplex-string在radio 的更新失效问题
	 * ms-for+expr在option元素不显示的问题（实质是节点对齐问题）
	 * 模板中的&copy;&times;没有被htmlDecode的问题
	 * 绑定在组件模板中最外层元素上的事件不生效
	 * ie7,8下 ms-duplex 因为onproppertychange环调用，导致辞爆栈的问题
	 */
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["avalon"] = factory();
		else
			root["avalon"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	
	
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		
		var avalon = __webpack_require__(1) //这个版本兼容IE6
	
		__webpack_require__(8)
		__webpack_require__(15)
		__webpack_require__(19)
		__webpack_require__(34)
		__webpack_require__(70)
		avalon.onComponentDispose = __webpack_require__(74)
		__webpack_require__(75)
	
		module.exports = avalon
	
	
	
	
	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {
	
		
		__webpack_require__(2)
		var avalon = __webpack_require__(3)
		var browser = __webpack_require__(4)
	
		avalon.shadowCopy(avalon, browser)
	
		__webpack_require__(5)
		__webpack_require__(6)
		__webpack_require__(7)
	
		module.exports = avalon
	
	/***/ },
	/* 2 */
	/***/ function(module, exports) {
	
		
		/**
		 * 此模块不依赖任何模块,用于修复语言的底层缺陷
		 */
	
		var ohasOwn = Object.prototype.hasOwnProperty
	
		if (!'司徒正美'.trim) {
		    var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g
		    String.prototype.trim = function () {
		        return this.replace(rtrim, '')
		    }
		}
		var hasDontEnumBug = !({
		    'toString': null
		}).propertyIsEnumerable('toString'),
		        hasProtoEnumBug = (function () {
		        }).propertyIsEnumerable('prototype'),
		        dontEnums = [
		            'toString',
		            'toLocaleString',
		            'valueOf',
		            'hasOwnProperty',
		            'isPrototypeOf',
		            'propertyIsEnumerable',
		            'constructor'
		        ],
		        dontEnumsLength = dontEnums.length;
		if (!Object.keys) {
		    Object.keys = function (object) { //ecma262v5 15.2.3.14
		        var theKeys = []
		        var skipProto = hasProtoEnumBug && typeof object === 'function'
		        if (typeof object === 'string' || (object && object.callee)) {
		            for (var i = 0; i < object.length; ++i) {
		                theKeys.push(String(i))
		            }
		        } else {
		            for (var name in object) {
		                if (!(skipProto && name === 'prototype') &&
		                        ohasOwn.call(object, name)) {
		                    theKeys.push(String(name))
		                }
		            }
		        }
	
		        if (hasDontEnumBug) {
		            var ctor = object.constructor,
		                    skipConstructor = ctor && ctor.prototype === object
		            for (var j = 0; j < dontEnumsLength; j++) {
		                var dontEnum = dontEnums[j]
		                if (!(skipConstructor && dontEnum === 'constructor') && ohasOwn.call(object, dontEnum)) {
		                    theKeys.push(dontEnum)
		                }
		            }
		        }
		        return theKeys
		    }
		}
		if (!Array.isArray) {
		    Array.isArray = function (a) {
		        return Object.prototype.toString.call(a) === '[object Array]'
		    }
		}
	
		if (!Array.isArray.bind) {
		    Function.prototype.bind = function (scope) {
		        if (arguments.length < 2 && scope === void 0)
		            return this
		        var fn = this,
		                argv = arguments
		        return function () {
		            var args = [],
		                    i
		            for (i = 1; i < argv.length; i++)
		                args.push(argv[i])
		            for (i = 0; i < arguments.length; i++)
		                args.push(arguments[i])
		            return fn.apply(scope, args)
		        }
		    }
		}
		//https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice
		/**
		* Shim for "fixing" IE's lack of support (IE < 9) for applying slice
		* on host objects like NamedNodeMap, NodeList, and HTMLCollection
		* (technically, since host objects have been implementation-dependent,
		* at least before ES6, IE hasn't needed to work this way).
		* Also works on strings, fixes IE < 9 to allow an explicit undefined
		* for the 2nd argument (as in Firefox), and prevents errors when
		* called on other DOM objects.
		*/
	
		var _slice = Array.prototype.slice
		try {
		    // Can't be used with DOM elements in IE < 9
		    _slice.call(document.documentElement)
		} catch (e) { // Fails in IE < 9
		    // This will work for genuine arrays, array-like objects,
		    // NamedNodeMap (attributes, entities, notations),
		    // NodeList (e.g., getElementsByTagName), HTMLCollection (e.g., childNodes),
		    // and will not fail on other DOM objects (as do DOM elements in IE < 9)
		    Array.prototype.slice = function (begin, end) {
		        // IE < 9 gets unhappy with an undefined end argument
		        end = (typeof end !== 'undefined') ? end : this.length
	
		        // For native Array objects, we use the native slice function
		        if (Array.isArray(this) ) {
		            return _slice.call(this, begin, end)
		        }
	
		        // For array like object we handle it ourselves.
		        var i, cloned = [],
		                size, len = this.length
	
		        // Handle negative value for "begin"
		        var start = begin || 0
		        start = (start >= 0) ? start : len + start
	
		        // Handle negative value for "end"
		        var upTo = (end) ? end : len
		        if (end < 0) {
		            upTo = len + end
		        }
	
		        // Actual expected size of the slice
		        size = upTo - start
	
		        if (size > 0) {
		            cloned = new Array(size)
		            if (this.charAt) {
		                for (i = 0; i < size; i++) {
		                    cloned[i] = this.charAt(start + i)
		                }
		            } else {
		                for (i = 0; i < size; i++) {
		                    cloned[i] = this[start + i]
		                }
		            }
		        }
	
		        return cloned
		    }
		}
	
		function iterator(vars, body, ret) {
		    var fun = 'for(var ' + vars + 'i=0,n = this.length; i < n; i++){' +
		            body.replace('_', '((i in this) && fn.call(scope,this[i],i,this))') +
		            '}' + ret
		    /* jshint ignore:start */
		    return Function('fn,scope', fun)
		    /* jshint ignore:end */
		}
	
		var ap = Array.prototype
		if (!/\[native code\]/.test(ap.map)) {
		    var shim = {
		        //定位操作，返回数组中第一个等于给定参数的元素的索引值。
		        indexOf: function (item, index) {
		            var n = this.length,
		                    i = ~~index
		            if (i < 0)
		                i += n
		            for (; i < n; i++)
		                if (this[i] === item)
		                    return i
		            return -1
		        },
		        //定位操作，同上，不过是从后遍历。
		        lastIndexOf: function (item, index) {
		            var n = this.length,
		                    i = index == null ? n - 1 : index
		            if (i < 0)
		                i = Math.max(0, n + i)
		            for (; i >= 0; i--)
		                if (this[i] === item)
		                    return i
		            return -1
		        },
		        //迭代操作，将数组的元素挨个儿传入一个函数中执行。Prototype.js的对应名字为each。
		        forEach: iterator('', '_', ''),
		        //迭代类 在数组中的每个项上运行一个函数，如果此函数的值为真，则此元素作为新数组的元素收集起来，并返回新数组
		        filter: iterator('r=[],j=0,', 'if(_)r[j++]=this[i]', 'return r'),
		        //收集操作，将数组的元素挨个儿传入一个函数中执行，然后把它们的返回值组成一个新数组返回。Prototype.js的对应名字为collect。
		        map: iterator('r=[],', 'r[i]=_', 'return r'),
		        //只要数组中有一个元素满足条件（放进给定函数返回true），那么它就返回true。Prototype.js的对应名字为any。
		        some: iterator('', 'if(_)return true', 'return false'),
		        //只有数组中的元素都满足条件（放进给定函数返回true），它才返回true。Prototype.js的对应名字为all。
		        every: iterator('', 'if(!_)return false', 'return true')
		    }
	
		    for (var i in shim) {
		        ap[i] = shim[i]
		    }
		}
		module.exports = {}
	
	/***/ },
	/* 3 */
	/***/ function(module, exports) {
	
		/* WEBPACK VAR INJECTION */(function(global) {//avalon的核心,这里都是一些不存在异议的*核心*方法与属性
		function avalon(el) {
		    return new avalon.init(el)
		}
	
		global.avalon = avalon
		if(typeof window !== 'undefined'){
		    window.avalon = avalon
		}
	
		avalon.init = function (el) {
		    this[0] = this.element = el
		}
	
		avalon.fn = avalon.prototype = avalon.init.prototype
	
	
		avalon.shadowCopy = function (destination, source) {
		    for (var property in source) {
		        destination[property] = source[property]
		    }
		    return destination
		}
	
		var rword = /[^, ]+/g
	
		var hasConsole = global.console
	
		avalon.shadowCopy(avalon, {
		    noop: function () {
		    },
		    //切割字符串为一个个小块，以空格或逗号分开它们，结合replace实现字符串的forEach
		    rword: rword,
		    inspect: ({}).toString,
		    ohasOwn: ({}).hasOwnProperty,
		    log: function () {
		        if (hasConsole && avalon.config.debug) {
		            // http://stackoverflow.com/questions/8785624/how-to-safely-wrap-console-log
		            Function.apply.call(console.log, console, arguments)
		        }
		    },
		    warn: function () {
		        if (hasConsole && avalon.config.debug) {
		            var method = console.warn || console.log
		            // http://qiang106.iteye.com/blog/1721425
		            Function.apply.call(method, console, arguments)
		        }
		    },
		    error: function (str, e) {
		        throw (e || Error)(str)
		    },
		    //将一个以空格或逗号隔开的字符串或数组,转换成一个键值都为1的对象
		    oneObject: function (array, val) {
		        if (typeof array === 'string') {
		            array = array.match(rword) || []
		        }
		        var result = {},
		                value = val !== void 0 ? val : 1
		        for (var i = 0, n = array.length; i < n; i++) {
		            result[array[i]] = value
		        }
		        return result
		    }
	
		})
	
		module.exports = avalon
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))
	
	/***/ },
	/* 4 */
	/***/ function(module, exports) {
	
		/* WEBPACK VAR INJECTION */(function(global) {var window = global
		var browser = {
		    window: window,
		    document: {//方便在nodejs环境不会报错
		        createElement: function () {
		            return {}
		        },
		        createElementNS: function(){
		            return {}
		        },
		        contains: Boolean
		    },
		    root: {
		        outerHTML: 'x'
		    },
		    msie: NaN,
		    modern: true,
		    avalonDiv: {},
		    avalonFragment: null
		}
	
		if(window.location && window.navigator && window.window){
		    var document = window.document
		    browser.document = document
		    browser.modern = window.dispatchEvent
		    browser.root = document.documentElement
		    browser.avalonDiv = document.createElement('div')
		    browser.avalonFragment = document.createDocumentFragment()
		    if (window.VBArray) {
		        browser.msie = document.documentMode || (window.XMLHttpRequest ? 7 : 6)
		    }
		}
	
	
		module.exports = browser
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))
	
	/***/ },
	/* 5 */
	/***/ function(module, exports) {
	
		//这里放置存在异议的方法
	
		var serialize = avalon.inspect
		var rwindow = /^\[object (?:Window|DOMWindow|global)\]$/
		var rnative = /\[native code\]/ //判定是否原生函数
		var rarraylike = /(Array|List|Collection|Map|Arguments)\]$/
		var ohasOwn = avalon.ohasOwn
		// avalon.quote
		//https://github.com/bestiejs/json3/blob/master/lib/json3.js
		var Escapes = {
		    92: "\\\\",
		    34: '\\"',
		    8: "\\b",
		    12: "\\f",
		    10: "\\n",
		    13: "\\r",
		    9: "\\t"
		}
	
		// Internal: Converts `value` into a zero-padded string such that its
		// length is at least equal to `width`. The `width` must be <= 6.
		var leadingZeroes = "000000"
		var toPaddedString = function (width, value) {
		    // The `|| 0` expression is necessary to work around a bug in
		    // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
		    return (leadingZeroes + (value || 0)).slice(-width)
		};
		var unicodePrefix = "\\u00"
		var escapeChar = function (character) {
		    var charCode = character.charCodeAt(0), escaped = Escapes[charCode]
		    if (escaped) {
		        return escaped
		    }
		    return unicodePrefix + toPaddedString(2, charCode.toString(16))
		};
		var reEscape = /[\x00-\x1f\x22\x5c]/g
		function quote(value) {
		    reEscape.lastIndex = 0
		    return '"' + ( reEscape.test(value)? String(value).replace(reEscape, escapeChar) : value ) + '"'
		}
	
		avalon.quote = typeof JSON !== 'undefined' ? JSON.stringify : quote
	
		// avalon.type
		var class2type = {}
		'Boolean Number String Function Array Date RegExp Object Error'.replace(avalon.rword, function (name) {
		    class2type['[object ' + name + ']'] = name.toLowerCase()
		})
	
		avalon.type = function (obj) { //取得目标的类型
		    if (obj == null) {
		        return String(obj)
		    }
		    // 早期的webkit内核浏览器实现了已废弃的ecma262v4标准，可以将正则字面量当作函数使用，因此typeof在判定正则时会返回function
		    return typeof obj === 'object' || typeof obj === 'function' ?
		            class2type[serialize.call(obj)] || 'object' :
		            typeof obj
		}
	
		var rfunction = /^\s*\bfunction\b/
	
		avalon.isFunction = typeof alert === 'object' ? function (fn) {
		    try {
		        return rfunction.test(fn + '')
		    } catch (e) {
		        return false
		    }
		} : function (fn) {
		    return serialize.call(fn) === '[object Function]'
		}
	
		avalon.isWindow = function (obj) {
		    if (!obj)
		        return false
		    // 利用IE678 window == document为true,document == window竟然为false的神奇特性
		    // 标准浏览器及IE9，IE10等使用 正则检测
		    return obj == obj.document && obj.document != obj //jshint ignore:line
		}
	
	
		function isWindow(obj) {
		    return rwindow.test(serialize.call(obj))
		}
	
		if (isWindow(avalon.window)) {
		    avalon.isWindow = isWindow
		}
	
		var enu, enumerateBUG
		for (enu in avalon({})) {
		    break
		}
		enumerateBUG = enu !== '0' //IE6下为true, 其他为false
	
		/*判定是否是一个朴素的javascript对象（Object），不是DOM对象，不是BOM对象，不是自定义类的实例*/
		avalon.isPlainObject = function (obj, key) {
		    if (!obj || avalon.type(obj) !== 'object' || obj.nodeType || avalon.isWindow(obj)) {
		        return false
		    }
		    try { //IE内置对象没有constructor
		        if (obj.constructor &&
		                !ohasOwn.call(obj, 'constructor') &&
		                !ohasOwn.call(obj.constructor.prototype || {}, 'isPrototypeOf')) {
		            return false
		        }
		    } catch (e) { //IE8 9会在这里抛错
		        return false
		    }
		    if (enumerateBUG) {
		        for (key in obj) {
		            return ohasOwn.call(obj, key)
		        }
		    }
		    for (key in obj) {
		    }
		    return key === void 0 || ohasOwn.call(obj, key)
		}
	
	
		if (rnative.test(Object.getPrototypeOf)) {
		    avalon.isPlainObject = function (obj) {
		        // 简单的 typeof obj === 'object'检测，会致使用isPlainObject(window)在opera下通不过
		        return serialize.call(obj) === '[object Object]' &&
		                Object.getPrototypeOf(obj) === Object.prototype
		    }
		}
	
		//与jQuery.extend方法，可用于浅拷贝，深拷贝
		avalon.mix = avalon.fn.mix = function () {
		    var options, name, src, copy, copyIsArray, clone,
		            target = arguments[0] || {},
		            i = 1,
		            length = arguments.length,
		            deep = false
	
		    // 如果第一个参数为布尔,判定是否深拷贝
		    if (typeof target === 'boolean') {
		        deep = target
		        target = arguments[1] || {}
		        i++
		    }
	
		    //确保接受方为一个复杂的数据类型
		    if (typeof target !== 'object' && !avalon.isFunction(target)) {
		        target = {}
		    }
	
		    //如果只有一个参数，那么新成员添加于mix所在的对象上
		    if (i === length) {
		        target = this
		        i--
		    }
	
		    for (; i < length; i++) {
		        //只处理非空参数
		        if ((options = arguments[i]) != null) {
		            for (name in options) {
		                try {
		                    src = target[name]
		                    copy = options[name] //当options为VBS对象时报错
		                } catch (e) {
		                    continue
		                }
	
		                // 防止环引用
		                if (target === copy) {
		                    continue
		                }
		                if (deep && copy && (avalon.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
	
		                    if (copyIsArray) {
		                        copyIsArray = false
		                        clone = src && Array.isArray(src) ? src : []
	
		                    } else {
		                        clone = src && avalon.isPlainObject(src) ? src : {}
		                    }
	
		                    target[name] = avalon.mix(deep, clone, copy)
		                } else if (copy !== void 0) {
		                    target[name] = copy
		                }
		            }
		        }
		    }
		    return target
		}
	
		/*判定是否类数组，如节点集合，纯数组，arguments与拥有非负整数的length属性的纯JS对象*/
		function isArrayLike(obj) {
		    if (!obj)
		        return false
		    var n = obj.length
		    if (n === (n >>> 0)) { //检测length属性是否为非负整数
		        var type = serialize.call(obj).slice(8, -1)
		        if (rarraylike.test(type))
		            return false
		        if (type === 'Array')
		            return true
		        try {
		            if ({}.propertyIsEnumerable.call(obj, 'length') === false) { //如果是原生对象
		                return rfunction.test(obj.item || obj.callee)
		            }
		            return true
		        } catch (e) { //IE的NodeList直接抛错
		            return !obj.window //IE6-8 window
		        }
		    }
		    return false
		}
	
	
		avalon.each = function (obj, fn) {
		    if (obj) { //排除null, undefined
		        var i = 0
		        if (isArrayLike(obj)) {
		            for (var n = obj.length; i < n; i++) {
		                if (fn(i, obj[i]) === false)
		                    break
		            }
		        } else {
		            for (i in obj) {
		                if (obj.hasOwnProperty(i) && fn(i, obj[i]) === false) {
		                    break
		                }
		            }
		        }
		    }
		}
	
		module.exports = {
		    avalon: avalon,
		    isArrayLike: isArrayLike
		}
	
	
	
	/***/ },
	/* 6 */
	/***/ function(module, exports) {
	
		var cssHooks = {}
		var rhyphen = /([a-z\d])([A-Z]+)/g
		var rcamelize = /[-_][^-_]/g
		var rhashcode = /\d\.\d{4}/
		var rescape = /[-.*+?^${}()|[\]\/\\]/g
	
		var _slice = [].slice
		function defaultParse(cur, pre, binding) {
		       cur[binding.name] = avalon.parseExpr(binding)
		}
		avalon.shadowCopy(avalon, {
		    caches: {}, //avalon2.0 新增
		    vmodels: {},
		    filters: {},
		    components: {},//放置组件的类
		    directives: {},
		    eventHooks: {},
		    eventListeners: {},
		    validators: {},
		    scopes: {},
		    cssHooks: cssHooks,
		    parsers: {
		        number: function (a) {
		            return a === '' ? '' : /\d\.$/.test(a) ? a : parseFloat(a) || 0
		        },
		        string: function (a) {
		            return a === null || a === void 0 ? '' : a + ''
		        },
		        boolean: function (a) {
		            if(a === '')
		                return a
		            return a === 'true'|| a == '1'
		        }
		    },
		    version: "2.12",
		    slice: function (nodes, start, end) {
		        return _slice.call(nodes, start, end)
		    },
		    css: function (node, name, value, fn) {
		        //读写删除元素节点的样式
		        if (node instanceof avalon) {
		            node = node[0]
		        }
		        if(node.nodeType !==1){
		            return
		        }
		        var prop = avalon.camelize(name)
		        name = avalon.cssName(prop) || prop
		        if (value === void 0 || typeof value === 'boolean') { //获取样式
		            fn = cssHooks[prop + ':get'] || cssHooks['@:get']
		            if (name === 'background') {
		                name = 'backgroundColor'
		            }
		            var val = fn(node, name)
		            return value === true ? parseFloat(val) || 0 : val
		        } else if (value === '') { //请除样式
		            node.style[name] = ''
		        } else { //设置样式
		            if (value == null || value !== value) {
		                return
		            }
		            if (isFinite(value) && !avalon.cssNumber[prop]) {
		                value += 'px'
		            }
		            fn = cssHooks[prop + ':set'] || cssHooks['@:set']
		            fn(node, name, value)
		        }
		    },
		    directive: function (name, definition) {
		        definition.parse = definition.parse || defaultParse
		        return this.directives[name] = definition
		    },
		    isObject: function (a) {//1.6新增
		        return a !== null && typeof a === 'object'
		    },
		    /* avalon.range(10)
		     => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
		     avalon.range(1, 11)
		     => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
		     avalon.range(0, 30, 5)
		     => [0, 5, 10, 15, 20, 25]
		     avalon.range(0, -10, -1)
		     => [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
		     avalon.range(0)
		     => []*/
		    range: function (start, end, step) { // 用于生成整数数组
		        step || (step = 1)
		        if (end == null) {
		            end = start || 0
		            start = 0
		        }
		        var index = -1,
		                length = Math.max(0, Math.ceil((end - start) / step)),
		                result = new Array(length)
		        while (++index < length) {
		            result[index] = start
		            start += step
		        }
		        return result
		    },
		    hyphen: function (target) {
		        //转换为连字符线风格
		        return target.replace(rhyphen, '$1-$2').toLowerCase()
		    },
		    camelize: function (target) {
		        //提前判断，提高getStyle等的效率
		        if (!target || target.indexOf('-') < 0 && target.indexOf('_') < 0) {
		            return target
		        }
		        //转换为驼峰风格
		        return target.replace(rcamelize, function (match) {
		            return match.charAt(1).toUpperCase()
		        })
		    },
		    //生成UUID http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
		    makeHashCode: function (prefix) {
		        prefix = prefix || 'avalon'
		        return String(Math.random() + Math.random()).replace(rhashcode, prefix)
		    },
		    escapeRegExp: function (target) {
		        //http://stevenlevithan.com/regex/xregexp/
		        //将字符串安全格式化为正则表达式的源码
		        return (target + '').replace(rescape, '\\$&')
		    },
		    Array: {
		        merge: function (target, other) {
		            //合并两个数组 avalon2新增
		            target.push.apply(target, other)
		        },
		        ensure: function (target, item) {
		            //只有当前数组不存在此元素时只添加它
		            if (target.indexOf(item) === -1) {
		                return target.push(item)
		            }
		        },
		        removeAt: function (target, index) {
		            //移除数组中指定位置的元素，返回布尔表示成功与否
		            return !!target.splice(index, 1).length
		        },
		        remove: function (target, item) {
		            //移除数组中第一个匹配传参的那个元素，返回布尔表示成功与否
		            var index = target.indexOf(item)
		            if (~index)
		                return avalon.Array.removeAt(target, index)
		            return false
		        }
		    }
		})
	
		if(typeof performance !== 'undefined' && performance.now){
		    avalon.makeHashCode = function (prefix) {
		        prefix = prefix || 'avalon'
		        return (prefix + performance.now()).replace('.', '')
		    }
		}
	
		var UUID = 1
		module.exports = {
		    //生成事件回调的UUID(用户通过ms-on指令)
		    avalon: avalon,
		    getLongID: function (fn) {
		        return fn.uuid || (fn.uuid = avalon.makeHashCode('e'))
		    },
		    //生成事件回调的UUID(用户通过avalon.bind)
		    getShortID: function (fn) {
		        return fn.uuid || (fn.uuid = '_' + (++UUID))
		    }
		}
	
	
	/***/ },
	/* 7 */
	/***/ function(module, exports) {
	
		
		function kernel(settings) {
		    for (var p in settings) {
		        if (!avalon.ohasOwn.call(settings, p))
		            continue
		        var val = settings[p]
		        if (typeof kernel.plugins[p] === 'function') {
		            kernel.plugins[p](val)
		        } else if (typeof kernel[p] === 'object') {
		            avalon.shadowCopy(kernel[p], val)
		        } else {
		            kernel[p] = val
		        }
		    }
		    return this
		}
	
		avalon.config = kernel
	
		var plugins = {
		    interpolate: function (array) {
		        var openTag = array[0]
		        var closeTag = array[1]
		        /*eslint-disable */
		        if (openTag === closeTag) {
		            throw new SyntaxError('openTag!==closeTag')
		        }
		        var test = openTag + 'test' + closeTag
		        var div = avalon.avalonDiv
		        div.innerHTML = test
		        if (div.innerHTML !== test && div.innerHTML.indexOf('&lt;') > -1) {
		            throw new SyntaxError('此定界符不合法')
		        }
		        div.innerHTML = ''
		        /*eslint-enable */
		        kernel.openTag = openTag
		        kernel.closeTag = closeTag
		        var o = avalon.escapeRegExp(openTag)
		        var c = avalon.escapeRegExp(closeTag)
		        kernel.rexpr = new RegExp(o + '([\\s\\S]*)' + c)
		        kernel.rexprg = new RegExp(o + '([\\s\\S]*)' + c, 'g')
		        kernel.rbind = new RegExp(o + '[\\s\\S]*' + c + '|\\bms-|\\bslot\\b')
		    }
		}
		kernel.plugins = plugins
		avalon.config({
		    interpolate: ['{{', '}}'],
		    debug: true
		})
	
	
	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {
	
		
		var number = __webpack_require__(9)
		var escape = __webpack_require__(10)
		var sanitize = __webpack_require__(11)
		var date = __webpack_require__(12)
		var arrayFilters = __webpack_require__(13)
		var eventFilters = __webpack_require__(14)
		var filters = avalon.filters
	
		function K(a) {
		    return a
		}
	
		avalon.__format__ = function (name) {
		    var fn = filters[name]
		    if (fn) {
		        return fn.get ? fn.get : fn
		    }
		    return K
		}
	
	
		avalon.mix(filters, {
		    uppercase: function (str) {
		        return String(str).toUpperCase()
		    },
		    lowercase: function (str) {
		        return String(str).toLowerCase()
		    },
		    truncate: function (str, length, truncation) {
		        //length，新字符串长度，truncation，新字符串的结尾的字段,返回新字符串
		        length = length || 30
		        truncation = typeof truncation === "string" ? truncation : "..."
		        return str.length > length ?
		                str.slice(0, length - truncation.length) + truncation :
		                String(str)
		    },
		    camelize: avalon.camelize,
		    date: date,
		    escape: escape,
		    sanitize: sanitize,
		    number: number,
		    currency: function (amount, symbol, fractionSize) {
		        return (symbol || "\uFFE5") +
		                number(amount,
		                        isFinite(fractionSize) ? fractionSize : 2)
		    }
		}, arrayFilters, eventFilters)
	
	
	
	
	
	
	
		module.exports = avalon
	
	/***/ },
	/* 9 */
	/***/ function(module, exports) {
	
		function number(number, decimals, point, thousands) {
		    //form http://phpjs.org/functions/number_format/
		    //number 必需，要格式化的数字
		    //decimals 可选，规定多少个小数位。
		    //point 可选，规定用作小数点的字符串（默认为 . ）。
		    //thousands 可选，规定用作千位分隔符的字符串（默认为 , ），如果设置了该参数，那么所有其他参数都是必需的。
		    number = (number + '')
		            .replace(/[^0-9+\-Ee.]/g, '')
		    var n = !isFinite(+number) ? 0 : +number,
		            prec = !isFinite(+decimals) ? 3 : Math.abs(decimals),
		            sep = thousands || ",",
		            dec = point || ".",
		            s = '',
		            toFixedFix = function (n, prec) {
		                var k = Math.pow(10, prec)
		                return '' + (Math.round(n * k) / k)
		                        .toFixed(prec)
		            }
		    // Fix for IE parseFloat(0.55).toFixed(0) = 0;
		    s = (prec ? toFixedFix(n, prec) : '' + Math.round(n))
		            .split('.')
		    if (s[0].length > 3) {
		        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep)
		    }
		    if ((s[1] || '')
		            .length < prec) {
		        s[1] = s[1] || ''
		        s[1] += new Array(prec - s[1].length + 1)
		                .join('0')
		    }
		    return s.join(dec)
		}
	
		module.exports = number
	
		//处理 货币 http://openexchangerates.github.io/accounting.js/
	
	/***/ },
	/* 10 */
	/***/ function(module, exports) {
	
		
		var rsurrogate = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g
		var rnoalphanumeric = /([^\#-~| |!])/g
	
		function escape(str) {
		    //将字符串经过 str 转义得到适合在页面中显示的内容, 例如替换 < 为 &lt 
		    return String(str).
		            replace(/&/g, '&amp;').
		            replace(rsurrogate, function (value) {
		                var hi = value.charCodeAt(0)
		                var low = value.charCodeAt(1)
		                return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';'
		            }).
		            replace(rnoalphanumeric, function (value) {
		                return '&#' + value.charCodeAt(0) + ';'
		            }).
		            replace(/</g, '&lt;').
		            replace(/>/g, '&gt;')
		}
	
		module.exports = escape
	
	/***/ },
	/* 11 */
	/***/ function(module, exports) {
	
		var rscripts = /<script[^>]*>([\S\s]*?)<\/script\s*>/gim
		var ron = /\s+(on[^=\s]+)(?:=("[^"]*"|'[^']*'|[^\s>]+))?/g
		var ropen = /<\w+\b(?:(["'])[^"]*?(\1)|[^>])*>/ig
		var rsanitize = {
		    a: /\b(href)\=("javascript[^"]*"|'javascript[^']*')/ig,
		    img: /\b(src)\=("javascript[^"]*"|'javascript[^']*')/ig,
		    form: /\b(action)\=("javascript[^"]*"|'javascript[^']*')/ig
		}
	
	
		//https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
		//    <a href="javasc&NewLine;ript&colon;alert('XSS')">chrome</a> 
		//    <a href="data:text/html;base64, PGltZyBzcmM9eCBvbmVycm9yPWFsZXJ0KDEpPg==">chrome</a>
		//    <a href="jav	ascript:alert('XSS');">IE67chrome</a>
		//    <a href="jav&#x09;ascript:alert('XSS');">IE67chrome</a>
		//    <a href="jav&#x0A;ascript:alert('XSS');">IE67chrome</a>
		module.exports = function sanitize(str) {
		    return str.replace(rscripts, "").replace(ropen, function (a, b) {
		        var match = a.toLowerCase().match(/<(\w+)\s/)
		        if (match) { //处理a标签的href属性，img标签的src属性，form标签的action属性
		            var reg = rsanitize[match[1]]
		            if (reg) {
		                a = a.replace(reg, function (s, name, value) {
		                    var quote = value.charAt(0)
		                    return name + "=" + quote + "javascript:void(0)" + quote// jshint ignore:line
		                })
		            }
		        }
		        return a.replace(ron, " ").replace(/\s+/g, " ") //移除onXXX事件
		    })
		}
	
	
	/***/ },
	/* 12 */
	/***/ function(module, exports) {
	
		/*
		 'yyyy': 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
		 'yy': 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
		 'y': 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
		 'MMMM': Month in year (January-December)
		 'MMM': Month in year (Jan-Dec)
		 'MM': Month in year, padded (01-12)
		 'M': Month in year (1-12)
		 'dd': Day in month, padded (01-31)
		 'd': Day in month (1-31)
		 'EEEE': Day in Week,(Sunday-Saturday)
		 'EEE': Day in Week, (Sun-Sat)
		 'HH': Hour in day, padded (00-23)
		 'H': Hour in day (0-23)
		 'hh': Hour in am/pm, padded (01-12)
		 'h': Hour in am/pm, (1-12)
		 'mm': Minute in hour, padded (00-59)
		 'm': Minute in hour (0-59)
		 'ss': Second in minute, padded (00-59)
		 's': Second in minute (0-59)
		 'a': am/pm marker
		 'Z': 4 digit (+sign) representation of the timezone offset (-1200-+1200)
		 format string can also be one of the following predefined localizable formats:
		 
		 'medium': equivalent to 'MMM d, y h:mm:ss a' for en_US locale (e.g. Sep 3, 2010 12:05:08 pm)
		 'short': equivalent to 'M/d/yy h:mm a' for en_US locale (e.g. 9/3/10 12:05 pm)
		 'fullDate': equivalent to 'EEEE, MMMM d,y' for en_US locale (e.g. Friday, September 3, 2010)
		 'longDate': equivalent to 'MMMM d, y' for en_US locale (e.g. September 3, 2010
		 'mediumDate': equivalent to 'MMM d, y' for en_US locale (e.g. Sep 3, 2010)
		 'shortDate': equivalent to 'M/d/yy' for en_US locale (e.g. 9/3/10)
		 'mediumTime': equivalent to 'h:mm:ss a' for en_US locale (e.g. 12:05:08 pm)
		 'shortTime': equivalent to 'h:mm a' for en_US locale (e.g. 12:05 pm)
		 */
	
		function toInt(str) {
		    return parseInt(str, 10) || 0
		}
	
		function padNumber(num, digits, trim) {
		    var neg = ''
		    if (num < 0) {
		        neg = '-'
		        num = -num
		    }
		    num = '' + num
		    while (num.length < digits)
		        num = '0' + num
		    if (trim)
		        num = num.substr(num.length - digits)
		    return neg + num
		}
	
		function dateGetter(name, size, offset, trim) {
		    return function (date) {
		        var value = date["get" + name]()
		        if (offset > 0 || value > -offset)
		            value += offset
		        if (value === 0 && offset === -12) {
		            value = 12
		        }
		        return padNumber(value, size, trim)
		    }
		}
	
		function dateStrGetter(name, shortForm) {
		    return function (date, formats) {
		        var value = date["get" + name]()
		        var get = (shortForm ? ("SHORT" + name) : name).toUpperCase()
		        return formats[get][value]
		    }
		}
	
		function timeZoneGetter(date) {
		    var zone = -1 * date.getTimezoneOffset()
		    var paddedZone = (zone >= 0) ? "+" : ""
		    paddedZone += padNumber(Math[zone > 0 ? "floor" : "ceil"](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2)
		    return paddedZone
		}
		//取得上午下午
	
		function ampmGetter(date, formats) {
		    return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1]
		}
		var DATE_FORMATS = {
		    yyyy: dateGetter("FullYear", 4),
		    yy: dateGetter("FullYear", 2, 0, true),
		    y: dateGetter("FullYear", 1),
		    MMMM: dateStrGetter("Month"),
		    MMM: dateStrGetter("Month", true),
		    MM: dateGetter("Month", 2, 1),
		    M: dateGetter("Month", 1, 1),
		    dd: dateGetter("Date", 2),
		    d: dateGetter("Date", 1),
		    HH: dateGetter("Hours", 2),
		    H: dateGetter("Hours", 1),
		    hh: dateGetter("Hours", 2, -12),
		    h: dateGetter("Hours", 1, -12),
		    mm: dateGetter("Minutes", 2),
		    m: dateGetter("Minutes", 1),
		    ss: dateGetter("Seconds", 2),
		    s: dateGetter("Seconds", 1),
		    sss: dateGetter("Milliseconds", 3),
		    EEEE: dateStrGetter("Day"),
		    EEE: dateStrGetter("Day", true),
		    a: ampmGetter,
		    Z: timeZoneGetter
		}
		var rdateFormat = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/
		var raspnetjson = /^\/Date\((\d+)\)\/$/
		function dateFilter(date, format) {
		    var locate = dateFilter.locate,
		            text = "",
		            parts = [],
		            fn, match
		    format = format || "mediumDate"
		    format = locate[format] || format
		    if (typeof date === "string") {
		        if (/^\d+$/.test(date)) {
		            date = toInt(date)
		        } else if (raspnetjson.test(date)) {
		            date = +RegExp.$1
		        } else {
		            var trimDate = date.trim()
		            var dateArray = [0, 0, 0, 0, 0, 0, 0]
		            var oDate = new Date(0)
		            //取得年月日
		            trimDate = trimDate.replace(/^(\d+)\D(\d+)\D(\d+)/, function (_, a, b, c) {
		                var array = c.length === 4 ? [c, a, b] : [a, b, c]
		                dateArray[0] = toInt(array[0])     //年
		                dateArray[1] = toInt(array[1]) - 1 //月
		                dateArray[2] = toInt(array[2])     //日
		                return ""
		            })
		            var dateSetter = oDate.setFullYear
		            var timeSetter = oDate.setHours
		            trimDate = trimDate.replace(/[T\s](\d+):(\d+):?(\d+)?\.?(\d)?/, function (_, a, b, c, d) {
		                dateArray[3] = toInt(a) //小时
		                dateArray[4] = toInt(b) //分钟
		                dateArray[5] = toInt(c) //秒
		                if (d) {                //毫秒
		                    dateArray[6] = Math.round(parseFloat("0." + d) * 1000)
		                }
		                return ""
		            })
		            var tzHour = 0
		            var tzMin = 0
		            trimDate = trimDate.replace(/Z|([+-])(\d\d):?(\d\d)/, function (z, symbol, c, d) {
		                dateSetter = oDate.setUTCFullYear
		                timeSetter = oDate.setUTCHours
		                if (symbol) {
		                    tzHour = toInt(symbol + c)
		                    tzMin = toInt(symbol + d)
		                }
		                return ''
		            })
	
		            dateArray[3] -= tzHour
		            dateArray[4] -= tzMin
		            dateSetter.apply(oDate, dateArray.slice(0, 3))
		            timeSetter.apply(oDate, dateArray.slice(3))
		            date = oDate
		        }
		    }
		    if (typeof date === 'number') {
		        date = new Date(date)
		    }
		    if (avalon.type(date) !== 'date') {
		        return
		    }
		    while (format) {
		        match = rdateFormat.exec(format)
		        if (match) {
		            parts = parts.concat(match.slice(1))
		            format = parts.pop()
		        } else {
		            parts.push(format)
		            format = null
		        }
		    }
		    parts.forEach(function (value) {
		        fn = DATE_FORMATS[value]
		        text += fn ? fn(date, locate) : value.replace(/(^'|'$)/g, "").replace(/''/g, "'")
		    })
		    return text
		}
	
	
		var locate = {
		    AMPMS: {
		        0: '上午',
		        1: '下午'
		    },
		    DAY: {
		        0: '星期日',
		        1: '星期一',
		        2: '星期二',
		        3: '星期三',
		        4: '星期四',
		        5: '星期五',
		        6: '星期六'
		    },
		    MONTH: {
		        0: '1月',
		        1: '2月',
		        2: '3月',
		        3: '4月',
		        4: '5月',
		        5: '6月',
		        6: '7月',
		        7: '8月',
		        8: '9月',
		        9: '10月',
		        10: '11月',
		        11: '12月'
		    },
		    SHORTDAY: {
		        '0': '周日',
		        '1': '周一',
		        '2': '周二',
		        '3': '周三',
		        '4': '周四',
		        '5': '周五',
		        '6': '周六'
		    },
		    fullDate: 'y年M月d日EEEE',
		    longDate: 'y年M月d日',
		    medium: 'yyyy-M-d H:mm:ss',
		    mediumDate: 'yyyy-M-d',
		    mediumTime: 'H:mm:ss',
		    'short': 'yy-M-d ah:mm',
		    shortDate: 'yy-M-d',
		    shortTime: 'ah:mm'
		}
		locate.SHORTMONTH = locate.MONTH
		dateFilter.locate = locate
	
		module.exports = dateFilter
	
	/***/ },
	/* 13 */
	/***/ function(module, exports) {
	
		
		function orderBy(array, criteria, reverse) {
		    var type = avalon.type(array)
		    if (type !== 'array' && type !== 'object')
		        throw 'orderBy只能处理对象或数组'
		    var order = (reverse && reverse < 0) ? -1 : 1
	
		    if (typeof criteria === 'string') {
		        var key = criteria
		        criteria = function (a) {
		            return a && a[key]
		        }
		    }
		    array = convertArray(array)
		    array.forEach(function (el) {
		        el.order = criteria(el.value, el.key)
		    })
		    array.sort(function (left, right) {
		        var a = left.order
		        var b = right.order
		        if (Number.isNaN(a) && Number.isNaN(b)) {
		            return 0
		        }
		        return a === b ? 0 : a > b ? order : -order
		    })
		    var isArray = type === 'array'
		    var target = isArray ? [] : {}
		    return recovery(target, array, function (el) {
		        if (isArray) {
		            target.push(el.value)
		        } else {
		            target[el.key] = el.value
		        }
		    })
		}
	
		function filterBy(array, search) {
		    var type = avalon.type(array)
		    if (type !== 'array' && type !== 'object')
		        throw 'filterBy只能处理对象或数组'
		    var args = avalon.slice(arguments, 2)
		    var stype = avalon.type(search)
		    if (stype === 'function') {
		        var criteria = search
		    } else if (stype === 'string' || stype === 'number' ) {
		        if (search === '') {
		            return array
		        } else {
		            var reg = new RegExp(avalon.escapeRegExp(search), 'i')
		            criteria = function(el){
		                return reg.test(el)
		            }
		        }
		    } else {
		        return array
		    }
	
		    array = convertArray(array).filter(function (el, i) {
		        return !!criteria.apply(el, [el.value,i].concat(args) )
		    })
		    var isArray = type === 'array'
		    var target = isArray ? [] : {}
		    return recovery(target, array, function (el) {
		        if (isArray) {
		            target.push(el.value)
		        } else {
		            target[el.key] = el.value
		        }
		    })
		}
	
		function selectBy(data, array, defaults) {
		    if (avalon.isObject(data) && !Array.isArray(data)) {
		        var target = []
		        return recovery(target, array, function (name) {
		            target.push(data.hasOwnProperty(name) ? data[name] : defaults ? defaults[name] : '')
		        })
		    } else {
		        return data
		    }
		}
	
		Number.isNaN = Number.isNaN || function (a) {
		    return a !== a
		}
	
		function limitBy(input, limit, begin) {
		    var type = avalon.type(input)
		    if (type !== 'array' && type !== 'object')
		        throw 'limitBy只能处理对象或数组'
		    //尝试将limit转换数值
		    if (Math.abs(Number(limit)) === Infinity) {
		        limit = Number(limit)
		    } else {
		        limit = parseInt(limit, 10)
		    }
		    //转换不了返回
		    if (Number.isNaN(limit)) {
		        return input
		    }
		    //将目标转换为数组
		    if (type === 'object') {
		        input = convertArray(input)
		    }
		    limit = Math.min(input.length, limit)
		    begin = (!begin || Number.isNaN(begin)) ? 0 : ~~begin
		    if (begin < 0) {
		        begin = Math.max(0, input.length + begin)
		    }
	
		    var data = []
		    for (var i = begin; i < limit; i++) {
		        data.push(input[i])
		    }
		    var isArray = type === 'array'
		    if (isArray) {
		        return data
		    }
		    var target = {}
		    return recovery(target, data, function (el) {
		        target[el.key] = el.value
		    })
		}
	
		function recovery(ret, array, callback) {
		    for (var i = 0, n = array.length; i < n; i++) {
		        callback(array[i])
		    }
		    return ret
		}
	
	
		function convertArray(array) {
		    var ret = [], i = 0
		    avalon.each(array, function (key, value) {
		        ret[i++] = {
		            value: value,
		            key: key
		        }
		    })
		    return ret
		}
	
		module.exports = {
		    limitBy: limitBy,
		    orderBy: orderBy,
		    selectBy: selectBy,
		    filterBy: filterBy
		}
	
	/***/ },
	/* 14 */
	/***/ function(module, exports) {
	
		
		var eventFilters = {
		    stop: function (e) {
		        e.stopPropagation()
		        return e
		    },
		    prevent: function (e) {
		        e.preventDefault()
		        return e
		    }
		}
		var keyCode = {
		    esc: 27,
		    tab: 9,
		    enter: 13,
		    space: 32,
		    del: 46,
		    up: 38,
		    left: 37,
		    right: 39,
		    down: 40
		}
	
		avalon.each(keyCode, function (name, keyCode) {
		    eventFilters[name] = function (e) {
		        if (e.which !== keyCode) {
		            e.$return = true
		        }
		        return e
		    }
		})
	
		module.exports = eventFilters
	
	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
	
		/**
		 * 虚拟DOM的4大构造器
		 */
		var VText = __webpack_require__(16)
		var VComment = __webpack_require__(17)
		var VElement = __webpack_require__(18)
	
		avalon.vdomAdaptor = function (obj, method) {
		    if (!obj) {//obj在ms-for循环里面可能是null
		        return (method === "toHTML" ? '' :
		            avalon.avalonFragment.cloneNode(false))
		    }
		    switch (obj.nodeType) {
		        case 3:
		            return VText.prototype[method].call(obj)
		        case 8:
		            return VComment.prototype[method].call(obj)
		        case 1:
		            return VElement.prototype[method].call(obj)
		        default:
		            if (Array.isArray(obj)) {
		                if (method === "toHTML") {
		                    return obj.map(function (a) {
		                        return avalon.vdomAdaptor(a, 'toHTML')
		                    }).join('')
		                } else {
		                    var f = avalon.avalonFragment.cloneNode(false)
		                    obj.forEach(function (a) {
		                        f.appendChild(avalon.vdomAdaptor(a, 'toDOM'))
		                    })
		                    return f
		                }
		            }
		    }
		}
	
		module.exports = {
		    VText: VText,
		    VComment: VComment,
		    VElement: VElement
		}
	
	
	/***/ },
	/* 16 */
	/***/ function(module, exports) {
	
		var rexpr = avalon.config.rexpr
	
		function VText(text) {
		    if (typeof text === 'string') {
		        this.type = '#text'
		        this.nodeValue = text
		        this.skipContent = !rexpr.test(text)
		        this.nodeType = 3
		    } else {
		        for (var i in text) {
		            this[i] = text[i]
		        }
		    }
		}
	
		VText.prototype = {
		    constructor: VText,
		    toDOM: function () {
		       var a =  VText.decoder = VText.decoder || document.createElement('p')
		       a.innerHTML = this.nodeValue
		       return a.removeChild(a.firstChild) 
		    },
		    toHTML: function () {
		        return this.nodeValue
		    }
		}
	
		module.exports = VText
	
	/***/ },
	/* 17 */
	/***/ function(module, exports) {
	
		
		function VComment(text) {
		    if (typeof text === 'string') {
		        this.type = '#comment'
		        this.nodeValue = text
		        this.skipContent = true
		        this.nodeType = 8
		    } else {
		        for (var i in text) {
		            this[i] = text[i]
		        }
		    }
		}
		VComment.prototype = {
		    constructor: VComment,
		    toDOM: function () {
		        return document.createComment(this.nodeValue)
		    },
		    toHTML: function () {
		        return '<!--' + this.nodeValue + '-->'
		    }
		}
	
		module.exports = VComment
	
	/***/ },
	/* 18 */
	/***/ function(module, exports) {
	
		
		function VElement(type, props, children) {
		    if (typeof type === 'object') {
		        for (var i in type) {
		            this[i] = type[i]
		        }
		    } else {
		        this.nodeType = 1
		        this.type = type
		        this.props = props
		        this.children = children
		        this.template = ''
		    }
		}
		function skipFalseAndFunction(a) {
		    return a !== false && (Object(a) !== a)
		}
		var specal = {
		    "class": function (dom, val) {
		        dom.className = val
		    },
		    style: function (dom, val) {
		        dom.style.cssText = val
		    },
		    'for': function (dom, val) {
		        dom.htmlFor = val
		    }
		}
	
		function createVML(type) {
		    if (document.styleSheets.length < 31) {
		        document.createStyleSheet().addRule(".rvml", "behavior:url(#default#VML)");
		    } else {
		        // no more room, add to the existing one
		        // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx
		        document.styleSheets[0].addRule(".rvml", "behavior:url(#default#VML)");
		    }
		    var arr = type.split(':')
		    if (arr.length === 1) {
		        arr.unshift('v')
		    }
		    var tag = arr[1]
		    var ns = arr[0]
		    if (!document.namespaces[ns]) {
		        document.namespaces.add(ns, "urn:schemas-microsoft-com:vml")
		    }
		    return  document.createElement('<' + ns + ':' + tag + ' class="rvml">');
		}
	
		function createSVG(type) {
		    return document.createElementNS('http://www.w3.org/2000/svg', type)
		}
		var svgTags = avalon.oneObject('circle,defs,ellipse,image,line,' +
		        'path,polygon,polyline,rect,symbol,text,use,g,svg')
		var VMLTags = avalon.oneObject('shape,line,polyline,rect,roundrect,oval,arc,' +
		        'curve,background,image,shapetype,group,fill,' +
		        'stroke,shadow, extrusion, textbox, imagedata, textpath')
	
		var rvml = /^\w+\:\w+/
	
		VElement.prototype = {
		    constructor: VElement,
		    toDOM: function () {
		        var dom, tagName = this.type
		        if (avalon.modern && svgTags[tagName]) {
		            dom = createSVG(tagName)
		        } else if (!avalon.modern && (VMLTags[tagName] || rvml.test(tagName))) {
		            dom = createVML(tagName)
		        } else {
		            dom = document.createElement(tagName)
		        }
		        
		        if (this.wid) {
		            var scope = avalon.scopes[this.wid]
		            if (scope && scope.dom) {
		                return scope.dom
		            }
		        }
		        for (var i in this.props) {
		            var val = this.props[i]
		            if (skipFalseAndFunction(val)) {
		                if (specal[i] && avalon.msie < 8) {
		                    specal[i](dom, val)
		                } else {
		                    dom.setAttribute(i, val + '')
		                }
		            }
		        }
		        
		        switch (this.type) {
		            case 'script':
		                dom.text = this.template
		                break
		            case 'style':
		                if ('styleSheet' in dom) {
		                    dom.setAttribute('type', 'text/css')
		                    dom.styleSheet.cssText = this.template
		                } else {
		                    dom.innerHTML = this.template
		                }
		                break
		            case 'template':
		                dom.innerHTML = this.template
		                break
		            case 'noscript':
		                dom.textContent = this.template
		                break
		            default:
		                if (!this.isVoidTag) {
		                    this.children.forEach(function (c) {
		                        c && dom.appendChild(avalon.vdomAdaptor(c, 'toDOM'))
		                    })
		                }
		                break
		        }
		        return dom
		    },
		    toHTML: function () {
		        var arr = []
		        for (var i in this.props) {
		            var val = this.props[i]
		            if (skipFalseAndFunction(val)) {
		                arr.push(i + '=' + avalon.quote(this.props[i] + ''))
		            }
		        }
		        arr = arr.length ? ' ' + arr.join(' ') : ''
		        var str = '<' + this.type + arr
		        if (this.isVoidTag) {
		            return str + '/>'
		        }
		        str += '>'
		        if (this.children.length) {
		            str += this.children.map(function (c) {
		                return c ? avalon.vdomAdaptor(c, 'toHTML') : ''
		            }).join('')
		        } else {
		            str += this.template
		        }
		        return str + '</' + this.type + '>'
		    }
		}
	
		module.exports = VElement
	
	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {
	
		/**
		 * ------------------------------------------------------------
		 *                          DOM Api
		 * shim,class,data,css,val,html,event,ready  
		 * ------------------------------------------------------------
		 */
		__webpack_require__(20)
		__webpack_require__(21)
		__webpack_require__(22)
		__webpack_require__(25)
		__webpack_require__(26)
		__webpack_require__(27)
		__webpack_require__(30)
		__webpack_require__(32)
	
		module.exports = avalon
	
	/***/ },
	/* 20 */
	/***/ function(module, exports) {
	
		function fixContains(root, el) {
		    try { //IE6-8,游离于DOM树外的文本节点，访问parentNode有时会抛错
		        while ((el = el.parentNode))
		            if (el === root)
		                return true
		        return false
		    } catch (e) {
		        return false
		    }
		}
	
		avalon.contains = fixContains
		//IE6-11的文档对象没有contains
		if (!avalon.document.contains) {
		    avalon.document.contains = function (b) {
		        return fixContains(document, b)
		    }
		}
	
		function outerHTML() {
		    return new XMLSerializer().serializeToString(this)
		}
	
		if (avalon.window.SVGElement) {
		    //safari5+是把contains方法放在Element.prototype上而不是Node.prototype
		    if (!document.createTextNode('x').contains) {
		        Node.prototype.contains = function (arg) {//IE6-8没有Node对象
		            return !!(this.compareDocumentPosition(arg) & 16)
		        }
		    }
	
		    var svgns = 'http://www.w3.org/2000/svg'
		    var svg = avalon.document.createElementNS(svgns, 'svg')
	
		    svg.innerHTML = '<circle fill="red" />'
		  //IE9-11,firefox,ios7,8的chrome不支持SVG元素的innerHTML,outerHTML属性
		    if (!/^\[object SVG\w*Element\]$/.test(svg.firstChild)) {
		        function createSVG(node, parent) {
		            /* jshint ignore:start */
		            if (node && node.childNodes) {
		                var nodes = node.childNodes
		                for (var i = 0, el; el = nodes[i++]; ) {
		                    if (el.nodeType === 1) {
		                        var svg = document.createElementNS(svgns, el.nodeName.toLowerCase())
		                        avalon.each(el.attributes, function (a, attr) {
		                            svg.setAttribute(attr.name, attr.value)
		                        })
		                        createSVG(el, svg)
		                        parent.appendChild(svg)
		                    } else {
		                        parent.appendChild(el.cloneNode(true))
		                    }
		                }
		            }
		            /* jshint ignore:end */
		        }
		       
		        Object.defineProperties(SVGElement.prototype, {
		            outerHTML: {
		                configurable: true,
		                get: outerHTML,
		                set: function (html) {
		                    var tagName = this.tagName.toLowerCase()
		                    var parent = this.parent
		                    var parsed = avalon.parseHTML(html)
		                    if (tagName === 'svg') {
		                        parent.insertBefore(parsed, this)
		                    } else {
		                        var empty = document.createDocumentFragment()
		                        createSVG(parsed, empty)
		                        parent.insertBefore(empty, this)
		                    }
		                    parent.removeChild(this)
		                }
		            },
		            innerHTML: {
		                configurable: true,
		                get: function () {
		                    var s = this.outerHTML
		                    var ropen = new RegExp('<' + this.nodeName + '\\b(?:(["\'])[^"]*?(\\1)|[^>])*>', 'i')
		                    var rclose = new RegExp('<\/' + this.nodeName + '>$', 'i')
		                    return s.replace(ropen, '').replace(rclose, '')
		                },
		                set: function (html) {
		                    if (avalon.clearHTML) {
		                        avalon.clearHTML(this)
		                        var frag = avalon.parseHTML(html)
		                        createSVG(frag, this)
		                    }
		                }
		            }
		        })
		    }
		}
		//firefox 到11时才有outerHTML
		if (!avalon.root.outerHTML && window.HTMLElement) { 
		    HTMLElement.prototype.__defineGetter__('outerHTML', outerHTML)
		}
	
	
	
	
	/***/ },
	/* 21 */
	/***/ function(module, exports) {
	
		var rnowhite = /\S+/g
		var fakeClassListMethods = {
		    _toString: function () {
		        var node = this.node
		        var cls = node.className
		        var str = typeof cls === 'string' ? cls : cls.baseVal
		        var match = str.match(rnowhite)
		        return match ? match.join(' ') : ''
		    },
		    _contains: function (cls) {
		        return (' ' + this + ' ').indexOf(' ' + cls + ' ') > -1
		    },
		    _add: function (cls) {
		        if (!this.contains(cls)) {
		            this._set(this + ' ' + cls)
		        }
		    },
		    _remove: function (cls) {
		        this._set((' ' + this + ' ').replace(' ' + cls + ' ', ' '))
		    },
		    __set: function (cls) {
		        cls = cls.trim()
		        var node = this.node
		        if (typeof node.className === 'object') {
		            //SVG元素的className是一个对象 SVGAnimatedString { baseVal='', animVal=''}，只能通过set/getAttribute操作
		            node.setAttribute('class', cls)
		        } else {
		            node.className = cls
		        }
		    } //toggle存在版本差异，因此不使用它
		}
	
		function fakeClassList(node) {
		    if (!('classList' in node)) {
		        node.classList = {
		            node: node
		        }
		        for (var k in fakeClassListMethods) {
		            node.classList[k.slice(1)] = fakeClassListMethods[k]
		        }
		    }
		    return node.classList
		}
	
	
		'add,remove'.replace(avalon.rword, function (method) {
		    avalon.fn[method + 'Class'] = function (cls) {
		        var el = this[0] || {}
		        //https://developer.mozilla.org/zh-CN/docs/Mozilla/Firefox/Releases/26
		        if (cls && typeof cls === 'string' && el.nodeType === 1) {
		            cls.replace(rnowhite, function (c) {
		                fakeClassList(el)[method](c)
		            })
		        }
		        return this
		    }
		})
	
		avalon.fn.mix({
		    hasClass: function (cls) {
		        var el = this[0] || {}
		        return el.nodeType === 1 && fakeClassList(el).contains(cls)
		    },
		    toggleClass: function (value, stateVal) {
		        var isBool = typeof stateVal === 'boolean'
		        var me = this
		        String(value).replace(rnowhite, function (c) {
		            var state = isBool ? stateVal : !me.hasClass(c)
		            me[state ? 'addClass' : 'removeClass'](c)
		        })
		        return this
		    }
		})
	
	
	
	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {
	
		
		var propMap = __webpack_require__(23)
		var isVML = __webpack_require__(24)
		var rsvg =/^\[object SVG\w*Element\]$/
		var ramp = /&amp;/g
	
		function attrUpdate(node, vnode) {
		    var attrs = vnode.changeAttr
		    if (!node || node.nodeType !== 1 ) {
		        return
		    }
		    if (attrs) {
		        for (var attrName in attrs) {
		            var val = attrs[attrName]
		            // 处理路径属性
		            if (attrName === 'href' || attrName === 'src') {
		                if (!node.hasAttribute) {
		                    val = String(val).replace(ramp, '&') //处理IE67自动转义的问题
		                }
		                node[attrName] = val
		                if (window.chrome && node.tagName === 'EMBED') {
		                    var parent = node.parentNode //#525  chrome1-37下embed标签动态设置src不能发生请求
		                    var comment = document.createComment('ms-src')
		                    parent.replaceChild(comment, node)
		                    parent.replaceChild(node, comment)
		                }
		                //处理HTML5 data-*属性
		            } else if (attrName.indexOf('data-') === 0) {
		                node.setAttribute(attrName, val)
	
		            } else {
		                var propName = propMap[attrName] || attrName
		                if (typeof node[propName] === 'boolean') {
		                    node[propName] = !!val
		                  
		                    //布尔属性必须使用el.xxx = true|false方式设值
		                    //如果为false, IE全系列下相当于setAttribute(xxx,''),
		                    //会影响到样式,需要进一步处理
		                }
	
		                if (val === false ) {//移除属性
		                    node.removeAttribute(propName)
		                    continue
		                }
		                //SVG只能使用setAttribute(xxx, yyy), VML只能使用node.xxx = yyy ,
		                //HTML的固有属性必须node.xxx = yyy
		             
		                var isInnate = rsvg.test(node) ? false :
		                        (!avalon.modern && isVML(node)) ? true :
		                        attrName in node.cloneNode(false)
		                if (isInnate) {
		                    node[propName] = val + ''
		                } else {
		                    node.setAttribute(attrName, val)
		                }
	
		            }
	
		        }
		        vnode.changeAttr = null
		    }
		}
	
		var rvalidchars = /^[\],:{}\s]*$/,
		    rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
		    rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
		    rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g
	
		avalon.parseJSON = avalon.window.JSON ? JSON.parse : function (data) {
		    if (typeof data === 'string') {
		        data = data.trim();
		        if (data) {
		            if (rvalidchars.test(data.replace(rvalidescape, '@')
		                    .replace(rvalidtokens, ']')
		                    .replace(rvalidbraces, ''))) {
		                return (new Function('return ' + data))() // jshint ignore:line
		            }
		        }
		        avalon.error('Invalid JSON: ' + data)
		    }
		    return data
		}
	
	
		avalon.fn.attr = function (name, value) {
		    if (arguments.length === 2) {
		        this[0].setAttribute(name, value)
		        return this
		    } else {
		        return this[0].getAttribute(name)
		    }
		}
	
		module.exports = attrUpdate
	
	/***/ },
	/* 23 */
	/***/ function(module, exports) {
	
		var propMap = {//不规则的属性名映射
		    'accept-charset': 'acceptCharset',
		    'char': 'ch',
		    charoff: 'chOff',
		    'class': 'className',
		    'for': 'htmlFor',
		    'http-equiv': 'httpEquiv'
		}
		/*
		contenteditable不是布尔属性
		http://www.zhangxinxu.com/wordpress/2016/01/contenteditable-plaintext-only/
		contenteditable=''
		contenteditable='events'
		contenteditable='caret'
		contenteditable='plaintext-only'
		contenteditable='true'
		contenteditable='false'
		 */
		var bools = ['autofocus,autoplay,async,allowTransparency,checked,controls',
		    'declare,disabled,defer,defaultChecked,defaultSelected,',
		    'isMap,loop,multiple,noHref,noResize,noShade',
		    'open,readOnly,selected'
		].join(',')
	
		bools.replace(/\w+/g, function (name) {
		    propMap[name.toLowerCase()] = name
		})
	
		var anomaly = ['accessKey,bgColor,cellPadding,cellSpacing,codeBase,codeType,colSpan',
		    'dateTime,defaultValue,contentEditable,frameBorder,longDesc,maxLength,'+
		    'marginWidth,marginHeight,rowSpan,tabIndex,useMap,vSpace,valueType,vAlign'
		].join(',')
	
		anomaly.replace(/\w+/g, function (name) {
		    propMap[name.toLowerCase()] = name
		})
	
		module.exports = propMap
	
	
	/***/ },
	/* 24 */
	/***/ function(module, exports) {
	
		function isVML(src) {
		    var nodeName = src.nodeName
		    return nodeName.toLowerCase() === nodeName && src.scopeName && src.outerText === ''
		}
	
		module.exports = isVML
	
	/***/ },
	/* 25 */
	/***/ function(module, exports) {
	
		var root = avalon.root
		var window = avalon.window
		var camelize = avalon.camelize
		var cssHooks = avalon.cssHooks
	
		var prefixes = ['', '-webkit-', '-o-', '-moz-', '-ms-']
		var cssMap = {
		    'float': window.Range ? 'cssFloat' : 'styleFloat'
		}
		avalon.cssNumber = avalon.oneObject('animationIterationCount,columnCount,order,flex,flexGrow,flexShrink,fillOpacity,fontWeight,lineHeight,opacity,orphans,widows,zIndex,zoom')
	
		avalon.cssName = function (name, host, camelCase) {
		    if (cssMap[name]) {
		        return cssMap[name]
		    }
		    host = host || root.style || {}
		    for (var i = 0, n = prefixes.length; i < n; i++) {
		        camelCase = camelize(prefixes[i] + name)
		        if (camelCase in host) {
		            return (cssMap[name] = camelCase)
		        }
		    }
		    return null
		}
	
	
		avalon.fn.css = function (name, value) {
		    if (avalon.isPlainObject(name)) {
		        for (var i in name) {
		            avalon.css(this, i, name[i])
		        }
		    } else {
		        var ret = avalon.css(this, name, value)
		    }
		    return ret !== void 0 ? ret : this
		}
	
		avalon.fn.position = function () {
		    var offsetParent, offset,
		            elem = this[0],
		            parentOffset = {
		                top: 0,
		                left: 0
		            }
		    if (!elem) {
		        return parentOffset
		    }
		    if (this.css('position') === 'fixed') {
		        offset = elem.getBoundingClientRect()
		    } else {
		        offsetParent = this.offsetParent() //得到真正的offsetParent
		        offset = this.offset() // 得到正确的offsetParent
		        if (offsetParent[0].tagName !== 'HTML') {
		            parentOffset = offsetParent.offset()
		        }
		        parentOffset.top += avalon.css(offsetParent[0], 'borderTopWidth', true)
		        parentOffset.left += avalon.css(offsetParent[0], 'borderLeftWidth', true)
	
		        // Subtract offsetParent scroll positions
		        parentOffset.top -= offsetParent.scrollTop()
		        parentOffset.left -= offsetParent.scrollLeft()
		    }
		    return {
		        top: offset.top - parentOffset.top - avalon.css(elem, 'marginTop', true),
		        left: offset.left - parentOffset.left - avalon.css(elem, 'marginLeft', true)
		    }
		}
		avalon.fn.offsetParent = function () {
		    var offsetParent = this[0].offsetParent
		    while (offsetParent && avalon.css(offsetParent, 'position') === 'static') {
		        offsetParent = offsetParent.offsetParent;
		    }
		    return avalon(offsetParent || root)
		}
	
		cssHooks['@:set'] = function (node, name, value) {
		    try {
		        //node.style.width = NaN;node.style.width = 'xxxxxxx';
		        //node.style.width = undefine 在旧式IE下会抛异常
		        node.style[name] = value
		    } catch (e) {
		    }
		}
	
		if (window.getComputedStyle) {
		    cssHooks['@:get'] = function (node, name) {
		        if (!node || !node.style) {
		            throw new Error('getComputedStyle要求传入一个节点 ' + node)
		        }
		        var ret, styles = getComputedStyle(node, null)
		        if (styles) {
		            ret = name === 'filter' ? styles.getPropertyValue(name) : styles[name]
		            if (ret === '') {
		                ret = node.style[name] //其他浏览器需要我们手动取内联样式
		            }
		        }
		        return ret
		    }
		    cssHooks['opacity:get'] = function (node) {
		        var ret = cssHooks['@:get'](node, 'opacity')
		        return ret === '' ? '1' : ret
		    }
		} else {
		    var rnumnonpx = /^-?(?:\d*\.)?\d+(?!px)[^\d\s]+$/i
		    var rposition = /^(top|right|bottom|left)$/
		    var ralpha = /alpha\([^)]*\)/i
		    var ie8 = !!window.XDomainRequest
		    var salpha = 'DXImageTransform.Microsoft.Alpha'
		    var border = {
		        thin: ie8 ? '1px' : '2px',
		        medium: ie8 ? '3px' : '4px',
		        thick: ie8 ? '5px' : '6px'
		    }
		    cssHooks['@:get'] = function (node, name) {
		        //取得精确值，不过它有可能是带em,pc,mm,pt,%等单位
		        var currentStyle = node.currentStyle
		        var ret = currentStyle[name]
		        if ((rnumnonpx.test(ret) && !rposition.test(ret))) {
		            //①，保存原有的style.left, runtimeStyle.left,
		            var style = node.style,
		                    left = style.left,
		                    rsLeft = node.runtimeStyle.left
		            //②由于③处的style.left = xxx会影响到currentStyle.left，
		            //因此把它currentStyle.left放到runtimeStyle.left，
		            //runtimeStyle.left拥有最高优先级，不会style.left影响
		            node.runtimeStyle.left = currentStyle.left
		            //③将精确值赋给到style.left，然后通过IE的另一个私有属性 style.pixelLeft
		            //得到单位为px的结果；fontSize的分支见http://bugs.jquery.com/ticket/760
		            style.left = name === 'fontSize' ? '1em' : (ret || 0)
		            ret = style.pixelLeft + 'px'
		            //④还原 style.left，runtimeStyle.left
		            style.left = left
		            node.runtimeStyle.left = rsLeft
		        }
		        if (ret === 'medium') {
		            name = name.replace('Width', 'Style')
		            //border width 默认值为medium，即使其为0'
		            if (currentStyle[name] === 'none') {
		                ret = '0px'
		            }
		        }
		        return ret === '' ? 'auto' : border[ret] || ret
		    }
		    cssHooks['opacity:set'] = function (node, name, value) {
		        var style = node.style
		        var opacity = isFinite(value) && value <= 1 ? 'alpha(opacity=' + value * 100 + ')' : ''
		        var filter = style.filter || '';
		        style.zoom = 1
		        //不能使用以下方式设置透明度
		        //node.filters.alpha.opacity = value * 100
		        style.filter = (ralpha.test(filter) ?
		                filter.replace(ralpha, opacity) :
		                filter + ' ' + opacity).trim()
		        if (!style.filter) {
		            style.removeAttribute('filter')
		        }
		    }
		    cssHooks['opacity:get'] = function (node) {
		        //这是最快的获取IE透明值的方式，不需要动用正则了！
		        var alpha = node.filters.alpha || node.filters[salpha],
		                op = alpha && alpha.enabled ? alpha.opacity : 100
		        return (op / 100) + '' //确保返回的是字符串
		    }
		}
	
		'top,left'.replace(avalon.rword, function (name) {
		    cssHooks[name + ':get'] = function (node) {
		        var computed = cssHooks['@:get'](node, name)
		        return /px$/.test(computed) ? computed :
		                avalon(node).position()[name] + 'px'
		    }
		})
	
		var cssShow = {
		    position: 'absolute',
		    visibility: 'hidden',
		    display: 'block'
		}
	
		var rdisplayswap = /^(none|table(?!-c[ea]).+)/
	
		function showHidden(node, array) {
		    //http://www.cnblogs.com/rubylouvre/archive/2012/10/27/2742529.html
		    if (node.offsetWidth <= 0) { //opera.offsetWidth可能小于0
		        if (rdisplayswap.test(cssHooks['@:get'](node, 'display'))) {
		            var obj = {
		                node: node
		            }
		            for (var name in cssShow) {
		                obj[name] = node.style[name]
		                node.style[name] = cssShow[name]
		            }
		            array.push(obj)
		        }
		        var parent = node.parentNode
		        if (parent && parent.nodeType === 1) {
		            showHidden(parent, array)
		        }
		    }
		}
		avalon.each({
		    Width: 'width',
		    Height: 'height'
		}, function (name, method) {
		    var clientProp = 'client' + name,
		            scrollProp = 'scroll' + name,
		            offsetProp = 'offset' + name
		    cssHooks[method + ':get'] = function (node, which, override) {
		        var boxSizing = -4
		        if (typeof override === 'number') {
		            boxSizing = override
		        }
		        which = name === 'Width' ? ['Left', 'Right'] : ['Top', 'Bottom']
		        var ret = node[offsetProp] // border-box 0
		        if (boxSizing === 2) { // margin-box 2
		            return ret + avalon.css(node, 'margin' + which[0], true) + avalon.css(node, 'margin' + which[1], true)
		        }
		        if (boxSizing < 0) { // padding-box  -2
		            ret = ret - avalon.css(node, 'border' + which[0] + 'Width', true) - avalon.css(node, 'border' + which[1] + 'Width', true)
		        }
		        if (boxSizing === -4) { // content-box -4
		            ret = ret - avalon.css(node, 'padding' + which[0], true) - avalon.css(node, 'padding' + which[1], true)
		        }
		        return ret
		    }
		    cssHooks[method + '&get'] = function (node) {
		        var hidden = [];
		        showHidden(node, hidden);
		        var val = cssHooks[method + ':get'](node)
		        for (var i = 0, obj; obj = hidden[i++]; ) {
		            node = obj.node
		            for (var n in obj) {
		                if (typeof obj[n] === 'string') {
		                    node.style[n] = obj[n]
		                }
		            }
		        }
		        return val
		    }
		    avalon.fn[method] = function (value) { //会忽视其display
		        var node = this[0]
		        if (arguments.length === 0) {
		            if (node.setTimeout) { //取得窗口尺寸
		                return node['inner' + name] ||
		                        node.document.documentElement[clientProp] ||
		                        node.document.body[clientProp] //IE6下前两个分别为undefined,0
		            }
		            if (node.nodeType === 9) { //取得页面尺寸
		                var doc = node.documentElement
		                //FF chrome    html.scrollHeight< body.scrollHeight
		                //IE 标准模式 : html.scrollHeight> body.scrollHeight
		                //IE 怪异模式 : html.scrollHeight 最大等于可视窗口多一点？
		                return Math.max(node.body[scrollProp], doc[scrollProp], node.body[offsetProp], doc[offsetProp], doc[clientProp])
		            }
		            return cssHooks[method + '&get'](node)
		        } else {
		            return this.css(method, value)
		        }
		    }
		    avalon.fn['inner' + name] = function () {
		        return cssHooks[method + ':get'](this[0], void 0, -2)
		    }
		    avalon.fn['outer' + name] = function (includeMargin) {
		        return cssHooks[method + ':get'](this[0], void 0, includeMargin === true ? 2 : 0)
		    }
		})
	
		avalon.fn.offset = function () { //取得距离页面左右角的坐标
		    var node = this[0],
		            box = {
		                left: 0,
		                top: 0
		            }
		    if (!node || !node.tagName || !node.ownerDocument) {
		        return box
		    }
		    var doc = node.ownerDocument,
		            body = doc.body,
		            root = doc.documentElement,
		            win = doc.defaultView || doc.parentWindow
		    if (!avalon.contains(root, node)) {
		        return box
		    }
		    //http://hkom.blog1.fc2.com/?mode=m&no=750 body的偏移量是不包含margin的
		    //我们可以通过getBoundingClientRect来获得元素相对于client的rect.
		    //http://msdn.microsoft.com/en-us/library/ms536433.aspx
		    if (node.getBoundingClientRect) {
		        box = node.getBoundingClientRect() // BlackBerry 5, iOS 3 (original iPhone)
		    }
		    //chrome/IE6: body.scrollTop, firefox/other: root.scrollTop
		    var clientTop = root.clientTop || body.clientTop,
		            clientLeft = root.clientLeft || body.clientLeft,
		            scrollTop = Math.max(win.pageYOffset || 0, root.scrollTop, body.scrollTop),
		            scrollLeft = Math.max(win.pageXOffset || 0, root.scrollLeft, body.scrollLeft)
		    // 把滚动距离加到left,top中去。
		    // IE一些版本中会自动为HTML元素加上2px的border，我们需要去掉它
		    // http://msdn.microsoft.com/en-us/library/ms533564(VS.85).aspx
		    return {
		        top: box.top + scrollTop - clientTop,
		        left: box.left + scrollLeft - clientLeft
		    }
		}
	
		//生成avalon.fn.scrollLeft, avalon.fn.scrollTop方法
		avalon.each({
		    scrollLeft: 'pageXOffset',
		    scrollTop: 'pageYOffset'
		}, function (method, prop) {
		    avalon.fn[method] = function (val) {
		        var node = this[0] || {},
		                win = getWindow(node),
		                top = method === 'scrollTop'
		        if (!arguments.length) {
		            return win ? (prop in win) ? win[prop] : root[method] : node[method]
		        } else {
		            if (win) {
		                win.scrollTo(!top ? val : avalon(win).scrollLeft(), top ? val : avalon(win).scrollTop())
		            } else {
		                node[method] = val
		            }
		        }
		    }
		})
	
		function getWindow(node) {
		    return node.window || node.defaultView || node.parentWindow || false
		}
	
	/***/ },
	/* 26 */
	/***/ function(module, exports) {
	
		function getValType(elem) {
		    var ret = elem.tagName.toLowerCase()
		    return ret === 'input' && /checkbox|radio/.test(elem.type) ? 'checked' : ret
		}
		var roption = /^<option(?:\s+\w+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s>]+))?)*\s+value[\s=]/i
		var valHooks = {
		    'option:get': avalon.msie ? function (node) {
		        //在IE11及W3C，如果没有指定value，那么node.value默认为node.text（存在trim作），但IE9-10则是取innerHTML(没trim操作)
		        //specified并不可靠，因此通过分析outerHTML判定用户有没有显示定义value
		        return roption.test(node.outerHTML) ? node.value : node.text.trim()
		    } : function (node) {
		        return node.value
		    },
		    'select:get': function (node, value) {
		        var option, options = node.options,
		                index = node.selectedIndex,
		                getter = valHooks['option:get'],
		                one = node.type === 'select-one' || index < 0,
		                values = one ? null : [],
		                max = one ? index + 1 : options.length,
		                i = index < 0 ? max : one ? index : 0
		        for (; i < max; i++) {
		            option = options[i]
		            //IE6-9在reset后不会改变selected，需要改用i === index判定
		            //我们过滤所有disabled的option元素，但在safari5下，
		            //如果设置optgroup为disable，那么其所有孩子都disable
		            //因此当一个元素为disable，需要检测其是否显式设置了disable及其父节点的disable情况
		            if ((option.selected || i === index) && !option.disabled &&
		                    (!option.parentNode.disabled || option.parentNode.tagName !== 'OPTGROUP')
		                    ) {
		                value = getter(option)
		                if (one) {
		                    return value
		                }
		                //收集所有selected值组成数组返回
		                values.push(value)
		            }
		        }
		        return values
		    },
		    'select:set': function (node, values, optionSet) {
		        values = [].concat(values) //强制转换为数组
		        var getter = valHooks['option:get']
		        for (var i = 0, el; el = node.options[i++]; ) {
		            if ((el.selected = values.indexOf(getter(el)) > -1)) {
		                optionSet = true
		            }
		        }
		        if (!optionSet) {
		            node.selectedIndex = -1
		        }
		    }
		}
	
		avalon.fn.val = function (value) {
		    var node = this[0]
		    if (node && node.nodeType === 1) {
		        var get = arguments.length === 0
		        var access = get ? ':get' : ':set'
		        var fn = valHooks[getValType(node) + access]
		        if (fn) {
		            var val = fn(node, value)
		        } else if (get) {
		            return (node.value || '').replace(/\r/g, '')
		        } else {
		            node.value = value
		        }
		    }
		    return get ? val : this
		}
	
	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {
	
		var Cache = __webpack_require__(28)
	
		var fixCloneNode = __webpack_require__(29)
	
		var rhtml = /<|&#?\w+;/
		var htmlCache = new Cache(128)
		var rxhtml = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig
	
		avalon.parseHTML = function (html) {
		    var fragment = avalon.avalonFragment.cloneNode(false)
		    //处理非字符串
		    if (typeof html !== 'string') {
		        return fragment
		    }
		    //处理非HTML字符串
		    if (!rhtml.test(html)) {
		        return document.createTextNode(html)
		    }
	
		    html = html.replace(rxhtml, '<$1></$2>').trim()
		    var hasCache = htmlCache.get(html)
		    if (hasCache) {
		        return fixCloneNode(hasCache)
		    }
		    var vnodes = avalon.lexer(html, false, 1000)
		    for(var i = 0, el; el = vnodes[i++];){
		        fragment.appendChild(avalon.vdomAdaptor(el,'toDOM'))
		    }
		    if (html.length < 1024) {
		        htmlCache.put(html, fixCloneNode(fragment))
		    }
		    return fragment
		}
	
		avalon.innerHTML = function (node, html) {
		    if (!avalon.modern && (!rcreate.test(html) && !rnest.test(html))) {
		        try {
		            node.innerHTML = html
		            return
		        } catch (e) {
		        }
		    }
		    var parsed = this.parseHTML(html)
		    this.clearHTML(node).appendChild(parsed)
		}
	
		avalon.clearHTML = function (node) {
		    node.textContent = ''
		    while (node.lastChild) {
		        node.removeChild(node.lastChild)
		    }
		    return node
		}
	
	
	
	/***/ },
	/* 28 */
	/***/ function(module, exports) {
	
		// https://github.com/rsms/js-lru
		function LRU(maxLength) {
		    this.size = 0
		    this.limit = maxLength
		    this.head = this.tail = void 0
		    this._keymap = {}
		}
	
		var p = LRU.prototype
	
		p.put = function (key, value) {
		    var entry = {
		        key: key,
		        value: value
		    }
		    this._keymap[key] = entry
		    if (this.tail) {
		        this.tail.newer = entry
		        entry.older = this.tail
		    } else {
		        this.head = entry
		    }
		    this.tail = entry
		    if (this.size === this.limit) {
		        this.shift()
		    } else {
		        this.size++
		    }
		    return value
		}
	
		p.shift = function () {
		    var entry = this.head
		    if (entry) {
		        this.head = this.head.newer
		        this.head.older =
		                entry.newer =
		                entry.older =
		                this._keymap[entry.key] = void 0
		        delete this._keymap[entry.key] //#1029
		    }
		}
		p.get = function (key) {
		    var entry = this._keymap[key]
		    if (entry === void 0)
		        return
		    if (entry === this.tail) {
		        return  entry.value
		    }
		    // HEAD--------------TAIL
		    //   <.older   .newer>
		    //  <--- add direction --
		    //   A  B  C  <D>  E
		    if (entry.newer) {
		        if (entry === this.head) {
		            this.head = entry.newer
		        }
		        entry.newer.older = entry.older // C <-- E.
		    }
		    if (entry.older) {
		        entry.older.newer = entry.newer // C. --> E
		    }
		    entry.newer = void 0 // D --x
		    entry.older = this.tail // D. --> E
		    if (this.tail) {
		        this.tail.newer = entry // E. <-- D
		    }
		    this.tail = entry
		    return entry.value
		}
	
		module.exports = LRU
	
	
	/***/ },
	/* 29 */
	/***/ function(module, exports) {
	
		var rcheckedType = /radio|checkbox/
	
		function fix(dest, src) {
		    if (dest.nodeType !== 1) {
		        return
		    }
		    var nodeName = dest.nodeName.toLowerCase()
		    if (nodeName === 'object') {
		        if (dest.parentNode) {
		            dest.outerHTML = src.outerHTML
		        }
	
		    } else if (nodeName === 'input' && rcheckedType.test(src.type)) {
	
		        dest.defaultChecked = dest.checked = src.checked
	
		        if (dest.value !== src.value) {
		            dest.value = src.value
		        }
	
		    } else if (nodeName === 'option') {
		        dest.defaultSelected = dest.selected = src.defaultSelected
		    } else if (nodeName === 'input' || nodeName === 'textarea') {
		        dest.defaultValue = src.defaultValue
		    }
		}
	
	
		function getAll(context) {
		    return typeof context.getElementsByTagName !== "undefined" ?
		            context.getElementsByTagName("*") :
		            typeof context.querySelectorAll !== "undefined" ?
		            context.querySelectorAll("*") : []
		}
	
		function fixCloneNode(src) {
		    var target = src.cloneNode(true)
		    if (avalon.modern)
		        return target
		    var t = getAll(target)
		    var s = getAll(src)
		    avalon.each(s, function (i) {
		        fix(t[i], s[i])
		    })
		    return target
		}
	
		module.exports = fixCloneNode
	
	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {
	
		var document = avalon.document
		var window = avalon.window
		var root = avalon.root
		var W3C = avalon.modern
	
		var getShortID = __webpack_require__(6).getShortID
		//http://www.feiesoft.com/html/events.html
		//http://segmentfault.com/q/1010000000687977/a-1020000000688757
		var canBubbleUp = __webpack_require__(31)
	
		if (!W3C) {
		    delete canBubbleUp.change
		    delete canBubbleUp.select
		}
	
		//canBubbleUp.touchstart = 1
		//canBubbleUp.touchstart = 1
		//canBubbleUp.touchstart = 1
	
		var eventHooks = avalon.eventHooks
		/*绑定事件*/
		avalon.bind = function (elem, type, fn) {
		    if (elem.nodeType === 1) {
		        var value = elem.getAttribute('avalon-events') || ''
		        //如果是使用ms-on-*绑定的回调,其uuid格式为e12122324,
		        //如果是使用bind方法绑定的回调,其uuid格式为_12
		        var uuid = getShortID(fn)
		        var hook = eventHooks[type]
		        if(hook){
		            type = hook.type || type
		            if (hook.fix) {
		                fn = hook.fix(elem, fn)
		                fn.uuid = uuid
		            }
		        }
		        var key = type + ':' + uuid
		        avalon.eventListeners[fn.uuid] = fn
		        if (value.indexOf(type + ':') === -1) {//同一种事件只绑定一次
		            if (canBubbleUp[type] || (avalon.modern && focusBlur[type])) {
		                delegateEvent(type)
		            } else {
		                nativeBind(elem, type, dispatch)
		            }
		        }
		        var keys = value.split(',')
		        if (keys[0] === '') {
		            keys.shift()
		        }
		        if (keys.indexOf(key) === -1) {
		            keys.push(key)
		            elem.setAttribute('avalon-events', keys.join(','))
		            //将令牌放进avalon-events属性中
		        }
	
		    } else {
		        nativeBind(elem, type, fn)
		    }
		    return fn //兼容之前的版本
		}
	
		avalon.unbind = function (elem, type, fn) {
		    if (elem.nodeType === 1) {
		        var value = elem.getAttribute('avalon-events') || ''
		        switch (arguments.length) {
		            case 1:
		                nativeUnBind(elem, type, dispatch)
		                elem.removeAttribute('avalon-events')
		                break
		            case 2:
		                value = value.split(',').filter(function (str) {
		                    return str.indexOf(type + ':') === -1
		                }).join(',')
		                elem.setAttribute('avalon-events', value)
		                break
		            default:
		                var search = type + ':' + fn.uuid
		                value = value.split(',').filter(function (str) {
		                    return str !== search
		                }).join(',')
		                elem.setAttribute('avalon-events', value)
		                delete avalon.eventListeners[fn.uuid]
		                break
		        }
		    } else {
		        nativeUnBind(elem, type, fn)
		    }
		}
	
		var typeRegExp = {}
		function collectHandlers(elem, type, handlers) {
		    var value = elem.getAttribute('avalon-events')
		    if (value && (elem.disabled !== true || type !== 'click')) {
		        var uuids = []
		        var reg = typeRegExp[type] || (typeRegExp[type] = new RegExp(type + '\\:([^,\\s]+)', 'g'))
		        value.replace(reg, function (a, b) {
		            uuids.push(b)
		            return a
		        })
		        if (uuids.length) {
		            handlers.push({
		                elem: elem,
		                uuids: uuids
		            })
		        }
		    }
		    elem = elem.parentNode
		    var g = avalon.gestureEvents || {}
		    if (elem && elem.getAttribute && (canBubbleUp[type] || g[type])) {
		        collectHandlers(elem, type, handlers)
		    }
	
		}
		var rhandleHasVm = /^e/
		function dispatch(event) {
		    event = new avEvent(event)
		    var type = event.type
		    var elem = event.target
		    var handlers = []
		    collectHandlers(elem, type, handlers)
		    var i = 0, j, uuid, handler
		    while ((handler = handlers[i++]) && !event.cancelBubble) {
		        var host = event.currentTarget = handler.elem
		        j = 0
		        while ((uuid = handler.uuids[ j++ ]) &&
		                !event.isImmediatePropagationStopped) {
		            
		            var fn = avalon.eventListeners[uuid]
		            if (fn) {
		                var vm = rhandleHasVm.test(uuid) ? handler.elem._ms_context_ : 0
		                if (vm && vm.$hashcode === false) {
		                    return avalon.unbind(elem, type, fn)
		                }
		   
		                var ret = fn.call(vm || elem, event, host._ms_local)
		                
		                if(ret === false){
		                    event.preventDefault()
		                    event.stopPropagation()
		                }
		            }
		        }
		    }
		}
	
		var focusBlur = {
		    focus: true,
		    blur: true
		}
		var nativeBind = W3C ? function (el, type, fn, capture) {
		    el.addEventListener(type, fn, capture)
		} : function (el, type, fn) {
		    el.attachEvent('on' + type, fn)
		}
		var nativeUnBind = W3C ? function (el, type, fn) {
		    el.removeEventListener(type, fn)
		} : function (el, type, fn) {
		    el.detachEvent('on' + type, fn)
		}
	
		function delegateEvent(type) {
		    var value = root.getAttribute('delegate-events') || ''
		    if (value.indexOf(type) === -1) {
		        var arr = value.match(avalon.rword) || []
		        arr.push(type)
		        root.setAttribute('delegate-events', arr.join(','))
		        nativeBind(root, type, dispatch, !!focusBlur[type])
		    }
		}
	
		avalon.fireDom = function (elem, type, opts) {
		    if (document.createEvent) {
		        var hackEvent = document.createEvent('Events')
		        hackEvent.initEvent(type, true, true, opts)
		        avalon.shadowCopy(hackEvent, opts)
	
		        elem.dispatchEvent(hackEvent)
		    } else if (root.contains(elem)) {//IE6-8触发事件必须保证在DOM树中,否则报'SCRIPT16389: 未指明的错误'
		        hackEvent = document.createEventObject()
		        avalon.shadowCopy(hackEvent, opts)
		        elem.fireEvent('on' + type, hackEvent)
		    }
		}
	
		var rmouseEvent = /^(?:mouse|contextmenu|drag)|click/
		var rvendor = /^(?:ms|webkit|moz)/
		function avEvent(event) {
		    if (event.originalEvent) {
		        return this
		    }
		    for (var i in event) {
		        if (!rvendor.test(i) && typeof event[i] !== 'function') {
		            this[i] = event[i]
		        }
		    }
		    if (!this.target) {
		        this.target = event.srcElement
		    }
		    var target = this.target
		    if (this.which == null && event.type.indexOf('key') === 0) {
		        this.which = event.charCode != null ? event.charCode : event.keyCode
		    } else if (rmouseEvent.test(event.type) && !('pageX' in this)) {
		        var doc = target.ownerDocument || document
		        var box = doc.compatMode === 'BackCompat' ? doc.body : doc.documentElement
		        this.pageX = event.clientX + (box.scrollLeft >> 0) - (box.clientLeft >> 0)
		        this.pageY = event.clientY + (box.scrollTop >> 0) - (box.clientTop >> 0)
		        this.wheelDeltaY = this.wheelDelta
		        this.wheelDeltaX = 0
		    }
		    this.timeStamp = new Date() - 0
		    this.originalEvent = event
		}
		avEvent.prototype = {
		    preventDefault: function () {
		        var e = this.originalEvent;
		        this.returnValue = false
		        if (e) {
		            e.returnValue = false
		            if (e.preventDefault) {
		                e.preventDefault()
		            }
		        }
		    },
		    stopPropagation: function () {
		        var e = this.originalEvent
		        this.cancelBubble = true
		        if (e) {
		            e.cancelBubble = true
		            if (e.stopPropagation) {
		                e.stopPropagation()
		            }
		        }
		    },
		    stopImmediatePropagation: function () {
		        var e = this.originalEvent
		        this.isImmediatePropagationStopped = true
		        if (e.stopImmediatePropagation) {
		            e.stopImmediatePropagation()
		        }
		        this.stopPropagation()
		    }
		}
	
		//针对firefox, chrome修正mouseenter, mouseleave
		if (!('onmouseenter' in root)) {
		    avalon.each({
		        mouseenter: 'mouseover',
		        mouseleave: 'mouseout'
		    }, function (origType, fixType) {
		        eventHooks[origType] = {
		            type: fixType,
		            fix: function (elem, fn) {
		                return function (e) {
		                    var t = e.relatedTarget
		                    if (!t || (t !== elem && !(elem.compareDocumentPosition(t) & 16))) {
		                        delete e.type
		                        e.type = origType
		                        return fn.apply(this, arguments)
		                    }
		                }
		            }
		        }
		    })
		}
		//针对IE9+, w3c修正animationend
		avalon.each({
		    AnimationEvent: 'animationend',
		    WebKitAnimationEvent: 'webkitAnimationEnd'
		}, function (construct, fixType) {
		    if (window[construct] && !eventHooks.animationend) {
		        eventHooks.animationend = {
		            type: fixType
		        }
		    }
		})
		//针对IE6-8修正input
		if (!('oninput' in document.createElement('input'))) {
		    eventHooks.input = {
		        type: 'propertychange',
		        fix: function (elem, fn) {
		            return function (e) {
		                if (e.propertyName === 'value') {
		                    e.type = 'input'
		                    return fn.apply(this, arguments)
		                }
		            }
		        }
		    }
		}
		if (document.onmousewheel === void 0) {
		    /* IE6-11 chrome mousewheel wheelDetla 下 -120 上 120
		     firefox DOMMouseScroll detail 下3 上-3
		     firefox wheel detlaY 下3 上-3
		     IE9-11 wheel deltaY 下40 上-40
		     chrome wheel deltaY 下100 上-100 */
		    var fixWheelType = document.onwheel !== void 0 ? 'wheel' : 'DOMMouseScroll'
		    var fixWheelDelta = fixWheelType === 'wheel' ? 'deltaY' : 'detail'
		    eventHooks.mousewheel = {
		        type: fixWheelType,
		        fix: function (elem, fn) {
		            return function (e) {
		                var delta = e[fixWheelDelta] > 0 ? -120 : 120
		                e.wheelDelta = ~~elem._ms_wheel_ + delta
		                elem._ms_wheel_ = e.wheelDeltaY = e.wheelDelta
	
		                e.wheelDeltaX = 0
		                if (Object.defineProperty) {
		                    Object.defineProperty(e, 'type', {
		                        value: 'mousewheel'
		                    })
		                }
		                return fn.apply(this, arguments)
		            }
		        }
		    }
		}
	
		avalon.fn.bind = function (type, fn, phase) {
		    if (this[0]) { //此方法不会链
		        return avalon.bind(this[0], type, fn, phase)
		    }
		}
	
		avalon.fn.unbind = function (type, fn, phase) {
		    if (this[0]) {
		        avalon.unbind(this[0], type, fn, phase)
		    }
		    return this
		}
		avalon.$$unbind = function (node) {
		    var nodes = node.getElementsByTagName('*')
		    //IE6-7这样取所有子孙节点会混入注释节点
		    avalon.each(nodes, function (i, el) {
		        if (el.nodeType === 1 && el.getAttribute('avalon-events')) {
		            avalon.unbind(el)
		        }
		    })
		}
	
	/***/ },
	/* 31 */
	/***/ function(module, exports) {
	
		//http://www.feiesoft.com/html/events.html
		//http://segmentfault.com/q/1010000000687977/a-1020000000688757
		module.exports = {
		    click: true,
		    dblclick: true,
		    keydown: true,
		    keypress: true,
		    keyup: true,
		    mousedown: true,
		    mousemove: true,
		    mouseup: true,
		    mouseover: true,
		    mouseout: true,
		    wheel: true,
		    mousewheel: true,
		    input: true,
		    change: true,
		    beforeinput: true,
		    compositionstart: true,
		    compositionupdate: true,
		    compositionend: true,
		    select: true,
		    //http://blog.csdn.net/lee_magnum/article/details/17761441
		    cut: true,
		    copy: true,
		    paste: true,
		    beforecut: true,
		    beforecopy: true,
		    beforepaste: true,
		    focusin: true,
		    focusout: true,
		    DOMFocusIn: true,
		    DOMFocusOut: true,
		    DOMActivate: true,
		    dragend: true,
		    datasetchanged: true
		}
	
	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {
	
		var scan = __webpack_require__(33)
	
		var document = avalon.document
		var window = avalon.window
		var root = avalon.root
	
		var readyList = [], isReady
		var fireReady = function (fn) {
		    isReady = true
	
		    while (fn = readyList.shift()) {
		        fn(avalon)
		    }
		}
	
		function doScrollCheck() {
		    try { //IE下通过doScrollCheck检测DOM树是否建完
		        root.doScroll('left')
		        fireReady()
		    } catch (e) {
		        setTimeout(doScrollCheck)
		    }
		}
	
		if (document.readyState === 'complete') {
		    setTimeout(fireReady) //如果在domReady之外加载
		} else if (document.addEventListener) {
		    document.addEventListener('DOMContentLoaded', fireReady)
		} else if (document.attachEvent) {
		    document.attachEvent('onreadystatechange', function () {
		        if (document.readyState === 'complete') {
		            fireReady()
		        }
		    })
		    try {
		        var isTop = window.frameElement === null
		    } catch (e) {
		    }
		    if (root.doScroll && isTop && window.external) {//fix IE iframe BUG
		        doScrollCheck()
		    }
		}
		if (window.document) {
		    avalon.bind(window, 'load', fireReady)
		}
		avalon.ready = function (fn) {
		    if (!isReady) {
		        readyList.push(fn)
		    } else {
		        fn(avalon)
		    }
		}
	
		avalon.ready(function(){
		    scan(document.body)
		})
	
	
	
	/***/ },
	/* 33 */
	/***/ function(module, exports) {
	
		function scan(nodes) {
		    for (var i = 0, elem; elem = nodes[i++];) {
		        if (elem.nodeType === 1) {
		            var $id = getController(elem)
		          
		            var vm = avalon.vmodels[$id]
		            if (vm && !vm.$element) {
		                avalon(elem).removeClass('ms-controller')
		                vm.$element = elem
		                var now = new Date()
		                //IE6-8下元素的outerHTML前面会有空白
		                elem.vtree = avalon.lexer(elem.outerHTML.trim())
		                avalon.speedUp(elem.vtree)
		                var now2 = new Date()
		                avalon.log('create primitive vtree', now2 - now)
		                vm.$render = avalon.render(elem.vtree)
	
		                avalon.scopes[vm.$id] = {
		                    vmodel: vm,
		                    local: {}
		                }
		                var now3 = new Date()
		                avalon.log('create template Function ', now3 - now2)
		                avalon.rerenderStart = now3
		                avalon.batch($id)
		                
		            } else if (!$id) {
		                scan(elem.childNodes)
		            }
		        }
		    }
		}
	
		module.exports = avalon.scan = function (a) {
		    if (!a || !a.nodeType) {
		        avalon.warn('[avalon.scan] first argument must be element , documentFragment, or document')
		        return
		    }
		    scan([a])
		}
	
		function getController(a) {
		    return a.getAttribute('ms-controller') || a.getAttribute('ms-important')
		}
	
	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(35)
		__webpack_require__(37)
		//处理属性样式
		__webpack_require__(38)
	
		__webpack_require__(39)
		__webpack_require__(40)
		////处理内容
		__webpack_require__(41)
		__webpack_require__(42)
		__webpack_require__(43)
		////需要用到事件的
		__webpack_require__(52)
		__webpack_require__(53)
		__webpack_require__(54)
		__webpack_require__(61)
		__webpack_require__(62)
		//
		////处理逻辑
		__webpack_require__(63)
		__webpack_require__(64)
		//
		__webpack_require__(65)
		__webpack_require__(68)
		//优先级 ms-important, ms-controller, ms-for, ms-widget, ms-effect, ms-if
		//.......
		//ms-duplex
	
	
	/***/ },
	/* 35 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 抽离出来公用
		var update = __webpack_require__(36)
	
		avalon.directive('important', {
		    priority: 1,
		    parse: function (copy, src, binding) {
		        var $id = binding.expr
		        var quoted = avalon.quote($id)
	
		        src.$id = $id
		        src.$prepend = ['(function(__vmodel__){',
		            'var important = avalon.scopes[' + quoted + ']',
		            'if(important && important.fast){avalon.log("不进入"+' + quoted + ');return }',
		            'var __top__ = __vmodel__',
		            'var __vmodel__ =  avalon.vmodels[' + quoted + ']',
	
		            '/*controller:' + $id + '*/',
		        ].join('\n') + '\n\n'
		        copy.local = '{}'
		        copy.top = '__top__'
		        copy.vmodel = '__vmodel__'
		        src.$append = '/*controller:' + $id + '*/\n})(__vmodel__);'
		    },
		    diff: function (copy, src) {
		        if (src.vmodel !== copy.vmodel) {
		            //console.log('ms-important')
		            src.local = copy.local
		            src.top = copy.top
		            src.synth =  src.vmodel = copy.vmodel
		            update(src, this.update)
		        }
		    },
		    update: function (node, vnode, parent) {
		        avalon.directives.controller.update(node, vnode, parent, 'important')
		    }
		})
	
	
	/***/ },
	/* 36 */
	/***/ function(module, exports) {
	
		module.exports = function (vdom, update, hookName) {
		    if (hookName) {
		        vdom.afterChange = vdom.afterChange || []
		        avalon.Array.ensure(vdom.afterChange, update)
		    } else {
		        var dom = vdom.dom
		        update(vdom.dom, vdom, dom && dom.parentNode)
		    }
		}
	
	
	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 抽离出来公用
		var update = __webpack_require__(36)
		var cache = {}
		avalon.mediatorFactory2 = function (__vmodel__, __present__) {
		    var a = __vmodel__.$hashcode
		    var b = __present__.$hashcode
		    var id = a + b
		    if (cache[id]) {
		        return cache[id]
		    }
		    var c = avalon.mediatorFactory(__vmodel__, __present__)
		    return  cache[id] = c
		}
		avalon.directive('controller', {
		    priority: 2,
		    parse: function (copy, src, binding) {
		        var $id = binding.expr
		        var quoted = avalon.quote($id)
		        var name = binding.name
		        copy[name] = quoted
	
	
		        src.$prepend = ['(function(__vmodel__){',
		            'var __top__ = __vmodel__',
		            'var __present__ = avalon.vmodels[' + quoted + ']',
		            'if(__present__ && __top__ && __present__ !== __top__){',
		            'var __synth__ =  avalon.mediatorFactory(__vmodel__, __present__)',
		            'var __vmodel__ = __synth__',
		            '}else{',
		            '__vmodel__ = __top__ || __present__',
		            '}',
		            '/*controller:' + $id + '*/',
		        ].join('\n') + '\n\n'
		        copy.synth = '__synth__'
		        copy.local = '__local__'
		        copy.top = '__top__'
		        src.$id = $id
		        copy.vmodel = '__present__'
		        src.$append = '/*controller:' + $id + '*/\n})(__vmodel__);'
		    },
		    diff: function (copy, src, name) {
		        if (src[name] !== copy[name]) {
		            src[name] = copy[name]
		            src.synth = copy.synth
		            src.local = copy.local
		            src.top = copy.top
		            src.vmodel = copy.vmodel
		            update(src, this.update)
		        }
		    },
		    update: function (dom, vdom, parent, important) {
	
		        var scope = avalon.scopes[vdom.$id]
		        if (scope &&
		                (!important || important.fast)) {
		            //如果vm在位于顶层,那么在domReady的第一次scan中已经注册到scopes
		            return
		        }
		        
		        var top = vdom.top //位于上方的顶层vm或mediator vm
		        var vmodel = vdom.vmodel
		        if (top && vmodel) {
		            var str = (top.$render + '')
		            var synth = vdom.synth
		            var vm = synth || vmodel
		            //开始构建模板函数,从顶层vm的模板函数的toString中
		            //通过splitText截取其作用的区域,
		            //前面加上本地变量与vnodes数组,后面返回vnodes数组
		            //放进avalon.render方法中生成
		            var splitText = '/*controller:' + vdom.$id + '*/'
		            var arr = str.split(splitText)   
		            var effective = arr[1]
		            var local = vdom.local || {}
		            var vars = []
		            for (var i in local) {
		                vars.push('var ' + i + ' = __local__[' + avalon.quote(i) + ']')
		            }
		            vars.push('var vnodes = []\n')
		            var body = vars.join('\n') + effective + '\nreturn vnodes'
		            var render = avalon.render(body)
		            //为相关的vm添加对应属性,$render,$element,vtree
		            
		            synth.$render = vmodel.$render = render
		            synth.$element = vmodel.$element = dom
		            dom.vtree = [vdom]
		            vdom.top = vdom.synth = vdom.vmodel = 0
		           
		            avalon.scopes[vdom.$id] = {
		                vmodel: vm,
		                local: local,
		                fast: 'important'
		            }
		        }
		    }
		})
	
	
	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {
	
		
		var attrUpdate = __webpack_require__(22)
		var update = __webpack_require__(36)
	
		avalon.directive('attr', {
		    diff: function (copy, src, name) {
		        var a = copy[name]
		        var p = src[name]
		        if (a && typeof a === 'object') {
		            a = a.$model || a //安全的遍历VBscript
		            if (Array.isArray(a)) {//转换成对象
		                a = avalon.mix.apply({}, a)
		            }
		            if (typeof p !== 'object') {//如果一开始为空
		                src.changeAttr = src[name] = a
		            } else {
		                var patch = {}
		                var hasChange = false
		                for (var i in a) {//diff差异点
		                    if (a[i] !== p[i]) {
		                        hasChange = true
		                        patch[i] = a[i]
		                    }
		                }
		                if (hasChange) {
		                    src[name] = a
		                    src.changeAttr = patch
		                }
		            }
		            if (src.changeAttr) {
		                update(src, this.update )
		            }
		        }
		        delete copy[name]//释放内存
		    },
		    //dom, vnode
		    update: attrUpdate
		})
	
	
	/***/ },
	/* 39 */
	/***/ function(module, exports, __webpack_require__) {
	
		
		var update = __webpack_require__(36)
	
		avalon.directive('css', {
		    diff: function (copy, src, name) {
		        var a = copy[name]
		        var p = src[name]
		        if (Object(a) === a) {
		            
		            a = a.$model || a//安全的遍历VBscript
		            if (Array.isArray(a)) {//转换成对象
		                a = avalon.mix.apply({}, a)
		            }
		            if (typeof p !== 'object') {//如果一开始为空
		                src.changeStyle = src[name] = a
		            } else {
		                var patch = {}
		                var hasChange = false
		                for (var i in a) {//diff差异点
		                    if (a[i] !== p[i]) {
		                        hasChange = true
		                        patch[i] = a[i]
		                    }
		                }
		                if (hasChange) {
		                    src[name] = a
		                    src.changeStyle = patch
		                }
		            }
		            if (src.changeStyle) {
		                update(src, this.update)
		            }
		        }
		        delete copy[name]//释放内存
		    },
		    update: function (dom, vdom) {
		        var change = vdom.changeStyle
		        var wrap = avalon(dom)
		        for (var name in change) {
		            wrap.css(name, change[name])
		        }
		        delete vdom.changeStyle
		    }
		})
	
	
	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {
	
		var update = __webpack_require__(36)
	
		var none = 'none'
		function parseDisplay(elem, val) {
		    //用于取得此类标签的默认display值
		    var doc = elem.ownerDocument
		    var nodeName = elem.nodeName
		    var key = '_' + nodeName
		    if (!parseDisplay[key]) {
		        var temp = doc.body.appendChild(doc.createElement(nodeName))
		        if (avalon.modern) {
		            val = getComputedStyle(temp, null).display
		        } else {
		            val = temp.currentStyle.display
		        }
		        doc.body.removeChild(temp)
		        if (val === none) {
		            val = 'block'
		        }
		        parseDisplay[key] = val
		    }
		    return parseDisplay[key]
		}
	
		avalon.parseDisplay = parseDisplay
	
		avalon.directive('visible', {
		    diff: function (copy, src, name) {
		        var c = !!copy[name]
		        if (c !== src[name]) {
		            src[name] = c
		            update(src, this.update )
		        }
		    },
		    update: function (dom, vdom) { 
		        if(!dom || dom.nodeType !== 1){
		            return
		        }
		        var show = vdom['ms-visible']
		        var display = dom.style.display
		        var value
		        if (show) {
		            if (display === none) {
		                value = vdom.displayValue
		                if (!value) {
		                    dom.style.display = ''
		                }
		            }
		            if (dom.style.display === '' && avalon(dom).css('display') === none &&
		                    // fix firefox BUG,必须挂到页面上
		                    avalon.contains(dom.ownerDocument, dom)) {
	
		                value = parseDisplay(dom)
		            }
		        } else {
		            if (display !== none) {
		                value = none
		                vdom.displayValue = display
		            }
		        }
		        function cb(){
		           if (value !== void 0) {
		              dom.style.display = value
		           }
		        }
		        avalon.applyEffect(dom, vdom, {
		            hook: show ? 'onEnterDone': 'onLeaveDone',
		            cb: cb
		        })
		    }
		})
	
	
	
	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {
	
		var update = __webpack_require__(36)
	
		avalon.directive('expr', {
		    parse: avalon.noop,
		    diff: function (copy, src) {
		        var copyValue = copy.nodeValue + ''
		        if (copyValue !== src.nodeValue) {
		            src.nodeValue = copyValue
		            update(src, this.update)
		        }
		    },
		    update: function (dom, vdom) {
		        dom.nodeValue = vdom.nodeValue
		    }
		})
	
	
	
	
	/***/ },
	/* 42 */
	/***/ function(module, exports) {
	
		//此指令实际上不会操作DOM,交由expr指令处理
		avalon.directive('text', {
		    parse: function (copy, src, binding) {
		        copy[binding.name] = 1
		        src.children = []
		        copy.children = '[{\nnodeType:3,\ntype:"#text",\ndynamic:true,' +
		                '\nnodeValue:avalon.parsers.string(' +
		                avalon.parseExpr(binding) + ')}]'
		    },
		    diff: function (copy, src, name) {
		        if (src.dom && !src.isVoidTag && !src.children.length) {
		            var parent = src.dom
		            while (parent.firstChild) {
		                parent.removeChild(parent.firstChild)
		            }
		            var dom = document.createTextNode('x')
		            parent.appendChild(dom)
		            var vdom = {nodeType: 3, type:'#text', dom: dom}
		            src.children.push(vdom)
		        }
		    },
		    update: avalon.noop
		})
	
	/***/ },
	/* 43 */
	/***/ function(module, exports, __webpack_require__) {
	
		var update = __webpack_require__(36)
		var parseView = __webpack_require__(44)
		var reconcile = __webpack_require__(51)
	
	
		avalon.directive('html', {
		    parse: function (copy, src, binding) {
		        if (!src.isVoidTag) {
		            //将渲染函数的某一部分存起来,渲在c方法中转换为函数
		            copy[binding.name] = avalon.parseExpr(binding)
		            copy.vmodel = '__vmodel__'
		            copy.local = '__local__'
		        } else {
		            copy.children = '[]'
		        }
		    },
		    diff: function (copy, src, name) {
		        var copyValue = copy[name] + ''
		        if (copyValue !== src[name]) {
		            src[name] = copyValue
		            var oldTree = avalon.lexer(copyValue)
		            avalon.speedUp(oldTree)
		            src.children = oldTree
		            var render = avalon.render(oldTree,copy.local)
		            src.render = render
		            var newTree = render(copy.vmodel, copy.local)
		            copy.children = newTree
		            update(src, this.update)
		        } else {
		            var newTree = src.render(copy.vmodel, copy.local)
		            copy.children = newTree
		        }
		    },
	
		    update: function (dom, vdom, parent) {
		        avalon.clearHTML(dom)
		        var f = avalon.vdomAdaptor(vdom.children)
		        reconcile(f.childNodes, vdom.children, f)
		        dom.appendChild(f)
		    }
		})
	
	
	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {
	
		
		var parseExpr = __webpack_require__(45)
		var extractBindings = __webpack_require__(48)
		var parseDelimiter = __webpack_require__(49)
		var stringify = __webpack_require__(50)
		var config = avalon.config
		var quote = avalon.quote
		var makeHashCode = avalon.makeHashCode
		var r = __webpack_require__(47)
		var rident = r.ident
		var rsp = r.sp
	
		var rmsFor = /^\s*ms\-for:/
		var rmsForEnd = /^\s*ms\-for\-end:/
		function wrapDelimiter(expr) {
		    return rident.test(expr) ? expr : parseExpr(expr, 'text')
		}
	
		function add(a) {
		    return 'vnodes.push(' + a + ');'
		}
		function addTag(obj) {
		    return add(stringify(obj))
		}
	
		function parseNodes(source, inner) {
		    //ms-important， ms-controller ， ms-for 不可复制，省得死循环
		    //ms-important --> ms-controller --> ms-for --> ms-widget --> ms-effect --> ms-if
		    var buffer = inner ? []: ['\nvar vnodes = [];'] 
	
		    for (var i = 0, el; el = source[i++]; ) {
		        var vnode = parseNode(el)
		        if (el.$prepend) {
		            buffer.push(el.$prepend)
		        }
		        var append = el.$append
		        delete el.$append
		        delete el.$prepend
		        if (vnode) {
		            buffer.push(vnode + '\n')
		        }
		        if (append) {
		            buffer.push(append)
		        }
		    }
		    if (!inner) {
		        buffer.push('return vnodes\n')
		    }
		    return buffer.join('\n')
		}
	
	
	
		function parseNode(source) {
		    var directives = avalon.directives
		    if (source.nodeType === 3) {
		        if (config.rexpr.test(source.nodeValue)) {
		            return add(stringifyText(source))
		        } else {
		            return addTag(source)
		        }
		    } else if (source.nodeType === 1) {
	
		        var copy = {
		            props: {},
		            type: source.type,
		            nodeType: 1,
		            template: ''
		        }
		        var bindings = extractBindings(copy, source.props)
		        copy.order = bindings.map(function (b) {
		            //将ms-*的值变成函数,并赋给copy.props[ms-*]
		            //如果涉及到修改结构,则在source添加$append,$prepend
		            directives[b.type].parse(copy, source, b)
		            return b.name
	
		        }).join(',')
	
		        if (source.isVoidTag) {
		            copy.isVoidTag = true
		        } else {
		            if (!('children' in copy)) {
		                
		                var pChildren = source.children
		                if (pChildren.length) {
		                    delete source.template
		                    copy.children = '(function(){' + parseNodes(pChildren) + '})()'
		                } else {
		                    copy.template = source.template
		                    copy.children = '[]'
		                }
		            }
		        }
		        if(source.skipContent)
		            copy.skipContent = true
		        if(source.skipAttrs)
		            copy.skipAttrs = true
	
		        return addTag(copy)
	
		    } else if (source.nodeType === 8) {
		        var nodeValue = source.nodeValue
		        if (rmsFor.test(nodeValue)) {// 处理ms-for指令
		            if (nodeValue.indexOf('ms-for:') !== 0) {
		                avalon.error('ms-for指令前不能有空格')
		            }
		            var copy = {
		                directive: 'for',
		                vmodel: '__vmodel__'
		            }
		            for (var i in source) {
		                if (source.hasOwnProperty(i)) {
		                    copy[i] = source[i]
		                }
		            }
	
		            directives['for'].parse(copy, source, source)
	
		            return addTag(copy)
	
		        } else if (rmsForEnd.test(nodeValue)) {
		            if (nodeValue.indexOf('ms-for-end:') !== 0) {
		                avalon.error('ms-for-end指令前不能有空格')
		            }
		            source.$append = addTag({
		                nodeType: 8,
		                type: '#comment',
		                nodeValue: source.signature,
		                key: 'traceKey'
		            }) +
		                    '\n},__local__,vnodes)\n' +
		                    addTag({
		                        nodeType: 8,
		                        type: "#comment",
		                        signature: source.signature,
		                        nodeValue: "ms-for-end:"
		                    }) + '\n'
	
		            return ''
		        } else if (nodeValue.indexOf('ms-js:') === 0) {//插入JS声明语句
		            var statement = parseExpr(nodeValue.replace('ms-js:', ''), 'js') + '\n'
		            var ret = addTag(source)
		            var match = statement.match(rstatement)
		            if (match && match[1]) {
		                source.$append = (source.$append || '') + statement +
		                        "\n__local__." + match[1] + ' = ' + match[1] + '\n'
		            } else {
		                avalon.warn(nodeValue + ' parse fail!')
		            }
		            return ret
		        } else {
		            return addTag(source)
		        }
		    } else if (Array.isArray(source)) {
		        source.$append = parseNodes(source, true)
		    }
		}
		var rstatement = /^\s*var\s+([$\w]+)\s*\=\s*\S+/
	
		function stringifyText(el) {
		    var array = parseDelimiter(el.nodeValue)//返回一个数组
		    var nodeValue = ''
		    if (array.length === 1) {
		        nodeValue = wrapDelimiter(array[0].expr)
		    } else {
		        var token = array.map(function (el) {
		            return el.type ? wrapDelimiter(el.expr) : quote(el.expr)
		        }).join(' + ')
		        nodeValue = 'String(' + token + ')'
		    }
		    return '{\ntype: "#text",\nnodeType:3,\ndynamic:true,\nnodeValue: ' + nodeValue + '\n}'
		}
	
		module.exports = parseNodes
	
	
	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {
	
		
	
		//缓存求值函数，以便多次利用
		var evaluatorPool = __webpack_require__(46)
	
		var rregexp = /(^|[^/])\/(?!\/)(\[.+?]|\\.|[^/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/g
		var rstring = __webpack_require__(47).string
		var rfill = /\?\?\d+/g
		var brackets = /\(([^)]*)\)/
	
		var rshortCircuit = /\|\|/g
		var rpipeline = /\|(?=\w)/
		var ruselessSp = /\s*(\.|\|)\s*/g
	
		var rAt = /(^|[^\w\u00c0-\uFFFF_])(@|##)(?=[$\w])/g
		var rhandleName = /^(?:\@|##)[$\w]+$/i
	
		var rfilters = /\|.+/g
		var rvar = /((?:\@|\$|\#\#)?\w+)/g
	
		function collectLocal(str, ret) {
		    var arr = str.replace(rfilters, '').match(rvar)
		    if (arr) {
		        arr.filter(function (el) {
		            if (!/^[@\d\-]/.test(el) &&
		                    el.slice(0, 2) !== '##' &&
		                    el !== '$event' && !avalon.keyMap[el]) {
		                ret[el] = 1
		            }
		        })
		    }
		}
	
		function extLocal(ret) {
		    var arr = []
		    for (var i in ret) {
		        arr.push('var ' + i + ' = __local__[' + avalon.quote(i) + ']')
		    }
		    return arr
		}
	
		function parseExpr(str, category) {
		    var binding = {}
		    category = category || 'other'
		    if (typeof str === 'object') {
		        category = str.type
		        binding = str
		        str = binding.expr
		    }
		    if (typeof str !== 'string')
		        return ''
		    var cacheID = str
		    var cacheStr = evaluatorPool.get(category + ':' + cacheID)
	
		    if (cacheStr) {
		        return cacheStr
		    }
	
		    var number = 1
		//相同的表达式生成相同的函数
		    var maps = {}
		    function dig(a) {
		        var key = '??' + number++
		        maps[key] = a
		        return key
		    }
	
		    function fill(a) {
		        return maps[a]
		    }
	
		    var input = str.replace(rregexp, dig).//移除所有正则
		            replace(rstring, dig).//移除所有字符串
		            replace(rshortCircuit, dig).//移除所有短路或
		            replace(ruselessSp, '$1').//移除. |两端空白
		            split(rpipeline) //使用管道符分离所有过滤器及表达式的正体
		    //还原body
		    var _body = input.shift()
		    var local = {}
		    var body = _body.replace(rfill, fill).trim()
		    if (category === 'on' && rhandleName.test(body)) {
		        body = body + '($event)'
		    }
	
		    body = body.replace(rAt, '$1__vmodel__.')
		    if (category === 'js') {
		        return evaluatorPool.put(category + ':' + cacheID, body)
		    } else if (category === 'on') {
		        collectLocal(_body, local)
		    }
	
		//处理表达式的过滤器部分
	
		    var filters = input.map(function (str) {
		        collectLocal(str.replace(/^\w+/g, ""), local)
		        str = str.replace(rfill, fill).replace(rAt, '$1__vmodel__.') //还原
		        var hasBracket = false
		        str = str.replace(brackets, function (a, b) {
		            hasBracket = true
		            return /\S/.test(b) ?
		                    '(__value__,' + b + ');' :
		                    '(__value__);'
		        })
		        if (!hasBracket) {
		            str += '(__value__);'
		        }
		        str = str.replace(/(\w+)/, 'avalon.__format__("$1")')
		        return '__value__ = ' + str
		    })
		    var ret = []
		    if (category === 'on') {
		        filters = filters.map(function (el) {
		            return el.replace(/__value__/g, '$event')
		        })
		        if (filters.length) {
		            filters.push('if($event.$return){\n\treturn;\n}')
		        }
		        if (!avalon.modern) {
		            body = body.replace(/__vmodel__\.([^(]+)\(([^)]*)\)/, function (a, b, c) {
		                return '__vmodel__.' + b + ".call(__vmodel__" + (/\S/.test(c) ? ',' + c : "") + ")"
		            })
		        }
	
		        ret = ['function ms_on($event, __local__){',
		            'try{',
		            extLocal(local).join('\n'),
		            '\tvar __vmodel__ = this;',
		            '\t' + body,
		            '}catch(e){',
		            quoteError(str, category),
		            '}',
		            '}']
		        filters.unshift(2, 0)
		    } else if (category === 'duplex') {
	
		//从vm中得到当前属性的值
		        var getterBody = [
		            'function (__vmodel__){',
		            'try{',
		            'return ' + body + '\n',
		            '}catch(e){',
		            quoteError(str, category).replace('parse', 'get'),
		            '}',
		            '}']
		        evaluatorPool.put('duplex:' + cacheID, getterBody.join('\n'))
		        //给vm同步某个属性
		        var setterBody = [
		            'function (__vmodel__,__value__){',
		            'try{',
		            '\t' + body + ' = __value__',
		            '}catch(e){',
		            quoteError(str, category).replace('parse', 'set'),
		            '}',
		            '}']
		        evaluatorPool.put('duplex:set:' + cacheID, setterBody.join('\n'))
		        //对某个值进行格式化
		        if (input.length) {
		            var formatBody = [
		                'function (__vmodel__, __value__){',
		                'try{',
		                filters.join('\n'),
		                'return __value__\n',
		                '}catch(e){',
		                quoteError(str, category).replace('parse', 'format'),
		                '}',
		                '}']
		            evaluatorPool.put('duplex:format:' + cacheID, formatBody.join('\n'))
		        }
		        return  evaluatorPool.get('duplex:' + cacheID)
		    } else {
		        ret = [
		            '(function(){',
		            'try{',
		            'var __value__ = ' + body,
		            (category === 'text' ?
		                    'return avalon.parsers.string(__value__)' :
		                    'return __value__'),
		            '}catch(e){',
		            quoteError(str, category),
		            '\treturn ""',
		            '}',
		            '})()'
		        ]
		        filters.unshift(3, 0)
		    }
		    ret.splice.apply(ret, filters)
		    cacheStr = ret.join('\n')
		    evaluatorPool.put(category + ':' + cacheID, cacheStr)
		    return cacheStr
	
		}
	
		function quoteError(str, type) {
		    return '\tavalon.warn(e, ' +
		            avalon.quote('parse ' + type + ' binding【 ' + str + ' 】fail')
		            + ')'
		}
	
		module.exports = avalon.parseExpr = parseExpr
	
	
	/***/ },
	/* 46 */
	/***/ function(module, exports, __webpack_require__) {
	
		
		var Cache = __webpack_require__(28)
		//缓存求值函数，以便多次利用
		module.exports = new Cache(512)
	
	
	/***/ },
	/* 47 */
	/***/ function(module, exports) {
	
		module.exports = {
		    ident: /^[$a-zA-Z_][$a-zA-Z0-9_]*$/,
		    sp: /^\s+$/, //全部都是空白,
		    leftSp: /^\s+/, //左边空白
		    rightSp: /s+$/, //右边空白,
		    binding: /^ms-(\w+)-?(.*)/, //绑定属性,
		    string: /(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/g
		}
	
	/***/ },
	/* 48 */
	/***/ function(module, exports, __webpack_require__) {
	
		var directives = avalon.directives
		var rbinding = __webpack_require__(47).binding
		var eventMap = avalon.oneObject('animationend,blur,change,input,click,dblclick,focus,keydown,keypress,keyup,mousedown,mouseenter,mouseleave,mousemove,mouseout,mouseover,mouseup,scan,scroll,submit')
	
		function extractBindings(cur, props) {
		    var bindings = []
		    var skip = 'ms-skip' in props
		    var uniq = {}
		    for (var i in props) {
		        var value = props[i], match
	
		        if (!skip && (match = i.match(rbinding))) {
		            var type = match[1]
		            var param = match[2] || ''
		            var name = i
		            if (eventMap[type]) {
		                var order = parseFloat(param) || 0
		                param = type
		                type = 'on'
		            }
		            name = 'ms-' + type + (param ? '-' + param : '')
		            if (i !== name) {
		                delete props[i]
		                props[name] = value
		            }
		            if (directives[type]) {
	
		                var binding = {
		                    type: type,
		                    param: param,
		                    name: name,
		                    expr: value,
		                    priority: directives[type].priority || type.charCodeAt(0) * 100
		                }
		                if (type === 'on') {
		                    order = order || 0
		                    binding.name += '-' + order
		                    binding.priority += param.charCodeAt(0) * 100 + order
		                }
		                if (!uniq[binding.name]) {
		                    uniq[binding.name] = 1
		                    bindings.push(binding)
		                }
		            }
		        } else {
		            cur.props[i] = props[i]
		        }
		    }
		    bindings.sort(byPriority)
	
		    return bindings
		}
	
		function byPriority(a, b) {
		    return a.priority - b.priority
		}
	
		module.exports = extractBindings
	
	
	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {
	
		var rline = /\r?\n/g
		var r = __webpack_require__(47)
		var config = avalon.config
	
		function parseDelimiter(str) {
		    var tokens = [],
		            value, start = 0,
		            stop
		    do {
		        stop = str.indexOf(config.openTag, start)
		        if (stop === -1) {
		            break
		        }
		        value = str.slice(start, stop)
		        if (start === 0) {
		            value = value.replace(r.leftSp, '')
		        }
		        if (value) { // {{ 左边的文本
		            tokens.push({
		                expr: value
		            })
		        }
		        start = stop + config.openTag.length
		        stop = str.indexOf(config.closeTag, start)
		        if (stop === -1) {
		            break
		        }
		        value = str.slice(start, stop)
		        if (value) { //处理{{ }}插值表达式
		            tokens.push({
		                expr: value.replace(rline, ''),
		                type: '{{}}'
		            })
		        }
		        start = stop + avalon.config.closeTag.length
		    } while (1)
		    value = str.slice(start)
	
		    var lastText = value.replace(r.rightSp, '')
		    if (lastText) { //}} 右边的文本
		        tokens.push({
		            expr: lastText.replace(/^\s+$/,' ')
		        })
		    }
		    return tokens
		}
	
		module.exports = parseDelimiter
	
	
	/***/ },
	/* 50 */
	/***/ function(module, exports) {
	
		var keyMap = avalon.oneObject("break,case,catch,continue,debugger,default,delete,do,else,false," +
		        "finally,for,function,if,in,instanceof,new,null,return,switch,this," +
		        "throw,true,try,typeof,var,void,while,with," + /* 关键字*/
		        "abstract,boolean,byte,char,class,const,double,enum,export,extends," +
		        "final,float,goto,implements,import,int,interface,long,native," +
		        "package,private,protected,public,short,static,super,synchronized," +
		        "throws,transient,volatile")
		avalon.keyMap = keyMap
		  var quoted = {
		      type: 1,
		      template: 1,
		      innerHTML: 1,
		      outerHTML: 1,
		      order: 1,
		      nodeValue: 1,
		      directive: 1,
		      signature: 1,
		      wid: 1,
		      cid: 1
		  }
	
		var rneedQuote = /[W-]/
		var quote = avalon.quote
		function fixKey(k) {
		    return (rneedQuote.test(k) || keyMap[k]) ? quote(k) : k
		}
	
		function stringify(obj) {
		    var arr1 = []
		//字符不用东西包起来就变成变量
		    for (var i in obj) {
		        if (i === 'props') {
		            var arr2 = []
		            for (var k in obj.props) {
		                var kv = obj.props[k]
		                if (typeof kv === 'string') {
		                    kv = quote(kv)
		                }
		                arr2.push(fixKey(k) + ': ' + kv)
		            }
		            arr1.push('props: {' + arr2.join(',\n') + '}')
		        } else if(obj.hasOwnProperty(i)) {
		            var v = obj[i]
		            if (typeof v === 'string') {
		                v = quoted[i] ? quote(v) : v
		            }
		            arr1.push(fixKey(i) + ':' + v)
		        }
		    }
		    return '{\n' + arr1.join(',\n') + '}'
		}
	
		module.exports = stringify
	
	
	/***/ },
	/* 51 */
	/***/ function(module, exports) {
	
		/*
		 * 
		 节点对齐算法
		 元素节点是1＋其类型
		 文本节点是3＋其是否能移除
		 注释节点是8＋其内容
		 发现不一样，就对真实DOM树添加或删除
		 添加的是 ms-for,ms-for-end占位的注释节点
		 删除的是多余的空白文本节点,与IE6-8私下添加的奇怪节点
		 */
		function getType(node) {
		    switch (node.nodeType) {
	
		        case 3:
		            return '3' + (/\S/.test(node.nodeValue) ? 'retain' : 'remove')
		        case 1:
		            return '1' + (node.nodeName || node.type).toLowerCase()
		        case 8:
		            return '8' + node.nodeValue
	
		    }
	
		}
	
	
		var rforRange = /^8ms\-for/
	
		function reconcile(nodes, vnodes, parent) {
		    //遍平化虚拟DOM树
		    vnodes = flatten(vnodes)
		    var map = {}
		    var vn = vnodes.length
		    if(vn === 0)
		        return
		    
		    vnodes.forEach(function (el, index) {
		        map[index] = getType(el)
		    })
		    
		    var newNodes = [], change = false , el, i = 0
		    var breakLoop = 0
		    while (true) {
		        el = nodes[i++]
		        if(breakLoop++ > 5000){
		            break
		        }
		        var vtype = el && getType(el)
		        var v = newNodes.length
		        if (map[v] === vtype) {
		            newNodes.push(el)
		            var vnode = vnodes[v]
		            
		            if (vnode.dynamic) {
		                vnode.dom = el
		            }
		       
		            if (el.nodeType === 1 && !vnode.isVoidTag && !containers[vnode.type]) {
		                reconcile(el.childNodes, vnode.children, el)
		            }
		        } else {
		            change = true
		            if (rforRange.test(map[v])) {
		                var vv = vnodes[v]
		                var nn = document.createComment(vv.nodeValue)
		                vv.dom = nn
		                newNodes.push(nn)
		                i = Math.max(0, --i)
		            }
		        }
		        if(newNodes.length === vn){
		            break
		        }
		    }
		   // console.log(newNodes.length, vnodes.length)
		    if (change) {
		        var f = document.createDocumentFragment(), i = 0
		        while (el = newNodes[i++]) {
		            f.appendChild(el)
		        }
		        while (parent.firstChild) {
		            parent.removeChild(parent.firstChild)
		        }
		        parent.appendChild(f)
		    }
		}
		var containers = avalon.oneObject('script,style,xmp,template,noscript,textarea')
		function flatten(nodes) {
		    var arr = []
		    for (var i = 0, el; el = nodes[i]; i++) {
		        if (Array.isArray(el)) {
		            arr = arr.concat(flatten(el))
		        } else {
		            arr.push(el)
		        }
		    }
		    return arr
		}
	
		module.exports = reconcile
	
	/***/ },
	/* 52 */
	/***/ function(module, exports, __webpack_require__) {
	
		//根据VM的属性值或表达式的值切换类名，ms-class='xxx yyy zzz:flag'
		//http://www.cnblogs.com/rubylouvre/archive/2012/12/17/2818540.html
		var markID = __webpack_require__(6).getLongID
		var update = __webpack_require__(36)
	
		function classNames() {
		    var classes = []
		    for (var i = 0; i < arguments.length; i++) {
		        var arg = arguments[i]
		        var argType = typeof arg
		        if (argType === 'string' || argType === 'number' || arg === true) {
		            classes.push(arg)
		        } else if (Array.isArray(arg)) {
		            classes.push(classNames.apply(null, arg))
		        } else if (argType === 'object') {
		            for (var key in arg) {
		                if (arg.hasOwnProperty(key) && arg[key]) {
		                    classes.push(key)
		                }
		            }
		        }
		    }
	
		    return classes.join(' ')
		}
	
		var directives = avalon.directives
		avalon.directive('class', {
		    diff: function (copy, src, name) {
		        var type = name.slice(3)
		        var copyValue = copy[name]
		        var srcValue = src[name] || ''
	
		        if (!src.classEvent) {
		            var classEvent = {}
		            if (type === 'hover') {//在移出移入时切换类名
		                classEvent.mouseenter = activateClass
		                classEvent.mouseleave = abandonClass
		            } else if (type === 'active') {//在获得焦点时切换类名
		                src.props.tabindex = copy.props.tabindex || -1
		                classEvent.tabIndex = src.props.tabindex
		                classEvent.mousedown = activateClass
		                classEvent.mouseup = abandonClass
		                classEvent.mouseleave = abandonClass
		            }
		            src.classEvent = classEvent
		        }
	
		        var className = classNames(copyValue)
		        var uniq = {}, arr = []
		        className.replace(/\S+/g, function (el) {
		            if (!uniq[el]) {
		                uniq[el] = 1
		                arr.push(el)
		            }
		        })
		        
		        className = arr.join(' ')
		       
		        if (srcValue !== className) {
		            src[name] = className
		            src['change-' + type] = className
		            update(src, this.update, type)
		        }
		    },
		    update: function (dom, vdom) {
		        if (!dom || dom.nodeType !== 1)
		            return
		        var classEvent = vdom.classEvent
		        if (classEvent) {
		            for (var i in classEvent) {
		                if (i === 'tabIndex') {
		                    dom[i] = classEvent[i]
		                } else {
		                    avalon.bind(dom, i, classEvent[i])
		                }
		            }
		            vdom.classEvent = {}
		        }
		        var names = ['class', 'hover', 'active']
		        names.forEach(function (type) {
		            var name = 'change-' + type
		            var value = vdom[name]
		            if (value === void 0)
		                return
		            if (type === 'class') {
		                dom && setClass(dom, vdom)
		            } else {
		                var oldType = dom.getAttribute('change-' + type)
		                if (oldType) {
		                    avalon(dom).removeClass(oldType)
		                }
		                dom.setAttribute(name, value)
		            }
		        })
		    }
		})
	
		directives.active = directives.hover = directives['class']
	
	
		var classMap = {
		    mouseenter: 'change-hover',
		    mouseleave: 'change-hover',
		    mousedown: 'change-active',
		    mouseup: 'change-active'
		}
	
		function activateClass(e) {
		    var elem = e.target
		    avalon(elem).addClass(elem.getAttribute(classMap[e.type]) || '')
		}
	
		function abandonClass(e) {
		    var elem = e.target
		    var name = classMap[e.type]
		    avalon(elem).removeClass(elem.getAttribute(name) || '')
		    if (name !== 'change-active') {
		        avalon(elem).removeClass(elem.getAttribute('change-active') || '')
		    }
		}
	
		function setClass(dom, vdom) {
		    var old = dom.getAttribute('old-change-class')
		    var neo = vdom['ms-class']
		    if (old !== neo) {
		        avalon(dom).removeClass(old).addClass(neo)
		        dom.setAttribute('old-change-class', neo)
		    }
	
		}
	
		markID(activateClass)
		markID(abandonClass)
	
	
	
	
	/***/ },
	/* 53 */
	/***/ function(module, exports, __webpack_require__) {
	
		var markID = __webpack_require__(6).getLongID
		var Cache = __webpack_require__(28)
		var eventCache = new Cache(128)
		var quote = avalon.quote
		var update = __webpack_require__(36)
	
		//Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
		// The assumption is that future DOM event attribute names will begin with
		// 'on' and be composed of only English letters.
		var revent = /^ms-on-([a-z]+)/
		var rfilters = /\|.+/g
		var rvar = /((?:\@|\$|\#\#)?\w+)/g
		var rstring = __webpack_require__(47).string
		//基于事件代理的高性能事件绑定
		avalon.directive('on', {
		    priority: 3000,
		    parse: function (copy, src, binding) {
		        var underline = binding.name.replace('ms-on-', 'e').replace('-', '_')
		        var uuid = underline + '_' + binding.expr.
		                replace(/\s/g, '').
		                replace(/[^$a-z]/ig, function (e) {
		                    return e.charCodeAt(0)
		                })
	
		        var quoted = avalon.quote(uuid)
		        var fn = '(function(){\n' +
		                'var fn610 = ' +
		                avalon.parseExpr(binding, 'on') +
		                '\nfn610.uuid =' + quoted + ';\nreturn fn610})()'
		        copy.vmodel = '__vmodel__'
		        copy.local = '__local__'
		        copy[binding.name] = fn
	
		    },
		    diff: function (copy, src, name) {
		        var fn = copy[name]
		        var uuid = fn.uuid
		        var type = uuid.split('_').shift()
		        var search = type.slice(1) + ':' + uuid
		        var srcFn = src[name]
		        var hasChange = false
		        if (!srcFn || srcFn.uuid !== uuid) {
		            src[name] = fn
		            src.addEvents = src.addEvents || {}
		            src.addEvents[search] = fn
		            avalon.eventListeners.uuid = fn
		            hasChange = true
		        }
		        if (diffObj(src.local|| {}, copy.local)) {
		            hasChange = true
		        }
		        if (hasChange) {
		            src.local = copy.local
		            src.vmodel = copy.vmodel
		            update(src, this.update)
		        }
		    },
		    update: function (dom, vdom) {
		        if (!dom || dom.nodeType > 1) //在循环绑定中，这里为null
		            return
		        var key, type, listener
		        dom._ms_context_ = vdom.vmodel
		        dom._ms_local = vdom.local
		        for (key in vdom.addEvents) {
		            type = key.split(':').shift()
		            listener = vdom.addEvents[key]
		            avalon.bind(dom, type, listener)
		        }
		        delete vdom.addEvents
		    }
		})
	
		function diffObj(a, b) {
		    for (var i in a) {//diff差异点
		        if (a[i] !== b[i]) {
		            return true
		        }
		    }
		    return false
		}
	
	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {
	
		
		var update = __webpack_require__(36)
		var evaluatorPool = __webpack_require__(46)
		var stringify = __webpack_require__(50)
	
		var rchangeFilter = /\|\s*change\b/
		var rcheckedType = /^(?:checkbox|radio)$/
		var rdebounceFilter = /\|\s*debounce(?:\(([^)]+)\))?/
		var updateModelByEvent = __webpack_require__(55)
		var updateModelByValue = __webpack_require__(58)
		var updateModel = __webpack_require__(56)
		var updateView = __webpack_require__(59)
		var addValidateField = __webpack_require__(60)
	
	
		avalon.directive('duplex', {
		    priority: 2000,
		    parse: function (copy, src, binding) {
		        var expr = binding.expr
		        var etype = src.props.type
		        //处理数据转换器
		        var parser = binding.param, dtype
		        var isChecked = false
		        parser = parser ? parser.split('-').map(function (a) {
		            if (a === 'checked') {
		                isChecked = true
		            }
		            return a
		        }) : []
	
		        if (rcheckedType.test(etype) && isChecked) {
		            //如果是radio, checkbox,判定用户使用了checked格式函数没有
		            parser = []
		            dtype = 'radio'
		        }
	
		        if (!/input|textarea|select/.test(src.type)) {
		            if ('contenteditable' in src.props) {
		                dtype = 'contenteditable'
		            }
		        } else if (!dtype) {
		            dtype = src.type === 'select' ? 'select' :
		                    etype === 'checkbox' ? 'checkbox' :
		                    etype === 'radio' ? 'radio' :
		                    'input'
		        }
		        var isChanged = false, debounceTime = 0
		        //判定是否使用了 change debounce 过滤器
		        if (dtype === 'input' || dtype === 'contenteditable') {
		            var isString = true
		            if (rchangeFilter.test(expr)) {
		                isChanged = true
		            }
		            if (!isChanged) {
		                var match = expr.match(rdebounceFilter)
		                if (match) {
		                    debounceTime = parseInt(match[1], 10) || 300
		                }
		            }
		        }
	
	
		        var changed = copy.props['data-duplex-changed']
		        copy.parser = avalon.quote(parser + "")
		        copy.modelValue = '(' + avalon.parseExpr(binding, 'duplex') + ')(__vmodel__)'// 输出原始数据
		        var format = evaluatorPool.get('duplex:format:' + expr)
	
		        copy.duplexData = stringify({
		            type: dtype, //这个决定绑定什么事件
		            vmodel: '__vmodel__',
		            isChecked: isChecked,
		            isString: !!isString,
		            isChanged: isChanged, //这个决定同步的频数
		            debounceTime: debounceTime, //这个决定同步的频数
		            format: format || 'function(vm, a){return a}',
		            set: evaluatorPool.get('duplex:set:' + expr),
		            callback: changed ? avalon.parseExpr(changed, 'on') : 'avalon.noop'
		        })
	
		    },
		    diff: function (copy, src) {
	
		        if (!src.duplexData) {
		            //第一次为原始虚拟DOM添加duplexData
		            var data = src.duplexData = copy.duplexData
		            data.parser = copy.parser ? copy.parser.split(',') : []
		            data.parse = parseValue
		            var curValue = copy.modelValue
		        } else {
		            data = src.duplexData
		            var curValue = copy.modelValue
		            var preValue = data.modelValue
		            //#1502
		            if (!Array.isArray(curValue) &&
		                    curValue === preValue) {
		                return
		            }
		        }
		        copy.duplexData = 0
		        if (data.isString) {//输出到页面时要格式化
		            var value = data.parse(curValue)
		            if (value !== curValue) {
		                data.set(data.vmodel, value)
		                return
		            }
		            curValue = value
		        }
		        data.modelValue = curValue
		        if (data.isString) {//输出到页面时要格式化
		            value = data.format(data.vmodel, curValue + '')
		            if (value !== curValue + '') {
		                data.set(data.vmodel, value)
		                return
		            }
		            curValue = value
		        }
		        data.viewValue = curValue
		        update(src, this.update, 'afterChange')
		    },
		    update: function (dom, vdom) {
		        if (dom && dom.nodeType === 1) {
		            if (!dom.__ms_duplex__) {
		                dom.__ms_duplex__ = vdom.duplexData
		                updateModelByEvent(dom, vdom)
		            }
		            var data = dom.__ms_duplex__
	
		            data.dom = dom
		            addValidateField(dom, vdom)
		            if (data.isString
		                    && !avalon.msie
		                    && updateModelByValue === false
		                    && !dom.valueHijack) {
		                //chrome 42及以下版本需要这个hack
	
		                dom.valueHijack = updateModel
		                var intervalID = setInterval(function () {
		                    if (!avalon.contains(avalon.root, dom)) {
		                        clearInterval(intervalID)
		                    } else {
		                        dom.valueHijack()
		                    }
		                }, 30)
		            }
	
		            updateView[data.type].call(data)
		            if (dom.caret) {
		                var pos = data.caretPos
		                pos && data.setCaret(dom, pos.start, pos.end)
		                data.caretPos = null
		            }
	
		        }
	
		    }
		})
	
		function parseValue(val) {
		    for (var i = 0, k; k = this.parser[i++]; ) {
		        var fn = avalon.parsers[k]
		        if (fn) {
		            val = fn.call(this, val)
		        }
		    }
		    return val
		}
	
		/*
		 vm[ms-duplex]  →  原始modelValue →  格式化后比较   →   输出页面
		 ↑                                                ↓
		 比较modelValue  ←  parsed后得到modelValue  ← 格式化后比较 ←  原始viewValue
		 */
	
	/***/ },
	/* 55 */
	/***/ function(module, exports, __webpack_require__) {
	
		/* 
		 * 通过绑定事件同步vmodel
		 * 总共有三种方式同步视图
		 * 1. 各种事件 input, change, click, propertychange, keydown...
		 * 2. value属性重写
		 * 3. 定时器轮询
		 */
		var updateModel = __webpack_require__(56)
		var markID = __webpack_require__(6).getShortID
		var msie = avalon.msie
		var window = avalon.window
		var document = avalon.document
		function updateModelByEvent(node, vnode) {
		    var events = {}
		    var data = vnode.duplexData
		    data.update = updateModel
		    //添加需要监听的事件
		    switch (data.type) {
		        case 'radio':
		        case 'checkbox':
		            events.click = updateModel
		            break
		        case 'select':
		            events.change = updateModel
		            break
		        case 'contenteditable':
		            if (data.isChanged) {
		                events.blur = updateModel
		            } else {
		                if (avalon.modern) {
		                    if (window.webkitURL) {
		                        // http://code.metager.de/source/xref/WebKit/LayoutTests/fast/events/
		                        // https://bugs.webkit.org/show_bug.cgi?id=110742
		                        events.webkitEditableContentChanged = updateModel
		                    } else if (window.MutationEvent) {
		                        events.DOMCharacterDataModified = updateModel
		                    }
		                    events.input = updateModel
		                } else {
		                    events.keydown = updateModelKeyDown
		                    events.paste = updateModelDelay
		                    events.cut = updateModelDelay
		                    events.focus = closeComposition
		                    events.blur = openComposition
		                }
	
		            }
		            break
		        case 'input':
	
		            if (data.isChanged) {
		                events.change = updateModel
		            } else {
	
		                //http://www.cnblogs.com/rubylouvre/archive/2013/02/17/2914604.html
		                //http://www.matts411.com/post/internet-explorer-9-oninput/
		                if (avalon.msie < 10) {
	
		                    events.propertychange = updateModelHack
		                    if (msie > 7) {
		                        //IE8的propertychange有BUG,第一次用JS修改值时不会触发,而且你是全部清空value也不会触发
		                        events.keyup = updateModel
		                        events.keydown = updateModel
		                    }
		                    if (msie > 8) {
		                        //IE9的propertychange不支持自动完成,退格,删除,复制,贴粘,剪切或点击右边的小X的清空操作
		                        //它们可以能过window的selectionchange
		                        node.valueHijack = updateModel
		                        //当你选中一个input value值,将它拖到别处时
		                        events.dragend = updateModelDelay
		                    }
		                } else {
		                    events.input = updateModel
		                    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
		                    //如果当前浏览器支持Int8Array,那么我们就不需要以下这些事件来打补丁了
		                    if (!/\[native code\]/.test(window.Int8Array)) {
		                        events.keydown = updateModelKeyDown //safari < 5 opera < 11
		                        events.paste = updateModelDelay//safari < 5
		                        events.cut = updateModelDelay//safari < 5 
		                        if (window.netscape) {
		                            // Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete
		                            events.DOMAutoComplete = updateModel
		                        }
		                    }
		                    if (!avalon.msie) {
		                        //IE11微软拼音好像才会触发compositionstart 不会触发compositionend
		                        //https://github.com/RubyLouvre/avalon/issues/1368#issuecomment-220503284
		                        events.compositionstart = openComposition
		                        events.compositionend = closeComposition
		                    }
		                }
		            }
		            break
		    }
	
		    if (/password|text/.test(vnode.props.type)) {
		        events.focus = openCaret //判定是否使用光标修正功能 
		        events.blur = closeCaret
		        data.getCaret = getCaret
		        data.setCaret = setCaret
		    }
	
		    for (var name in events) {
		        avalon.bind(node, name, events[name])
		    }
		}
	
	
		function updateModelHack(e) {
		    if (e.propertyName === 'value') {
		        updateModel.call(this, e)
		    }
		}
	
		function updateModelDelay(e) {
		    var elem = this
		    setTimeout(function () {
		        updateModel.call(elem, e)
		    }, 17)
		}
	
	
		function openCaret() {
		    this.caret = true
		}
	
		function closeCaret() {
		    this.caret = false
		}
		function openComposition() {
		    this.composing = true
		}
	
		function closeComposition(e) {
		    this.composing = false
		}
		function updateModelKeyDown(e) {
		    var key = e.keyCode;
		    // ignore
		    //    command            modifiers                   arrows
		    if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40))
		        return
		    updateModelDelay.call(this, e)
		}
	
		markID(openCaret)
		markID(closeCaret)
		markID(openComposition)
		markID(closeComposition)
		markID(updateModel)
		markID(updateModelHack)
		markID(updateModelDelay)
		markID(updateModelKeyDown)
	
		if (msie >= 8 && msie < 10) {
		    avalon.bind(document, 'selectionchange', function (e) {
		        var el = document.activeElement || {}
		        if (!el.caret && el.valueHijack) {
		            el.valueHijack()
		        }
		    })
		}
	
		function getCaret(field) {
		    var start = NaN, end = NaN
		    if (field.setSelectionRange) {
		        start = field.selectionStart
		        end = field.selectionEnd
		    } else if (document.selection && document.selection.createRange) {
		        var range = document.selection.createRange()
		        start = 0 - range.duplicate().moveStart('character', -100000)
		        end = start + range.text.length
		    }
		    return {
		        start: start,
		        end: end
		    }
		}
	
		function setCaret(field, begin, end) {
		    if (!field.value || field.readOnly)
		        return
		    if (field.createTextRange) {//IE6-8
		        var range = field.createTextRange()
		        range.collapse(true)
		        range.moveStart('character', begin)
		        range.select()
		    } else {
		        field.selectionStart = begin
		        field.selectionEnd = end
		    }
		}
	
		module.exports = updateModelByEvent
	
	/***/ },
	/* 56 */
	/***/ function(module, exports, __webpack_require__) {
	
		var updateModelMethods = __webpack_require__(57)
		function updateModelHandle() {
		    var elem = this
		    var field = this.__ms_duplex__
		    if (elem.composing || elem.value === field.lastViewValue)
		        return
		    if (elem.caret) {
		        try {
		            var pos = field.getCaret(elem)
		            if (pos.start === pos.end || pos.start + 1 === pos.end) {
		                field.caretPos = pos
		            }
		        } catch (e) {
		            avalon.warn('fixCaret error', e)
		        }
		    }
		    if (field.debounceTime > 4) {
		        var timestamp = new Date()
		        var left = timestamp - field.time || 0
		        field.time = timestamp
		        if (left >= field.debounceTime) {
		            updateModelMethods[field.type].call(field)
		        } else {
		            clearTimeout(field.debounceID)
		            field.debounceID = setTimeout(function () {
		                updateModelMethods[field.type].call(field)
		            }, left)
		        }
		    } else {
		        updateModelMethods[field.type].call(field)
		    }
		}
	
		module.exports = updateModelHandle
	
	/***/ },
	/* 57 */
	/***/ function(module, exports) {
	
		var updateModelMethods = {
		    input: function (prop) {//处理单个value值处理
		        var data = this
		        prop = prop || 'value'
		        var rawValue = data.dom[prop]
		        
		        var parsedValue = data.parse(rawValue)
		        var formatedValue = data.format(data.vmodel, parsedValue)
		        //有时候parse后一致,vm不会改变,但input里面的值
		        if (parsedValue !== data.modelValue) {
		            data.set(data.vmodel, parsedValue)
		            callback(data)
		        }
		        data.lastViewValue = formatedValue
		        data.dom[prop] = formatedValue
		        
		        //vm.aaa = '1234567890'
		        //处理 <input ms-duplex='@aaa|limitBy(8)'/>{{@aaa}} 这种格式化同步不一致的情况 
	
		    },
		    radio: function () {
		        var data = this
		        if (data.isChecked) {
		            var val = !data.modelValue
		            data.set(data.vmodel, val)
		            callback(data)
		        } else {
		            updateModelMethods.input.call(data)
		            data.lastViewValue = NaN
		        }
		    },
		    checkbox: function () {
		        var data = this
		        var array = data.modelValue
		        if (!Array.isArray(array)) {
		            avalon.warn('ms-duplex应用于checkbox上要对应一个数组')
		            array = [array]
		        }
		        var method = data.dom.checked ? 'ensure' : 'remove'
		        
		        if (array[method]) {
		            var val = data.parse(data.dom.value)
		            array[method](val)
		            callback(data)
		        }
	
		    },
		    select: function () {
		        var data = this
		        var val = avalon(data.dom).val() //字符串或字符串数组
		        if (val + '' !== this.modelValue + '') {
		            if (Array.isArray(val)) { //转换布尔数组或其他
		                val = val.map(function (v) {
		                    return data.parse(v)
		                })
		            } else {
		                val = data.parse(val)
		            }
		            data.set(data.vmodel, val)
		            callback(data)
		        }
		    },
		    contenteditable: function () {
		        updateModelMethods.input.call(this, 'innerHTML')
		    }
		}
	
		function callback(data) {
		    if (data.callback) {
		        data.callback.call(data.vmodel, {
		            type: 'changed',
		            target: data.dom
		        })
		    }
		}
	
	
	
		module.exports = updateModelMethods
	
	
	/***/ },
	/* 58 */
	/***/ function(module, exports) {
	
		var valueHijack = false
		try { //#272 IE9-IE11, firefox
		    var setters = {}
		    var aproto = HTMLInputElement.prototype
		    var bproto = HTMLTextAreaElement.prototype
		    function newSetter(value) { // jshint ignore:line
		        setters[this.tagName].call(this, value)
		        if (!this.caret && this._ms_field_) {
		            this._ms_field_.update.call(this)
		        }
		    }
		    var inputProto = HTMLInputElement.prototype
		    Object.getOwnPropertyNames(inputProto) //故意引发IE6-8等浏览器报错
		    setters['INPUT'] = Object.getOwnPropertyDescriptor(aproto, 'value').set
	
		    Object.defineProperty(aproto, 'value', {
		        set: newSetter
		    })
		    setters['TEXTAREA'] = Object.getOwnPropertyDescriptor(bproto, 'value').set
		    Object.defineProperty(bproto, 'value', {
		        set: newSetter
		    })
		    valueHijack = true
		} catch (e) {
		    //在chrome 43中 ms-duplex终于不需要使用定时器实现双向绑定了
		    // http://updates.html5rocks.com/2015/04/DOM-attributes-now-on-the-prototype
		    // https://docs.google.com/document/d/1jwA8mtClwxI-QJuHT7872Z0pxpZz8PBkf2bGAbsUtqs/edit?pli=1
		}
		module.exports = valueHijack
	
	/***/ },
	/* 59 */
	/***/ function(module, exports) {
	
		
		var updateView = {
		    input: function () {//处理单个value值处理
		        this.dom.value = this.viewValue
		    },
		    radio: function () {//处理单个checked属性
		        var checked
		        if (this.isChecked) {
		            checked = !!this.modelValue
		        } else {
		            checked = this.viewValue + '' === this.dom.value
		        }
		        var dom = this.dom
		        if (avalon.msie === 6) {
		            setTimeout(function () {
		                //IE8 checkbox, radio是使用defaultChecked控制选中状态，
		                //并且要先设置defaultChecked后设置checked
		                //并且必须设置延迟
		                dom.defaultChecked = checked
		                dom.checked = checked
		            }, 31)
		        } else {
		            dom.checked = checked
		        }
		    },
		    checkbox: function () {//处理多个checked属性
		        var checked = false
		        var dom = this.dom
		        var value = dom.value
		        for (var i = 0; i < this.modelValue.length; i++) {
		            var el = this.modelValue[i]
		            if (el + '' === value) {
		                checked = true
		            }
		        }
		        dom.checked = checked
		    },
		    select: function () {//处理子级的selected属性
		        var a = Array.isArray(this.viewValue) ?
		                this.viewValue.map(String) : this.viewValue + ''
		        avalon(this.dom).val(a)
		    },
		    contenteditable: function () {//处理单个innerHTML
		        this.dom.innerHTML = this.viewValue
		        this.update.call(this.dom)
		    }
		}
	
		module.exports = updateView
	
	
	/***/ },
	/* 60 */
	/***/ function(module, exports) {
	
		
		module.exports = function addField(node, vnode) {
		    var field = node.__ms_duplex__
		    var rules = vnode['ms-rules']
		    if (rules && !field.validator) {
		        while (node && node.nodeType === 1) {
		            var validator = node._ms_validator_
		            if (validator) {
		                field.rules = rules
		                field.validator = validator
		                if(avalon.Array.ensure(validator.fields, field)){
		                    validator.addField(field)
		                }
		                break
		            }
		            node = node.parentNode
		        }
		    }
		}
	
	
	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {
	
		var update = __webpack_require__(36)
	
		var dir = avalon.directive('validate', {
		//验证单个表单元素
		    diff: function (copy, src, name) {
		        var validator = copy[name]
		        var p = src[name]
		        if (p && p.onError && p.addField) {
		            return
		        } else if (Object(validator) === validator) {
		            if(validator.$id){//转换为普通对象
		                validator = validator.$model
		            }
		            src[name] = validator
		            for(var name in dir.defaults){
		                if(!validator.hasOwnProperty(name)){
		                    validator[name] = dir.defaults[name]
		                }
		            }
		            validator.fields = validator.fields || []
		            update(src, this.update)
	
		        }
		    },
		    update: function (node, vnode) {
		        var validator = vnode['ms-validate']
		        node._ms_validator_ = validator
		        validator.dom = node
		        node.setAttribute("novalidate", "novalidate");
		        if (validator.validateAllInSubmit) {
		            avalon.bind(node, "submit", function (e) {
		                e.preventDefault()
		                dir.validateAll.call(validator, validator.onValidateAll)
		            })
		        }
		        if (typeof validator.onInit === "function") { //vmodels是不包括vmodel的
		            validator.onInit.call(node)
		        }
		    },
		    validateAll: function (callback) {
		        var validator = this
		        var fn = typeof callback === "function" ? callback : validator.onValidateAll
		        var promise = validator.fields.filter(function (field) {
		            var el = field.dom
		            return el && !el.disabled && validator.dom.contains(el)
		        }).map(function (field) {
		            return dir.validate(field, true)
		        })
		        var reasons = []
		        Promise.all(promise).then(function (array) {
		            for (var i = 0, el; el = array[i++]; ) {
		                reasons = reasons.concat(el)
		            }
		            if (validator.deduplicateInValidateAll) {
		                var uniq = {}
		                reasons = reasons.filter(function (field) {
		                    var el = field.dom
		                    var uuid = el.uniqueID || (el.uniqueID = setTimeout("1"))
		                    if (uniq[uuid]) {
		                        return false
		                    } else {
		                        uniq[uuid] = true
		                        return true
		                    }
		                })
		            }
		            fn.call(validator.dom, reasons) //这里只放置未通过验证的组件
		        })
		    },
		    addField: function (field) {
		        var validator = this
		        var node = field.dom
		        if (validator.validateInKeyup && (!field.isChanged &&!field.debounceTime)) {
		            avalon.bind(node, 'keyup', function (e) {
		                 dir.validate(field, 0, e)
		            })
		        }
		        if (validator.validateInBlur) {
		            avalon.bind(node, 'blur', function (e) {
		                dir.validate(field, 0, e)
		            })
		        }
		        if (validator.resetInFocus) {
		            avalon.bind(node, 'focus', function (e) {
		                validator.onReset.call(node, e, field)
		            })
		        }
		    },
		    validate: function (field, isValidateAll, event) {
		        var promises = []
		        var value = field.modelValue
		        var elem = field.dom
		        var validator = field.validator
		        if (elem.disabled)
		            return
		        for (var ruleName in field.rules) {
		            var ruleValue = field.rules[ruleName]
		            if (ruleValue === false)
		                continue
		            var hook = avalon.validators[ruleName]
		            var resolve, reject
		            promises.push(new Promise(function (a, b) {
		                resolve = a
		                reject = b
		            }))
		            var next = function (a) {
		                if (field.norequired && value === "") {
		                    a = true
		                }
		                if (a) {
		                    resolve(true)
		                } else {
		                    var reason = {
		                        element: elem,
		                        data: field.data,
		                        message: elem.getAttribute("data-" + ruleName + "-message") || elem.getAttribute("data-message") || hook.message,
		                        validateRule: ruleName,
		                        getMessage: getMessage
		                    }
		                    resolve(reason)
		                }
		            }
		            field.data = {}
		            field.data[ruleName] = ruleValue
		            hook.get(value, field, next)
		        }
		        var reasons = []
		        //如果promises不为空，说明经过验证拦截器
		        var lastPromise = Promise.all(promises).then(function (array) {
		            for (var i = 0, el; el = array[i++]; ) {
		                if (typeof el === "object") {
		                    reasons.push(el)
		                }
		            }
		            if (!isValidateAll) {
		                if (reasons.length) {
		                    validator.onError.call(elem, reasons, event)
		                } else {
		                    validator.onSuccess.call(elem, reasons, event)
		                }
		                validator.onComplete.call(elem, reasons, event)
		            }
		            return reasons
		        })
		        return lastPromise
		    }
		})
	
		var rformat = /\\?{{([^{}]+)\}}/gm
	
		function getMessage() {
		    var data = this.data || {}
		    return this.message.replace(rformat, function (_, name) {
		        return data[name] == null ? "" : data[name]
		    })
		}
		dir.defaults = {
		    addField: dir.addField,
		    onError: avalon.noop,
		    onSuccess: avalon.noop,
		    onComplete: avalon.noop,
		    onReset: avalon.noop,
		    validateInBlur: true, //@config {Boolean} true，在blur事件中进行验证,触发onSuccess, onError, onComplete回调
		    validateInKeyup: true, //@config {Boolean} true，在keyup事件中进行验证,触发onSuccess, onError, onComplete回调
		    validateAllInSubmit: true, //@config {Boolean} true，在submit事件中执行onValidateAll回调
		    resetInFocus: true, //@config {Boolean} true，在focus事件中执行onReset回调,
		    deduplicateInValidateAll: false //@config {Boolean} false，在validateAll回调中对reason数组根据元素节点进行去重
		}
	
	/***/ },
	/* 62 */
	/***/ function(module, exports) {
	
		avalon.directive('rules', {
		     parse: function (copy, src, binding) {
		        var rules = binding.expr
		        if (/{.+}/.test(rules)) {
		           copy[binding.name] = avalon.parseExpr(binding)
		        }
		    },
		    diff: function(copy, src, name){
		        src[name] = copy[name]
		    }
		})
		function isRegExp(value) {
		    return avalon.type(value) === 'regexp'
		}
		var rmail = /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/i
		var rurl = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/
		function isCorrectDate(value) {
		    if (typeof value === "string" && value) { //是字符串但不能是空字符
		        var arr = value.split("-") //可以被-切成3份，并且第1个是4个字符
		        if (arr.length === 3 && arr[0].length === 4) {
		            var year = ~~arr[0] //全部转换为非负整数
		            var month = ~~arr[1] - 1
		            var date = ~~arr[2]
		            var d = new Date(year, month, date)
		            return d.getFullYear() === year && d.getMonth() === month && d.getDate() === date
		        }
		    }
		    return false
		}
		avalon.shadowCopy(avalon.validators, {
		    pattern: {
		        message: '必须匹配{{pattern}}这样的格式',
		        get: function (value, field, next) {
		            var elem = field.element
		            var data = field.data
		            if (!isRegExp(data.pattern)) {
		                var h5pattern = elem.getAttribute("pattern")
		                data.pattern = new RegExp('^(?:' + h5pattern + ')$')
		            }
		            next(data.pattern.test(value))
		            return value
		        }
		    },
		    digits: {
		        message: '必须整数',
		        get: function (value, field, next) {//整数
		            next(/^\-?\d+$/.test(value))
		            return value
		        }
		    },
		    number: {
		        message: '必须数字',
		        get: function (value, field, next) {//数值
		            next(isFinite(value))
		            return value
		        }
		    },
		    required: {
		        message: '必须填写',
		        get: function (value, field, next) {
		            next(value !== "")
		            return value
		        }
		    },
		    equalto: {
		        message: '密码输入不一致',
		        get: function (value, field, next) {
		            var id = String(field.data.equalto)
		            var other = avalon(document.getElementById(id)).val() || ""
		            next(value === other)
		            return value
		        }
		    },
		    date: {
		        message: '日期格式不正确',
		        get: function (value, field, next) {
		            var data = field.data
		            if (avalon.type(data.date) === 'regexp') {
		                next(data.date.test(value))
		            } else {
		                next(isCorrectDate(value))
		            }
		            return value
		        }
		    },
		    url: {
		        message: 'URL格式不正确',
		        get: function (value, field, next) {
		            next(rurl.test(value))
		            return value
		        }
		    },
		    email: {
		        message: 'email格式不正确',
		        get: function (value, field, next) {
		            next(rmail.test(value))
		            return value
		        }
		    },
		    minlength: {
		        message: '最少输入{{minlength}}个字',
		        get: function (value, field, next) {
		            var num = parseInt(field.data.minlength, 10)
		            next(value.length >= num)
		            return value
		        }
		    },
		    maxlength: {
		        message: '最多输入{{maxlength}}个字',
		        get: function (value, field, next) {
		            var num = parseInt(field.data.maxlength, 10)
		            next(value.length <= num)
		            return value
		        }
		    },
		    min: {
		        message: '输入值不能小于{{min}}',
		        get: function (value, field, next) {
		            var num = parseInt(field.data.min, 10)
		            next(parseFloat(value) >= num)
		            return value
		        }
		    },
		    max: {
		        message: '输入值不能大于{{max}}',
		        get: function (value, field, next) {
		            var num = parseInt(field.data.max, 10)
		            next(parseFloat(value) <= num)
		            return value
		        }
		    },
		    chs: {
		        message: '必须是中文字符',
		        get: function (value, field, next) {
		            next(/^[\u4e00-\u9fa5]+$/.test(value))
		            return value
		        }
		    }
		})
	
	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {
	
		var update = __webpack_require__(36)
		//ms-imporant ms-controller ms-for ms-widget ms-effect ms-if   ...
		avalon.directive('if', {
		    priority: 6,
		    diff: function (copy, src, name) {
		        var c = !!copy[name]
		        if (!c) {
		            copy.nodeType = 8
		            copy.order = ""
		        }
		        if (c !== src[name]) {
		            src[name] = c
		            if (c && src.nodeType === 1) {
		                return
		            }
		            update(src, this.update)
		        }
		    },
		    update: function (dom, vdom, parent) {
		        var show = vdom['ms-if']
		        if (show) {
		            //要移除元素节点,在对应位置上插入注释节点
		            //console.log(vdom.nodeType,vdom.dom)
		            vdom.nodeType = 1
		            var comment = vdom.comment
		            parent = comment.parentNode
		            parent.replaceChild(dom, comment)
		            avalon.applyEffect(dom, vdom, {
		                hook: 'onEnterDone'
		            })
		        } else {
	
		            avalon.applyEffect(dom, vdom, {
		                hook: 'onLeaveDone',
		                cb: function () {
		                    var comment = document.createComment('ms-if')
		                    //去掉注释节点临时添加的ms-effect
		                    parent.replaceChild(comment, dom)
		                    //comment.parentNode = parent
		                    vdom.nodeType = 8
		                    vdom.comment = comment
		                }
		            })
		        }
		    }
		})
	
	
	
	/***/ },
	/* 64 */
	/***/ function(module, exports, __webpack_require__) {
	
		var rforPrefix = /ms-for\:\s*/
		var rforLeft = /^\s*\(\s*/
		var rforRight = /\s*\)\s*$/
		var rforSplit = /\s*,\s*/
		var rforAs = /\s+as\s+([$\w]+)/
		var rident = __webpack_require__(47).ident
		var update = __webpack_require__(36)
	
		var rinvalid = /^(null|undefined|NaN|window|this|\$index|\$id)$/
		var reconcile = __webpack_require__(51)
		var Cache = __webpack_require__(28)
		var cache = new Cache(100)
	
		function enterAction(src, key) {
		    var tmpl = src.template + '<!--' + src.signature + '-->'
		    var t = cache.get(tmpl)
		    if (!t) {
		        var vdomTemplate = avalon.lexer(tmpl)
		        avalon.speedUp(vdomTemplate)
		        t = cache.put(tmpl, vdomTemplate)
		    }
		    return {
		        action: 'enter',
		        children: avalon.mix(true, [], t),
		        key: key
		    }
		}
	
		function getTraceKey(item) {
		    var type = typeof item
		    return item && type === 'object' ? item.$hashcode : type + ':' + item
		}
		//IE6-8,function后面没有空格
		var rfunction = /^\s*function\s*\(([^\)]+)\)/
		avalon._each = function (obj, fn, local, vnodes) {
		    var repeat = []
		    vnodes.push(repeat)
		    var str = (fn + "").match(rfunction)
		    var args = str[1]
		    var arr = args.match(avalon.rword)
		    if (Array.isArray(obj)) {
		        for (var i = 0; i < obj.length; i++) {
		            iterator(i, obj[i], local, fn, arr[0], arr[1], repeat, true)
		        }
		    } else {
		        for (var i in obj) {
		            if (obj.hasOwnProperty(i)) {
		                iterator(i, obj[i], local, fn, arr[0], arr[1], repeat)
		            }
		        }
		    }
		}
	
		function iterator(index, item, vars, fn, k1, k2, repeat, isArray) {
		    var key = isArray ? getTraceKey(item) : index
		    var local = {}
		    local[k1] = index
		    local[k2] = item
		    for (var k in vars) {
		        if (!(k in local)) {
		            local[k] = vars[k]
		        }
		    }
		    fn(index, item, key, local, repeat)
		}
	
	
		avalon.directive('for', {
		    priority: 3,
		    parse: function (copy, src, binding) {
		        var str = src.nodeValue, aliasAs
		        str = str.replace(rforAs, function (a, b) {
		            if (!rident.test(b) || rinvalid.test(b)) {
		                avalon.error('alias ' + b + ' is invalid --- must be a valid JS identifier which is not a reserved name.')
		            } else {
		                aliasAs = b
		            }
		            return ''
		        })
	
		        var arr = str.replace(rforPrefix, '').split(' in ')
		        var assign = 'var loop = ' + avalon.parseExpr(arr[1]) + ' \n'
		        var alias = aliasAs ? 'var ' + aliasAs + ' = loop\n' : ''
		        var kv = arr[0].replace(rforLeft, '').replace(rforRight, '').split(rforSplit)
	
		        if (kv.length === 1) {//确保avalon._each的回调有三个参数
		            kv.unshift('$key')
		        }
		        kv.push('traceKey')
		        kv.push('__local__')
		        kv.push('vnodes')
		        src.$append = assign + alias + 'avalon._each(loop,function('
		                + kv.join(', ') + '){\n'
		                + (aliasAs ? '__local__[' + avalon.quote(aliasAs) + ']=loop\n' : '')
	
		    },
		    diff: function (copy, src, curRepeat, preRepeat, end) {
		        //将curRepeat转换成一个个可以比较的component,并求得compareText
		        preRepeat = preRepeat || []
		        //preRepeat不为空时
		        src.preRepeat = preRepeat
		        var curItems = prepareCompare(curRepeat, copy)
		        if (src.compareText === copy.compareText) {
		            //如果个数与key一致,那么说明此数组没有发生排序,立即返回
		            return
		        }
		        if (!src.preItems) {
		            src.preItems = prepareCompare(preRepeat, src)
		        }
		        src.compareText = copy.compareText
		        //for指令只做添加删除操作
		        var cache = src.cache
		        var i, c, p
		        
		         function enterAction2(src, key) {//IE6-8下不能使用缓存
		                var template = src.template + '<!--' + src.signature + '-->'
		                var vdomTemplate = avalon.lexer(template)
		                avalon.speedUp(vdomTemplate)
		            return {
		                action: 'enter',
		                children: vdomTemplate,
		                key: key
		            }
		        }
		        if(avalon.msie <= 8){
		            enterAction = enterAction2
		        }
	
		        if (!cache || isEmptyObject(cache)) {
		            /* eslint-disable no-cond-assign */
		            var cache = src.cache = {}
		            src.preItems.length = 0
		            for (i = 0; c = curItems[i]; i++) {
		                var p = enterAction(src, c.key)
		                src.preItems.push(p)
		                p.action = 'enter'
		                p.index = i
		                saveInCache(cache, p)
		            }
		            src.removes = []
		            /* eslint-enable no-cond-assign */
		        } else {
		            var newCache = {}
		            /* eslint-disable no-cond-assign */
		            var fuzzy = []
		            for (i = 0; c = curItems[i++]; ) {
		                var p = isInCache(cache, c.key)
		                if (p) {
		                    p.action = 'move'
		                    p.oldIndex = p.index
		                    p.index = c.index
		                    saveInCache(newCache, p)
		                } else {
		                    //如果找不到就进行模糊搜索
		                    fuzzy.push(c)
		                }
	
		            }
		            for (var i = 0, c; c = fuzzy[i++]; ) {
		                p = fuzzyMatchCache(cache, c.key)
		                if (p) {
		                    p.action = 'move'
		                    // clearData(p.children)
		                    p.oldIndex = p.index
	
		                    p.index = c.index
		                } else {
		                    p = enterAction(src, c.key)
		                    p.index = c.index
		                    src.preItems.push(p)
		                }
		                saveInCache(newCache, p)
		            }
		            src.preItems.sort(function (a, b) {
		                return a.index > b.index
		            })
	
		            /* eslint-enable no-cond-assign */
		            src.cache = newCache
		            var removes = []
	
		            for (var i in cache) {
		                p = cache[i]
		                p.action = 'leave'
		                removes.push(p)
		                if (p.arr) {
		                    p.arr.forEach(function (m) {
		                        m.action = 'leave'
		                        removes.push(m)
		                    })
		                    delete p.arr
		                }
		            }
		            src.removes = removes
		        }
	
		        var cb = avalon.caches[src.cid]
		        var vm = copy.vmodel
		        if (end && cb) {
		            end.afterChange = [function (dom) {
		                    cb.call(vm, {
		                        type: 'rendered',
		                        target: dom,
		                        signature: src.signature
		                    })
		                }]
		        }
	
		        update(src, this.update)
		        return true
	
		    },
		    update: function (dom, vdom, parent) {
		        var key = vdom.signature
		        var range = getEndRepeat(dom)
		        var doms = range.slice(1, -1)
		        var endRepeat = range.pop()
		        var DOMs = splitDOMs(doms, key)
		        var check = doms[doms.length - 1]
		        if (check && check.nodeValue !== key) {
		            do {//去掉最初位于循环节点中的内容
		                var prev = endRepeat.previousSibling
		                if (prev === dom || prev.nodeValue === key) {
		                    break
		                }
		                if (prev) {
		                    parent.removeChild(prev)
		                } else {
		                    break
		                }
		            } while (true);
		        }
		        for (var i = 0, el; el = vdom.removes[i++]; ) {
		            var removeNodes = DOMs[el.index]
		            if (removeNodes) {
		                removeNodes.forEach(function (n, k) {
		                    if (n.parentNode) {
		                        avalon.applyEffect(n, el.children[k], {
		                            hook: 'onLeaveDone',
		                            cb: function () {
		                                n.parentNode.removeChild(n)
		                            },
		                            staggerKey: key + 'leave'
		                        })
		                    }
		                })
		                el.children.length = 0
		            }
		        }
		        vdom.removes = []
		        var insertPoint = dom
		        var fragment = avalon.avalonFragment
		        var domTemplate
		        var keep = []
		        for (var i = 0; i < vdom.preItems.length; i++) {
		            var com = vdom.preItems[i]
		            var children = com.children
		            if (com.action === 'leave') {
		                continue
		            }
		            keep.push(com)
		            if (com.action === 'enter') {
		                if (!domTemplate) {
		                    //创建用于拷贝的数据,包括虚拟DOM与真实DOM 
		                    domTemplate = avalon.vdomAdaptor(children, 'toDOM')
		                }
		                var newFragment = domTemplate.cloneNode(true)
		                var cnodes = avalon.slice(newFragment.childNodes)
		                reconcile(cnodes, children, parent)//关联新的虚拟DOM与真实DOM
		                parent.insertBefore(newFragment, insertPoint.nextSibling)
		                applyEffects(cnodes, children, {
		                    hook: 'onEnterDone',
		                    staggerKey: key + 'enter'
		                })
		            } else if (com.action === 'move') {
	
		                var cnodes = DOMs[com.oldIndex] || []
		                if (com.index !== com.oldIndex) {
		                    var moveFragment = fragment.cloneNode(false)
		                    for (var k = 0, cc; cc = cnodes[k++]; ) {
		                        moveFragment.appendChild(cc)
		                    }
		                    parent.insertBefore(moveFragment, insertPoint.nextSibling)
		                   // reconcile(cnodes, children, parent)
		                    applyEffects(cnodes, children, {
		                        hook: 'onMoveDone',
		                        staggerKey: key + 'move'
		                    })
		                }
		            }
	
		            insertPoint = cnodes[cnodes.length - 1]
	
		            if (!insertPoint) {
		                break
		            }
		        }
		        
		        vdom.preRepeat.length = 0
		        vdom.preItems.length = 0
		        keep.forEach(function (el) {
		            vdom.preItems.push(el)
		            range.push.apply(vdom.preRepeat, el.children)
		        })
	
		    }
	
		})
	
		function isEmptyObject(a) {
		    for (var i in a) {
		        return false
		    }
		    return true
		}
		function splitDOMs(nodes, signature) {
		    var items = []
		    var item = []
		    for (var i = 0, el; el = nodes[i++]; ) {
		        if (el.nodeType === 8 && el.nodeValue === signature) {
		            item.push(el)
		            items.push(item)
		            item = []
		        } else {
		            item.push(el)
		        }
		    }
		    return items
		}
	
		//将要循环的节点根据锚点元素再分成一个个更大的单元,用于diff
		function prepareCompare(nodes, cur) {
		    var splitText = cur.signature
		    var items = []
		    var keys = []
		    var com = {
		        children: []
		    }
	
		    for (var i = 0, el; el = nodes[i]; i++) {
		        if (el.nodeType === 8 && el.nodeValue === splitText) {
		            com.children.push(el)
		            com.key = el.key
		            keys.push(el.key)
		            com.index = items.length
		            items.push(com)
		            com = {
		                children: []
		            }
		        } else {
		            com.children.push(el)
		        }
		    }
	
		    cur.compareText = keys.length + '|' + keys.join(';;')
		    return items
		}
	
	
		function getEndRepeat(node) {
		    var isBreak = 0, ret = []
		    while (node) {
		        if (node.nodeType === 8) {
		            if (node.nodeValue.indexOf('ms-for:') === 0) {
		                ++isBreak
		            } else if (node.nodeValue.indexOf('ms-for-end:') === 0) {
		                --isBreak
		            }
		        }
		        ret.push(node)
		        node = node.nextSibling
		        if (isBreak === 0) {
		            break
		        }
		    }
		    return ret
		}
	
	
		var rfuzzy = /^(string|number|boolean)/
		var rkfuzzy = /^_*(string|number|boolean)/
		function fuzzyMatchCache(cache, id) {
		    var m = id.match(rfuzzy)
		    if (m) {
		        var fid = m[1]
		        for (var i in cache) {
		            var n = i.match(rkfuzzy)
		            if (n && n[1] === fid) {
		                return isInCache(cache, i)
		            }
		        }
		    }
		}
	
		// 新位置: 旧位置
		function isInCache(cache, id) {
		    var c = cache[id]
		    if (c) {
		        var arr = c.arr
		        if (arr) {
		            var r = arr.pop()
		            if (!arr.length) {
		                c.arr = 0
		            }
		            return r
		        }
		        delete cache[id]
		        return c
		    }
		}
		//[1,1,1] number1 number1_ number1__
		function saveInCache(cache, component) {
		    var trackId = component.key
		    if (!cache[trackId]) {
		        cache[trackId] = component
		    } else {
		        var c = cache[trackId]
		        var arr = c.arr || (c.arr = [])
		        arr.push(component)
		    }
		}
		var applyEffects = function (nodes, vnodes, opts) {
		    vnodes.forEach(function (el, i) {
		        avalon.applyEffect(nodes[i], vnodes[i], opts)
		    })
		}
	
	
	/***/ },
	/* 65 */
	/***/ function(module, exports, __webpack_require__) {
	
		var update = __webpack_require__(36)
		var reconcile = __webpack_require__(51)
		var createComponent = __webpack_require__(66)
	
		avalon.component = function (name, definition) {
		    //这是定义组件的分支,并将列队中的同类型对象移除
		    if (!avalon.components[name]) {
		        avalon.components[name] = definition
		    }//这里没有返回值
		}
		avalon.directive('widget', {
		    parse: function (copy, src, binding) {
		        src.wid = src.wid || avalon.makeHashCode('w')
		        //将渲染函数的某一部分存起来,渲在c方法中转换为函数
		        copy[binding.name] = avalon.parseExpr(binding)
		        copy.vmodel = '__vmodel__'
		        copy.local = '__local__'
		    },
		    define: function () {
		        return avalon.mediatorFactory.apply(this, arguments)
		    },
		    diff: function (copy, src, name) {
		        var a = copy[name]
		        var p = src[name]
		        src.vmodel = copy.vmodel
		        src.local = copy.local
		        src.copy = copy
		        if (Object(a) === a) {
		            a = a.$model || a//安全的遍历VBscript
		            if (Array.isArray(a)) {//转换成对象
		                a = avalon.mix.apply({}, a)
		            }
	
		            var is = a.is || src.props.is
		            if (!src[is + "-vm"]) {
		                if (!createComponent(src, copy, is)) {
	
		                    //替换成注释节点
		                    update(src, this.mountComment)
		                    return
		                }
		            }
		            var renderComponent = src[is + '-vm'].$render
		            var newTree = renderComponent(src[is + '-vm'], src.local)
	
		            var componentRoot = newTree[0]
		            if (componentRoot && isComponentReady(componentRoot)) {
		                if (src[is + '-mount']) {//update
		                    updateCopy(copy, componentRoot)
		                    update(src, this.updateComponent)
		                } else {//mount
		                    src.copy = copy
		                    src.newCopy = componentRoot
		                    update(src, this.mountComponent)
		                }
		            } else {
		                update(src, this.mountComment)
		            }
	
		        }
		    },
		    mountComment: function (dom, vdom, parent) {
		        var copy = vdom.copy
		        copy.nodeType = vdom.nodeType = 8
		        copy.nodeValue = vdom.nodeType = 'unresolved component placeholder'
		        copy.children = []
		        var comment = document.createComment(copy.nodeValue)
		        vdom.dom = comment
		        parent.replaceChild(comment, dom)
		    },
		    updateComponent: function (dom, vdom) {
		        var is = vdom.is
		        var vm = vdom[is + '-vm']
		        var viewChangeObservers = vm.$events.onViewChange
		        if (viewChangeObservers && viewChangeObservers.length) {
		            update(vdom, viewChangeHandle, 'afterChange')
		        }
		    },
		    
		    mountComponent: function (dom, vdom, parent) {
		        var is = vdom.is
	
		        var vm = vdom[is + '-vm']
		        var copy = vdom.copy
		        var newCopy = vdom.newCopy
		        delete vdom.newCopy
		        var scope = avalon.scopes[vm.$id]
		        if (scope && scope.vmodel) {         
		            var com = scope.vmodel.$element
		            newCopy = com.vtree[0]
		            updateCopy(vdom, newCopy)
		            parent.replaceChild(com, dom)
		            com.vtree = [vdom]
		            vdom[is + '-vm'] = scope.vmodel
		            vdom[is + '-mount'] = true
		            return
		        }
		        //更新原始虚拟DOM树
		        updateCopy(copy, newCopy )  
		        var vtree = vdom[is + '-vtree']
		        //更新另一个刷数据用的虚拟DOM树
		        updateCopy(vdom, vtree[0] )
		        var com = avalon.vdomAdaptor(vdom, 'toDOM')
		        vm.$fire('onInit', {
		            type: 'init',
		            vmodel: vm,
		            is: is
		        })
		        reconcile([com], [vdom])
		        parent.replaceChild(com, dom)
		        vdom.dom = com
		        avalon.onComponentDispose(com)
		       
		        
		        vdom[is + '-mount'] = true
		        //--------------
		        vm.$element = com
		        com.vtree = [vdom]
		        avalon.scopes[vm.$id] = {
		            vmodel: vm,
		            isMount: 2,
		            local: vdom.local
		        }
		        //--------------
		        update(vdom, function () {
		            vm.$fire('onReady', {
		                type: 'ready',
		                target: com,
		                vmodel: vm,
		                is: is
		            })
		        }, 'afterChange')
	
		        update(vdom, function () {
		            vdom[is + '-html'] = avalon.vdomAdaptor(vdom, 'toHTML')
		        }, 'afterChange')
	
		    }
		})
	
		function updateCopy(copy, newCopy) {
		    copy.children = []
		    avalon.mix(copy, newCopy)
		    copy.local = copy.isVoidTag = copy.skipContent = 0
		}
	
		function viewChangeHandle(dom, vdom) {
		    var is = vdom.is
		    var vm = vdom[is + '-vm']
		    var preHTML = vdom[is + '-html']
		    var curHTML = avalon.vdomAdaptor(vdom, 'toHTML')
		    if (preHTML !== curHTML) {
		        vdom[is + '-html'] = curHTML
		        vm.$fire('onViewChange', {
		            type: 'viewchange',
		            target: dom,
		            vmodel: vm,
		            is: is
		        })
		    }
		}
	
	
	
		function isComponentReady(vnode) {
		    var isReady = true
		    try {
		        hasUnresolvedComponent(vnode)
		    } catch (e) {
		        isReady = false
		    }
		    return isReady
		}
	
		function hasUnresolvedComponent(vnode) {
		    vnode.children.forEach(function (el) {
		        if (el.nodeType === 8) {
		            if (el.nodeValue === 'unresolved component placeholder') {
		                throw 'unresolved'
		            }
		        } else if (el.children) {
		            hasUnresolvedComponent(el)
		        }
		    })
		}
	
	/***/ },
	/* 66 */
	/***/ function(module, exports, __webpack_require__) {
	
		var skipArray = __webpack_require__(67)
	
		var componentContainers = {wbr: 1, xmp: 1, template: 1}
		var events = 'onInit,onReady,onViewChange,onDispose'
		var componentEvents = avalon.oneObject(events)
		var protected = events.split(',').concat('is', 'define')
	
		function createComponent(src, copy, is) {
		    var type = src.type
		    //判定用户传入的标签名是否符合规格
		    if (!componentContainers[type] && !isCustomTag(type)) {
		        avalon.warn(type + '不合适做组件的标签')
		        return
		    }
		    //开始初始化组件
		    var hooks = {}
		    //用户只能操作顶层VM
		    //只有$id,is的对象就是emptyOption
		    var rawOption = copy['ms-widget']
		    var isEmpty = false
		    if (!rawOption) {
		        isEmpty = true
		        options = []
		    } else {
		        var options = [].concat(rawOption)
		        options.forEach(function (a) {
		            if (a && typeof a === 'object') {
		                mixinHooks(hooks, (a.$model || a), true)
		            }
		        })
		        isEmpty = isEmptyOption(hooks)
		    }
		    var definition = avalon.components[is]
		    //初始化组件失败,因为连组件的定义都没有加载
		    if (!definition) {
		        return
		    }
		    var skipProps = protected.concat()
		    //得到组件在顶层vm的配置对象名
		    var configName = is.replace(/-/g, '_')
	
		    var topVm = copy.vmodel
		    try {//如果用户在ms-widget没定义东西那么从vm中取默认东西
		        var vmOption = topVm[configName]
		        if (isEmpty && vmOption && typeof vmOption === 'object') {
		            hooks = {}
		            options = [vmOption]
		            mixinHooks(hooks, vmOption.$model || vmOption, true)
		            skipProps.push(configName)
		        }
		    } catch (e) {
		    }
	
	
		    //将用户声明组件用的自定义标签(或xmp.template)的template转换成虚拟DOM
		    if (componentContainers[type] && src.children[0]) {
		        src.children = avalon.lexer(src.children[0].nodeValue)
		    }
		    src.isVoidTag = src.skipContent = 0
	
		    //开始构建组件的vm的配置对象
	
		    var define = hooks.define
		    define = define || avalon.directives.widget.define
	
		    var $id = hooks.$id || src.wid
	
		    var defaults = avalon.mix(true, {}, definition.defaults)
		    mixinHooks(hooks, defaults, false)
	
		    var vmodel = define.apply(function (a, b) {
		        skipProps.forEach(function (k) {
		            delete a[k]
		            delete b[k]
		        })
		    }, [topVm, defaults].concat(options))
	
		    if (!avalon.modern) {//增强对IE的兼容
		        for (var i in vmodel) {
		            if (!skipArray[i] && typeof vmodel[i] === 'function') {
		                vmodel[i] = vmodel[i].bind(vmodel)
		            }
		        }
		    }
	
		    vmodel.$id = $id
	
		    //开始构建组件的虚拟DOM
		    var finalTemplate = definition.template.trim()
		    if (typeof definition.getTemplate === 'function') {
		        finalTemplate = definition.getTemplate(vmodel, finalTemplate)
		    }
	
		    var vtree = avalon.lexer(finalTemplate)
		    if (vtree.length > 1) {
		        avalon.error('组件必须用一个元素包起来')
		    }
	
		    var componentRoot = vtree[0]
	
		    avalon.vmodels[$id] = vmodel
	
		    //将用户标签中的属性合并到组件标签的属性里
		    avalon.mix(componentRoot.props, src.props)
		    delete componentRoot.props['ms-widget']
		    componentRoot.props.wid = $id
		    //抽取用户标签里带slot属性的元素,替换组件的虚拟DOM树中的slot元素
	
		    if (definition.soleSlot) {
		        var slots = {}
		        var slotName = definition.soleSlot
		        slots[slotName] = /\S/.test(src.template) ?
		                src.children : newText(slotName)
		        mergeTempale(vtree, slots)
		    } else if (!src.isVoidTag) {
		        insertSlots(vtree, src, definition.soleSlot)
		    }
		    avalon.speedUp(vtree)
		    for (var e in componentEvents) {
		        if (hooks[e]) {
		            hooks[e].forEach(function (fn) {
		                vmodel.$watch(e, fn)
		            })
		        }
		    }
		    var render = avalon.render(vtree, src.local)
		    vmodel.$render = render
		    src[is + '-vm'] = vmodel
		    src[is + '-vtree'] = vtree
		    return src.is = is
	
		}
		module.exports = createComponent
	
		function newText(name) {
		    return {
		        nodeType: 3,
		        nodeValue: '{{##' + name + '}}',
		        type: "#text",
		        dynamic: true
		    }
		}
		function isEmptyOption(opt) {
		    for (var k in opt) {
		        if (k === 'is' || k === '$id')
		            continue
		        return false
		    }
		    return true
		}
	
		function insertSlots(vtree, node, soleSlot) {
		    var slots = {}
		    if (soleSlot) {
		        slots[soleSlot] = node.children
		    } else {
		        node.children.forEach(function (el) {
		            if (el.nodeType === 1) {
		                var name = el.props.slot || 'default'
		                if (slots[name]) {
		                    slots[name].push(el)
		                } else {
		                    slots[name] = [el]
		                }
		            }
		        })
		    }
		    mergeTempale(vtree, slots)
		}
	
		function mergeTempale(vtree, slots) {
		    for (var i = 0, node; node = vtree[i++]; ) {
		        if (node.nodeType === 1) {
		            if (node.type === 'slot') {
		                var name = node.props.name || 'default'
		                if (slots[name]) {
		                    var s = slots[name].length ? slots[name] :  newText(name)
		                    vtree.splice.apply(vtree, [i - 1, 1].concat(s))
		                }
		            } else {
		                mergeTempale(node.children, slots)
		            }
		        }
		    }
	
		    return vtree
		}
	
		//必须以字母开头,结尾以字母或数字结束,中间至少出现一次"-",
		//并且不能大写字母,特殊符号,"_","$",汉字
		var rcustomTag = /^[a-z]([a-z\d]+\-)+[a-z\d]+$/
	
		function isCustomTag(type) {
		    return rcustomTag.test(type)
		}
	
		function mixinHooks(target, option, overwrite) {
		    for (var k in option) {
		        var v = option[k]
		        //如果是生命周期钩子,总是不断收集
		        if (componentEvents[k]) {
		            if (k in target) {
		                target[k].push(v)
		            } else {
		                target[k] = [option[k]]
		            }
		        } else {
		            if (overwrite) {
		                target[k] = v
		            }
		        }
		    }
		}
	
	/***/ },
	/* 67 */
	/***/ function(module, exports) {
	
		/**
		 * 
		$$skipArray:是系统级通用的不可监听属性
		$skipArray: 是当前对象特有的不可监听属性
	
		 不同点是
		 $$skipArray被hasOwnProperty后返回false
		 $skipArray被hasOwnProperty后返回true
		 */
	
		module.exports = avalon.oneObject('$id,$render,$track,$element,$watch,$fire,$events,$model,$skipArray,$accessors,$hashcode,$run,$wait,__proxy__,__data__,__const__')
	
	/***/ },
	/* 68 */
	/***/ function(module, exports, __webpack_require__) {
	
		var support = __webpack_require__(69)
		var Cache = __webpack_require__(28)
		var update = __webpack_require__(36)
	
		avalon.directive('effect', {
		    priority: 5,
		    diff: function (copy, src, name) {
		        var copyObj = copy[name]
		        copyObj = copy.$model || copyObj
		        if(typeof copyObj === 'string'){
		            var is = copyObj
		            copyObj = {
		                is: is
		            }
		           
		        }else if (Array.isArray(copyObj)) {
		            copyObj = avalon.mix.apply({}, copyObj)
		        }
		    
		        copyObj.action = copyObj.action || 'enter'
		       
		        if (Object(copyObj) === copyObj) {
		            var srcObj = src[name]
		            if ( Object(srcObj) !== srcObj || diffObj(copyObj, srcObj ))  {
		                src[name] = copyObj
		                update(src, this.update, 'afterChange')
		            }
		        }
		        delete copy[name]
		    },
		    update: function (dom, vnode, parent, option) {
		        if(dom.animating ){
		            return
		        }
		        dom.animating = true
		        var localeOption = vnode['ms-effect']
		        var type = localeOption.is
		        option = option || {}
		        if(!type){//如果没有指定类型
		            return avalon.warn('need is option')
		        }
		      
		        var effects = avalon.effects
		        if(support.css && !effects[type]){
		            avalon.effect(type, {})
		        }
		        var globalOption = effects[type]
		        if(!globalOption){//如果没有定义特效
		            return avalon.warn(type+' effect is undefined')
		        }
		        var action = option.action || localeOption.action
		        var Effect = avalon.Effect
		        if (typeof Effect.prototype[action] !== 'function'){
		            return avalon.warn(action+' action is undefined')
		        }   
		        var effect = new Effect(dom)
		        var finalOption = avalon.mix(option, globalOption, localeOption)
		        if (finalOption.queue) {
		            animationQueue.push(function () {
		                effect[action](finalOption)
		            })
		            callNextAnimation()
		        } else {
		            setTimeout(function(){
		               effect[action](finalOption)
		            },4)
		        }
		    }
		})
		function diffObj(a, b){
		    for(var i in a){
		        if(a[i] !== b[i])
		            return true
		    }
		    return false
		}
	
		var animationQueue = []
		function callNextAnimation() {
		    if (animationQueue.lock)
		        return
		    var fn = animationQueue[0]
		    if (fn) {
		       callNextAnimation.lock = true
		       fn()
		    }
		}
	
		avalon.effects = {}
		//这里定义CSS动画
	
	
		avalon.effect = function (name, definition) {
		    avalon.effects[name] = definition || {}
		    if (support.css) {
		        if (!definition.enterClass) {
		            definition.enterClass = name + '-enter'
		        }
		        if (!definition.enterActiveClass) {
		            definition.enterActiveClass = definition.enterClass + '-active'
		        }
		        if (!definition.leaveClass) {
		            definition.leaveClass = name + '-leave'
		        }
		        if (!definition.leaveActiveClass) {
		            definition.leaveActiveClass = definition.leaveClass + '-active'
		        }
		    }
		    if (!definition.action) {
		        definition.action = 'enter'
		    }
		}
	
	
		var Effect = function (el) {
		    this.el = el
		}
		avalon.Effect = Effect
		Effect.prototype = {
		    enter: createAction('Enter'),
		    leave: createAction('Leave'),
		    move: createAction('Move')
		}
	
		var rsecond = /\d+s$/
		function toMillisecond(str){
		   var ratio = rsecond.test(str) ? 1000 : 1
		   return parseFloat(str) * ratio
		}
	
		function execHooks(options, name, el) {
		    var list = options[name]
		    list = Array.isArray(list) ? list : typeof list === 'function' ? [list] : []
		    list.forEach(function (fn) {
		       fn && fn(el)
		    })
		}
		 var staggerCache = new Cache(128)
	
		function createAction(action) {
		    var lower = action.toLowerCase()
		    return function (option) {
		        var elem = this.el
		        var $el = avalon(elem)
		        var enterAnimateDone
		        var staggerTime = isFinite(option.stagger) ? option.stagger * 1000 : 0
		        if(staggerTime){
		            if(option.staggerKey){
		                var stagger = staggerCache.get(option.staggerKey) || 
		                        staggerCache.put(option.staggerKey, {
		                    count:0,
		                    items:0
		                })
		                stagger.count++
		                stagger.items++
		            }
		        }
		        var staggerIndex = stagger && stagger.count || 0
		        var animationDone = function(e) {
		            var isOk = e !== false
		            elem.animating = void 0
		            enterAnimateDone = true
		            var dirWord = isOk ? 'Done' : 'Abort'
		            execHooks(option, 'on' + action + dirWord, elem)
		            avalon.unbind(elem,support.transitionEndEvent)
		            avalon.unbind(elem,support.animationEndEvent)
		            if(stagger){
		                if(--stagger.items === 0){
		                    stagger.count = 0
		                }
		            }
		            if(option.queue){
		                animationQueue.lock = false
		                animationQueue.shift()
		                callNextAnimation()
		            }
		        }
		        execHooks(option, 'onBefore' + action, elem)
	
		        if (option[lower]) {
		            option[lower](elem, function (ok) {
		                animationDone(ok !== false)
		            })
		        } else if (support.css) {
		            
		            $el.addClass(option[lower + 'Class'])
		            if(lower === 'leave'){
		                $el.removeClass(option.enterClass+' '+option.enterActiveClass)
		            }else if(lower === 'enter'){
		                $el.removeClass(option.leaveClass+' '+option.leaveActiveClass)
		            }
	
		            $el.bind(support.transitionEndEvent, animationDone)
		            $el.bind(support.animationEndEvent, animationDone)
		            setTimeout(function () {
		                enterAnimateDone = avalon.root.offsetWidth === NaN
		                $el.addClass(option[lower + 'ActiveClass'])
		                var computedStyles = window.getComputedStyle(elem)
		                var tranDuration = computedStyles[support.transitionDuration]
		                var animDuration = computedStyles[support.animationDuration]
		                var time = toMillisecond(tranDuration) || toMillisecond(animDuration)
		                if (!time === 0) {
		                    animationDone(false)
		                }else if(!staggerTime ){
		                    setTimeout(function(){
		                        if(!enterAnimateDone){
		                            animationDone(false)
		                        }
		                    },time + 130 )
		                }
		            }, 17+ staggerTime * staggerIndex)// = 1000/60
		        }
		    }
		}
	
		avalon.applyEffect = function(node, vnode, opts){
		    var cb = opts.cb
		    var hook = opts.hook
		    var curEffect = vnode['ms-effect']
		    if(curEffect && !avalon.document.hidden ){
		        var old = curEffect[hook]
		        if(cb){
		            if(Array.isArray(old)){
		                old.push(cb)
		            }else if(old){
		                curEffect[hook] = [old, cb]
		            }else{
		                curEffect[hook] = [cb]
		            }
		        }
		        getAction(opts)
		        node.animate = true
		        avalon.directives.effect.update(node,vnode, 0, avalon.shadowCopy({},opts) ) 
	
		    }else if(cb){
		        cb()
		    }
		}
	
		function getAction(opts){
		    if(!opts.acton){
		        opts.action = opts.hook.replace(/^on/,'').replace(/Done$/,'').toLowerCase()
		    }
		}
	
	
	
	/***/ },
	/* 69 */
	/***/ function(module, exports) {
	
		/**
		 * ------------------------------------------------------------
		 * 检测浏览器对CSS动画的支持与API名
		 * ------------------------------------------------------------
		 */
		var supportTransition = false
		var supportAnimation = false
		var supportCSS = false
		var transitionEndEvent
		var animationEndEvent
		var transitionDuration = avalon.cssName('transition-duration')
		var animationDuration = avalon.cssName('animation-duration')
	
		var checker = {
		    TransitionEvent: 'transitionend',
		    WebKitTransitionEvent: 'webkitTransitionEnd',
		    OTransitionEvent: 'oTransitionEnd',
		    otransitionEvent: 'otransitionEnd'
		}
		var window = avalon.window
		var tran
		//有的浏览器同时支持私有实现与标准写法，比如webkit支持前两种，Opera支持1、3、4
		for (var name in checker) {
		    if (window[name]) {
		        tran = checker[name]
		        break
		    }
		    try {
		        var a = document.createEvent(name)
		        tran = checker[name]
		        break;
		    } catch (e) {
		    }
		}
		if (typeof tran === 'string') {
		    supportTransition = true
		    supportCSS = true
		    transitionEndEvent = tran
		}
	
		//animationend有两个可用形态
		//IE10+, Firefox 16+ & Opera 12.1+: animationend
		//Chrome/Safari: webkitAnimationEnd
		//http://blogs.msdn.com/b/davrous/archive/2011/12/06/introduction-to-css3-animat ions.aspx
		//IE10也可以使用MSAnimationEnd监听，但是回调里的事件 type依然为animationend
		//  el.addEventListener('MSAnimationEnd', function(e) {
		//     alert(e.type)// animationend！！！
		// })
		checker = {
		    'AnimationEvent': 'animationend',
		    'WebKitAnimationEvent': 'webkitAnimationEnd'
		}
		var ani
		for (name in checker) {
		    if (window[name]) {
		        ani = checker[name];
		        break;
		    }
		}
		if (typeof ani === 'string') {
		    supportAnimation = true
		    supportCSS = true
		    animationEndEvent = ani
		}
	
		module.exports = {
		    transition: supportTransition,
		    animation: supportAnimation,
		    css: supportCSS,
		    transitionEndEvent: transitionEndEvent,
		    animationEndEvent: animationEndEvent,
		    transitionDuration: transitionDuration,
		    animationDuration: animationDuration
		}
	
	/***/ },
	/* 70 */
	/***/ function(module, exports, __webpack_require__) {
	
		
		avalon.lexer = __webpack_require__(71)
		avalon.diff = __webpack_require__(72)
		avalon.batch = __webpack_require__(73)
		// dispatch与patch 为内置模块
		var parseView = __webpack_require__(44)
	
		function render(vtree, local) {
		    var _body = Array.isArray(vtree) ? parseView(vtree) : vtree
		    var _local = []
		    if (local) {
		        for (var i in local) {
		            _local.push('var ' + i + ' = __local__['+avalon.quote(i)+']')
		        }
		    }
		    var body = '__local__ = __local__ || {};\n' +
		            'var __present__, __top__,__synth__;\n' +
		            _local.join(';\n')+'\n' + _body
		    var fn = Function('__vmodel__', '__local__', body)
	
		//    var a = document.createElement('xmp')
		//    var t = document.createTextNode(_body)
		//    a.appendChild(t)
		//    document.body.appendChild(a)
	
	
		    return fn
		}
		avalon.render = render
	
		module.exports = avalon
	
	
	/***/ },
	/* 71 */
	/***/ function(module, exports, __webpack_require__) {
	
		/**
		 * ------------------------------------------------------------
		 * lexer 将字符串变成一个虚拟DOM树,方便以后进一步变成模板函数
		 * 此阶段只会生成VElement,VText,VComment
		 * ------------------------------------------------------------
		 */
	
		var makeHashCode = avalon.makeHashCode
		var vdom = __webpack_require__(15)
		var VText = vdom.VText
		var VComment = vdom.VComment
	
	
		//匹配只有开标签的无内容元素（Void elements 或 self-contained tags）
		//http://www.colorglare.com/2014/02/03/to-close-or-not-to-close.html
		//http://blog.jobbole.com/61514/
	
		//var rfullTag = /^<([^\s>\/=.$<]+)(?:\s+[^=\s]+(?:=[^>\s]+)?)*\s*>(?:[\s\S]*)<\/\1>/
		//var rvoidTag = /^<([^\s>\/=.$<]+)\s*([^>]*?)\/?>/
		var rfullTag = /^<([-A-Za-z0-9_]+)(?:\s+[^=\s]+(?:=[^>\s]+)?)*\s*>(?:[\s\S]*)<\/\1>/
		var rvoidTag = /^<([-A-Za-z0-9_]+)\s*([^>]*?)\/?>/
		var rtext = /^[^<]+/
		var rcomment = /^<!--([\w\W]*?)-->/
	
		var rnumber = /\d+/g
		var rmsForStart = /^\s*ms\-for\:/
		var rmsForEnd = /^\s*ms\-for\-end/
		var r = __webpack_require__(47)
		var rsp = r.sp
		var rfill = /\?\?\d+/g
		var rleftSp = r.leftSp
		var rstring = r.string
	
	
		var config = avalon.config
	
	
		var maps = {}
		var number = 1
		function dig(a) {
		    var key = '??' + number++
		    maps[key] = a
		    return key
		}
		function fill(a) {
		    var val = maps[a]
		    return val
		}
		var rhasString = /=["']/
		var rlineSp = /\n\s*/g
		function fixLongAttrValue(attr) {
		    return rhasString.test(attr) ?
		        attr.replace(rlineSp, '').replace(rstring, dig) : attr
		}
		function lexer(text, curDeep) {
		    var nodes = []
		    if (typeof curDeep !== 'number') {
		        curDeep = 0
		    }
		    if (!curDeep) {
		        text = text.replace(rstring, dig)
		    }
		    do {
		        var outerHTML = ''
		        var node = false
		        var match = text.match(rtext)
		        if (match) {//尝试匹配文本
		            outerHTML = match[0]
		            node = {
		                type: '#text',
		                nodeType: 3,
		                nodeValue: outerHTML.replace(rfill, fill)
		            }
	
		        }
	
		        if (!node) {//尝试匹配注释
		            match = text.match(rcomment)
		            if (match) {
		                outerHTML = match[0]
		                node = {
		                    type: '#comment',
		                    nodeType: 8,
		                    nodeValue: match[1].replace(rfill, fill)
		                }
		           
		                
		            }
		        }
	
	
		        if (!node) {//尝试匹配拥有闭标签的元素节点
		            match = text.match(rfullTag)
		            if (match) {
		                outerHTML = match[0]//贪婪匹配 outerHTML,可能匹配过多
		                var type = match[1].toLowerCase()//nodeName
		                outerHTML = clipOuterHTML(outerHTML, type)
	
		                match = outerHTML.match(rvoidTag) //抽取所有属性
	
		                var props = {}
		                if (match[2]) {
		                    handleProps(fixLongAttrValue(match[2]), props)
		                }
	
		                var innerHTML = outerHTML.slice(match[0].length,
		                    (type.length + 3) * -1) //抽取innerHTML
		                node = {
		                    nodeType: 1,
		                    type: type,
		                    props: props,
		                    template: innerHTML.replace(rfill, fill).trim(),
		                    children: []
		                }
		                node = modifyProps(node, innerHTML, nodes, curDeep)
	
		            }
		        }
	
		        if (!node) {
		            match = text.match(rvoidTag)
		            if (match) {//尝试匹配自闭合标签
		                outerHTML = match[0]
		                type = match[1].toLowerCase()
		                props = {}
		                if (match[2]) {
		                    handleProps(fixLongAttrValue(match[2]), props)
		                }
		                node = {
		                    nodeType: 1,
		                    type: type,
		                    props: props,
		                    children: [],
		                    isVoidTag: true
		                }
		                node = modifyProps(node, '', nodes, curDeep)
		            }
		        }
	
		        if (node) {//从text中移除被匹配的部分
		            if (node.nodeType !== 3 || /\S/.test(node.nodeValue)) {
		                nodes.push(node)
		            }
		            text = text.slice(outerHTML.length)
		            if (node.nodeType === 8){
		                if(rmsForStart.test(node.nodeValue)) {
		                    
		                   node.signature = node.signature || makeHashCode('for')
		                   node.directive = 'for'
		                }else if (rmsForEnd.test(node.nodeValue)) {
		                     //将 ms-for与ms-for-end:之间的节点塞到一个数组中
		                    markeRepeatRange(nodes, node)
		                }
		            }
		        } else {
		            break
		        }
		    } while (1);
		    if (!curDeep) {
		        maps = {}
		    }
		    return nodes
		}
	
	
	
		function markeRepeatRange(nodes, end) {
		    var el, k = nodes.length-1, toFilter = [], toRemove = k
		    while (el = nodes[--k]) {
		        if (el.nodeType === 8 && rmsForStart.test(el.nodeValue)) {
		            var start = el
		            end.signature = el.signature
		            break
		        }
		        toFilter.push(el)
		    }
		    var toRepeat = toFilter.reverse().filter(function (el) {
		        if (el.nodeType === 3) {
		            return /\S+/.test(el.nodeValue)
		        } else {
		            return true
		        }
		    })
	
		    start.template = toRepeat.map(function (a) {
		        return avalon.vdomAdaptor(a, 'toHTML')
		    }).join('')
	
		    nodes.splice(k +1, toFilter.length, toRepeat)
		}
	
		//用于创建适配某一种标签的正则表达式
		var openStr = '(?:\\s+[^>=]*?(?:=[^>]+?)?)*>'
		var tagCache = {}// 缓存所有匹配开标签闭标签的正则
		var rchar = /./g
		var regArgs = avalon.msie < 9 ? 'ig' : 'g'//IE6-8，标签名都是大写
		function clipOuterHTML(matchText, type) {
		    var opens = []
		    var closes = []
		    var ropen = tagCache[type + 'open'] ||
		        (tagCache[type + 'open'] = new RegExp('<' + type + openStr, regArgs))
		    var rclose = tagCache[type + 'close'] ||
		        (tagCache[type + 'close'] = new RegExp('<\/' + type + '>', regArgs))
	
		    /* jshint ignore:start */
		    matchText.replace(ropen, function (_, b) {
		        //注意,页面有时很长,b的数值就很大,如
		        //000000000<000000011>000000041<000000066>000000096<000000107>
		        opens.push(('0000000000' + b + '<').slice(-10))//取得所有开标签的位置
		        return _.replace(rchar, '1')
		    }).replace(rclose, function (_, b) {
		        closes.push(('0000000000' + b + '>').slice(-10))//取得所有闭标签的位置               
		    })
	
		    /* jshint ignore:end */
		    //<div><div>01</div><div>02</div></div><div>222</div><div>333</div>
		    //会变成000<005<012>018<025>031>037<045>051<059>
		    //再变成<<><>><><>
		    //最后获取正确的>的索引值,这里为<<><>>的最后一个字符,
		    var pos = opens.concat(closes).sort()
		    var gtlt = pos.join('').replace(rnumber, '')
		    var k = 0, last = 0
	
		    for (var i = 0, n = gtlt.length; i < n; i++) {
		        var c = gtlt.charAt(i)
		        if (c === '<') {
		            k += 1
		        } else {
		            k -= 1
		        }
		        if (k === 0) {
		            last = i
		            break
		        }
		    }
		    var findex = parseFloat(pos[last]) + type.length + 3 // (</>为三个字符)
		    return matchText.slice(0, findex) //取得正确的outerHTML
		}
	
	
		function modifyProps(node, innerHTML, nodes, curDeep) {
		    var type = node.type
		    var props = node.props
		    switch (type) {
		        case 'style':
		        case 'script':
		        case 'noscript':
		        case 'template':
		        case 'textarea':
		        case 'xmp':
		            node.skipContent = true
		           
		            if(node.template){
		                node.children.push(new VText(node.template))
		            }else{
		                node.children = []
		            }
		            if (type === 'textarea') {
		                props.type = 'textarea'
		                node.children.length = 0
		            }
		            break
		        case 'input':
		            if (!props.type) {
		                props.type = 'text'
		            }
		            break
		        case 'select':
		            if (props.hasOwnProperty('multiple')) {
		                props.multiple = 'multiple'
		                node.multiple = true
		            }
		            break
		        
		        case 'option':
		            node.children.push(new VText(trimHTML(node.template)))
		            break
		        default:
		            if(/^ms-/.test(type) ){
		                props.is = type
		                if(!props['ms-widget']){
		                   props['ms-widget'] = '{is:' + avalon.quote(type) + '}'
		                }
		            }
		            break
		    }
		    
		    if (!node.isVoidTag && !node.skipContent) {
		        var childs = lexer(innerHTML, curDeep + 1)
		        node.children = childs
		        if (type === 'table') {
		            addTbody(node.children)
		        }
		    }
		    var forExpr = props['ms-for']
		    if (forExpr) {
		        var cb = props['data-for-rendered']
		        var cid = cb + ':cb'
		        delete props['ms-for']
		        nodes.push({
		            nodeType: 8,
		            type: '#comment',
		            nodeValue: 'ms-for:' + forExpr,
		            signature: makeHashCode('for'),
		            directive: 'for',
		            cid: cid
		        })
	
		        if (cb && !avalon.caches[cid]) {
		            avalon.caches[cid] = Function('return ' + avalon.parseExpr(cb, 'on'))()
		        }
	
		        nodes.push(node)
		        return {
		            nodeType: 8,
		            type: '#comment',
		            nodeValue: 'ms-for-end:'
		        }
		    }
	
		    return node
		}
		//如果直接将tr元素写table下面,那么浏览器将将它们(相邻的那几个),放到一个动态创建的tbody底下
		function addTbody(nodes) {
		    var tbody, needAddTbody = false, count = 0, start = 0, n = nodes.length
		    for (var i = 0; i < n; i++) {
		        var node = nodes[i]
		        if (!tbody) {
		            if (node.type === 'tr') {
		                tbody = {
		                    nodeType: 1,
		                    type: 'tbody',
		                    children: [],
		                    props: {}
		                }
		                tbody.children.push(node)
		                needAddTbody = true
		                if (start === 0)
		                    start = i
		                nodes[i] = tbody
		            }
		        } else {
		            if (node.type !== 'tr' && node.nodeType === 1) {
		                tbody = false
		            } else {
		                tbody.children.push(node)
		                count++
		                nodes[i] = 0
		            }
		        }
		    }
	
		    if (needAddTbody) {
		        for (i = start; i < n; i++) {
		            if (nodes[i] === 0) {
		                nodes.splice(i, 1)
		                i--
		                count--
		                if (count === 0) {
		                    break
		                }
		            }
		        }
		    }
		}
	
	
		var ramp = /&amp;/g
		var rnowhite = /\S+/g
		var rquote = /&quot;/g
		var rnogutter = /\s*=\s*/g
		//https://github.com/RubyLouvre/avalon/issues/1501
		function handleProps(str, props) {
		    str.replace(rnogutter, '=').replace(rnowhite, function (el) {
		        var arr = el.split('='), value = arr[1] || '',
		            name = arr[0].toLowerCase()
		        if (arr.length === 2) {
		            if (value.indexOf('??') === 0) {
		                value = unescapeHTML(value.replace(rfill, fill).
		                    slice(1, -1))
		            }
		        }
		        props[name] = value
		    })
		}
	
		//将字符串中的html实体字符还原为对应字符
		function unescapeHTML(target) {
		    return  target.replace(/&quot;/g, '"')
		            .replace(/&lt;/g, '<')
		            .replace(/&gt;/g, '>')
		            .replace(/&amp;/g, "&") //处理转义的中文和实体字符
		            .replace(/&#([\d]+);/g, function($0, $1) {
		        return String.fromCharCode(parseInt($1, 10));
		    });
		}
		//form prototype.js
		var rtrimHTML = /<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?>|<\/\w+>/gi
		function trimHTML(v) {
		    return String(v).replace(rtrimHTML, '').trim()
		}
	
	
		module.exports = lexer
	
		avalon.speedUp = function (arr) {
		    for (var i = 0; i < arr.length; i++) {
		        hasDirective(arr[i])
		    }
		}
	
		function hasDirective(a) {
		    switch (a.nodeType) {
		        case 3:
		            if (config.rbind.test(a.nodeValue)) {
		                a.dynamic  = true
		                return true
		            } else {
		                a.skipContent = true
		                return false
		            }
		        case 8:
		            if (/^ms\-for/.test(a.nodeValue)) {
		                a.dynamic = true
		                return true
		            } else {
		                a.skipContent = true
		                return false
		            }
		        case 1:
	
		            if (a.props['ms-skip']) {
		                a.skipAttrs = true
		                a.skipContent = true
		                return false
		            }
		            if(/^ms\-/.test(a.type)){
		                a.dynamic = true
		            }
		            if (hasDirectiveAttrs(a.props)) {
		                a.dynamic = true
		            }else{
		                a.skipAttrs = true
		            }
		            if (a.isVoidTag && !a.dynamic) {
		                a.skipContent = true
		                return false
		            }
		            var hasDirective = childrenHasDirective(a.children)
		            if (!hasDirective && !a.dynamic) {
		                a.skipContent = true
		                return false
		            }
		            return true
		        default:
		            if(Array.isArray(a)){
		                return childrenHasDirective(a)
		            }
		    }
		}
	
		function childrenHasDirective(arr){
		    var ret = false
		    for (var i = 0, el; el = arr[i++];) {
		        if (hasDirective(el)) {
		            ret = true
		        }
		    }
		    return ret
		}
	
		function hasDirectiveAttrs(props) {
		    if('ms-skip' in props)
		        return false
		    for (var i in props) {
		        if (i.indexOf('ms-') === 0 ) {
		            return true
		        }
		    }
		    return false
		}
	
	/***/ },
	/* 72 */
	/***/ function(module, exports, __webpack_require__) {
	
		/**
		 * ------------------------------------------------------------
		 * diff 对比新旧两个虚拟DOM树,根据directive中的diff方法为新虚拟DOM树
		 * 添加change, afterChange更新钩子
		 * ------------------------------------------------------------
		 */
		var emptyArr = []
		// 防止被引用
		var emptyObj = function () {
		    return {
		        children: [], props: {}
		    }
		}
		var directives = avalon.directives
		var rbinding = __webpack_require__(47).binding
	
		function diff(copys, sources) {
		    for (var i = 0; i < copys.length; i++) {
		        var copy = copys[i]
		        var src = sources[i] || emptyObj()
		    
		        switch (copy.nodeType) {
		            case 3:
		                if (copy.dynamic) {
		                    directives.expr.diff(copy, src)
		                }
		                break
		            case 8:
		                if (copy.directive) {
		                    directives[copy.directive].diff(copy, src,
		                    copys[i+1],sources[i+1],sources[i+2]) 
		                }
		                if(src.afterChange){
		                    execHooks(src, src.afterChange)
		                }
		                break
		            case 1:
		                if (!copy.skipAttrs) {
		                    diffProps(copy, src)
		                }
		                if (!copy.skipContent && !copy.isVoidTag ) {
		                    diff(copy.children, src.children || emptyArr, copy)
		                }
		                if(src.afterChange){
		                    execHooks(src, src.afterChange)
		                }
		                break
		            default: 
		                if(Array.isArray(copy)){
		                   diff(copy, src)
		                }
		                break
		        }
		    }
		}
	
		function execHooks(el, hooks) {
		    if (hooks.length) {
		        for (var hook, i = 0; hook = hooks[i++];) {
		           hook(el.dom, el)
		        }
		    }
		    delete el.afterChange
		}
	
		function diffProps(copys, sources) {
		    var order = copys.order
		    if (order) {
		        var directiveType
		        try {
		           order.replace(avalon.rword, function (name) {
		                var match = name.match(rbinding)
		                var type = match && match[1]
		                directiveType = type
		                if (directives[type]) {
		                    directives[type].diff(copys, sources || emptyObj(), name)
		                }
		                if(copys.order !== order){
		                    throw "break"
		                }
		               
		            })
		            
		        } catch (e) {
		            if(e !== 'break'){
		                avalon.log(directiveType, e, e.message, 'diffProps error')
		            }else{
		                diffProps(copys, sources)
		            }
		        }
		    }
	
	
		}
		avalon.diffProps = diffProps
		module.exports = diff
	
	
	/***/ },
	/* 73 */
	/***/ function(module, exports, __webpack_require__) {
	
		
		/**
		 * ------------------------------------------------------------
		 * batch 同时对N个视图进行全量更新
		 * ------------------------------------------------------------
		 */
	
		var reconcile = __webpack_require__(51)
	
		//如果正在更新一个子树,那么将它放到
		var needRenderIds = []
		var renderingID = false
		avalon.suspendUpdate = 0
	
	
		function batchUpdate(id) {
		    if (renderingID) {
		        return avalon.Array.ensure(needRenderIds, id)
		    } else {
		        renderingID = id
		    }
	
		    var scope = avalon.scopes[id]
		    if (!scope || !document.nodeName || avalon.suspendUpdate) {
		        return renderingID = null
		    }
		    var vm = scope.vmodel
		    var dom = vm.$element
		    var source = dom.vtree || []
		    var renderFn = vm.$render
		    var copy = renderFn(scope.vmodel, scope.local)
		    if (!scope.isMount) {
		        //在最开始时,替换作用域的所有节点,确保虚拟DOM与真实DOM是对齐的
		        reconcile([dom], source, dom.parentNode)  
		        scope.isMount = 1
		    }
		    avalon.diff(copy, source)
		    
		    if (scope.isMount === 1) {
		        var events = vm.$events["onReady"]
		        if (events) {
		            vm.$fire('onReady')
		            delete vm.$events.onReady
		        }
		        scope.isMount = 2
		    }
	
		    var index = needRenderIds.indexOf(renderingID)
		    renderingID = 0
		    if (index > -1) {
		        var removed = needRenderIds.splice(index, 1)
		        return batchUpdate(removed[0])
		    }
	
		    var more = needRenderIds.shift()
		    if (more) {
		        batchUpdate(more)
		    }
		}
	
	
	
		module.exports = avalon.batch = batchUpdate
	
	
	/***/ },
	/* 74 */
	/***/ function(module, exports) {
	
		
	
		//http://stackoverflow.com/questions/11425209/are-dom-mutation-observers-slower-than-dom-mutation-events
		//http://stackoverflow.com/questions/31798816/simple-mutationobserver-version-of-domnoderemovedfromdocument
		function byMutationEvent(dom) {
		    dom.addEventListener("DOMNodeRemovedFromDocument", function () {
		        fireDisposeHookDelay(dom)
		    })
		}
		//用于IE8+, firefox
		function byRewritePrototype() {
		    if (byRewritePrototype.execute) {
		        return
		    }
		//https://www.web-tinker.com/article/20618.html?utm_source=tuicool&utm_medium=referral
		//IE6-8虽然暴露了Element.prototype,但无法重写已有的DOM API
		    byRewritePrototype.execute = true
		    var p = Node.prototype
		    function rewite(name, fn) {
		        var cb = p[name]
		        p[name] = function (a, b) {
		            return  fn.call(this, cb, a, b)
		        }
		    }
		    rewite('removeChild', function (fn, a, b) {
		        fn.call(this, a, b)
		        if (a.nodeType === 1) {
		            fireDisposeHookDelay(a)
		        }
		        return a
		    })
	
		    rewite('replaceChild', function (fn, a, b) {
		        fn.call(this, a, b)
		        if (a.nodeType === 1) {
		            fireDisposeHookDelay(a)
		        }
		        return a
		    })
		    //访问器属性需要用getOwnPropertyDescriptor处理
		    var ep = Element.prototype, oldSetter
		    function newSetter(html) {
		        var all = avalon.slice(this.getElementsByTagName('*'))
		        oldSetter.call(this, html)
		        fireDisposedComponents(all)
		    }
		    if (!Object.getOwnPropertyDescriptor) {
		        oldSetter = ep.__lookupSetter__('innerHTML')
		        ep.__defineSetter__('innerHTML', newSetter)
		    } else {
		        var obj = Object.getOwnPropertyDescriptor(ep, 'innerHTML')
		        oldSetter = obj.set
		        obj.set = newSetter
		        Object.defineProperty(ep, 'innerHTML', obj)
		    }
		    
		    rewite('appendChild', function (fn, a) {
		        fn.call(this, a)
		        if (a.nodeType === 1 && this.nodeType === 11) {
		            fireDisposeHookDelay(a)
		        }
		        return a
		    })
	
		    rewite('insertBefore', function (fn, a, b) {
		        fn.call(this, a, b)
		        if (a.nodeType === 1 && this.nodeType === 11) {
		            fireDisposeHookDelay(a)
		        }
		        return a
		    })
		}
	
		//用于IE6~8
		var checkDisposeNodes = []
		var checkID = 0
		function byPolling(dom) {
		    avalon.Array.ensure(checkDisposeNodes, dom)
		    if (!checkID) {
		        checkID = setInterval(function () {
		            for (var i = 0, el; el = checkDisposeNodes[i]; ) {
		                if (false === fireDisposeHook(el)) {
		                    avalon.Array.removeAt(checkDisposeNodes, i)
		                } else {
		                    i++
		                }
		            }
		            if (checkDisposeNodes.length == 0) {
		                clearInterval(checkID)
		                checkID = 0
		            }
		        }, 700)
		    }
		}
	
	
		module.exports = function onComponentDispose(dom) {
		    if (window.chrome && window.MutationEvent) {
		        byMutationEvent(dom)
		    } else if (avalon.modern && typeof window.Node === 'function') {
		        byRewritePrototype(dom)
		    } else {
		        byPolling(dom)
		    }
		}
	
		function inDomTree(el) {
		    while (el) {
		        if (el.nodeType === 9) {
		            return true
		        }
		        el = el.parentNode
		    }
		    return false
		}
	
		function fireDisposeHook(el) {
		    if (el.nodeType === 1 && el.getAttribute('wid') && !inDomTree(el)) {
		        var wid = el.getAttribute('wid')
		        var docker = avalon.scopes[ wid ]
		        if(!docker)
		            return
		        var vm = docker.vmodel
		        docker.vmodel.$fire("onDispose", {
		            type: 'dispose',
		            target: el,
		            vmodel: vm
		        })
		        if (docker && !el.getAttribute('cached')) {
		            vm.$element = null
		            vm.$hashcode = false
		            el.vtree = void 0
		            delete docker.vmodel
		            delete avalon.scopes[ wid ]
		        }
		        return false
		    }
		}
	
		function fireDisposeHookDelay(a){
		    setTimeout(function () {
		        fireDisposeHook(a)
		    },4)
		}
		function fireDisposedComponents(nodes) {
		    for (var i = 0, el; el = nodes[i++]; ) {
		        fireDisposeHook(el)
		    }
		}
	
	/***/ },
	/* 75 */
	/***/ function(module, exports, __webpack_require__) {
	
		/**
		 * ------------------------------------------------------------
		 * avalon基于纯净的Object.defineProperties的vm工厂 
		 * masterFactory,slaveFactory,mediatorFactory, ArrayFactory
		 * ------------------------------------------------------------
		 */
	
		var share = __webpack_require__(76)
		var createViewModel = __webpack_require__(80)
	
		var isSkip = share.isSkip
		var toJson = share.toJson
		var $$midway = share.$$midway
		var $$skipArray = share.$$skipArray
	
		var makeAccessor = share.makeAccessor
		var initViewModel = share.initViewModel
		var modelAccessor = share.modelAccessor
		var modelAdaptor = share.modelAdaptor
		var makeHashCode = avalon.makeHashCode
	
	
		//一个vm总是为Observer的实例
		function Observer() {
		}
	
		function masterFactory(definition, heirloom, options) {
	
		    var $skipArray = {}
		    if (definition.$skipArray) {//收集所有不可监听属性
		        $skipArray = avalon.oneObject(definition.$skipArray)
		        delete definition.$skipArray
		    }
	
		    var keys = {}
		    options = options || {}
		    heirloom = heirloom || {}
		    var accessors = {}
		    var hashcode = makeHashCode('$')
		    var pathname = options.pathname || ''
		    options.id = options.id || hashcode
		    options.hashcode = options.hashcode || hashcode
		    var key, sid, spath
		    for (key in definition) {
		        if ($$skipArray[key])
		            continue
		        var val = keys[key] = definition[key]
		        if (!isSkip(key, val, $skipArray)) {
		            sid = options.id + '.' + key
		            spath = pathname ? pathname + '.' + key : key
		            accessors[key] = makeAccessor(sid, spath, heirloom)
		        }
		    }
	
		    accessors.$model = modelAccessor
		    var $vmodel = new Observer()
		    $vmodel = createViewModel($vmodel, accessors, definition)
	
		    for (key in keys) {
		        //对普通监控属性或访问器属性进行赋值
		        $vmodel[key] = keys[key]
	
		        //删除系统属性
		        if (key in $skipArray) {
		            delete keys[key]
		        } else {
		            keys[key] = true
		        }
		    }
		    initViewModel($vmodel, heirloom, keys, accessors, options)
	
		    return $vmodel
		}
	
		$$midway.masterFactory = masterFactory
		var empty = {}
		function slaveFactory(before, after, heirloom, options) {
		    var keys = {}
		    var skips = {}
		    var accessors = {}
		    heirloom = heirloom || {}
		    var pathname = options.pathname
		    var resue = before.$accessors || {}
		    var key, sid, spath
		    for (key in after) {
		        if ($$skipArray[key])
		            continue
		        keys[key] = true//包括可监控与不可监控的
		        if (!isSkip(key, after[key], empty)) {
		            if (resue[key]) {
		                accessors[key] = resue[key]
		            } else {
		                sid = options.id + '.' + key
		                spath = pathname ? pathname + '.' + key : key
		                accessors[key] = makeAccessor(sid, spath, heirloom)
		            }
		        } else {
		            skips[key] = after[key]
		            delete after[key]
		        }
		    }
	
		    options.hashcode = before.$hashcode || makeHashCode('$')
		    accessors.$model = modelAccessor
		    var $vmodel = new Observer()
		    $vmodel = createViewModel($vmodel, accessors, skips)
	
		    for (key in skips) {
		        $vmodel[key] = skips[key]
		    }
	
		    initViewModel($vmodel, heirloom, keys, accessors, options)
	
		    return $vmodel
		}
	
		$$midway.slaveFactory = slaveFactory
	
		function mediatorFactory(before, after) {
		    var keys = {}, key
		    var accessors = {}
		    var unresolve = {}
		    var heirloom = {}
		    var arr = avalon.slice(arguments)
		    var $skipArray = {}
		    for (var i = 0; i < arr.length; i++) {
		        var obj = arr[i]
		        //收集所有键值对及访问器属性
		        var config
		        var configName
		        for (var key in obj) {
		            if(!obj.hasOwnProperty(key)){
		                continue
		            }
		            if(key === '$skipArray' && Array.isArray(obj.$skipArray)){
		                obj.$skipArray.forEach(function(el){
		                    $skipArray[el] = 1
		                })
		            }
		            keys[key] = obj[key]
		            var $accessors = obj.$accessors
		            if ($accessors && $accessors[key]) {
		                if (arr.indexOf(obj[key]) === -1) {
		                    accessors[key] = $accessors[key]
		                } else { //去掉vm那个配置对象
		                    config = keys[key]
		                    configName = key
		                    delete keys[key]
		                }
		            } else if (typeof keys[key] !== 'function') {
		                unresolve[key] = 1
		            }
		        }
		    }
		    if (typeof this === 'function') {
		        this(keys, unresolve)
		    }
		    for (key in unresolve) {
		        //系统属性跳过,已经有访问器的属性跳过
		        if ($$skipArray[key] || accessors[key])
		            continue
		        if (!isSkip(key, keys[key], $skipArray)) {
		            accessors[key] = makeAccessor(before.$id, key, heirloom)
		            accessors[key].set(keys[key])
		        }
		    }
	
		    var $vmodel = new Observer()
		    $vmodel = createViewModel($vmodel, accessors, keys)
	
		    for (key in keys) {
		        if (!accessors[key]) {//添加不可监控的属性
		            $vmodel[key] = keys[key]
		        }
		        //用于通过配置对象触发组件的$watch回调
		        if (configName && accessors[key] && config.hasOwnProperty(key)) {
		            var $$ = accessors[key]
		            if (!$$.get.$decompose) {
		                $$.get.$decompose = {}
		            }
		            $$.get.$decompose[configName+'.'+key] = $vmodel
		        }
	
		        if (key in $$skipArray) {
		            delete keys[key]
		        } else {
		            keys[key] = true
		        }
	
		    }
	
		    initViewModel($vmodel, heirloom, keys, accessors, {
		        id: before.$id,
		        hashcode: makeHashCode('$'),
		        master: true
		    })
	
		    return $vmodel
		}
	
	
		$$midway.mediatorFactory = avalon.mediatorFactory = mediatorFactory
	
		var __array__ = share.__array__
	
	
		var ap = Array.prototype
		var _splice = ap.splice
		function notifySize(array, size) {
		    if (array.length !== size) {
		        array.notify('length', array.length, size, true)
		    }
		}
	
		__array__.removeAll = function (all) { //移除N个元素
		    var size = this.length
		    if (Array.isArray(all)) {
		        for (var i = this.length - 1; i >= 0; i--) {
		            if (all.indexOf(this[i]) !== -1) {
		                _splice.call(this, i, 1)
		            }
		        }
		    } else if (typeof all === 'function') {
		        for (i = this.length - 1; i >= 0; i--) {
		            var el = this[i]
		            if (all(el, i)) {
		                _splice.call(this, i, 1)
		            }
		        }
		    } else {
		        _splice.call(this, 0, this.length)
	
		    }
		    if (!avalon.modern) {
		        this.$model = toJson(this)
		    }
		    notifySize(this, size)
		    this.notify()
		}
	
	
		var __method__ = ['push', 'pop', 'shift', 'unshift', 'splice']
	
		__method__.forEach(function (method) {
		    var original = ap[method]
		    __array__[method] = function (a, b) {
		        // 继续尝试劫持数组元素的属性
		        var args = [], size = this.length
	
		        if (method === 'splice' && Object(this[0]) === this[0]) {
		            var old = this.slice(a, b)
		            var neo = ap.slice.call(arguments, 2)
		            var args = [a, b]
		            for (var j = 0, jn = neo.length; j < jn; j++) {
		                var item = old[j]
	
		                args[j + 2] = modelAdaptor(neo[j], item, (item && item.$events || {}), {
		                    id: this.$id + '.*',
		                    master: true
		                })
		            }
	
		        } else {
		            for (var i = 0, n = arguments.length; i < n; i++) {
		                args[i] = modelAdaptor(arguments[i], 0, {}, {
		                    id: this.$id + '.*',
		                    master: true
		                })
		            }
		        }
		        var result = original.apply(this, args)
		        if (!avalon.modern) {
		            this.$model = toJson(this)
		        }
		        notifySize(this, size)
		        this.notify()
		        return result
		    }
		})
	
		'sort,reverse'.replace(avalon.rword, function (method) {
		    __array__[method] = function () {
		        ap[method].apply(this, arguments)
		        if (!avalon.modern) {
		            this.$model = toJson(this)
		        }
		        this.notify()
		        return this
		    }
		})
	
	
		module.exports = avalon
		//使用这个来扁平化数据  https://github.com/gaearon/normalizr
		//使用Promise  https://github.com/stefanpenner/es6-promise
		//使用这个AJAX库 https://github.com/matthew-andrews/isomorphic-fetch
	
	/***/ },
	/* 76 */
	/***/ function(module, exports, __webpack_require__) {
	
		var share = __webpack_require__(77)
		var canHideProperty = __webpack_require__(79)
		var initEvents = share.initEvents
	
		/*
		 * toJson
		 * hideProperty
		 * initViewModel
		 */
	
		function toJson(val) {
		    var xtype = avalon.type(val)
		    if (xtype === 'array') {
		        var array = []
		        for (var i = 0; i < val.length; i++) {
		            array[i] = toJson(val[i])
		        }
		        return array
		    } else if (xtype === 'object') {
		        var obj = {}
		        for (i in val) {
		            if (i === '__proxy__' || i === '__data__' || i === '__const__')
		                continue
		            if (val.hasOwnProperty(i)) {
		                var value = val[i]
		                obj[i] = value && value.nodeType ? value : toJson(value)
		            }
		        }
		        return obj
		    }
		    return val
		}
	
		function hideProperty(host, name, value) {
		    if (canHideProperty) {
		        Object.defineProperty(host, name, {
		            value: value,
		            writable: true,
		            enumerable: false,
		            configurable: true
		        })
		    } else {
		        host[name] = value
		    }
		}
	
		var modelAccessor = {
		    get: function () {
		        return toJson(this)
		    },
		    set: avalon.noop,
		    enumerable: false,
		    configurable: true
		}
	
		function initViewModel($vmodel, heirloom, keys, accessors, options) {
	
		    if (options.array) {
		        if (avalon.modern) {
		            Object.defineProperty($vmodel, '$model', modelAccessor)
		        } else {
		            $vmodel.$model = toJson($vmodel)
		        }
		    } else {
		        function hasOwnKey(key) {
		            return keys[key] === true
		        }
		        hideProperty($vmodel, '$accessors', accessors)
		        hideProperty($vmodel, 'hasOwnProperty', hasOwnKey)
		        hideProperty($vmodel, '$track', Object.keys(keys).sort().join(';;'))
		    }
		    hideProperty($vmodel, '$id', options.id)
		    hideProperty($vmodel, '$hashcode', options.hashcode)
		    if (options.master === true) {
		        hideProperty($vmodel, '$run', function () {
		            run.call($vmodel)
		        })
		        hideProperty($vmodel, '$wait', function () {
		            wait.call($vmodel)
		        })
		        hideProperty($vmodel, '$element', null)
		        hideProperty($vmodel, '$render', 0)
		        initEvents($vmodel, heirloom)
		    }
		}
	
		function wait() {
		    this.$events.$$wait$$ = true
		}
	
		function run() {
		    var host = this.$events
		    delete host.$$wait$$
		    if (host.$$dirty$$) {
		        delete host.$$dirty$$
		        avalon.rerenderStart = new Date
		        var id = this.$id
		        var dotIndex = id.indexOf('.')
		        if (dotIndex > 0) {
		            avalon.batch(id.slice(0, dotIndex))
		        } else {
		            avalon.batch(id)
		        }
		    }
		}
	
		share.$$midway.initViewModel = initViewModel
	
		share.$$midway.hideProperty = hideProperty
	
		var mixin = {
		    toJson: toJson,
		    initViewModel: initViewModel,
		    modelAccessor: modelAccessor
		}
		for (var i in share) {
		    mixin[i] = share[i]
		}
	
		module.exports = mixin
	
	
	/***/ },
	/* 77 */
	/***/ function(module, exports, __webpack_require__) {
	
		
		var $$midway = {}
		var $$skipArray = __webpack_require__(67)
		var dispatch = __webpack_require__(78)
		var $emit = dispatch.$emit
		var $watch = dispatch.$watch
		/*
		 * initEvents
		 * isSkip
		 * modelAdaptor
		 * makeAccessor
		 */
	
		function initEvents($vmodel, heirloom) {
		    heirloom.__vmodel__ = $vmodel
		    var hide = $$midway.hideProperty
	
		    hide($vmodel, '$events', heirloom)
		    hide($vmodel, '$watch', function () {
		        if (arguments.length === 2) {
		            return $watch.apply($vmodel, arguments)
		        } else {
		            throw '$watch方法参数不对'
		        }
		    })
		    hide($vmodel, '$fire', function (expr, a, b) {
		        var list = $vmodel.$events[expr]
		        $emit(list, $vmodel, expr, a, b)
		    })
		}
	
		var rskip = /function|window|date|regexp|element/i
	
		function isSkip(key, value, skipArray) {
		    // 判定此属性能否转换访问器
		    return key.charAt(0) === '$' ||
		            skipArray[key] ||
		            (rskip.test(avalon.type(value))) ||
		            (value && value.nodeName && value.nodeType > 0)
		}
	
		function modelAdaptor(definition, old, heirloom, options) {
		    //如果数组转换为监控数组
		    if (Array.isArray(definition)) {
		        return $$midway.arrayFactory(definition, old, heirloom, options)
		    } else if (Object(definition) === definition && typeof definition !== 'function') {
		        //如果此属性原来就是一个VM,拆分里面的访问器属性
		        if (old && old.$id) {
		            ++avalon.suspendUpdate
		            //1.5带来的优化方案
		            if (old.$track !== Object.keys(definition).sort().join(';;')) {
		                var vm = $$midway.slaveFactory(old, definition, heirloom, options)
		            } else {
		                vm = old
		            }
		            for (var i in definition) {
		                if ($$skipArray[i])
		                    continue
		                vm[i] = definition[i]
		            }
		            --avalon.suspendUpdate
		            return vm
		        } else {
		            vm = $$midway.masterFactory(definition, heirloom, options)
		            return vm
		        }
		    } else {
		        return definition
		    }
		}
		$$midway.modelAdaptor = modelAdaptor
	
	
		function makeAccessor(sid, spath, heirloom) {
		    var old = NaN
		    function get() {
		        return old
		    }
		    get.heirloom = heirloom
		    return {
		        get: get,
		        set: function (val) {
		            if (old === val) {
		                return
		            }
		            var vm = heirloom.__vmodel__
		            if (val && typeof val === 'object') {
		                val = $$midway.modelAdaptor(val, old, heirloom, {
		                    pathname: spath,
		                    id: sid
		                })
		            }
		            var older = old
		            old = val
		            if (this.$hashcode && vm ) {
		                vm.$events.$$dirty$$ = true
		                if(vm.$events.$$wait$$)
		                    return
		                //★★确保切换到新的events中(这个events可能是来自oldProxy)               
		                if (heirloom !== vm.$events) {
		                    get.heirloom = vm.$events
		                }
		                //如果这个属性是组件配置对象中的属性,那么它需要触发组件的回调
		                emitWidget(get.$decompose, spath, val, older)
		                //触发普通属性的回调
		                if (spath.indexOf('*') === -1) {
		                    $emit(get.heirloom[spath], vm, spath, val, older)
		                }
		                //如果这个属性是数组元素上的属性
		                emitArray(sid, vm, spath, val, older)
		                //如果这个属性存在通配符
		                emitWildcard(get.heirloom, vm, spath, val, older)
		                vm.$events.$$dirty$$ = false
		                batchUpdateView(vm.$id)
		            }
		        },
		        enumerable: true,
		        configurable: true
		    }
		}
	
		function batchUpdateView(id) {
		    avalon.rerenderStart = new Date
		    var dotIndex = id.indexOf('.')
		    if (dotIndex > 0) {
		        avalon.batch(id.slice(0, dotIndex))
		    } else {
		        avalon.batch(id)
		    }
		}
	
		var rtopsub = /([^.]+)\.(.+)/
		function emitArray(sid, vm, spath, val, older) {
		    if (sid.indexOf('.*.') > 0) {
		        var arr = sid.match(rtopsub)
		        var top = avalon.vmodels[ arr[1] ]
		        if (top) {
		            var path = arr[2]
		            $emit(top.$events[ path ], vm, spath, val, older)
		        }
		    }
		}
	
		function emitWidget(whole, spath, val, older) {
		    if (whole && whole[spath]) {
		        var wvm = whole[spath]
		        if (!wvm.$hashcode) {
		            delete whole[spath]
		        } else {
		            var wpath = spath.replace(/^[^.]+\./, '')
		            if (wpath !== spath) {
		                $emit(wvm.$events[wpath], wvm, wpath, val, older)
		            }
		        }
		    }
		}
	
		function emitWildcard(obj, vm, spath, val, older) {
		    if (obj.__fuzzy__) {
		        obj.__fuzzy__.replace(avalon.rword, function (expr) {
		            var list = obj[expr]
		            var reg = list.reg
		            if (reg && reg.test(spath)) {
		                $emit(list, vm, spath, val, older)
		            }
		            return expr
		        })
		    }
		}
	
	
		function define(definition) {
		    var $id = definition.$id
		    if (!$id && avalon.config.debug) {
		        avalon.warn('vm.$id must be specified')
		    }
		    if (avalon.vmodels[$id]) {
		        throw Error('error:[' + $id + '] had defined!')
		    }
		    var vm = $$midway.masterFactory(definition, {}, {
		        pathname: '',
		        id: $id,
		        master: true
		    })
	
		    return avalon.vmodels[$id] = vm
	
		}
	
		function arrayFactory(array, old, heirloom, options) {
		    if (old && old.splice) {
		        var args = [0, old.length].concat(array)
		        ++avalon.suspendUpdate
		        old.splice.apply(old, args)
		        --avalon.suspendUpdate
		        return old
		    } else {
		        for (var i in __array__) {
		            array[i] = __array__[i]
		        }
	
		        array.notify = function (a, b, c, d) {
		            var vm = heirloom.__vmodel__
		            if (vm) {
		                var path = a === null || a === void 0 ?
		                        options.pathname :
		                        options.pathname + '.' + a
		                vm.$fire(path, b, c)
		                if (!d && !heirloom.$$wait$$ && !avalon.suspendUpdate ) {
		                    batchUpdateView(vm.$id)
		                }
		            }
		        }
	
		        var hashcode = avalon.makeHashCode('$')
		        options.array = true
		        options.hashcode = hashcode
		        options.id = options.id || hashcode
		        $$midway.initViewModel(array, heirloom, {}, {}, options)
	
		        for (var j = 0, n = array.length; j < n; j++) {
		            array[j] = modelAdaptor(array[j], 0, {}, {
		                id: array.$id + '.*',
		                master: true
		            })
		        }
		        return array
		    }
		}
		$$midway.arrayFactory = arrayFactory
	
		var __array__ = {
		    set: function (index, val) {
		        if (((index >>> 0) === index) && this[index] !== val) {
		            if (index > this.length) {
		                throw Error(index + 'set方法的第一个参数不能大于原数组长度')
		            }
		            this.splice(index, 1, val)
		        }
		    },
		    contains: function (el) { //判定是否包含
		        return this.indexOf(el) !== -1
		    },
		    ensure: function (el) {
		        if (!this.contains(el)) { //只有不存在才push
		            this.push(el)
		        }
		        return this
		    },
		    pushArray: function (arr) {
		        return this.push.apply(this, arr)
		    },
		    remove: function (el) { //移除第一个等于给定值的元素
		        return this.removeAt(this.indexOf(el))
		    },
		    removeAt: function (index) { //移除指定索引上的元素
		        if ((index >>> 0) === index) {
		            return this.splice(index, 1)
		        }
		        return []
		    },
		    clear: function () {
		        this.removeAll()
		        return this
		    }
		}
		avalon.define = define
	
		module.exports = {
		    $$midway: $$midway,
		    $$skipArray: $$skipArray,
		    isSkip: isSkip,
		    __array__: __array__,
		    initEvents: initEvents,
		    makeAccessor: makeAccessor,
		    modelAdaptor: modelAdaptor
		}
	
	/***/ },
	/* 78 */
	/***/ function(module, exports) {
	
		
		/**
		 * ------------------------------------------------------------
		 * 属性监听系统 
		 * ------------------------------------------------------------
		 */
	
		function adjustVm(vm, expr) {
		    var toppath = expr.split(".")[0], other
		    try {
		        if (vm.hasOwnProperty(toppath)) {
		            if (vm.$accessors) {
		                other = vm.$accessors[toppath].get.heirloom.__vmodel__
		            } else {
		                other = Object.getOwnPropertyDescriptor(vm, toppath).get.heirloom.__vmodel__
		            }
	
		        }
		    } catch (e) {
		    }
		    return other || vm
		}
	
		function toRegExp(expr) {
		    var arr = expr.split('.')
		    return new RegExp("^" + arr.map(function (el) {
		        return el === '*' ? '(?:[^.]+)' : el
		    }).join('\\.') + '$', 'i')
		}
		function addFuzzy(add, obj, expr) {
		    if (add) {
		        if (obj.__fuzzy__) {
		            if (obj.__fuzzy__.indexOf(',' + expr) === -1) {
		                obj.__fuzzy__ += ',' + expr
		            }
		        } else {
		            obj.__fuzzy__ = expr
		        }
		    }
		}
	
		function $watch(expr, callback) {
		    var fuzzy = expr.indexOf('.*') > 0 || expr === '*'
		    var vm = fuzzy ? this : $watch.adjust(this, expr)
		    var hive = vm.$events
		    var list = hive[expr] || (hive[expr] = [])
		    if (fuzzy) {
		        list.reg = list.reg || toRegExp(expr)
		    }
		    addFuzzy(fuzzy, hive, expr)
		    if (vm !== this) {
		        addFuzzy(fuzzy, this.$events, expr)
		        this.$events[expr] = list
		    }
	
		    avalon.Array.ensure(list, callback)
	
		    return function () {
		        avalon.Array.remove(list, callback)
		    }
		}
	
		$watch.adjust = adjustVm
		/**
		 * $fire 方法的内部实现
		 * 
		 * @param {Array} list 订阅者数组
		 * @param {Component} vm
		 * @param {String} path 监听属性名或路径
		 * @param {Any} a 当前值 
		 * @param {Any} b 过去值
		 * @param {Number} i 如果抛错,让下一个继续执行
		 * @returns {undefined}
		 */
		function $emit(list, vm, path, a, b, i) {
		    if (list && list.length) {
		        try {
		            for (i = i || list.length - 1; i >= 0; i--) {
		                var callback = list[i]
		                callback.call(vm, a, b, path)
		            }
		        } catch (e) {
		            if (i - 1 > 0)
		                $emit(list, vm, path, a, b, i - 1)
		            avalon.log(e, path)
		        }
	
		    }
		}
	
	
		module.exports = {
		    $emit: $emit,
		    $watch: $watch,
		    adjustVm: adjustVm
		}
	
	
	/***/ },
	/* 79 */
	/***/ function(module, exports) {
	
		//如果浏览器不支持ecma262v5的Object.defineProperties或者存在BUG，比如IE8
		//标准浏览器使用__defineGetter__, __defineSetter__实现
		var flag = true
		try {
		    Object.defineProperty({}, '_', {
		        value: 'x'
		    })
		} catch (e) {
		    flag = false
		}
	
		module.exports = flag
	
	/***/ },
	/* 80 */
	/***/ function(module, exports, __webpack_require__) {
	
		
		var canHideProperty = __webpack_require__(79)
		var $$skipArray = __webpack_require__(67)
	
	
		var defineProperties = Object.defineProperties
		var defineProperty
	
		var expose = new Date() - 0
	
		if (!canHideProperty) {
		    if ('__defineGetter__' in avalon) {
		        defineProperty = function (obj, prop, desc) {
		            if ('value' in desc) {
		                obj[prop] = desc.value
		            }
		            if ('get' in desc) {
		                obj.__defineGetter__(prop, desc.get)
		            }
		            if ('set' in desc) {
		                obj.__defineSetter__(prop, desc.set)
		            }
		            return obj
		        }
		        defineProperties = function (obj, descs) {
		            for (var prop in descs) {
		                if (descs.hasOwnProperty(prop)) {
		                    defineProperty(obj, prop, descs[prop])
		                }
		            }
		            return obj
		        }
		    }
		    if (avalon.msie) {
		        var VBClassPool = {}
		        window.execScript([// jshint ignore:line
		            'Function parseVB(code)',
		            '\tExecuteGlobal(code)',
		            'End Function' //转换一段文本为VB代码
		        ].join('\n'), 'VBScript');
		        
		        function VBMediator(instance, accessors, name, value) {// jshint ignore:line
		            var accessor = accessors[name]
		            if (arguments.length === 4) {
		                accessor.set.call(instance, value)
		            } else {
		                return accessor.get.call(instance)
		            }
		        }
		        defineProperties = function (name, accessors, properties) {
		            // jshint ignore:line
		            var buffer = []
		            buffer.push(
		                    '\r\n\tPrivate [__data__], [__proxy__]',
		                    '\tPublic Default Function [__const__](d' + expose + ', p' + expose + ')',
		                    '\t\tSet [__data__] = d' + expose + ': set [__proxy__] = p' + expose,
		                    '\t\tSet [__const__] = Me', //链式调用
		                    '\tEnd Function')
		            //添加普通属性,因为VBScript对象不能像JS那样随意增删属性，必须在这里预先定义好
		            var uniq = {
		               __proxy__: true,
		               __data__: true,
		               __const__: true
		            }
	
		            //添加访问器属性 
		            for (name in accessors) {
		                uniq[name] = true
		                buffer.push(
		                        //由于不知对方会传入什么,因此set, let都用上
		                        '\tPublic Property Let [' + name + '](val' + expose + ')', //setter
		                        '\t\tCall [__proxy__](Me,[__data__], "' + name + '", val' + expose + ')',
		                        '\tEnd Property',
		                        '\tPublic Property Set [' + name + '](val' + expose + ')', //setter
		                        '\t\tCall [__proxy__](Me,[__data__], "' + name + '", val' + expose + ')',
		                        '\tEnd Property',
		                        '\tPublic Property Get [' + name + ']', //getter
		                        '\tOn Error Resume Next', //必须优先使用set语句,否则它会误将数组当字符串返回
		                        '\t\tSet[' + name + '] = [__proxy__](Me,[__data__],"' + name + '")',
		                        '\tIf Err.Number <> 0 Then',
		                        '\t\t[' + name + '] = [__proxy__](Me,[__data__],"' + name + '")',
		                        '\tEnd If',
		                        '\tOn Error Goto 0',
		                        '\tEnd Property')
	
		            }
		            for (name in properties) {
		                if (uniq[name] !== true) {
		                    uniq[name] = true
		                    buffer.push('\tPublic [' + name + ']')
		                }
		            }
		            for (name in $$skipArray) {
		                if (uniq[name] !== true) {
		                    uniq[name] = true
		                    buffer.push('\tPublic [' + name + ']')
		                }
		            }
		            buffer.push('\tPublic [' + 'hasOwnProperty' + ']')
		            buffer.push('End Class')
		            var body = buffer.join('\r\n')
		            var className = VBClassPool[body]
		            if (!className) {
		                className = avalon.makeHashCode('VBClass')
		                
		                window.parseVB('Class ' + className + body)
		                window.parseVB([
		                    'Function ' + className + 'Factory(a, b)', //创建实例并传入两个关键的参数
		                    '\tDim o',
		                    '\tSet o = (New ' + className + ')(a, b)',
		                    '\tSet ' + className + 'Factory = o',
		                    'End Function'
		                ].join('\r\n'))
		                VBClassPool[body] = className
		            }
		            var ret = window[className + 'Factory'](accessors, VBMediator) //得到其产品
		            return ret //得到其产品
		        }
		    }
		}
	
		module.exports = defineProperties
	
	
	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! jQuery UI - v1.11.4 - 2015-03-11
	* http://jqueryui.com
	* Includes: core.js, widget.js, mouse.js, position.js, accordion.js, autocomplete.js, button.js, datepicker.js, dialog.js, draggable.js, droppable.js, effect.js, effect-blind.js, effect-bounce.js, effect-clip.js, effect-drop.js, effect-explode.js, effect-fade.js, effect-fold.js, effect-highlight.js, effect-puff.js, effect-pulsate.js, effect-scale.js, effect-shake.js, effect-size.js, effect-slide.js, effect-transfer.js, menu.js, progressbar.js, resizable.js, selectable.js, selectmenu.js, slider.js, sortable.js, spinner.js, tabs.js, tooltip.js
	* Copyright 2015 jQuery Foundation and other contributors; Licensed MIT */
	
	(function( factory ) {
		if ( true ) {
	
			// AMD. Register as an anonymous module.
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(2) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
	
			// Browser globals
			factory( jQuery );
		}
	}
	(function( $ ) {
	/*!
	 * jQuery UI Core 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/category/ui-core/
	 */
	
	
	// $.ui might exist from components with no dependencies, e.g., $.ui.position
	$.ui = $.ui || {};
	
	$.extend( $.ui, {
		version: "1.11.4",
	
		keyCode: {
			BACKSPACE: 8,
			COMMA: 188,
			DELETE: 46,
			DOWN: 40,
			END: 35,
			ENTER: 13,
			ESCAPE: 27,
			HOME: 36,
			LEFT: 37,
			PAGE_DOWN: 34,
			PAGE_UP: 33,
			PERIOD: 190,
			RIGHT: 39,
			SPACE: 32,
			TAB: 9,
			UP: 38
		}
	});
	
	// plugins
	$.fn.extend({
		scrollParent: function( includeHidden ) {
			var position = this.css( "position" ),
				excludeStaticParent = position === "absolute",
				overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
				scrollParent = this.parents().filter( function() {
					var parent = $( this );
					if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
						return false;
					}
					return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) + parent.css( "overflow-x" ) );
				}).eq( 0 );
	
			return position === "fixed" || !scrollParent.length ? $( this[ 0 ].ownerDocument || document ) : scrollParent;
		},
	
		uniqueId: (function() {
			var uuid = 0;
	
			return function() {
				return this.each(function() {
					if ( !this.id ) {
						this.id = "ui-id-" + ( ++uuid );
					}
				});
			};
		})(),
	
		removeUniqueId: function() {
			return this.each(function() {
				if ( /^ui-id-\d+$/.test( this.id ) ) {
					$( this ).removeAttr( "id" );
				}
			});
		}
	});
	
	// selectors
	function focusable( element, isTabIndexNotNaN ) {
		var map, mapName, img,
			nodeName = element.nodeName.toLowerCase();
		if ( "area" === nodeName ) {
			map = element.parentNode;
			mapName = map.name;
			if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
				return false;
			}
			img = $( "img[usemap='#" + mapName + "']" )[ 0 ];
			return !!img && visible( img );
		}
		return ( /^(input|select|textarea|button|object)$/.test( nodeName ) ?
			!element.disabled :
			"a" === nodeName ?
				element.href || isTabIndexNotNaN :
				isTabIndexNotNaN) &&
			// the element and all of its ancestors must be visible
			visible( element );
	}
	
	function visible( element ) {
		return $.expr.filters.visible( element ) &&
			!$( element ).parents().addBack().filter(function() {
				return $.css( this, "visibility" ) === "hidden";
			}).length;
	}
	
	$.extend( $.expr[ ":" ], {
		data: $.expr.createPseudo ?
			$.expr.createPseudo(function( dataName ) {
				return function( elem ) {
					return !!$.data( elem, dataName );
				};
			}) :
			// support: jQuery <1.8
			function( elem, i, match ) {
				return !!$.data( elem, match[ 3 ] );
			},
	
		focusable: function( element ) {
			return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
		},
	
		tabbable: function( element ) {
			var tabIndex = $.attr( element, "tabindex" ),
				isTabIndexNaN = isNaN( tabIndex );
			return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
		}
	});
	
	// support: jQuery <1.8
	if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
		$.each( [ "Width", "Height" ], function( i, name ) {
			var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
				type = name.toLowerCase(),
				orig = {
					innerWidth: $.fn.innerWidth,
					innerHeight: $.fn.innerHeight,
					outerWidth: $.fn.outerWidth,
					outerHeight: $.fn.outerHeight
				};
	
			function reduce( elem, size, border, margin ) {
				$.each( side, function() {
					size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
					if ( border ) {
						size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
					}
					if ( margin ) {
						size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
					}
				});
				return size;
			}
	
			$.fn[ "inner" + name ] = function( size ) {
				if ( size === undefined ) {
					return orig[ "inner" + name ].call( this );
				}
	
				return this.each(function() {
					$( this ).css( type, reduce( this, size ) + "px" );
				});
			};
	
			$.fn[ "outer" + name] = function( size, margin ) {
				if ( typeof size !== "number" ) {
					return orig[ "outer" + name ].call( this, size );
				}
	
				return this.each(function() {
					$( this).css( type, reduce( this, size, true, margin ) + "px" );
				});
			};
		});
	}
	
	// support: jQuery <1.8
	if ( !$.fn.addBack ) {
		$.fn.addBack = function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		};
	}
	
	// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
	if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
		$.fn.removeData = (function( removeData ) {
			return function( key ) {
				if ( arguments.length ) {
					return removeData.call( this, $.camelCase( key ) );
				} else {
					return removeData.call( this );
				}
			};
		})( $.fn.removeData );
	}
	
	// deprecated
	$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );
	
	$.fn.extend({
		focus: (function( orig ) {
			return function( delay, fn ) {
				return typeof delay === "number" ?
					this.each(function() {
						var elem = this;
						setTimeout(function() {
							$( elem ).focus();
							if ( fn ) {
								fn.call( elem );
							}
						}, delay );
					}) :
					orig.apply( this, arguments );
			};
		})( $.fn.focus ),
	
		disableSelection: (function() {
			var eventType = "onselectstart" in document.createElement( "div" ) ?
				"selectstart" :
				"mousedown";
	
			return function() {
				return this.bind( eventType + ".ui-disableSelection", function( event ) {
					event.preventDefault();
				});
			};
		})(),
	
		enableSelection: function() {
			return this.unbind( ".ui-disableSelection" );
		},
	
		zIndex: function( zIndex ) {
			if ( zIndex !== undefined ) {
				return this.css( "zIndex", zIndex );
			}
	
			if ( this.length ) {
				var elem = $( this[ 0 ] ), position, value;
				while ( elem.length && elem[ 0 ] !== document ) {
					// Ignore z-index if position is set to a value where z-index is ignored by the browser
					// This makes behavior of this function consistent across browsers
					// WebKit always returns auto if the element is positioned
					position = elem.css( "position" );
					if ( position === "absolute" || position === "relative" || position === "fixed" ) {
						// IE returns 0 when zIndex is not specified
						// other browsers return a string
						// we ignore the case of nested elements with an explicit value of 0
						// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
						value = parseInt( elem.css( "zIndex" ), 10 );
						if ( !isNaN( value ) && value !== 0 ) {
							return value;
						}
					}
					elem = elem.parent();
				}
			}
	
			return 0;
		}
	});
	
	// $.ui.plugin is deprecated. Use $.widget() extensions instead.
	$.ui.plugin = {
		add: function( module, option, set ) {
			var i,
				proto = $.ui[ module ].prototype;
			for ( i in set ) {
				proto.plugins[ i ] = proto.plugins[ i ] || [];
				proto.plugins[ i ].push( [ option, set[ i ] ] );
			}
		},
		call: function( instance, name, args, allowDisconnected ) {
			var i,
				set = instance.plugins[ name ];
	
			if ( !set ) {
				return;
			}
	
			if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
				return;
			}
	
			for ( i = 0; i < set.length; i++ ) {
				if ( instance.options[ set[ i ][ 0 ] ] ) {
					set[ i ][ 1 ].apply( instance.element, args );
				}
			}
		}
	};
	
	
	/*!
	 * jQuery UI Widget 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/jQuery.widget/
	 */
	
	
	var widget_uuid = 0,
		widget_slice = Array.prototype.slice;
	
	$.cleanData = (function( orig ) {
		return function( elems ) {
			var events, elem, i;
			for ( i = 0; (elem = elems[i]) != null; i++ ) {
				try {
	
					// Only trigger remove when necessary to save time
					events = $._data( elem, "events" );
					if ( events && events.remove ) {
						$( elem ).triggerHandler( "remove" );
					}
	
				// http://bugs.jquery.com/ticket/8235
				} catch ( e ) {}
			}
			orig( elems );
		};
	})( $.cleanData );
	
	$.widget = function( name, base, prototype ) {
		var fullName, existingConstructor, constructor, basePrototype,
			// proxiedPrototype allows the provided prototype to remain unmodified
			// so that it can be used as a mixin for multiple widgets (#8876)
			proxiedPrototype = {},
			namespace = name.split( "." )[ 0 ];
	
		name = name.split( "." )[ 1 ];
		fullName = namespace + "-" + name;
	
		if ( !prototype ) {
			prototype = base;
			base = $.Widget;
		}
	
		// create selector for plugin
		$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
			return !!$.data( elem, fullName );
		};
	
		$[ namespace ] = $[ namespace ] || {};
		existingConstructor = $[ namespace ][ name ];
		constructor = $[ namespace ][ name ] = function( options, element ) {
			// allow instantiation without "new" keyword
			if ( !this._createWidget ) {
				return new constructor( options, element );
			}
	
			// allow instantiation without initializing for simple inheritance
			// must use "new" keyword (the code above always passes args)
			if ( arguments.length ) {
				this._createWidget( options, element );
			}
		};
		// extend with the existing constructor to carry over any static properties
		$.extend( constructor, existingConstructor, {
			version: prototype.version,
			// copy the object used to create the prototype in case we need to
			// redefine the widget later
			_proto: $.extend( {}, prototype ),
			// track widgets that inherit from this widget in case this widget is
			// redefined after a widget inherits from it
			_childConstructors: []
		});
	
		basePrototype = new base();
		// we need to make the options hash a property directly on the new instance
		// otherwise we'll modify the options hash on the prototype that we're
		// inheriting from
		basePrototype.options = $.widget.extend( {}, basePrototype.options );
		$.each( prototype, function( prop, value ) {
			if ( !$.isFunction( value ) ) {
				proxiedPrototype[ prop ] = value;
				return;
			}
			proxiedPrototype[ prop ] = (function() {
				var _super = function() {
						return base.prototype[ prop ].apply( this, arguments );
					},
					_superApply = function( args ) {
						return base.prototype[ prop ].apply( this, args );
					};
				return function() {
					var __super = this._super,
						__superApply = this._superApply,
						returnValue;
	
					this._super = _super;
					this._superApply = _superApply;
	
					returnValue = value.apply( this, arguments );
	
					this._super = __super;
					this._superApply = __superApply;
	
					return returnValue;
				};
			})();
		});
		constructor.prototype = $.widget.extend( basePrototype, {
			// TODO: remove support for widgetEventPrefix
			// always use the name + a colon as the prefix, e.g., draggable:start
			// don't prefix for widgets that aren't DOM-based
			widgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name
		}, proxiedPrototype, {
			constructor: constructor,
			namespace: namespace,
			widgetName: name,
			widgetFullName: fullName
		});
	
		// If this widget is being redefined then we need to find all widgets that
		// are inheriting from it and redefine all of them so that they inherit from
		// the new version of this widget. We're essentially trying to replace one
		// level in the prototype chain.
		if ( existingConstructor ) {
			$.each( existingConstructor._childConstructors, function( i, child ) {
				var childPrototype = child.prototype;
	
				// redefine the child widget using the same prototype that was
				// originally used, but inherit from the new version of the base
				$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
			});
			// remove the list of existing child constructors from the old constructor
			// so the old child constructors can be garbage collected
			delete existingConstructor._childConstructors;
		} else {
			base._childConstructors.push( constructor );
		}
	
		$.widget.bridge( name, constructor );
	
		return constructor;
	};
	
	$.widget.extend = function( target ) {
		var input = widget_slice.call( arguments, 1 ),
			inputIndex = 0,
			inputLength = input.length,
			key,
			value;
		for ( ; inputIndex < inputLength; inputIndex++ ) {
			for ( key in input[ inputIndex ] ) {
				value = input[ inputIndex ][ key ];
				if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
					// Clone objects
					if ( $.isPlainObject( value ) ) {
						target[ key ] = $.isPlainObject( target[ key ] ) ?
							$.widget.extend( {}, target[ key ], value ) :
							// Don't extend strings, arrays, etc. with objects
							$.widget.extend( {}, value );
					// Copy everything else by reference
					} else {
						target[ key ] = value;
					}
				}
			}
		}
		return target;
	};
	
	$.widget.bridge = function( name, object ) {
		var fullName = object.prototype.widgetFullName || name;
		$.fn[ name ] = function( options ) {
			var isMethodCall = typeof options === "string",
				args = widget_slice.call( arguments, 1 ),
				returnValue = this;
	
			if ( isMethodCall ) {
				this.each(function() {
					var methodValue,
						instance = $.data( this, fullName );
					if ( options === "instance" ) {
						returnValue = instance;
						return false;
					}
					if ( !instance ) {
						return $.error( "cannot call methods on " + name + " prior to initialization; " +
							"attempted to call method '" + options + "'" );
					}
					if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
						return $.error( "no such method '" + options + "' for " + name + " widget instance" );
					}
					methodValue = instance[ options ].apply( instance, args );
					if ( methodValue !== instance && methodValue !== undefined ) {
						returnValue = methodValue && methodValue.jquery ?
							returnValue.pushStack( methodValue.get() ) :
							methodValue;
						return false;
					}
				});
			} else {
	
				// Allow multiple hashes to be passed on init
				if ( args.length ) {
					options = $.widget.extend.apply( null, [ options ].concat(args) );
				}
	
				this.each(function() {
					var instance = $.data( this, fullName );
					if ( instance ) {
						instance.option( options || {} );
						if ( instance._init ) {
							instance._init();
						}
					} else {
						$.data( this, fullName, new object( options, this ) );
					}
				});
			}
	
			return returnValue;
		};
	};
	
	$.Widget = function( /* options, element */ ) {};
	$.Widget._childConstructors = [];
	
	$.Widget.prototype = {
		widgetName: "widget",
		widgetEventPrefix: "",
		defaultElement: "<div>",
		options: {
			disabled: false,
	
			// callbacks
			create: null
		},
		_createWidget: function( options, element ) {
			element = $( element || this.defaultElement || this )[ 0 ];
			this.element = $( element );
			this.uuid = widget_uuid++;
			this.eventNamespace = "." + this.widgetName + this.uuid;
	
			this.bindings = $();
			this.hoverable = $();
			this.focusable = $();
	
			if ( element !== this ) {
				$.data( element, this.widgetFullName, this );
				this._on( true, this.element, {
					remove: function( event ) {
						if ( event.target === element ) {
							this.destroy();
						}
					}
				});
				this.document = $( element.style ?
					// element within the document
					element.ownerDocument :
					// element is window or document
					element.document || element );
				this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
			}
	
			this.options = $.widget.extend( {},
				this.options,
				this._getCreateOptions(),
				options );
	
			this._create();
			this._trigger( "create", null, this._getCreateEventData() );
			this._init();
		},
		_getCreateOptions: $.noop,
		_getCreateEventData: $.noop,
		_create: $.noop,
		_init: $.noop,
	
		destroy: function() {
			this._destroy();
			// we can probably remove the unbind calls in 2.0
			// all event bindings should go through this._on()
			this.element
				.unbind( this.eventNamespace )
				.removeData( this.widgetFullName )
				// support: jquery <1.6.3
				// http://bugs.jquery.com/ticket/9413
				.removeData( $.camelCase( this.widgetFullName ) );
			this.widget()
				.unbind( this.eventNamespace )
				.removeAttr( "aria-disabled" )
				.removeClass(
					this.widgetFullName + "-disabled " +
					"ui-state-disabled" );
	
			// clean up events and states
			this.bindings.unbind( this.eventNamespace );
			this.hoverable.removeClass( "ui-state-hover" );
			this.focusable.removeClass( "ui-state-focus" );
		},
		_destroy: $.noop,
	
		widget: function() {
			return this.element;
		},
	
		option: function( key, value ) {
			var options = key,
				parts,
				curOption,
				i;
	
			if ( arguments.length === 0 ) {
				// don't return a reference to the internal hash
				return $.widget.extend( {}, this.options );
			}
	
			if ( typeof key === "string" ) {
				// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
				options = {};
				parts = key.split( "." );
				key = parts.shift();
				if ( parts.length ) {
					curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
					for ( i = 0; i < parts.length - 1; i++ ) {
						curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
						curOption = curOption[ parts[ i ] ];
					}
					key = parts.pop();
					if ( arguments.length === 1 ) {
						return curOption[ key ] === undefined ? null : curOption[ key ];
					}
					curOption[ key ] = value;
				} else {
					if ( arguments.length === 1 ) {
						return this.options[ key ] === undefined ? null : this.options[ key ];
					}
					options[ key ] = value;
				}
			}
	
			this._setOptions( options );
	
			return this;
		},
		_setOptions: function( options ) {
			var key;
	
			for ( key in options ) {
				this._setOption( key, options[ key ] );
			}
	
			return this;
		},
		_setOption: function( key, value ) {
			this.options[ key ] = value;
	
			if ( key === "disabled" ) {
				this.widget()
					.toggleClass( this.widgetFullName + "-disabled", !!value );
	
				// If the widget is becoming disabled, then nothing is interactive
				if ( value ) {
					this.hoverable.removeClass( "ui-state-hover" );
					this.focusable.removeClass( "ui-state-focus" );
				}
			}
	
			return this;
		},
	
		enable: function() {
			return this._setOptions({ disabled: false });
		},
		disable: function() {
			return this._setOptions({ disabled: true });
		},
	
		_on: function( suppressDisabledCheck, element, handlers ) {
			var delegateElement,
				instance = this;
	
			// no suppressDisabledCheck flag, shuffle arguments
			if ( typeof suppressDisabledCheck !== "boolean" ) {
				handlers = element;
				element = suppressDisabledCheck;
				suppressDisabledCheck = false;
			}
	
			// no element argument, shuffle and use this.element
			if ( !handlers ) {
				handlers = element;
				element = this.element;
				delegateElement = this.widget();
			} else {
				element = delegateElement = $( element );
				this.bindings = this.bindings.add( element );
			}
	
			$.each( handlers, function( event, handler ) {
				function handlerProxy() {
					// allow widgets to customize the disabled handling
					// - disabled as an array instead of boolean
					// - disabled class as method for disabling individual parts
					if ( !suppressDisabledCheck &&
							( instance.options.disabled === true ||
								$( this ).hasClass( "ui-state-disabled" ) ) ) {
						return;
					}
					return ( typeof handler === "string" ? instance[ handler ] : handler )
						.apply( instance, arguments );
				}
	
				// copy the guid so direct unbinding works
				if ( typeof handler !== "string" ) {
					handlerProxy.guid = handler.guid =
						handler.guid || handlerProxy.guid || $.guid++;
				}
	
				var match = event.match( /^([\w:-]*)\s*(.*)$/ ),
					eventName = match[1] + instance.eventNamespace,
					selector = match[2];
				if ( selector ) {
					delegateElement.delegate( selector, eventName, handlerProxy );
				} else {
					element.bind( eventName, handlerProxy );
				}
			});
		},
	
		_off: function( element, eventName ) {
			eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) +
				this.eventNamespace;
			element.unbind( eventName ).undelegate( eventName );
	
			// Clear the stack to avoid memory leaks (#10056)
			this.bindings = $( this.bindings.not( element ).get() );
			this.focusable = $( this.focusable.not( element ).get() );
			this.hoverable = $( this.hoverable.not( element ).get() );
		},
	
		_delay: function( handler, delay ) {
			function handlerProxy() {
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}
			var instance = this;
			return setTimeout( handlerProxy, delay || 0 );
		},
	
		_hoverable: function( element ) {
			this.hoverable = this.hoverable.add( element );
			this._on( element, {
				mouseenter: function( event ) {
					$( event.currentTarget ).addClass( "ui-state-hover" );
				},
				mouseleave: function( event ) {
					$( event.currentTarget ).removeClass( "ui-state-hover" );
				}
			});
		},
	
		_focusable: function( element ) {
			this.focusable = this.focusable.add( element );
			this._on( element, {
				focusin: function( event ) {
					$( event.currentTarget ).addClass( "ui-state-focus" );
				},
				focusout: function( event ) {
					$( event.currentTarget ).removeClass( "ui-state-focus" );
				}
			});
		},
	
		_trigger: function( type, event, data ) {
			var prop, orig,
				callback = this.options[ type ];
	
			data = data || {};
			event = $.Event( event );
			event.type = ( type === this.widgetEventPrefix ?
				type :
				this.widgetEventPrefix + type ).toLowerCase();
			// the original event may come from any element
			// so we need to reset the target on the new event
			event.target = this.element[ 0 ];
	
			// copy original event properties over to the new event
			orig = event.originalEvent;
			if ( orig ) {
				for ( prop in orig ) {
					if ( !( prop in event ) ) {
						event[ prop ] = orig[ prop ];
					}
				}
			}
	
			this.element.trigger( event, data );
			return !( $.isFunction( callback ) &&
				callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
				event.isDefaultPrevented() );
		}
	};
	
	$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
		$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
			if ( typeof options === "string" ) {
				options = { effect: options };
			}
			var hasOptions,
				effectName = !options ?
					method :
					options === true || typeof options === "number" ?
						defaultEffect :
						options.effect || defaultEffect;
			options = options || {};
			if ( typeof options === "number" ) {
				options = { duration: options };
			}
			hasOptions = !$.isEmptyObject( options );
			options.complete = callback;
			if ( options.delay ) {
				element.delay( options.delay );
			}
			if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
				element[ method ]( options );
			} else if ( effectName !== method && element[ effectName ] ) {
				element[ effectName ]( options.duration, options.easing, callback );
			} else {
				element.queue(function( next ) {
					$( this )[ method ]();
					if ( callback ) {
						callback.call( element[ 0 ] );
					}
					next();
				});
			}
		};
	});
	
	var widget = $.widget;
	
	
	/*!
	 * jQuery UI Mouse 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/mouse/
	 */
	
	
	var mouseHandled = false;
	$( document ).mouseup( function() {
		mouseHandled = false;
	});
	
	var mouse = $.widget("ui.mouse", {
		version: "1.11.4",
		options: {
			cancel: "input,textarea,button,select,option",
			distance: 1,
			delay: 0
		},
		_mouseInit: function() {
			var that = this;
	
			this.element
				.bind("mousedown." + this.widgetName, function(event) {
					return that._mouseDown(event);
				})
				.bind("click." + this.widgetName, function(event) {
					if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
						$.removeData(event.target, that.widgetName + ".preventClickEvent");
						event.stopImmediatePropagation();
						return false;
					}
				});
	
			this.started = false;
		},
	
		// TODO: make sure destroying one instance of mouse doesn't mess with
		// other instances of mouse
		_mouseDestroy: function() {
			this.element.unbind("." + this.widgetName);
			if ( this._mouseMoveDelegate ) {
				this.document
					.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate)
					.unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
			}
		},
	
		_mouseDown: function(event) {
			// don't let more than one widget handle mouseStart
			if ( mouseHandled ) {
				return;
			}
	
			this._mouseMoved = false;
	
			// we may have missed mouseup (out of window)
			(this._mouseStarted && this._mouseUp(event));
	
			this._mouseDownEvent = event;
	
			var that = this,
				btnIsLeft = (event.which === 1),
				// event.target.nodeName works around a bug in IE 8 with
				// disabled inputs (#7620)
				elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
			if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
				return true;
			}
	
			this.mouseDelayMet = !this.options.delay;
			if (!this.mouseDelayMet) {
				this._mouseDelayTimer = setTimeout(function() {
					that.mouseDelayMet = true;
				}, this.options.delay);
			}
	
			if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
				this._mouseStarted = (this._mouseStart(event) !== false);
				if (!this._mouseStarted) {
					event.preventDefault();
					return true;
				}
			}
	
			// Click event may never have fired (Gecko & Opera)
			if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
				$.removeData(event.target, this.widgetName + ".preventClickEvent");
			}
	
			// these delegates are required to keep context
			this._mouseMoveDelegate = function(event) {
				return that._mouseMove(event);
			};
			this._mouseUpDelegate = function(event) {
				return that._mouseUp(event);
			};
	
			this.document
				.bind( "mousemove." + this.widgetName, this._mouseMoveDelegate )
				.bind( "mouseup." + this.widgetName, this._mouseUpDelegate );
	
			event.preventDefault();
	
			mouseHandled = true;
			return true;
		},
	
		_mouseMove: function(event) {
			// Only check for mouseups outside the document if you've moved inside the document
			// at least once. This prevents the firing of mouseup in the case of IE<9, which will
			// fire a mousemove event if content is placed under the cursor. See #7778
			// Support: IE <9
			if ( this._mouseMoved ) {
				// IE mouseup check - mouseup happened when mouse was out of window
				if ($.ui.ie && ( !document.documentMode || document.documentMode < 9 ) && !event.button) {
					return this._mouseUp(event);
	
				// Iframe mouseup check - mouseup occurred in another document
				} else if ( !event.which ) {
					return this._mouseUp( event );
				}
			}
	
			if ( event.which || event.button ) {
				this._mouseMoved = true;
			}
	
			if (this._mouseStarted) {
				this._mouseDrag(event);
				return event.preventDefault();
			}
	
			if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
				this._mouseStarted =
					(this._mouseStart(this._mouseDownEvent, event) !== false);
				(this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
			}
	
			return !this._mouseStarted;
		},
	
		_mouseUp: function(event) {
			this.document
				.unbind( "mousemove." + this.widgetName, this._mouseMoveDelegate )
				.unbind( "mouseup." + this.widgetName, this._mouseUpDelegate );
	
			if (this._mouseStarted) {
				this._mouseStarted = false;
	
				if (event.target === this._mouseDownEvent.target) {
					$.data(event.target, this.widgetName + ".preventClickEvent", true);
				}
	
				this._mouseStop(event);
			}
	
			mouseHandled = false;
			return false;
		},
	
		_mouseDistanceMet: function(event) {
			return (Math.max(
					Math.abs(this._mouseDownEvent.pageX - event.pageX),
					Math.abs(this._mouseDownEvent.pageY - event.pageY)
				) >= this.options.distance
			);
		},
	
		_mouseDelayMet: function(/* event */) {
			return this.mouseDelayMet;
		},
	
		// These are placeholder methods, to be overriden by extending plugin
		_mouseStart: function(/* event */) {},
		_mouseDrag: function(/* event */) {},
		_mouseStop: function(/* event */) {},
		_mouseCapture: function(/* event */) { return true; }
	});
	
	
	/*!
	 * jQuery UI Position 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/position/
	 */
	
	(function() {
	
	$.ui = $.ui || {};
	
	var cachedScrollbarWidth, supportsOffsetFractions,
		max = Math.max,
		abs = Math.abs,
		round = Math.round,
		rhorizontal = /left|center|right/,
		rvertical = /top|center|bottom/,
		roffset = /[\+\-]\d+(\.[\d]+)?%?/,
		rposition = /^\w+/,
		rpercent = /%$/,
		_position = $.fn.position;
	
	function getOffsets( offsets, width, height ) {
		return [
			parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
			parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
		];
	}
	
	function parseCss( element, property ) {
		return parseInt( $.css( element, property ), 10 ) || 0;
	}
	
	function getDimensions( elem ) {
		var raw = elem[0];
		if ( raw.nodeType === 9 ) {
			return {
				width: elem.width(),
				height: elem.height(),
				offset: { top: 0, left: 0 }
			};
		}
		if ( $.isWindow( raw ) ) {
			return {
				width: elem.width(),
				height: elem.height(),
				offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
			};
		}
		if ( raw.preventDefault ) {
			return {
				width: 0,
				height: 0,
				offset: { top: raw.pageY, left: raw.pageX }
			};
		}
		return {
			width: elem.outerWidth(),
			height: elem.outerHeight(),
			offset: elem.offset()
		};
	}
	
	$.position = {
		scrollbarWidth: function() {
			if ( cachedScrollbarWidth !== undefined ) {
				return cachedScrollbarWidth;
			}
			var w1, w2,
				div = $( "<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
				innerDiv = div.children()[0];
	
			$( "body" ).append( div );
			w1 = innerDiv.offsetWidth;
			div.css( "overflow", "scroll" );
	
			w2 = innerDiv.offsetWidth;
	
			if ( w1 === w2 ) {
				w2 = div[0].clientWidth;
			}
	
			div.remove();
	
			return (cachedScrollbarWidth = w1 - w2);
		},
		getScrollInfo: function( within ) {
			var overflowX = within.isWindow || within.isDocument ? "" :
					within.element.css( "overflow-x" ),
				overflowY = within.isWindow || within.isDocument ? "" :
					within.element.css( "overflow-y" ),
				hasOverflowX = overflowX === "scroll" ||
					( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
				hasOverflowY = overflowY === "scroll" ||
					( overflowY === "auto" && within.height < within.element[0].scrollHeight );
			return {
				width: hasOverflowY ? $.position.scrollbarWidth() : 0,
				height: hasOverflowX ? $.position.scrollbarWidth() : 0
			};
		},
		getWithinInfo: function( element ) {
			var withinElement = $( element || window ),
				isWindow = $.isWindow( withinElement[0] ),
				isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9;
			return {
				element: withinElement,
				isWindow: isWindow,
				isDocument: isDocument,
				offset: withinElement.offset() || { left: 0, top: 0 },
				scrollLeft: withinElement.scrollLeft(),
				scrollTop: withinElement.scrollTop(),
	
				// support: jQuery 1.6.x
				// jQuery 1.6 doesn't support .outerWidth/Height() on documents or windows
				width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),
				height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()
			};
		}
	};
	
	$.fn.position = function( options ) {
		if ( !options || !options.of ) {
			return _position.apply( this, arguments );
		}
	
		// make a copy, we don't want to modify arguments
		options = $.extend( {}, options );
	
		var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
			target = $( options.of ),
			within = $.position.getWithinInfo( options.within ),
			scrollInfo = $.position.getScrollInfo( within ),
			collision = ( options.collision || "flip" ).split( " " ),
			offsets = {};
	
		dimensions = getDimensions( target );
		if ( target[0].preventDefault ) {
			// force left top to allow flipping
			options.at = "left top";
		}
		targetWidth = dimensions.width;
		targetHeight = dimensions.height;
		targetOffset = dimensions.offset;
		// clone to reuse original targetOffset later
		basePosition = $.extend( {}, targetOffset );
	
		// force my and at to have valid horizontal and vertical positions
		// if a value is missing or invalid, it will be converted to center
		$.each( [ "my", "at" ], function() {
			var pos = ( options[ this ] || "" ).split( " " ),
				horizontalOffset,
				verticalOffset;
	
			if ( pos.length === 1) {
				pos = rhorizontal.test( pos[ 0 ] ) ?
					pos.concat( [ "center" ] ) :
					rvertical.test( pos[ 0 ] ) ?
						[ "center" ].concat( pos ) :
						[ "center", "center" ];
			}
			pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
			pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";
	
			// calculate offsets
			horizontalOffset = roffset.exec( pos[ 0 ] );
			verticalOffset = roffset.exec( pos[ 1 ] );
			offsets[ this ] = [
				horizontalOffset ? horizontalOffset[ 0 ] : 0,
				verticalOffset ? verticalOffset[ 0 ] : 0
			];
	
			// reduce to just the positions without the offsets
			options[ this ] = [
				rposition.exec( pos[ 0 ] )[ 0 ],
				rposition.exec( pos[ 1 ] )[ 0 ]
			];
		});
	
		// normalize collision option
		if ( collision.length === 1 ) {
			collision[ 1 ] = collision[ 0 ];
		}
	
		if ( options.at[ 0 ] === "right" ) {
			basePosition.left += targetWidth;
		} else if ( options.at[ 0 ] === "center" ) {
			basePosition.left += targetWidth / 2;
		}
	
		if ( options.at[ 1 ] === "bottom" ) {
			basePosition.top += targetHeight;
		} else if ( options.at[ 1 ] === "center" ) {
			basePosition.top += targetHeight / 2;
		}
	
		atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
		basePosition.left += atOffset[ 0 ];
		basePosition.top += atOffset[ 1 ];
	
		return this.each(function() {
			var collisionPosition, using,
				elem = $( this ),
				elemWidth = elem.outerWidth(),
				elemHeight = elem.outerHeight(),
				marginLeft = parseCss( this, "marginLeft" ),
				marginTop = parseCss( this, "marginTop" ),
				collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
				collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
				position = $.extend( {}, basePosition ),
				myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );
	
			if ( options.my[ 0 ] === "right" ) {
				position.left -= elemWidth;
			} else if ( options.my[ 0 ] === "center" ) {
				position.left -= elemWidth / 2;
			}
	
			if ( options.my[ 1 ] === "bottom" ) {
				position.top -= elemHeight;
			} else if ( options.my[ 1 ] === "center" ) {
				position.top -= elemHeight / 2;
			}
	
			position.left += myOffset[ 0 ];
			position.top += myOffset[ 1 ];
	
			// if the browser doesn't support fractions, then round for consistent results
			if ( !supportsOffsetFractions ) {
				position.left = round( position.left );
				position.top = round( position.top );
			}
	
			collisionPosition = {
				marginLeft: marginLeft,
				marginTop: marginTop
			};
	
			$.each( [ "left", "top" ], function( i, dir ) {
				if ( $.ui.position[ collision[ i ] ] ) {
					$.ui.position[ collision[ i ] ][ dir ]( position, {
						targetWidth: targetWidth,
						targetHeight: targetHeight,
						elemWidth: elemWidth,
						elemHeight: elemHeight,
						collisionPosition: collisionPosition,
						collisionWidth: collisionWidth,
						collisionHeight: collisionHeight,
						offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
						my: options.my,
						at: options.at,
						within: within,
						elem: elem
					});
				}
			});
	
			if ( options.using ) {
				// adds feedback as second argument to using callback, if present
				using = function( props ) {
					var left = targetOffset.left - position.left,
						right = left + targetWidth - elemWidth,
						top = targetOffset.top - position.top,
						bottom = top + targetHeight - elemHeight,
						feedback = {
							target: {
								element: target,
								left: targetOffset.left,
								top: targetOffset.top,
								width: targetWidth,
								height: targetHeight
							},
							element: {
								element: elem,
								left: position.left,
								top: position.top,
								width: elemWidth,
								height: elemHeight
							},
							horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
							vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
						};
					if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
						feedback.horizontal = "center";
					}
					if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
						feedback.vertical = "middle";
					}
					if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
						feedback.important = "horizontal";
					} else {
						feedback.important = "vertical";
					}
					options.using.call( this, props, feedback );
				};
			}
	
			elem.offset( $.extend( position, { using: using } ) );
		});
	};
	
	$.ui.position = {
		fit: {
			left: function( position, data ) {
				var within = data.within,
					withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
					outerWidth = within.width,
					collisionPosLeft = position.left - data.collisionPosition.marginLeft,
					overLeft = withinOffset - collisionPosLeft,
					overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
					newOverRight;
	
				// element is wider than within
				if ( data.collisionWidth > outerWidth ) {
					// element is initially over the left side of within
					if ( overLeft > 0 && overRight <= 0 ) {
						newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
						position.left += overLeft - newOverRight;
					// element is initially over right side of within
					} else if ( overRight > 0 && overLeft <= 0 ) {
						position.left = withinOffset;
					// element is initially over both left and right sides of within
					} else {
						if ( overLeft > overRight ) {
							position.left = withinOffset + outerWidth - data.collisionWidth;
						} else {
							position.left = withinOffset;
						}
					}
				// too far left -> align with left edge
				} else if ( overLeft > 0 ) {
					position.left += overLeft;
				// too far right -> align with right edge
				} else if ( overRight > 0 ) {
					position.left -= overRight;
				// adjust based on position and margin
				} else {
					position.left = max( position.left - collisionPosLeft, position.left );
				}
			},
			top: function( position, data ) {
				var within = data.within,
					withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
					outerHeight = data.within.height,
					collisionPosTop = position.top - data.collisionPosition.marginTop,
					overTop = withinOffset - collisionPosTop,
					overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
					newOverBottom;
	
				// element is taller than within
				if ( data.collisionHeight > outerHeight ) {
					// element is initially over the top of within
					if ( overTop > 0 && overBottom <= 0 ) {
						newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
						position.top += overTop - newOverBottom;
					// element is initially over bottom of within
					} else if ( overBottom > 0 && overTop <= 0 ) {
						position.top = withinOffset;
					// element is initially over both top and bottom of within
					} else {
						if ( overTop > overBottom ) {
							position.top = withinOffset + outerHeight - data.collisionHeight;
						} else {
							position.top = withinOffset;
						}
					}
				// too far up -> align with top
				} else if ( overTop > 0 ) {
					position.top += overTop;
				// too far down -> align with bottom edge
				} else if ( overBottom > 0 ) {
					position.top -= overBottom;
				// adjust based on position and margin
				} else {
					position.top = max( position.top - collisionPosTop, position.top );
				}
			}
		},
		flip: {
			left: function( position, data ) {
				var within = data.within,
					withinOffset = within.offset.left + within.scrollLeft,
					outerWidth = within.width,
					offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
					collisionPosLeft = position.left - data.collisionPosition.marginLeft,
					overLeft = collisionPosLeft - offsetLeft,
					overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
					myOffset = data.my[ 0 ] === "left" ?
						-data.elemWidth :
						data.my[ 0 ] === "right" ?
							data.elemWidth :
							0,
					atOffset = data.at[ 0 ] === "left" ?
						data.targetWidth :
						data.at[ 0 ] === "right" ?
							-data.targetWidth :
							0,
					offset = -2 * data.offset[ 0 ],
					newOverRight,
					newOverLeft;
	
				if ( overLeft < 0 ) {
					newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
					if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
						position.left += myOffset + atOffset + offset;
					}
				} else if ( overRight > 0 ) {
					newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
					if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
						position.left += myOffset + atOffset + offset;
					}
				}
			},
			top: function( position, data ) {
				var within = data.within,
					withinOffset = within.offset.top + within.scrollTop,
					outerHeight = within.height,
					offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
					collisionPosTop = position.top - data.collisionPosition.marginTop,
					overTop = collisionPosTop - offsetTop,
					overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
					top = data.my[ 1 ] === "top",
					myOffset = top ?
						-data.elemHeight :
						data.my[ 1 ] === "bottom" ?
							data.elemHeight :
							0,
					atOffset = data.at[ 1 ] === "top" ?
						data.targetHeight :
						data.at[ 1 ] === "bottom" ?
							-data.targetHeight :
							0,
					offset = -2 * data.offset[ 1 ],
					newOverTop,
					newOverBottom;
				if ( overTop < 0 ) {
					newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
					if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {
						position.top += myOffset + atOffset + offset;
					}
				} else if ( overBottom > 0 ) {
					newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
					if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {
						position.top += myOffset + atOffset + offset;
					}
				}
			}
		},
		flipfit: {
			left: function() {
				$.ui.position.flip.left.apply( this, arguments );
				$.ui.position.fit.left.apply( this, arguments );
			},
			top: function() {
				$.ui.position.flip.top.apply( this, arguments );
				$.ui.position.fit.top.apply( this, arguments );
			}
		}
	};
	
	// fraction support test
	(function() {
		var testElement, testElementParent, testElementStyle, offsetLeft, i,
			body = document.getElementsByTagName( "body" )[ 0 ],
			div = document.createElement( "div" );
	
		//Create a "fake body" for testing based on method used in jQuery.support
		testElement = document.createElement( body ? "div" : "body" );
		testElementStyle = {
			visibility: "hidden",
			width: 0,
			height: 0,
			border: 0,
			margin: 0,
			background: "none"
		};
		if ( body ) {
			$.extend( testElementStyle, {
				position: "absolute",
				left: "-1000px",
				top: "-1000px"
			});
		}
		for ( i in testElementStyle ) {
			testElement.style[ i ] = testElementStyle[ i ];
		}
		testElement.appendChild( div );
		testElementParent = body || document.documentElement;
		testElementParent.insertBefore( testElement, testElementParent.firstChild );
	
		div.style.cssText = "position: absolute; left: 10.7432222px;";
	
		offsetLeft = $( div ).offset().left;
		supportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;
	
		testElement.innerHTML = "";
		testElementParent.removeChild( testElement );
	})();
	
	})();
	
	var position = $.ui.position;
	
	
	/*!
	 * jQuery UI Accordion 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/accordion/
	 */
	
	
	var accordion = $.widget( "ui.accordion", {
		version: "1.11.4",
		options: {
			active: 0,
			animate: {},
			collapsible: false,
			event: "click",
			header: "> li > :first-child,> :not(li):even",
			heightStyle: "auto",
			icons: {
				activeHeader: "ui-icon-triangle-1-s",
				header: "ui-icon-triangle-1-e"
			},
	
			// callbacks
			activate: null,
			beforeActivate: null
		},
	
		hideProps: {
			borderTopWidth: "hide",
			borderBottomWidth: "hide",
			paddingTop: "hide",
			paddingBottom: "hide",
			height: "hide"
		},
	
		showProps: {
			borderTopWidth: "show",
			borderBottomWidth: "show",
			paddingTop: "show",
			paddingBottom: "show",
			height: "show"
		},
	
		_create: function() {
			var options = this.options;
			this.prevShow = this.prevHide = $();
			this.element.addClass( "ui-accordion ui-widget ui-helper-reset" )
				// ARIA
				.attr( "role", "tablist" );
	
			// don't allow collapsible: false and active: false / null
			if ( !options.collapsible && (options.active === false || options.active == null) ) {
				options.active = 0;
			}
	
			this._processPanels();
			// handle negative values
			if ( options.active < 0 ) {
				options.active += this.headers.length;
			}
			this._refresh();
		},
	
		_getCreateEventData: function() {
			return {
				header: this.active,
				panel: !this.active.length ? $() : this.active.next()
			};
		},
	
		_createIcons: function() {
			var icons = this.options.icons;
			if ( icons ) {
				$( "<span>" )
					.addClass( "ui-accordion-header-icon ui-icon " + icons.header )
					.prependTo( this.headers );
				this.active.children( ".ui-accordion-header-icon" )
					.removeClass( icons.header )
					.addClass( icons.activeHeader );
				this.headers.addClass( "ui-accordion-icons" );
			}
		},
	
		_destroyIcons: function() {
			this.headers
				.removeClass( "ui-accordion-icons" )
				.children( ".ui-accordion-header-icon" )
					.remove();
		},
	
		_destroy: function() {
			var contents;
	
			// clean up main element
			this.element
				.removeClass( "ui-accordion ui-widget ui-helper-reset" )
				.removeAttr( "role" );
	
			// clean up headers
			this.headers
				.removeClass( "ui-accordion-header ui-accordion-header-active ui-state-default " +
					"ui-corner-all ui-state-active ui-state-disabled ui-corner-top" )
				.removeAttr( "role" )
				.removeAttr( "aria-expanded" )
				.removeAttr( "aria-selected" )
				.removeAttr( "aria-controls" )
				.removeAttr( "tabIndex" )
				.removeUniqueId();
	
			this._destroyIcons();
	
			// clean up content panels
			contents = this.headers.next()
				.removeClass( "ui-helper-reset ui-widget-content ui-corner-bottom " +
					"ui-accordion-content ui-accordion-content-active ui-state-disabled" )
				.css( "display", "" )
				.removeAttr( "role" )
				.removeAttr( "aria-hidden" )
				.removeAttr( "aria-labelledby" )
				.removeUniqueId();
	
			if ( this.options.heightStyle !== "content" ) {
				contents.css( "height", "" );
			}
		},
	
		_setOption: function( key, value ) {
			if ( key === "active" ) {
				// _activate() will handle invalid values and update this.options
				this._activate( value );
				return;
			}
	
			if ( key === "event" ) {
				if ( this.options.event ) {
					this._off( this.headers, this.options.event );
				}
				this._setupEvents( value );
			}
	
			this._super( key, value );
	
			// setting collapsible: false while collapsed; open first panel
			if ( key === "collapsible" && !value && this.options.active === false ) {
				this._activate( 0 );
			}
	
			if ( key === "icons" ) {
				this._destroyIcons();
				if ( value ) {
					this._createIcons();
				}
			}
	
			// #5332 - opacity doesn't cascade to positioned elements in IE
			// so we need to add the disabled class to the headers and panels
			if ( key === "disabled" ) {
				this.element
					.toggleClass( "ui-state-disabled", !!value )
					.attr( "aria-disabled", value );
				this.headers.add( this.headers.next() )
					.toggleClass( "ui-state-disabled", !!value );
			}
		},
	
		_keydown: function( event ) {
			if ( event.altKey || event.ctrlKey ) {
				return;
			}
	
			var keyCode = $.ui.keyCode,
				length = this.headers.length,
				currentIndex = this.headers.index( event.target ),
				toFocus = false;
	
			switch ( event.keyCode ) {
				case keyCode.RIGHT:
				case keyCode.DOWN:
					toFocus = this.headers[ ( currentIndex + 1 ) % length ];
					break;
				case keyCode.LEFT:
				case keyCode.UP:
					toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
					break;
				case keyCode.SPACE:
				case keyCode.ENTER:
					this._eventHandler( event );
					break;
				case keyCode.HOME:
					toFocus = this.headers[ 0 ];
					break;
				case keyCode.END:
					toFocus = this.headers[ length - 1 ];
					break;
			}
	
			if ( toFocus ) {
				$( event.target ).attr( "tabIndex", -1 );
				$( toFocus ).attr( "tabIndex", 0 );
				toFocus.focus();
				event.preventDefault();
			}
		},
	
		_panelKeyDown: function( event ) {
			if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {
				$( event.currentTarget ).prev().focus();
			}
		},
	
		refresh: function() {
			var options = this.options;
			this._processPanels();
	
			// was collapsed or no panel
			if ( ( options.active === false && options.collapsible === true ) || !this.headers.length ) {
				options.active = false;
				this.active = $();
			// active false only when collapsible is true
			} else if ( options.active === false ) {
				this._activate( 0 );
			// was active, but active panel is gone
			} else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
				// all remaining panel are disabled
				if ( this.headers.length === this.headers.find(".ui-state-disabled").length ) {
					options.active = false;
					this.active = $();
				// activate previous panel
				} else {
					this._activate( Math.max( 0, options.active - 1 ) );
				}
			// was active, active panel still exists
			} else {
				// make sure active index is correct
				options.active = this.headers.index( this.active );
			}
	
			this._destroyIcons();
	
			this._refresh();
		},
	
		_processPanels: function() {
			var prevHeaders = this.headers,
				prevPanels = this.panels;
	
			this.headers = this.element.find( this.options.header )
				.addClass( "ui-accordion-header ui-state-default ui-corner-all" );
	
			this.panels = this.headers.next()
				.addClass( "ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom" )
				.filter( ":not(.ui-accordion-content-active)" )
				.hide();
	
			// Avoid memory leaks (#10056)
			if ( prevPanels ) {
				this._off( prevHeaders.not( this.headers ) );
				this._off( prevPanels.not( this.panels ) );
			}
		},
	
		_refresh: function() {
			var maxHeight,
				options = this.options,
				heightStyle = options.heightStyle,
				parent = this.element.parent();
	
			this.active = this._findActive( options.active )
				.addClass( "ui-accordion-header-active ui-state-active ui-corner-top" )
				.removeClass( "ui-corner-all" );
			this.active.next()
				.addClass( "ui-accordion-content-active" )
				.show();
	
			this.headers
				.attr( "role", "tab" )
				.each(function() {
					var header = $( this ),
						headerId = header.uniqueId().attr( "id" ),
						panel = header.next(),
						panelId = panel.uniqueId().attr( "id" );
					header.attr( "aria-controls", panelId );
					panel.attr( "aria-labelledby", headerId );
				})
				.next()
					.attr( "role", "tabpanel" );
	
			this.headers
				.not( this.active )
				.attr({
					"aria-selected": "false",
					"aria-expanded": "false",
					tabIndex: -1
				})
				.next()
					.attr({
						"aria-hidden": "true"
					})
					.hide();
	
			// make sure at least one header is in the tab order
			if ( !this.active.length ) {
				this.headers.eq( 0 ).attr( "tabIndex", 0 );
			} else {
				this.active.attr({
					"aria-selected": "true",
					"aria-expanded": "true",
					tabIndex: 0
				})
				.next()
					.attr({
						"aria-hidden": "false"
					});
			}
	
			this._createIcons();
	
			this._setupEvents( options.event );
	
			if ( heightStyle === "fill" ) {
				maxHeight = parent.height();
				this.element.siblings( ":visible" ).each(function() {
					var elem = $( this ),
						position = elem.css( "position" );
	
					if ( position === "absolute" || position === "fixed" ) {
						return;
					}
					maxHeight -= elem.outerHeight( true );
				});
	
				this.headers.each(function() {
					maxHeight -= $( this ).outerHeight( true );
				});
	
				this.headers.next()
					.each(function() {
						$( this ).height( Math.max( 0, maxHeight -
							$( this ).innerHeight() + $( this ).height() ) );
					})
					.css( "overflow", "auto" );
			} else if ( heightStyle === "auto" ) {
				maxHeight = 0;
				this.headers.next()
					.each(function() {
						maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
					})
					.height( maxHeight );
			}
		},
	
		_activate: function( index ) {
			var active = this._findActive( index )[ 0 ];
	
			// trying to activate the already active panel
			if ( active === this.active[ 0 ] ) {
				return;
			}
	
			// trying to collapse, simulate a click on the currently active header
			active = active || this.active[ 0 ];
	
			this._eventHandler({
				target: active,
				currentTarget: active,
				preventDefault: $.noop
			});
		},
	
		_findActive: function( selector ) {
			return typeof selector === "number" ? this.headers.eq( selector ) : $();
		},
	
		_setupEvents: function( event ) {
			var events = {
				keydown: "_keydown"
			};
			if ( event ) {
				$.each( event.split( " " ), function( index, eventName ) {
					events[ eventName ] = "_eventHandler";
				});
			}
	
			this._off( this.headers.add( this.headers.next() ) );
			this._on( this.headers, events );
			this._on( this.headers.next(), { keydown: "_panelKeyDown" });
			this._hoverable( this.headers );
			this._focusable( this.headers );
		},
	
		_eventHandler: function( event ) {
			var options = this.options,
				active = this.active,
				clicked = $( event.currentTarget ),
				clickedIsActive = clicked[ 0 ] === active[ 0 ],
				collapsing = clickedIsActive && options.collapsible,
				toShow = collapsing ? $() : clicked.next(),
				toHide = active.next(),
				eventData = {
					oldHeader: active,
					oldPanel: toHide,
					newHeader: collapsing ? $() : clicked,
					newPanel: toShow
				};
	
			event.preventDefault();
	
			if (
					// click on active header, but not collapsible
					( clickedIsActive && !options.collapsible ) ||
					// allow canceling activation
					( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
				return;
			}
	
			options.active = collapsing ? false : this.headers.index( clicked );
	
			// when the call to ._toggle() comes after the class changes
			// it causes a very odd bug in IE 8 (see #6720)
			this.active = clickedIsActive ? $() : clicked;
			this._toggle( eventData );
	
			// switch classes
			// corner classes on the previously active header stay after the animation
			active.removeClass( "ui-accordion-header-active ui-state-active" );
			if ( options.icons ) {
				active.children( ".ui-accordion-header-icon" )
					.removeClass( options.icons.activeHeader )
					.addClass( options.icons.header );
			}
	
			if ( !clickedIsActive ) {
				clicked
					.removeClass( "ui-corner-all" )
					.addClass( "ui-accordion-header-active ui-state-active ui-corner-top" );
				if ( options.icons ) {
					clicked.children( ".ui-accordion-header-icon" )
						.removeClass( options.icons.header )
						.addClass( options.icons.activeHeader );
				}
	
				clicked
					.next()
					.addClass( "ui-accordion-content-active" );
			}
		},
	
		_toggle: function( data ) {
			var toShow = data.newPanel,
				toHide = this.prevShow.length ? this.prevShow : data.oldPanel;
	
			// handle activating a panel during the animation for another activation
			this.prevShow.add( this.prevHide ).stop( true, true );
			this.prevShow = toShow;
			this.prevHide = toHide;
	
			if ( this.options.animate ) {
				this._animate( toShow, toHide, data );
			} else {
				toHide.hide();
				toShow.show();
				this._toggleComplete( data );
			}
	
			toHide.attr({
				"aria-hidden": "true"
			});
			toHide.prev().attr({
				"aria-selected": "false",
				"aria-expanded": "false"
			});
			// if we're switching panels, remove the old header from the tab order
			// if we're opening from collapsed state, remove the previous header from the tab order
			// if we're collapsing, then keep the collapsing header in the tab order
			if ( toShow.length && toHide.length ) {
				toHide.prev().attr({
					"tabIndex": -1,
					"aria-expanded": "false"
				});
			} else if ( toShow.length ) {
				this.headers.filter(function() {
					return parseInt( $( this ).attr( "tabIndex" ), 10 ) === 0;
				})
				.attr( "tabIndex", -1 );
			}
	
			toShow
				.attr( "aria-hidden", "false" )
				.prev()
					.attr({
						"aria-selected": "true",
						"aria-expanded": "true",
						tabIndex: 0
					});
		},
	
		_animate: function( toShow, toHide, data ) {
			var total, easing, duration,
				that = this,
				adjust = 0,
				boxSizing = toShow.css( "box-sizing" ),
				down = toShow.length &&
					( !toHide.length || ( toShow.index() < toHide.index() ) ),
				animate = this.options.animate || {},
				options = down && animate.down || animate,
				complete = function() {
					that._toggleComplete( data );
				};
	
			if ( typeof options === "number" ) {
				duration = options;
			}
			if ( typeof options === "string" ) {
				easing = options;
			}
			// fall back from options to animation in case of partial down settings
			easing = easing || options.easing || animate.easing;
			duration = duration || options.duration || animate.duration;
	
			if ( !toHide.length ) {
				return toShow.animate( this.showProps, duration, easing, complete );
			}
			if ( !toShow.length ) {
				return toHide.animate( this.hideProps, duration, easing, complete );
			}
	
			total = toShow.show().outerHeight();
			toHide.animate( this.hideProps, {
				duration: duration,
				easing: easing,
				step: function( now, fx ) {
					fx.now = Math.round( now );
				}
			});
			toShow
				.hide()
				.animate( this.showProps, {
					duration: duration,
					easing: easing,
					complete: complete,
					step: function( now, fx ) {
						fx.now = Math.round( now );
						if ( fx.prop !== "height" ) {
							if ( boxSizing === "content-box" ) {
								adjust += fx.now;
							}
						} else if ( that.options.heightStyle !== "content" ) {
							fx.now = Math.round( total - toHide.outerHeight() - adjust );
							adjust = 0;
						}
					}
				});
		},
	
		_toggleComplete: function( data ) {
			var toHide = data.oldPanel;
	
			toHide
				.removeClass( "ui-accordion-content-active" )
				.prev()
					.removeClass( "ui-corner-top" )
					.addClass( "ui-corner-all" );
	
			// Work around for rendering bug in IE (#5421)
			if ( toHide.length ) {
				toHide.parent()[ 0 ].className = toHide.parent()[ 0 ].className;
			}
			this._trigger( "activate", null, data );
		}
	});
	
	
	/*!
	 * jQuery UI Menu 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/menu/
	 */
	
	
	var menu = $.widget( "ui.menu", {
		version: "1.11.4",
		defaultElement: "<ul>",
		delay: 300,
		options: {
			icons: {
				submenu: "ui-icon-carat-1-e"
			},
			items: "> *",
			menus: "ul",
			position: {
				my: "left-1 top",
				at: "right top"
			},
			role: "menu",
	
			// callbacks
			blur: null,
			focus: null,
			select: null
		},
	
		_create: function() {
			this.activeMenu = this.element;
	
			// Flag used to prevent firing of the click handler
			// as the event bubbles up through nested menus
			this.mouseHandled = false;
			this.element
				.uniqueId()
				.addClass( "ui-menu ui-widget ui-widget-content" )
				.toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length )
				.attr({
					role: this.options.role,
					tabIndex: 0
				});
	
			if ( this.options.disabled ) {
				this.element
					.addClass( "ui-state-disabled" )
					.attr( "aria-disabled", "true" );
			}
	
			this._on({
				// Prevent focus from sticking to links inside menu after clicking
				// them (focus should always stay on UL during navigation).
				"mousedown .ui-menu-item": function( event ) {
					event.preventDefault();
				},
				"click .ui-menu-item": function( event ) {
					var target = $( event.target );
					if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
						this.select( event );
	
						// Only set the mouseHandled flag if the event will bubble, see #9469.
						if ( !event.isPropagationStopped() ) {
							this.mouseHandled = true;
						}
	
						// Open submenu on click
						if ( target.has( ".ui-menu" ).length ) {
							this.expand( event );
						} else if ( !this.element.is( ":focus" ) && $( this.document[ 0 ].activeElement ).closest( ".ui-menu" ).length ) {
	
							// Redirect focus to the menu
							this.element.trigger( "focus", [ true ] );
	
							// If the active item is on the top level, let it stay active.
							// Otherwise, blur the active item since it is no longer visible.
							if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
								clearTimeout( this.timer );
							}
						}
					}
				},
				"mouseenter .ui-menu-item": function( event ) {
					// Ignore mouse events while typeahead is active, see #10458.
					// Prevents focusing the wrong item when typeahead causes a scroll while the mouse
					// is over an item in the menu
					if ( this.previousFilter ) {
						return;
					}
					var target = $( event.currentTarget );
					// Remove ui-state-active class from siblings of the newly focused menu item
					// to avoid a jump caused by adjacent elements both having a class with a border
					target.siblings( ".ui-state-active" ).removeClass( "ui-state-active" );
					this.focus( event, target );
				},
				mouseleave: "collapseAll",
				"mouseleave .ui-menu": "collapseAll",
				focus: function( event, keepActiveItem ) {
					// If there's already an active item, keep it active
					// If not, activate the first item
					var item = this.active || this.element.find( this.options.items ).eq( 0 );
	
					if ( !keepActiveItem ) {
						this.focus( event, item );
					}
				},
				blur: function( event ) {
					this._delay(function() {
						if ( !$.contains( this.element[0], this.document[0].activeElement ) ) {
							this.collapseAll( event );
						}
					});
				},
				keydown: "_keydown"
			});
	
			this.refresh();
	
			// Clicks outside of a menu collapse any open menus
			this._on( this.document, {
				click: function( event ) {
					if ( this._closeOnDocumentClick( event ) ) {
						this.collapseAll( event );
					}
	
					// Reset the mouseHandled flag
					this.mouseHandled = false;
				}
			});
		},
	
		_destroy: function() {
			// Destroy (sub)menus
			this.element
				.removeAttr( "aria-activedescendant" )
				.find( ".ui-menu" ).addBack()
					.removeClass( "ui-menu ui-widget ui-widget-content ui-menu-icons ui-front" )
					.removeAttr( "role" )
					.removeAttr( "tabIndex" )
					.removeAttr( "aria-labelledby" )
					.removeAttr( "aria-expanded" )
					.removeAttr( "aria-hidden" )
					.removeAttr( "aria-disabled" )
					.removeUniqueId()
					.show();
	
			// Destroy menu items
			this.element.find( ".ui-menu-item" )
				.removeClass( "ui-menu-item" )
				.removeAttr( "role" )
				.removeAttr( "aria-disabled" )
				.removeUniqueId()
				.removeClass( "ui-state-hover" )
				.removeAttr( "tabIndex" )
				.removeAttr( "role" )
				.removeAttr( "aria-haspopup" )
				.children().each( function() {
					var elem = $( this );
					if ( elem.data( "ui-menu-submenu-carat" ) ) {
						elem.remove();
					}
				});
	
			// Destroy menu dividers
			this.element.find( ".ui-menu-divider" ).removeClass( "ui-menu-divider ui-widget-content" );
		},
	
		_keydown: function( event ) {
			var match, prev, character, skip,
				preventDefault = true;
	
			switch ( event.keyCode ) {
			case $.ui.keyCode.PAGE_UP:
				this.previousPage( event );
				break;
			case $.ui.keyCode.PAGE_DOWN:
				this.nextPage( event );
				break;
			case $.ui.keyCode.HOME:
				this._move( "first", "first", event );
				break;
			case $.ui.keyCode.END:
				this._move( "last", "last", event );
				break;
			case $.ui.keyCode.UP:
				this.previous( event );
				break;
			case $.ui.keyCode.DOWN:
				this.next( event );
				break;
			case $.ui.keyCode.LEFT:
				this.collapse( event );
				break;
			case $.ui.keyCode.RIGHT:
				if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
					this.expand( event );
				}
				break;
			case $.ui.keyCode.ENTER:
			case $.ui.keyCode.SPACE:
				this._activate( event );
				break;
			case $.ui.keyCode.ESCAPE:
				this.collapse( event );
				break;
			default:
				preventDefault = false;
				prev = this.previousFilter || "";
				character = String.fromCharCode( event.keyCode );
				skip = false;
	
				clearTimeout( this.filterTimer );
	
				if ( character === prev ) {
					skip = true;
				} else {
					character = prev + character;
				}
	
				match = this._filterMenuItems( character );
				match = skip && match.index( this.active.next() ) !== -1 ?
					this.active.nextAll( ".ui-menu-item" ) :
					match;
	
				// If no matches on the current filter, reset to the last character pressed
				// to move down the menu to the first item that starts with that character
				if ( !match.length ) {
					character = String.fromCharCode( event.keyCode );
					match = this._filterMenuItems( character );
				}
	
				if ( match.length ) {
					this.focus( event, match );
					this.previousFilter = character;
					this.filterTimer = this._delay(function() {
						delete this.previousFilter;
					}, 1000 );
				} else {
					delete this.previousFilter;
				}
			}
	
			if ( preventDefault ) {
				event.preventDefault();
			}
		},
	
		_activate: function( event ) {
			if ( !this.active.is( ".ui-state-disabled" ) ) {
				if ( this.active.is( "[aria-haspopup='true']" ) ) {
					this.expand( event );
				} else {
					this.select( event );
				}
			}
		},
	
		refresh: function() {
			var menus, items,
				that = this,
				icon = this.options.icons.submenu,
				submenus = this.element.find( this.options.menus );
	
			this.element.toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length );
	
			// Initialize nested menus
			submenus.filter( ":not(.ui-menu)" )
				.addClass( "ui-menu ui-widget ui-widget-content ui-front" )
				.hide()
				.attr({
					role: this.options.role,
					"aria-hidden": "true",
					"aria-expanded": "false"
				})
				.each(function() {
					var menu = $( this ),
						item = menu.parent(),
						submenuCarat = $( "<span>" )
							.addClass( "ui-menu-icon ui-icon " + icon )
							.data( "ui-menu-submenu-carat", true );
	
					item
						.attr( "aria-haspopup", "true" )
						.prepend( submenuCarat );
					menu.attr( "aria-labelledby", item.attr( "id" ) );
				});
	
			menus = submenus.add( this.element );
			items = menus.find( this.options.items );
	
			// Initialize menu-items containing spaces and/or dashes only as dividers
			items.not( ".ui-menu-item" ).each(function() {
				var item = $( this );
				if ( that._isDivider( item ) ) {
					item.addClass( "ui-widget-content ui-menu-divider" );
				}
			});
	
			// Don't refresh list items that are already adapted
			items.not( ".ui-menu-item, .ui-menu-divider" )
				.addClass( "ui-menu-item" )
				.uniqueId()
				.attr({
					tabIndex: -1,
					role: this._itemRole()
				});
	
			// Add aria-disabled attribute to any disabled menu item
			items.filter( ".ui-state-disabled" ).attr( "aria-disabled", "true" );
	
			// If the active item has been removed, blur the menu
			if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
				this.blur();
			}
		},
	
		_itemRole: function() {
			return {
				menu: "menuitem",
				listbox: "option"
			}[ this.options.role ];
		},
	
		_setOption: function( key, value ) {
			if ( key === "icons" ) {
				this.element.find( ".ui-menu-icon" )
					.removeClass( this.options.icons.submenu )
					.addClass( value.submenu );
			}
			if ( key === "disabled" ) {
				this.element
					.toggleClass( "ui-state-disabled", !!value )
					.attr( "aria-disabled", value );
			}
			this._super( key, value );
		},
	
		focus: function( event, item ) {
			var nested, focused;
			this.blur( event, event && event.type === "focus" );
	
			this._scrollIntoView( item );
	
			this.active = item.first();
			focused = this.active.addClass( "ui-state-focus" ).removeClass( "ui-state-active" );
			// Only update aria-activedescendant if there's a role
			// otherwise we assume focus is managed elsewhere
			if ( this.options.role ) {
				this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
			}
	
			// Highlight active parent menu item, if any
			this.active
				.parent()
				.closest( ".ui-menu-item" )
				.addClass( "ui-state-active" );
	
			if ( event && event.type === "keydown" ) {
				this._close();
			} else {
				this.timer = this._delay(function() {
					this._close();
				}, this.delay );
			}
	
			nested = item.children( ".ui-menu" );
			if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
				this._startOpening(nested);
			}
			this.activeMenu = item.parent();
	
			this._trigger( "focus", event, { item: item } );
		},
	
		_scrollIntoView: function( item ) {
			var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
			if ( this._hasScroll() ) {
				borderTop = parseFloat( $.css( this.activeMenu[0], "borderTopWidth" ) ) || 0;
				paddingTop = parseFloat( $.css( this.activeMenu[0], "paddingTop" ) ) || 0;
				offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
				scroll = this.activeMenu.scrollTop();
				elementHeight = this.activeMenu.height();
				itemHeight = item.outerHeight();
	
				if ( offset < 0 ) {
					this.activeMenu.scrollTop( scroll + offset );
				} else if ( offset + itemHeight > elementHeight ) {
					this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
				}
			}
		},
	
		blur: function( event, fromFocus ) {
			if ( !fromFocus ) {
				clearTimeout( this.timer );
			}
	
			if ( !this.active ) {
				return;
			}
	
			this.active.removeClass( "ui-state-focus" );
			this.active = null;
	
			this._trigger( "blur", event, { item: this.active } );
		},
	
		_startOpening: function( submenu ) {
			clearTimeout( this.timer );
	
			// Don't open if already open fixes a Firefox bug that caused a .5 pixel
			// shift in the submenu position when mousing over the carat icon
			if ( submenu.attr( "aria-hidden" ) !== "true" ) {
				return;
			}
	
			this.timer = this._delay(function() {
				this._close();
				this._open( submenu );
			}, this.delay );
		},
	
		_open: function( submenu ) {
			var position = $.extend({
				of: this.active
			}, this.options.position );
	
			clearTimeout( this.timer );
			this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
				.hide()
				.attr( "aria-hidden", "true" );
	
			submenu
				.show()
				.removeAttr( "aria-hidden" )
				.attr( "aria-expanded", "true" )
				.position( position );
		},
	
		collapseAll: function( event, all ) {
			clearTimeout( this.timer );
			this.timer = this._delay(function() {
				// If we were passed an event, look for the submenu that contains the event
				var currentMenu = all ? this.element :
					$( event && event.target ).closest( this.element.find( ".ui-menu" ) );
	
				// If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
				if ( !currentMenu.length ) {
					currentMenu = this.element;
				}
	
				this._close( currentMenu );
	
				this.blur( event );
				this.activeMenu = currentMenu;
			}, this.delay );
		},
	
		// With no arguments, closes the currently active menu - if nothing is active
		// it closes all menus.  If passed an argument, it will search for menus BELOW
		_close: function( startMenu ) {
			if ( !startMenu ) {
				startMenu = this.active ? this.active.parent() : this.element;
			}
	
			startMenu
				.find( ".ui-menu" )
					.hide()
					.attr( "aria-hidden", "true" )
					.attr( "aria-expanded", "false" )
				.end()
				.find( ".ui-state-active" ).not( ".ui-state-focus" )
					.removeClass( "ui-state-active" );
		},
	
		_closeOnDocumentClick: function( event ) {
			return !$( event.target ).closest( ".ui-menu" ).length;
		},
	
		_isDivider: function( item ) {
	
			// Match hyphen, em dash, en dash
			return !/[^\-\u2014\u2013\s]/.test( item.text() );
		},
	
		collapse: function( event ) {
			var newItem = this.active &&
				this.active.parent().closest( ".ui-menu-item", this.element );
			if ( newItem && newItem.length ) {
				this._close();
				this.focus( event, newItem );
			}
		},
	
		expand: function( event ) {
			var newItem = this.active &&
				this.active
					.children( ".ui-menu " )
					.find( this.options.items )
					.first();
	
			if ( newItem && newItem.length ) {
				this._open( newItem.parent() );
	
				// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
				this._delay(function() {
					this.focus( event, newItem );
				});
			}
		},
	
		next: function( event ) {
			this._move( "next", "first", event );
		},
	
		previous: function( event ) {
			this._move( "prev", "last", event );
		},
	
		isFirstItem: function() {
			return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
		},
	
		isLastItem: function() {
			return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
		},
	
		_move: function( direction, filter, event ) {
			var next;
			if ( this.active ) {
				if ( direction === "first" || direction === "last" ) {
					next = this.active
						[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
						.eq( -1 );
				} else {
					next = this.active
						[ direction + "All" ]( ".ui-menu-item" )
						.eq( 0 );
				}
			}
			if ( !next || !next.length || !this.active ) {
				next = this.activeMenu.find( this.options.items )[ filter ]();
			}
	
			this.focus( event, next );
		},
	
		nextPage: function( event ) {
			var item, base, height;
	
			if ( !this.active ) {
				this.next( event );
				return;
			}
			if ( this.isLastItem() ) {
				return;
			}
			if ( this._hasScroll() ) {
				base = this.active.offset().top;
				height = this.element.height();
				this.active.nextAll( ".ui-menu-item" ).each(function() {
					item = $( this );
					return item.offset().top - base - height < 0;
				});
	
				this.focus( event, item );
			} else {
				this.focus( event, this.activeMenu.find( this.options.items )
					[ !this.active ? "first" : "last" ]() );
			}
		},
	
		previousPage: function( event ) {
			var item, base, height;
			if ( !this.active ) {
				this.next( event );
				return;
			}
			if ( this.isFirstItem() ) {
				return;
			}
			if ( this._hasScroll() ) {
				base = this.active.offset().top;
				height = this.element.height();
				this.active.prevAll( ".ui-menu-item" ).each(function() {
					item = $( this );
					return item.offset().top - base + height > 0;
				});
	
				this.focus( event, item );
			} else {
				this.focus( event, this.activeMenu.find( this.options.items ).first() );
			}
		},
	
		_hasScroll: function() {
			return this.element.outerHeight() < this.element.prop( "scrollHeight" );
		},
	
		select: function( event ) {
			// TODO: It should never be possible to not have an active item at this
			// point, but the tests don't trigger mouseenter before click.
			this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
			var ui = { item: this.active };
			if ( !this.active.has( ".ui-menu" ).length ) {
				this.collapseAll( event, true );
			}
			this._trigger( "select", event, ui );
		},
	
		_filterMenuItems: function(character) {
			var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),
				regex = new RegExp( "^" + escapedCharacter, "i" );
	
			return this.activeMenu
				.find( this.options.items )
	
				// Only match on items, not dividers or other content (#10571)
				.filter( ".ui-menu-item" )
				.filter(function() {
					return regex.test( $.trim( $( this ).text() ) );
				});
		}
	});
	
	
	/*!
	 * jQuery UI Autocomplete 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/autocomplete/
	 */
	
	
	$.widget( "ui.autocomplete", {
		version: "1.11.4",
		defaultElement: "<input>",
		options: {
			appendTo: null,
			autoFocus: false,
			delay: 300,
			minLength: 1,
			position: {
				my: "left top",
				at: "left bottom",
				collision: "none"
			},
			source: null,
	
			// callbacks
			change: null,
			close: null,
			focus: null,
			open: null,
			response: null,
			search: null,
			select: null
		},
	
		requestIndex: 0,
		pending: 0,
	
		_create: function() {
			// Some browsers only repeat keydown events, not keypress events,
			// so we use the suppressKeyPress flag to determine if we've already
			// handled the keydown event. #7269
			// Unfortunately the code for & in keypress is the same as the up arrow,
			// so we use the suppressKeyPressRepeat flag to avoid handling keypress
			// events when we know the keydown event was used to modify the
			// search term. #7799
			var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
				nodeName = this.element[ 0 ].nodeName.toLowerCase(),
				isTextarea = nodeName === "textarea",
				isInput = nodeName === "input";
	
			this.isMultiLine =
				// Textareas are always multi-line
				isTextarea ? true :
				// Inputs are always single-line, even if inside a contentEditable element
				// IE also treats inputs as contentEditable
				isInput ? false :
				// All other element types are determined by whether or not they're contentEditable
				this.element.prop( "isContentEditable" );
	
			this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
			this.isNewMenu = true;
	
			this.element
				.addClass( "ui-autocomplete-input" )
				.attr( "autocomplete", "off" );
	
			this._on( this.element, {
				keydown: function( event ) {
					if ( this.element.prop( "readOnly" ) ) {
						suppressKeyPress = true;
						suppressInput = true;
						suppressKeyPressRepeat = true;
						return;
					}
	
					suppressKeyPress = false;
					suppressInput = false;
					suppressKeyPressRepeat = false;
					var keyCode = $.ui.keyCode;
					switch ( event.keyCode ) {
					case keyCode.PAGE_UP:
						suppressKeyPress = true;
						this._move( "previousPage", event );
						break;
					case keyCode.PAGE_DOWN:
						suppressKeyPress = true;
						this._move( "nextPage", event );
						break;
					case keyCode.UP:
						suppressKeyPress = true;
						this._keyEvent( "previous", event );
						break;
					case keyCode.DOWN:
						suppressKeyPress = true;
						this._keyEvent( "next", event );
						break;
					case keyCode.ENTER:
						// when menu is open and has focus
						if ( this.menu.active ) {
							// #6055 - Opera still allows the keypress to occur
							// which causes forms to submit
							suppressKeyPress = true;
							event.preventDefault();
							this.menu.select( event );
						}
						break;
					case keyCode.TAB:
						if ( this.menu.active ) {
							this.menu.select( event );
						}
						break;
					case keyCode.ESCAPE:
						if ( this.menu.element.is( ":visible" ) ) {
							if ( !this.isMultiLine ) {
								this._value( this.term );
							}
							this.close( event );
							// Different browsers have different default behavior for escape
							// Single press can mean undo or clear
							// Double press in IE means clear the whole form
							event.preventDefault();
						}
						break;
					default:
						suppressKeyPressRepeat = true;
						// search timeout should be triggered before the input value is changed
						this._searchTimeout( event );
						break;
					}
				},
				keypress: function( event ) {
					if ( suppressKeyPress ) {
						suppressKeyPress = false;
						if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
							event.preventDefault();
						}
						return;
					}
					if ( suppressKeyPressRepeat ) {
						return;
					}
	
					// replicate some key handlers to allow them to repeat in Firefox and Opera
					var keyCode = $.ui.keyCode;
					switch ( event.keyCode ) {
					case keyCode.PAGE_UP:
						this._move( "previousPage", event );
						break;
					case keyCode.PAGE_DOWN:
						this._move( "nextPage", event );
						break;
					case keyCode.UP:
						this._keyEvent( "previous", event );
						break;
					case keyCode.DOWN:
						this._keyEvent( "next", event );
						break;
					}
				},
				input: function( event ) {
					if ( suppressInput ) {
						suppressInput = false;
						event.preventDefault();
						return;
					}
					this._searchTimeout( event );
				},
				focus: function() {
					this.selectedItem = null;
					this.previous = this._value();
				},
				blur: function( event ) {
					if ( this.cancelBlur ) {
						delete this.cancelBlur;
						return;
					}
	
					clearTimeout( this.searching );
					this.close( event );
					this._change( event );
				}
			});
	
			this._initSource();
			this.menu = $( "<ul>" )
				.addClass( "ui-autocomplete ui-front" )
				.appendTo( this._appendTo() )
				.menu({
					// disable ARIA support, the live region takes care of that
					role: null
				})
				.hide()
				.menu( "instance" );
	
			this._on( this.menu.element, {
				mousedown: function( event ) {
					// prevent moving focus out of the text field
					event.preventDefault();
	
					// IE doesn't prevent moving focus even with event.preventDefault()
					// so we set a flag to know when we should ignore the blur event
					this.cancelBlur = true;
					this._delay(function() {
						delete this.cancelBlur;
					});
	
					// clicking on the scrollbar causes focus to shift to the body
					// but we can't detect a mouseup or a click immediately afterward
					// so we have to track the next mousedown and close the menu if
					// the user clicks somewhere outside of the autocomplete
					var menuElement = this.menu.element[ 0 ];
					if ( !$( event.target ).closest( ".ui-menu-item" ).length ) {
						this._delay(function() {
							var that = this;
							this.document.one( "mousedown", function( event ) {
								if ( event.target !== that.element[ 0 ] &&
										event.target !== menuElement &&
										!$.contains( menuElement, event.target ) ) {
									that.close();
								}
							});
						});
					}
				},
				menufocus: function( event, ui ) {
					var label, item;
					// support: Firefox
					// Prevent accidental activation of menu items in Firefox (#7024 #9118)
					if ( this.isNewMenu ) {
						this.isNewMenu = false;
						if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
							this.menu.blur();
	
							this.document.one( "mousemove", function() {
								$( event.target ).trigger( event.originalEvent );
							});
	
							return;
						}
					}
	
					item = ui.item.data( "ui-autocomplete-item" );
					if ( false !== this._trigger( "focus", event, { item: item } ) ) {
						// use value to match what will end up in the input, if it was a key event
						if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
							this._value( item.value );
						}
					}
	
					// Announce the value in the liveRegion
					label = ui.item.attr( "aria-label" ) || item.value;
					if ( label && $.trim( label ).length ) {
						this.liveRegion.children().hide();
						$( "<div>" ).text( label ).appendTo( this.liveRegion );
					}
				},
				menuselect: function( event, ui ) {
					var item = ui.item.data( "ui-autocomplete-item" ),
						previous = this.previous;
	
					// only trigger when focus was lost (click on menu)
					if ( this.element[ 0 ] !== this.document[ 0 ].activeElement ) {
						this.element.focus();
						this.previous = previous;
						// #6109 - IE triggers two focus events and the second
						// is asynchronous, so we need to reset the previous
						// term synchronously and asynchronously :-(
						this._delay(function() {
							this.previous = previous;
							this.selectedItem = item;
						});
					}
	
					if ( false !== this._trigger( "select", event, { item: item } ) ) {
						this._value( item.value );
					}
					// reset the term after the select event
					// this allows custom select handling to work properly
					this.term = this._value();
	
					this.close( event );
					this.selectedItem = item;
				}
			});
	
			this.liveRegion = $( "<span>", {
					role: "status",
					"aria-live": "assertive",
					"aria-relevant": "additions"
				})
				.addClass( "ui-helper-hidden-accessible" )
				.appendTo( this.document[ 0 ].body );
	
			// turning off autocomplete prevents the browser from remembering the
			// value when navigating through history, so we re-enable autocomplete
			// if the page is unloaded before the widget is destroyed. #7790
			this._on( this.window, {
				beforeunload: function() {
					this.element.removeAttr( "autocomplete" );
				}
			});
		},
	
		_destroy: function() {
			clearTimeout( this.searching );
			this.element
				.removeClass( "ui-autocomplete-input" )
				.removeAttr( "autocomplete" );
			this.menu.element.remove();
			this.liveRegion.remove();
		},
	
		_setOption: function( key, value ) {
			this._super( key, value );
			if ( key === "source" ) {
				this._initSource();
			}
			if ( key === "appendTo" ) {
				this.menu.element.appendTo( this._appendTo() );
			}
			if ( key === "disabled" && value && this.xhr ) {
				this.xhr.abort();
			}
		},
	
		_appendTo: function() {
			var element = this.options.appendTo;
	
			if ( element ) {
				element = element.jquery || element.nodeType ?
					$( element ) :
					this.document.find( element ).eq( 0 );
			}
	
			if ( !element || !element[ 0 ] ) {
				element = this.element.closest( ".ui-front" );
			}
	
			if ( !element.length ) {
				element = this.document[ 0 ].body;
			}
	
			return element;
		},
	
		_initSource: function() {
			var array, url,
				that = this;
			if ( $.isArray( this.options.source ) ) {
				array = this.options.source;
				this.source = function( request, response ) {
					response( $.ui.autocomplete.filter( array, request.term ) );
				};
			} else if ( typeof this.options.source === "string" ) {
				url = this.options.source;
				this.source = function( request, response ) {
					if ( that.xhr ) {
						that.xhr.abort();
					}
					that.xhr = $.ajax({
						url: url,
						data: request,
						dataType: "json",
						success: function( data ) {
							response( data );
						},
						error: function() {
							response([]);
						}
					});
				};
			} else {
				this.source = this.options.source;
			}
		},
	
		_searchTimeout: function( event ) {
			clearTimeout( this.searching );
			this.searching = this._delay(function() {
	
				// Search if the value has changed, or if the user retypes the same value (see #7434)
				var equalValues = this.term === this._value(),
					menuVisible = this.menu.element.is( ":visible" ),
					modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;
	
				if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {
					this.selectedItem = null;
					this.search( null, event );
				}
			}, this.options.delay );
		},
	
		search: function( value, event ) {
			value = value != null ? value : this._value();
	
			// always save the actual value, not the one passed as an argument
			this.term = this._value();
	
			if ( value.length < this.options.minLength ) {
				return this.close( event );
			}
	
			if ( this._trigger( "search", event ) === false ) {
				return;
			}
	
			return this._search( value );
		},
	
		_search: function( value ) {
			this.pending++;
			this.element.addClass( "ui-autocomplete-loading" );
			this.cancelSearch = false;
	
			this.source( { term: value }, this._response() );
		},
	
		_response: function() {
			var index = ++this.requestIndex;
	
			return $.proxy(function( content ) {
				if ( index === this.requestIndex ) {
					this.__response( content );
				}
	
				this.pending--;
				if ( !this.pending ) {
					this.element.removeClass( "ui-autocomplete-loading" );
				}
			}, this );
		},
	
		__response: function( content ) {
			if ( content ) {
				content = this._normalize( content );
			}
			this._trigger( "response", null, { content: content } );
			if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
				this._suggest( content );
				this._trigger( "open" );
			} else {
				// use ._close() instead of .close() so we don't cancel future searches
				this._close();
			}
		},
	
		close: function( event ) {
			this.cancelSearch = true;
			this._close( event );
		},
	
		_close: function( event ) {
			if ( this.menu.element.is( ":visible" ) ) {
				this.menu.element.hide();
				this.menu.blur();
				this.isNewMenu = true;
				this._trigger( "close", event );
			}
		},
	
		_change: function( event ) {
			if ( this.previous !== this._value() ) {
				this._trigger( "change", event, { item: this.selectedItem } );
			}
		},
	
		_normalize: function( items ) {
			// assume all items have the right format when the first item is complete
			if ( items.length && items[ 0 ].label && items[ 0 ].value ) {
				return items;
			}
			return $.map( items, function( item ) {
				if ( typeof item === "string" ) {
					return {
						label: item,
						value: item
					};
				}
				return $.extend( {}, item, {
					label: item.label || item.value,
					value: item.value || item.label
				});
			});
		},
	
		_suggest: function( items ) {
			var ul = this.menu.element.empty();
			this._renderMenu( ul, items );
			this.isNewMenu = true;
			this.menu.refresh();
	
			// size and position menu
			ul.show();
			this._resizeMenu();
			ul.position( $.extend({
				of: this.element
			}, this.options.position ) );
	
			if ( this.options.autoFocus ) {
				this.menu.next();
			}
		},
	
		_resizeMenu: function() {
			var ul = this.menu.element;
			ul.outerWidth( Math.max(
				// Firefox wraps long text (possibly a rounding bug)
				// so we add 1px to avoid the wrapping (#7513)
				ul.width( "" ).outerWidth() + 1,
				this.element.outerWidth()
			) );
		},
	
		_renderMenu: function( ul, items ) {
			var that = this;
			$.each( items, function( index, item ) {
				that._renderItemData( ul, item );
			});
		},
	
		_renderItemData: function( ul, item ) {
			return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
		},
	
		_renderItem: function( ul, item ) {
			return $( "<li>" ).text( item.label ).appendTo( ul );
		},
	
		_move: function( direction, event ) {
			if ( !this.menu.element.is( ":visible" ) ) {
				this.search( null, event );
				return;
			}
			if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
					this.menu.isLastItem() && /^next/.test( direction ) ) {
	
				if ( !this.isMultiLine ) {
					this._value( this.term );
				}
	
				this.menu.blur();
				return;
			}
			this.menu[ direction ]( event );
		},
	
		widget: function() {
			return this.menu.element;
		},
	
		_value: function() {
			return this.valueMethod.apply( this.element, arguments );
		},
	
		_keyEvent: function( keyEvent, event ) {
			if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
				this._move( keyEvent, event );
	
				// prevents moving cursor to beginning/end of the text field in some browsers
				event.preventDefault();
			}
		}
	});
	
	$.extend( $.ui.autocomplete, {
		escapeRegex: function( value ) {
			return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
		},
		filter: function( array, term ) {
			var matcher = new RegExp( $.ui.autocomplete.escapeRegex( term ), "i" );
			return $.grep( array, function( value ) {
				return matcher.test( value.label || value.value || value );
			});
		}
	});
	
	// live region extension, adding a `messages` option
	// NOTE: This is an experimental API. We are still investigating
	// a full solution for string manipulation and internationalization.
	$.widget( "ui.autocomplete", $.ui.autocomplete, {
		options: {
			messages: {
				noResults: "No search results.",
				results: function( amount ) {
					return amount + ( amount > 1 ? " results are" : " result is" ) +
						" available, use up and down arrow keys to navigate.";
				}
			}
		},
	
		__response: function( content ) {
			var message;
			this._superApply( arguments );
			if ( this.options.disabled || this.cancelSearch ) {
				return;
			}
			if ( content && content.length ) {
				message = this.options.messages.results( content.length );
			} else {
				message = this.options.messages.noResults;
			}
			this.liveRegion.children().hide();
			$( "<div>" ).text( message ).appendTo( this.liveRegion );
		}
	});
	
	var autocomplete = $.ui.autocomplete;
	
	
	/*!
	 * jQuery UI Button 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/button/
	 */
	
	
	var lastActive,
		baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",
		typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
		formResetHandler = function() {
			var form = $( this );
			setTimeout(function() {
				form.find( ":ui-button" ).button( "refresh" );
			}, 1 );
		},
		radioGroup = function( radio ) {
			var name = radio.name,
				form = radio.form,
				radios = $( [] );
			if ( name ) {
				name = name.replace( /'/g, "\\'" );
				if ( form ) {
					radios = $( form ).find( "[name='" + name + "'][type=radio]" );
				} else {
					radios = $( "[name='" + name + "'][type=radio]", radio.ownerDocument )
						.filter(function() {
							return !this.form;
						});
				}
			}
			return radios;
		};
	
	$.widget( "ui.button", {
		version: "1.11.4",
		defaultElement: "<button>",
		options: {
			disabled: null,
			text: true,
			label: null,
			icons: {
				primary: null,
				secondary: null
			}
		},
		_create: function() {
			this.element.closest( "form" )
				.unbind( "reset" + this.eventNamespace )
				.bind( "reset" + this.eventNamespace, formResetHandler );
	
			if ( typeof this.options.disabled !== "boolean" ) {
				this.options.disabled = !!this.element.prop( "disabled" );
			} else {
				this.element.prop( "disabled", this.options.disabled );
			}
	
			this._determineButtonType();
			this.hasTitle = !!this.buttonElement.attr( "title" );
	
			var that = this,
				options = this.options,
				toggleButton = this.type === "checkbox" || this.type === "radio",
				activeClass = !toggleButton ? "ui-state-active" : "";
	
			if ( options.label === null ) {
				options.label = (this.type === "input" ? this.buttonElement.val() : this.buttonElement.html());
			}
	
			this._hoverable( this.buttonElement );
	
			this.buttonElement
				.addClass( baseClasses )
				.attr( "role", "button" )
				.bind( "mouseenter" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return;
					}
					if ( this === lastActive ) {
						$( this ).addClass( "ui-state-active" );
					}
				})
				.bind( "mouseleave" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return;
					}
					$( this ).removeClass( activeClass );
				})
				.bind( "click" + this.eventNamespace, function( event ) {
					if ( options.disabled ) {
						event.preventDefault();
						event.stopImmediatePropagation();
					}
				});
	
			// Can't use _focusable() because the element that receives focus
			// and the element that gets the ui-state-focus class are different
			this._on({
				focus: function() {
					this.buttonElement.addClass( "ui-state-focus" );
				},
				blur: function() {
					this.buttonElement.removeClass( "ui-state-focus" );
				}
			});
	
			if ( toggleButton ) {
				this.element.bind( "change" + this.eventNamespace, function() {
					that.refresh();
				});
			}
	
			if ( this.type === "checkbox" ) {
				this.buttonElement.bind( "click" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return false;
					}
				});
			} else if ( this.type === "radio" ) {
				this.buttonElement.bind( "click" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return false;
					}
					$( this ).addClass( "ui-state-active" );
					that.buttonElement.attr( "aria-pressed", "true" );
	
					var radio = that.element[ 0 ];
					radioGroup( radio )
						.not( radio )
						.map(function() {
							return $( this ).button( "widget" )[ 0 ];
						})
						.removeClass( "ui-state-active" )
						.attr( "aria-pressed", "false" );
				});
			} else {
				this.buttonElement
					.bind( "mousedown" + this.eventNamespace, function() {
						if ( options.disabled ) {
							return false;
						}
						$( this ).addClass( "ui-state-active" );
						lastActive = this;
						that.document.one( "mouseup", function() {
							lastActive = null;
						});
					})
					.bind( "mouseup" + this.eventNamespace, function() {
						if ( options.disabled ) {
							return false;
						}
						$( this ).removeClass( "ui-state-active" );
					})
					.bind( "keydown" + this.eventNamespace, function(event) {
						if ( options.disabled ) {
							return false;
						}
						if ( event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER ) {
							$( this ).addClass( "ui-state-active" );
						}
					})
					// see #8559, we bind to blur here in case the button element loses
					// focus between keydown and keyup, it would be left in an "active" state
					.bind( "keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
						$( this ).removeClass( "ui-state-active" );
					});
	
				if ( this.buttonElement.is("a") ) {
					this.buttonElement.keyup(function(event) {
						if ( event.keyCode === $.ui.keyCode.SPACE ) {
							// TODO pass through original event correctly (just as 2nd argument doesn't work)
							$( this ).click();
						}
					});
				}
			}
	
			this._setOption( "disabled", options.disabled );
			this._resetButton();
		},
	
		_determineButtonType: function() {
			var ancestor, labelSelector, checked;
	
			if ( this.element.is("[type=checkbox]") ) {
				this.type = "checkbox";
			} else if ( this.element.is("[type=radio]") ) {
				this.type = "radio";
			} else if ( this.element.is("input") ) {
				this.type = "input";
			} else {
				this.type = "button";
			}
	
			if ( this.type === "checkbox" || this.type === "radio" ) {
				// we don't search against the document in case the element
				// is disconnected from the DOM
				ancestor = this.element.parents().last();
				labelSelector = "label[for='" + this.element.attr("id") + "']";
				this.buttonElement = ancestor.find( labelSelector );
				if ( !this.buttonElement.length ) {
					ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
					this.buttonElement = ancestor.filter( labelSelector );
					if ( !this.buttonElement.length ) {
						this.buttonElement = ancestor.find( labelSelector );
					}
				}
				this.element.addClass( "ui-helper-hidden-accessible" );
	
				checked = this.element.is( ":checked" );
				if ( checked ) {
					this.buttonElement.addClass( "ui-state-active" );
				}
				this.buttonElement.prop( "aria-pressed", checked );
			} else {
				this.buttonElement = this.element;
			}
		},
	
		widget: function() {
			return this.buttonElement;
		},
	
		_destroy: function() {
			this.element
				.removeClass( "ui-helper-hidden-accessible" );
			this.buttonElement
				.removeClass( baseClasses + " ui-state-active " + typeClasses )
				.removeAttr( "role" )
				.removeAttr( "aria-pressed" )
				.html( this.buttonElement.find(".ui-button-text").html() );
	
			if ( !this.hasTitle ) {
				this.buttonElement.removeAttr( "title" );
			}
		},
	
		_setOption: function( key, value ) {
			this._super( key, value );
			if ( key === "disabled" ) {
				this.widget().toggleClass( "ui-state-disabled", !!value );
				this.element.prop( "disabled", !!value );
				if ( value ) {
					if ( this.type === "checkbox" || this.type === "radio" ) {
						this.buttonElement.removeClass( "ui-state-focus" );
					} else {
						this.buttonElement.removeClass( "ui-state-focus ui-state-active" );
					}
				}
				return;
			}
			this._resetButton();
		},
	
		refresh: function() {
			//See #8237 & #8828
			var isDisabled = this.element.is( "input, button" ) ? this.element.is( ":disabled" ) : this.element.hasClass( "ui-button-disabled" );
	
			if ( isDisabled !== this.options.disabled ) {
				this._setOption( "disabled", isDisabled );
			}
			if ( this.type === "radio" ) {
				radioGroup( this.element[0] ).each(function() {
					if ( $( this ).is( ":checked" ) ) {
						$( this ).button( "widget" )
							.addClass( "ui-state-active" )
							.attr( "aria-pressed", "true" );
					} else {
						$( this ).button( "widget" )
							.removeClass( "ui-state-active" )
							.attr( "aria-pressed", "false" );
					}
				});
			} else if ( this.type === "checkbox" ) {
				if ( this.element.is( ":checked" ) ) {
					this.buttonElement
						.addClass( "ui-state-active" )
						.attr( "aria-pressed", "true" );
				} else {
					this.buttonElement
						.removeClass( "ui-state-active" )
						.attr( "aria-pressed", "false" );
				}
			}
		},
	
		_resetButton: function() {
			if ( this.type === "input" ) {
				if ( this.options.label ) {
					this.element.val( this.options.label );
				}
				return;
			}
			var buttonElement = this.buttonElement.removeClass( typeClasses ),
				buttonText = $( "<span></span>", this.document[0] )
					.addClass( "ui-button-text" )
					.html( this.options.label )
					.appendTo( buttonElement.empty() )
					.text(),
				icons = this.options.icons,
				multipleIcons = icons.primary && icons.secondary,
				buttonClasses = [];
	
			if ( icons.primary || icons.secondary ) {
				if ( this.options.text ) {
					buttonClasses.push( "ui-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ) );
				}
	
				if ( icons.primary ) {
					buttonElement.prepend( "<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>" );
				}
	
				if ( icons.secondary ) {
					buttonElement.append( "<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>" );
				}
	
				if ( !this.options.text ) {
					buttonClasses.push( multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only" );
	
					if ( !this.hasTitle ) {
						buttonElement.attr( "title", $.trim( buttonText ) );
					}
				}
			} else {
				buttonClasses.push( "ui-button-text-only" );
			}
			buttonElement.addClass( buttonClasses.join( " " ) );
		}
	});
	
	$.widget( "ui.buttonset", {
		version: "1.11.4",
		options: {
			items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
		},
	
		_create: function() {
			this.element.addClass( "ui-buttonset" );
		},
	
		_init: function() {
			this.refresh();
		},
	
		_setOption: function( key, value ) {
			if ( key === "disabled" ) {
				this.buttons.button( "option", key, value );
			}
	
			this._super( key, value );
		},
	
		refresh: function() {
			var rtl = this.element.css( "direction" ) === "rtl",
				allButtons = this.element.find( this.options.items ),
				existingButtons = allButtons.filter( ":ui-button" );
	
			// Initialize new buttons
			allButtons.not( ":ui-button" ).button();
	
			// Refresh existing buttons
			existingButtons.button( "refresh" );
	
			this.buttons = allButtons
				.map(function() {
					return $( this ).button( "widget" )[ 0 ];
				})
					.removeClass( "ui-corner-all ui-corner-left ui-corner-right" )
					.filter( ":first" )
						.addClass( rtl ? "ui-corner-right" : "ui-corner-left" )
					.end()
					.filter( ":last" )
						.addClass( rtl ? "ui-corner-left" : "ui-corner-right" )
					.end()
				.end();
		},
	
		_destroy: function() {
			this.element.removeClass( "ui-buttonset" );
			this.buttons
				.map(function() {
					return $( this ).button( "widget" )[ 0 ];
				})
					.removeClass( "ui-corner-left ui-corner-right" )
				.end()
				.button( "destroy" );
		}
	});
	
	var button = $.ui.button;
	
	
	/*!
	 * jQuery UI Datepicker 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/datepicker/
	 */
	
	
	$.extend($.ui, { datepicker: { version: "1.11.4" } });
	
	var datepicker_instActive;
	
	function datepicker_getZindex( elem ) {
		var position, value;
		while ( elem.length && elem[ 0 ] !== document ) {
			// Ignore z-index if position is set to a value where z-index is ignored by the browser
			// This makes behavior of this function consistent across browsers
			// WebKit always returns auto if the element is positioned
			position = elem.css( "position" );
			if ( position === "absolute" || position === "relative" || position === "fixed" ) {
				// IE returns 0 when zIndex is not specified
				// other browsers return a string
				// we ignore the case of nested elements with an explicit value of 0
				// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
				value = parseInt( elem.css( "zIndex" ), 10 );
				if ( !isNaN( value ) && value !== 0 ) {
					return value;
				}
			}
			elem = elem.parent();
		}
	
		return 0;
	}
	/* Date picker manager.
	   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
	   Settings for (groups of) date pickers are maintained in an instance object,
	   allowing multiple different settings on the same page. */
	
	function Datepicker() {
		this._curInst = null; // The current instance in use
		this._keyEvent = false; // If the last event was a key event
		this._disabledInputs = []; // List of date picker inputs that have been disabled
		this._datepickerShowing = false; // True if the popup picker is showing , false if not
		this._inDialog = false; // True if showing within a "dialog", false if not
		this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
		this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
		this._appendClass = "ui-datepicker-append"; // The name of the append marker class
		this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
		this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
		this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
		this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
		this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
		this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
		this.regional = []; // Available regional settings, indexed by language code
		this.regional[""] = { // Default regional settings
			closeText: "Done", // Display text for close link
			prevText: "Prev", // Display text for previous month link
			nextText: "Next", // Display text for next month link
			currentText: "Today", // Display text for current month link
			monthNames: ["January","February","March","April","May","June",
				"July","August","September","October","November","December"], // Names of months for drop-down and formatting
			monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
			dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
			dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
			dayNamesMin: ["Su","Mo","Tu","We","Th","Fr","Sa"], // Column headings for days starting at Sunday
			weekHeader: "Wk", // Column header for week of the year
			dateFormat: "mm/dd/yy", // See format options on parseDate
			firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
			isRTL: false, // True if right-to-left language, false if left-to-right
			showMonthAfterYear: false, // True if the year select precedes month, false for month then year
			yearSuffix: "" // Additional text to append to the year in the month headers
		};
		this._defaults = { // Global defaults for all the date picker instances
			showOn: "focus", // "focus" for popup on focus,
				// "button" for trigger button, or "both" for either
			showAnim: "fadeIn", // Name of jQuery animation for popup
			showOptions: {}, // Options for enhanced animations
			defaultDate: null, // Used when field is blank: actual date,
				// +/-number for offset from today, null for today
			appendText: "", // Display text following the input box, e.g. showing the format
			buttonText: "...", // Text for trigger button
			buttonImage: "", // URL for trigger button image
			buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
			hideIfNoPrevNext: false, // True to hide next/previous month links
				// if not applicable, false to just disable them
			navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
			gotoCurrent: false, // True if today link goes back to current selection instead
			changeMonth: false, // True if month can be selected directly, false if only prev/next
			changeYear: false, // True if year can be selected directly, false if only prev/next
			yearRange: "c-10:c+10", // Range of years to display in drop-down,
				// either relative to today's year (-nn:+nn), relative to currently displayed year
				// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
			showOtherMonths: false, // True to show dates in other months, false to leave blank
			selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
			showWeek: false, // True to show week of the year, false to not show it
			calculateWeek: this.iso8601Week, // How to calculate the week of the year,
				// takes a Date and returns the number of the week for it
			shortYearCutoff: "+10", // Short year values < this are in the current century,
				// > this are in the previous century,
				// string value starting with "+" for current year + value
			minDate: null, // The earliest selectable date, or null for no limit
			maxDate: null, // The latest selectable date, or null for no limit
			duration: "fast", // Duration of display/closure
			beforeShowDay: null, // Function that takes a date and returns an array with
				// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
				// [2] = cell title (optional), e.g. $.datepicker.noWeekends
			beforeShow: null, // Function that takes an input field and
				// returns a set of custom settings for the date picker
			onSelect: null, // Define a callback function when a date is selected
			onChangeMonthYear: null, // Define a callback function when the month or year is changed
			onClose: null, // Define a callback function when the datepicker is closed
			numberOfMonths: 1, // Number of months to show at a time
			showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
			stepMonths: 1, // Number of months to step back/forward
			stepBigMonths: 12, // Number of months to step back/forward for the big links
			altField: "", // Selector for an alternate field to store selected dates into
			altFormat: "", // The date format to use for the alternate field
			constrainInput: true, // The input is constrained by the current date format
			showButtonPanel: false, // True to show button panel, false to not show it
			autoSize: false, // True to size the input for the date format, false to leave as is
			disabled: false // The initial disabled state
		};
		$.extend(this._defaults, this.regional[""]);
		this.regional.en = $.extend( true, {}, this.regional[ "" ]);
		this.regional[ "en-US" ] = $.extend( true, {}, this.regional.en );
		this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
	}
	
	$.extend(Datepicker.prototype, {
		/* Class name added to elements to indicate already configured with a date picker. */
		markerClassName: "hasDatepicker",
	
		//Keep track of the maximum number of rows displayed (see #7043)
		maxRows: 4,
	
		// TODO rename to "widget" when switching to widget factory
		_widgetDatepicker: function() {
			return this.dpDiv;
		},
	
		/* Override the default settings for all instances of the date picker.
		 * @param  settings  object - the new settings to use as defaults (anonymous object)
		 * @return the manager object
		 */
		setDefaults: function(settings) {
			datepicker_extendRemove(this._defaults, settings || {});
			return this;
		},
	
		/* Attach the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
		 */
		_attachDatepicker: function(target, settings) {
			var nodeName, inline, inst;
			nodeName = target.nodeName.toLowerCase();
			inline = (nodeName === "div" || nodeName === "span");
			if (!target.id) {
				this.uuid += 1;
				target.id = "dp" + this.uuid;
			}
			inst = this._newInst($(target), inline);
			inst.settings = $.extend({}, settings || {});
			if (nodeName === "input") {
				this._connectDatepicker(target, inst);
			} else if (inline) {
				this._inlineDatepicker(target, inst);
			}
		},
	
		/* Create a new instance object. */
		_newInst: function(target, inline) {
			var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
			return {id: id, input: target, // associated target
				selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
				drawMonth: 0, drawYear: 0, // month being drawn
				inline: inline, // is datepicker inline or not
				dpDiv: (!inline ? this.dpDiv : // presentation div
				datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};
		},
	
		/* Attach the date picker to an input field. */
		_connectDatepicker: function(target, inst) {
			var input = $(target);
			inst.append = $([]);
			inst.trigger = $([]);
			if (input.hasClass(this.markerClassName)) {
				return;
			}
			this._attachments(input, inst);
			input.addClass(this.markerClassName).keydown(this._doKeyDown).
				keypress(this._doKeyPress).keyup(this._doKeyUp);
			this._autoSize(inst);
			$.data(target, "datepicker", inst);
			//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
			if( inst.settings.disabled ) {
				this._disableDatepicker( target );
			}
		},
	
		/* Make attachments based on settings. */
		_attachments: function(input, inst) {
			var showOn, buttonText, buttonImage,
				appendText = this._get(inst, "appendText"),
				isRTL = this._get(inst, "isRTL");
	
			if (inst.append) {
				inst.append.remove();
			}
			if (appendText) {
				inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
				input[isRTL ? "before" : "after"](inst.append);
			}
	
			input.unbind("focus", this._showDatepicker);
	
			if (inst.trigger) {
				inst.trigger.remove();
			}
	
			showOn = this._get(inst, "showOn");
			if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field
				input.focus(this._showDatepicker);
			}
			if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked
				buttonText = this._get(inst, "buttonText");
				buttonImage = this._get(inst, "buttonImage");
				inst.trigger = $(this._get(inst, "buttonImageOnly") ?
					$("<img/>").addClass(this._triggerClass).
						attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
					$("<button type='button'></button>").addClass(this._triggerClass).
						html(!buttonImage ? buttonText : $("<img/>").attr(
						{ src:buttonImage, alt:buttonText, title:buttonText })));
				input[isRTL ? "before" : "after"](inst.trigger);
				inst.trigger.click(function() {
					if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
						$.datepicker._hideDatepicker();
					} else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
						$.datepicker._hideDatepicker();
						$.datepicker._showDatepicker(input[0]);
					} else {
						$.datepicker._showDatepicker(input[0]);
					}
					return false;
				});
			}
		},
	
		/* Apply the maximum length for the date format. */
		_autoSize: function(inst) {
			if (this._get(inst, "autoSize") && !inst.inline) {
				var findMax, max, maxI, i,
					date = new Date(2009, 12 - 1, 20), // Ensure double digits
					dateFormat = this._get(inst, "dateFormat");
	
				if (dateFormat.match(/[DM]/)) {
					findMax = function(names) {
						max = 0;
						maxI = 0;
						for (i = 0; i < names.length; i++) {
							if (names[i].length > max) {
								max = names[i].length;
								maxI = i;
							}
						}
						return maxI;
					};
					date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
						"monthNames" : "monthNamesShort"))));
					date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
						"dayNames" : "dayNamesShort"))) + 20 - date.getDay());
				}
				inst.input.attr("size", this._formatDate(inst, date).length);
			}
		},
	
		/* Attach an inline date picker to a div. */
		_inlineDatepicker: function(target, inst) {
			var divSpan = $(target);
			if (divSpan.hasClass(this.markerClassName)) {
				return;
			}
			divSpan.addClass(this.markerClassName).append(inst.dpDiv);
			$.data(target, "datepicker", inst);
			this._setDate(inst, this._getDefaultDate(inst), true);
			this._updateDatepicker(inst);
			this._updateAlternate(inst);
			//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
			if( inst.settings.disabled ) {
				this._disableDatepicker( target );
			}
			// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
			// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
			inst.dpDiv.css( "display", "block" );
		},
	
		/* Pop-up the date picker in a "dialog" box.
		 * @param  input element - ignored
		 * @param  date	string or Date - the initial date to display
		 * @param  onSelect  function - the function to call when a date is selected
		 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
		 * @param  pos int[2] - coordinates for the dialog's position within the screen or
		 *					event - with x/y coordinates or
		 *					leave empty for default (screen centre)
		 * @return the manager object
		 */
		_dialogDatepicker: function(input, date, onSelect, settings, pos) {
			var id, browserWidth, browserHeight, scrollX, scrollY,
				inst = this._dialogInst; // internal instance
	
			if (!inst) {
				this.uuid += 1;
				id = "dp" + this.uuid;
				this._dialogInput = $("<input type='text' id='" + id +
					"' style='position: absolute; top: -100px; width: 0px;'/>");
				this._dialogInput.keydown(this._doKeyDown);
				$("body").append(this._dialogInput);
				inst = this._dialogInst = this._newInst(this._dialogInput, false);
				inst.settings = {};
				$.data(this._dialogInput[0], "datepicker", inst);
			}
			datepicker_extendRemove(inst.settings, settings || {});
			date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
			this._dialogInput.val(date);
	
			this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
			if (!this._pos) {
				browserWidth = document.documentElement.clientWidth;
				browserHeight = document.documentElement.clientHeight;
				scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
				scrollY = document.documentElement.scrollTop || document.body.scrollTop;
				this._pos = // should use actual width/height below
					[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
			}
	
			// move input on screen for focus, but hidden behind dialog
			this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
			inst.settings.onSelect = onSelect;
			this._inDialog = true;
			this.dpDiv.addClass(this._dialogClass);
			this._showDatepicker(this._dialogInput[0]);
			if ($.blockUI) {
				$.blockUI(this.dpDiv);
			}
			$.data(this._dialogInput[0], "datepicker", inst);
			return this;
		},
	
		/* Detach a datepicker from its control.
		 * @param  target	element - the target input field or division or span
		 */
		_destroyDatepicker: function(target) {
			var nodeName,
				$target = $(target),
				inst = $.data(target, "datepicker");
	
			if (!$target.hasClass(this.markerClassName)) {
				return;
			}
	
			nodeName = target.nodeName.toLowerCase();
			$.removeData(target, "datepicker");
			if (nodeName === "input") {
				inst.append.remove();
				inst.trigger.remove();
				$target.removeClass(this.markerClassName).
					unbind("focus", this._showDatepicker).
					unbind("keydown", this._doKeyDown).
					unbind("keypress", this._doKeyPress).
					unbind("keyup", this._doKeyUp);
			} else if (nodeName === "div" || nodeName === "span") {
				$target.removeClass(this.markerClassName).empty();
			}
	
			if ( datepicker_instActive === inst ) {
				datepicker_instActive = null;
			}
		},
	
		/* Enable the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 */
		_enableDatepicker: function(target) {
			var nodeName, inline,
				$target = $(target),
				inst = $.data(target, "datepicker");
	
			if (!$target.hasClass(this.markerClassName)) {
				return;
			}
	
			nodeName = target.nodeName.toLowerCase();
			if (nodeName === "input") {
				target.disabled = false;
				inst.trigger.filter("button").
					each(function() { this.disabled = false; }).end().
					filter("img").css({opacity: "1.0", cursor: ""});
			} else if (nodeName === "div" || nodeName === "span") {
				inline = $target.children("." + this._inlineClass);
				inline.children().removeClass("ui-state-disabled");
				inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
					prop("disabled", false);
			}
			this._disabledInputs = $.map(this._disabledInputs,
				function(value) { return (value === target ? null : value); }); // delete entry
		},
	
		/* Disable the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 */
		_disableDatepicker: function(target) {
			var nodeName, inline,
				$target = $(target),
				inst = $.data(target, "datepicker");
	
			if (!$target.hasClass(this.markerClassName)) {
				return;
			}
	
			nodeName = target.nodeName.toLowerCase();
			if (nodeName === "input") {
				target.disabled = true;
				inst.trigger.filter("button").
					each(function() { this.disabled = true; }).end().
					filter("img").css({opacity: "0.5", cursor: "default"});
			} else if (nodeName === "div" || nodeName === "span") {
				inline = $target.children("." + this._inlineClass);
				inline.children().addClass("ui-state-disabled");
				inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
					prop("disabled", true);
			}
			this._disabledInputs = $.map(this._disabledInputs,
				function(value) { return (value === target ? null : value); }); // delete entry
			this._disabledInputs[this._disabledInputs.length] = target;
		},
	
		/* Is the first field in a jQuery collection disabled as a datepicker?
		 * @param  target	element - the target input field or division or span
		 * @return boolean - true if disabled, false if enabled
		 */
		_isDisabledDatepicker: function(target) {
			if (!target) {
				return false;
			}
			for (var i = 0; i < this._disabledInputs.length; i++) {
				if (this._disabledInputs[i] === target) {
					return true;
				}
			}
			return false;
		},
	
		/* Retrieve the instance data for the target control.
		 * @param  target  element - the target input field or division or span
		 * @return  object - the associated instance data
		 * @throws  error if a jQuery problem getting data
		 */
		_getInst: function(target) {
			try {
				return $.data(target, "datepicker");
			}
			catch (err) {
				throw "Missing instance data for this datepicker";
			}
		},
	
		/* Update or retrieve the settings for a date picker attached to an input field or division.
		 * @param  target  element - the target input field or division or span
		 * @param  name	object - the new settings to update or
		 *				string - the name of the setting to change or retrieve,
		 *				when retrieving also "all" for all instance settings or
		 *				"defaults" for all global defaults
		 * @param  value   any - the new value for the setting
		 *				(omit if above is an object or to retrieve a value)
		 */
		_optionDatepicker: function(target, name, value) {
			var settings, date, minDate, maxDate,
				inst = this._getInst(target);
	
			if (arguments.length === 2 && typeof name === "string") {
				return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :
					(inst ? (name === "all" ? $.extend({}, inst.settings) :
					this._get(inst, name)) : null));
			}
	
			settings = name || {};
			if (typeof name === "string") {
				settings = {};
				settings[name] = value;
			}
	
			if (inst) {
				if (this._curInst === inst) {
					this._hideDatepicker();
				}
	
				date = this._getDateDatepicker(target, true);
				minDate = this._getMinMaxDate(inst, "min");
				maxDate = this._getMinMaxDate(inst, "max");
				datepicker_extendRemove(inst.settings, settings);
				// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
				if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
					inst.settings.minDate = this._formatDate(inst, minDate);
				}
				if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
					inst.settings.maxDate = this._formatDate(inst, maxDate);
				}
				if ( "disabled" in settings ) {
					if ( settings.disabled ) {
						this._disableDatepicker(target);
					} else {
						this._enableDatepicker(target);
					}
				}
				this._attachments($(target), inst);
				this._autoSize(inst);
				this._setDate(inst, date);
				this._updateAlternate(inst);
				this._updateDatepicker(inst);
			}
		},
	
		// change method deprecated
		_changeDatepicker: function(target, name, value) {
			this._optionDatepicker(target, name, value);
		},
	
		/* Redraw the date picker attached to an input field or division.
		 * @param  target  element - the target input field or division or span
		 */
		_refreshDatepicker: function(target) {
			var inst = this._getInst(target);
			if (inst) {
				this._updateDatepicker(inst);
			}
		},
	
		/* Set the dates for a jQuery selection.
		 * @param  target element - the target input field or division or span
		 * @param  date	Date - the new date
		 */
		_setDateDatepicker: function(target, date) {
			var inst = this._getInst(target);
			if (inst) {
				this._setDate(inst, date);
				this._updateDatepicker(inst);
				this._updateAlternate(inst);
			}
		},
	
		/* Get the date(s) for the first entry in a jQuery selection.
		 * @param  target element - the target input field or division or span
		 * @param  noDefault boolean - true if no default date is to be used
		 * @return Date - the current date
		 */
		_getDateDatepicker: function(target, noDefault) {
			var inst = this._getInst(target);
			if (inst && !inst.inline) {
				this._setDateFromField(inst, noDefault);
			}
			return (inst ? this._getDate(inst) : null);
		},
	
		/* Handle keystrokes. */
		_doKeyDown: function(event) {
			var onSelect, dateStr, sel,
				inst = $.datepicker._getInst(event.target),
				handled = true,
				isRTL = inst.dpDiv.is(".ui-datepicker-rtl");
	
			inst._keyEvent = true;
			if ($.datepicker._datepickerShowing) {
				switch (event.keyCode) {
					case 9: $.datepicker._hideDatepicker();
							handled = false;
							break; // hide on tab out
					case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
										$.datepicker._currentClass + ")", inst.dpDiv);
							if (sel[0]) {
								$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
							}
	
							onSelect = $.datepicker._get(inst, "onSelect");
							if (onSelect) {
								dateStr = $.datepicker._formatDate(inst);
	
								// trigger custom callback
								onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
							} else {
								$.datepicker._hideDatepicker();
							}
	
							return false; // don't submit the form
					case 27: $.datepicker._hideDatepicker();
							break; // hide on escape
					case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
								-$.datepicker._get(inst, "stepBigMonths") :
								-$.datepicker._get(inst, "stepMonths")), "M");
							break; // previous month/year on page up/+ ctrl
					case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
								+$.datepicker._get(inst, "stepBigMonths") :
								+$.datepicker._get(inst, "stepMonths")), "M");
							break; // next month/year on page down/+ ctrl
					case 35: if (event.ctrlKey || event.metaKey) {
								$.datepicker._clearDate(event.target);
							}
							handled = event.ctrlKey || event.metaKey;
							break; // clear on ctrl or command +end
					case 36: if (event.ctrlKey || event.metaKey) {
								$.datepicker._gotoToday(event.target);
							}
							handled = event.ctrlKey || event.metaKey;
							break; // current on ctrl or command +home
					case 37: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
							}
							handled = event.ctrlKey || event.metaKey;
							// -1 day on ctrl or command +left
							if (event.originalEvent.altKey) {
								$.datepicker._adjustDate(event.target, (event.ctrlKey ?
									-$.datepicker._get(inst, "stepBigMonths") :
									-$.datepicker._get(inst, "stepMonths")), "M");
							}
							// next month/year on alt +left on Mac
							break;
					case 38: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, -7, "D");
							}
							handled = event.ctrlKey || event.metaKey;
							break; // -1 week on ctrl or command +up
					case 39: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
							}
							handled = event.ctrlKey || event.metaKey;
							// +1 day on ctrl or command +right
							if (event.originalEvent.altKey) {
								$.datepicker._adjustDate(event.target, (event.ctrlKey ?
									+$.datepicker._get(inst, "stepBigMonths") :
									+$.datepicker._get(inst, "stepMonths")), "M");
							}
							// next month/year on alt +right
							break;
					case 40: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, +7, "D");
							}
							handled = event.ctrlKey || event.metaKey;
							break; // +1 week on ctrl or command +down
					default: handled = false;
				}
			} else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home
				$.datepicker._showDatepicker(this);
			} else {
				handled = false;
			}
	
			if (handled) {
				event.preventDefault();
				event.stopPropagation();
			}
		},
	
		/* Filter entered characters - based on date format. */
		_doKeyPress: function(event) {
			var chars, chr,
				inst = $.datepicker._getInst(event.target);
	
			if ($.datepicker._get(inst, "constrainInput")) {
				chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
				chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
				return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
			}
		},
	
		/* Synchronise manual entry and field/alternate field. */
		_doKeyUp: function(event) {
			var date,
				inst = $.datepicker._getInst(event.target);
	
			if (inst.input.val() !== inst.lastVal) {
				try {
					date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
						(inst.input ? inst.input.val() : null),
						$.datepicker._getFormatConfig(inst));
	
					if (date) { // only if valid
						$.datepicker._setDateFromField(inst);
						$.datepicker._updateAlternate(inst);
						$.datepicker._updateDatepicker(inst);
					}
				}
				catch (err) {
				}
			}
			return true;
		},
	
		/* Pop-up the date picker for a given input field.
		 * If false returned from beforeShow event handler do not show.
		 * @param  input  element - the input field attached to the date picker or
		 *					event - if triggered by focus
		 */
		_showDatepicker: function(input) {
			input = input.target || input;
			if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
				input = $("input", input.parentNode)[0];
			}
	
			if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here
				return;
			}
	
			var inst, beforeShow, beforeShowSettings, isFixed,
				offset, showAnim, duration;
	
			inst = $.datepicker._getInst(input);
			if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
				$.datepicker._curInst.dpDiv.stop(true, true);
				if ( inst && $.datepicker._datepickerShowing ) {
					$.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
				}
			}
	
			beforeShow = $.datepicker._get(inst, "beforeShow");
			beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
			if(beforeShowSettings === false){
				return;
			}
			datepicker_extendRemove(inst.settings, beforeShowSettings);
	
			inst.lastVal = null;
			$.datepicker._lastInput = input;
			$.datepicker._setDateFromField(inst);
	
			if ($.datepicker._inDialog) { // hide cursor
				input.value = "";
			}
			if (!$.datepicker._pos) { // position below input
				$.datepicker._pos = $.datepicker._findPos(input);
				$.datepicker._pos[1] += input.offsetHeight; // add the height
			}
	
			isFixed = false;
			$(input).parents().each(function() {
				isFixed |= $(this).css("position") === "fixed";
				return !isFixed;
			});
	
			offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
			$.datepicker._pos = null;
			//to avoid flashes on Firefox
			inst.dpDiv.empty();
			// determine sizing offscreen
			inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
			$.datepicker._updateDatepicker(inst);
			// fix width for dynamic number of date pickers
			// and adjust position before showing
			offset = $.datepicker._checkOffset(inst, offset, isFixed);
			inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
				"static" : (isFixed ? "fixed" : "absolute")), display: "none",
				left: offset.left + "px", top: offset.top + "px"});
	
			if (!inst.inline) {
				showAnim = $.datepicker._get(inst, "showAnim");
				duration = $.datepicker._get(inst, "duration");
				inst.dpDiv.css( "z-index", datepicker_getZindex( $( input ) ) + 1 );
				$.datepicker._datepickerShowing = true;
	
				if ( $.effects && $.effects.effect[ showAnim ] ) {
					inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
				} else {
					inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
				}
	
				if ( $.datepicker._shouldFocusInput( inst ) ) {
					inst.input.focus();
				}
	
				$.datepicker._curInst = inst;
			}
		},
	
		/* Generate the date picker content. */
		_updateDatepicker: function(inst) {
			this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
			datepicker_instActive = inst; // for delegate hover events
			inst.dpDiv.empty().append(this._generateHTML(inst));
			this._attachHandlers(inst);
	
			var origyearshtml,
				numMonths = this._getNumberOfMonths(inst),
				cols = numMonths[1],
				width = 17,
				activeCell = inst.dpDiv.find( "." + this._dayOverClass + " a" );
	
			if ( activeCell.length > 0 ) {
				datepicker_handleMouseover.apply( activeCell.get( 0 ) );
			}
	
			inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
			if (cols > 1) {
				inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");
			}
			inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
				"Class"]("ui-datepicker-multi");
			inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
				"Class"]("ui-datepicker-rtl");
	
			if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
				inst.input.focus();
			}
	
			// deffered render of the years select (to avoid flashes on Firefox)
			if( inst.yearshtml ){
				origyearshtml = inst.yearshtml;
				setTimeout(function(){
					//assure that inst.yearshtml didn't change.
					if( origyearshtml === inst.yearshtml && inst.yearshtml ){
						inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
					}
					origyearshtml = inst.yearshtml = null;
				}, 0);
			}
		},
	
		// #6694 - don't focus the input if it's already focused
		// this breaks the change event in IE
		// Support: IE and jQuery <1.9
		_shouldFocusInput: function( inst ) {
			return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
		},
	
		/* Check positioning to remain on screen. */
		_checkOffset: function(inst, offset, isFixed) {
			var dpWidth = inst.dpDiv.outerWidth(),
				dpHeight = inst.dpDiv.outerHeight(),
				inputWidth = inst.input ? inst.input.outerWidth() : 0,
				inputHeight = inst.input ? inst.input.outerHeight() : 0,
				viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
				viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());
	
			offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
			offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
			offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;
	
			// now check if datepicker is showing outside window viewport - move to a better place if so.
			offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
				Math.abs(offset.left + dpWidth - viewWidth) : 0);
			offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
				Math.abs(dpHeight + inputHeight) : 0);
	
			return offset;
		},
	
		/* Find an object's position on the screen. */
		_findPos: function(obj) {
			var position,
				inst = this._getInst(obj),
				isRTL = this._get(inst, "isRTL");
	
			while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
				obj = obj[isRTL ? "previousSibling" : "nextSibling"];
			}
	
			position = $(obj).offset();
			return [position.left, position.top];
		},
	
		/* Hide the date picker from view.
		 * @param  input  element - the input field attached to the date picker
		 */
		_hideDatepicker: function(input) {
			var showAnim, duration, postProcess, onClose,
				inst = this._curInst;
	
			if (!inst || (input && inst !== $.data(input, "datepicker"))) {
				return;
			}
	
			if (this._datepickerShowing) {
				showAnim = this._get(inst, "showAnim");
				duration = this._get(inst, "duration");
				postProcess = function() {
					$.datepicker._tidyDialog(inst);
				};
	
				// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
				if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
					inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
				} else {
					inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
						(showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
				}
	
				if (!showAnim) {
					postProcess();
				}
				this._datepickerShowing = false;
	
				onClose = this._get(inst, "onClose");
				if (onClose) {
					onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
				}
	
				this._lastInput = null;
				if (this._inDialog) {
					this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
					if ($.blockUI) {
						$.unblockUI();
						$("body").append(this.dpDiv);
					}
				}
				this._inDialog = false;
			}
		},
	
		/* Tidy up after a dialog display. */
		_tidyDialog: function(inst) {
			inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
		},
	
		/* Close date picker if clicked elsewhere. */
		_checkExternalClick: function(event) {
			if (!$.datepicker._curInst) {
				return;
			}
	
			var $target = $(event.target),
				inst = $.datepicker._getInst($target[0]);
	
			if ( ( ( $target[0].id !== $.datepicker._mainDivId &&
					$target.parents("#" + $.datepicker._mainDivId).length === 0 &&
					!$target.hasClass($.datepicker.markerClassName) &&
					!$target.closest("." + $.datepicker._triggerClass).length &&
					$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
				( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {
					$.datepicker._hideDatepicker();
			}
		},
	
		/* Adjust one of the date sub-fields. */
		_adjustDate: function(id, offset, period) {
			var target = $(id),
				inst = this._getInst(target[0]);
	
			if (this._isDisabledDatepicker(target[0])) {
				return;
			}
			this._adjustInstDate(inst, offset +
				(period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
				period);
			this._updateDatepicker(inst);
		},
	
		/* Action for current link. */
		_gotoToday: function(id) {
			var date,
				target = $(id),
				inst = this._getInst(target[0]);
	
			if (this._get(inst, "gotoCurrent") && inst.currentDay) {
				inst.selectedDay = inst.currentDay;
				inst.drawMonth = inst.selectedMonth = inst.currentMonth;
				inst.drawYear = inst.selectedYear = inst.currentYear;
			} else {
				date = new Date();
				inst.selectedDay = date.getDate();
				inst.drawMonth = inst.selectedMonth = date.getMonth();
				inst.drawYear = inst.selectedYear = date.getFullYear();
			}
			this._notifyChange(inst);
			this._adjustDate(target);
		},
	
		/* Action for selecting a new month/year. */
		_selectMonthYear: function(id, select, period) {
			var target = $(id),
				inst = this._getInst(target[0]);
	
			inst["selected" + (period === "M" ? "Month" : "Year")] =
			inst["draw" + (period === "M" ? "Month" : "Year")] =
				parseInt(select.options[select.selectedIndex].value,10);
	
			this._notifyChange(inst);
			this._adjustDate(target);
		},
	
		/* Action for selecting a day. */
		_selectDay: function(id, month, year, td) {
			var inst,
				target = $(id);
	
			if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
				return;
			}
	
			inst = this._getInst(target[0]);
			inst.selectedDay = inst.currentDay = $("a", td).html();
			inst.selectedMonth = inst.currentMonth = month;
			inst.selectedYear = inst.currentYear = year;
			this._selectDate(id, this._formatDate(inst,
				inst.currentDay, inst.currentMonth, inst.currentYear));
		},
	
		/* Erase the input field and hide the date picker. */
		_clearDate: function(id) {
			var target = $(id);
			this._selectDate(target, "");
		},
	
		/* Update the input field with the selected date. */
		_selectDate: function(id, dateStr) {
			var onSelect,
				target = $(id),
				inst = this._getInst(target[0]);
	
			dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
			if (inst.input) {
				inst.input.val(dateStr);
			}
			this._updateAlternate(inst);
	
			onSelect = this._get(inst, "onSelect");
			if (onSelect) {
				onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
			} else if (inst.input) {
				inst.input.trigger("change"); // fire the change event
			}
	
			if (inst.inline){
				this._updateDatepicker(inst);
			} else {
				this._hideDatepicker();
				this._lastInput = inst.input[0];
				if (typeof(inst.input[0]) !== "object") {
					inst.input.focus(); // restore focus
				}
				this._lastInput = null;
			}
		},
	
		/* Update any alternate field to synchronise with the main field. */
		_updateAlternate: function(inst) {
			var altFormat, date, dateStr,
				altField = this._get(inst, "altField");
	
			if (altField) { // update alternate field too
				altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
				date = this._getDate(inst);
				dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
				$(altField).each(function() { $(this).val(dateStr); });
			}
		},
	
		/* Set as beforeShowDay function to prevent selection of weekends.
		 * @param  date  Date - the date to customise
		 * @return [boolean, string] - is this date selectable?, what is its CSS class?
		 */
		noWeekends: function(date) {
			var day = date.getDay();
			return [(day > 0 && day < 6), ""];
		},
	
		/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
		 * @param  date  Date - the date to get the week for
		 * @return  number - the number of the week within the year that contains this date
		 */
		iso8601Week: function(date) {
			var time,
				checkDate = new Date(date.getTime());
	
			// Find Thursday of this week starting on Monday
			checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
	
			time = checkDate.getTime();
			checkDate.setMonth(0); // Compare with Jan 1
			checkDate.setDate(1);
			return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
		},
	
		/* Parse a string value into a date object.
		 * See formatDate below for the possible formats.
		 *
		 * @param  format string - the expected format of the date
		 * @param  value string - the date in the above format
		 * @param  settings Object - attributes include:
		 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
		 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
		 *					dayNames		string[7] - names of the days from Sunday (optional)
		 *					monthNamesShort string[12] - abbreviated names of the months (optional)
		 *					monthNames		string[12] - names of the months (optional)
		 * @return  Date - the extracted date value or null if value is blank
		 */
		parseDate: function (format, value, settings) {
			if (format == null || value == null) {
				throw "Invalid arguments";
			}
	
			value = (typeof value === "object" ? value.toString() : value + "");
			if (value === "") {
				return null;
			}
	
			var iFormat, dim, extra,
				iValue = 0,
				shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
				shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
					new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
				dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
				dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
				monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
				monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
				year = -1,
				month = -1,
				day = -1,
				doy = -1,
				literal = false,
				date,
				// Check whether a format character is doubled
				lookAhead = function(match) {
					var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
					if (matches) {
						iFormat++;
					}
					return matches;
				},
				// Extract a number from the string value
				getNumber = function(match) {
					var isDoubled = lookAhead(match),
						size = (match === "@" ? 14 : (match === "!" ? 20 :
						(match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
						minSize = (match === "y" ? size : 1),
						digits = new RegExp("^\\d{" + minSize + "," + size + "}"),
						num = value.substring(iValue).match(digits);
					if (!num) {
						throw "Missing number at position " + iValue;
					}
					iValue += num[0].length;
					return parseInt(num[0], 10);
				},
				// Extract a name from the string value and convert to an index
				getName = function(match, shortNames, longNames) {
					var index = -1,
						names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
							return [ [k, v] ];
						}).sort(function (a, b) {
							return -(a[1].length - b[1].length);
						});
	
					$.each(names, function (i, pair) {
						var name = pair[1];
						if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
							index = pair[0];
							iValue += name.length;
							return false;
						}
					});
					if (index !== -1) {
						return index + 1;
					} else {
						throw "Unknown name at position " + iValue;
					}
				},
				// Confirm that a literal character matches the string value
				checkLiteral = function() {
					if (value.charAt(iValue) !== format.charAt(iFormat)) {
						throw "Unexpected literal at position " + iValue;
					}
					iValue++;
				};
	
			for (iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
						literal = false;
					} else {
						checkLiteral();
					}
				} else {
					switch (format.charAt(iFormat)) {
						case "d":
							day = getNumber("d");
							break;
						case "D":
							getName("D", dayNamesShort, dayNames);
							break;
						case "o":
							doy = getNumber("o");
							break;
						case "m":
							month = getNumber("m");
							break;
						case "M":
							month = getName("M", monthNamesShort, monthNames);
							break;
						case "y":
							year = getNumber("y");
							break;
						case "@":
							date = new Date(getNumber("@"));
							year = date.getFullYear();
							month = date.getMonth() + 1;
							day = date.getDate();
							break;
						case "!":
							date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
							year = date.getFullYear();
							month = date.getMonth() + 1;
							day = date.getDate();
							break;
						case "'":
							if (lookAhead("'")){
								checkLiteral();
							} else {
								literal = true;
							}
							break;
						default:
							checkLiteral();
					}
				}
			}
	
			if (iValue < value.length){
				extra = value.substr(iValue);
				if (!/^\s+/.test(extra)) {
					throw "Extra/unparsed characters found in date: " + extra;
				}
			}
	
			if (year === -1) {
				year = new Date().getFullYear();
			} else if (year < 100) {
				year += new Date().getFullYear() - new Date().getFullYear() % 100 +
					(year <= shortYearCutoff ? 0 : -100);
			}
	
			if (doy > -1) {
				month = 1;
				day = doy;
				do {
					dim = this._getDaysInMonth(year, month - 1);
					if (day <= dim) {
						break;
					}
					month++;
					day -= dim;
				} while (true);
			}
	
			date = this._daylightSavingAdjust(new Date(year, month - 1, day));
			if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
				throw "Invalid date"; // E.g. 31/02/00
			}
			return date;
		},
	
		/* Standard date formats. */
		ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
		COOKIE: "D, dd M yy",
		ISO_8601: "yy-mm-dd",
		RFC_822: "D, d M y",
		RFC_850: "DD, dd-M-y",
		RFC_1036: "D, d M y",
		RFC_1123: "D, d M yy",
		RFC_2822: "D, d M yy",
		RSS: "D, d M y", // RFC 822
		TICKS: "!",
		TIMESTAMP: "@",
		W3C: "yy-mm-dd", // ISO 8601
	
		_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
			Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),
	
		/* Format a date object into a string value.
		 * The format can be combinations of the following:
		 * d  - day of month (no leading zero)
		 * dd - day of month (two digit)
		 * o  - day of year (no leading zeros)
		 * oo - day of year (three digit)
		 * D  - day name short
		 * DD - day name long
		 * m  - month of year (no leading zero)
		 * mm - month of year (two digit)
		 * M  - month name short
		 * MM - month name long
		 * y  - year (two digit)
		 * yy - year (four digit)
		 * @ - Unix timestamp (ms since 01/01/1970)
		 * ! - Windows ticks (100ns since 01/01/0001)
		 * "..." - literal text
		 * '' - single quote
		 *
		 * @param  format string - the desired format of the date
		 * @param  date Date - the date value to format
		 * @param  settings Object - attributes include:
		 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
		 *					dayNames		string[7] - names of the days from Sunday (optional)
		 *					monthNamesShort string[12] - abbreviated names of the months (optional)
		 *					monthNames		string[12] - names of the months (optional)
		 * @return  string - the date in the above format
		 */
		formatDate: function (format, date, settings) {
			if (!date) {
				return "";
			}
	
			var iFormat,
				dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
				dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
				monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
				monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
				// Check whether a format character is doubled
				lookAhead = function(match) {
					var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
					if (matches) {
						iFormat++;
					}
					return matches;
				},
				// Format a number, with leading zero if necessary
				formatNumber = function(match, value, len) {
					var num = "" + value;
					if (lookAhead(match)) {
						while (num.length < len) {
							num = "0" + num;
						}
					}
					return num;
				},
				// Format a name, short or long as requested
				formatName = function(match, value, shortNames, longNames) {
					return (lookAhead(match) ? longNames[value] : shortNames[value]);
				},
				output = "",
				literal = false;
	
			if (date) {
				for (iFormat = 0; iFormat < format.length; iFormat++) {
					if (literal) {
						if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
							literal = false;
						} else {
							output += format.charAt(iFormat);
						}
					} else {
						switch (format.charAt(iFormat)) {
							case "d":
								output += formatNumber("d", date.getDate(), 2);
								break;
							case "D":
								output += formatName("D", date.getDay(), dayNamesShort, dayNames);
								break;
							case "o":
								output += formatNumber("o",
									Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
								break;
							case "m":
								output += formatNumber("m", date.getMonth() + 1, 2);
								break;
							case "M":
								output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
								break;
							case "y":
								output += (lookAhead("y") ? date.getFullYear() :
									(date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
								break;
							case "@":
								output += date.getTime();
								break;
							case "!":
								output += date.getTime() * 10000 + this._ticksTo1970;
								break;
							case "'":
								if (lookAhead("'")) {
									output += "'";
								} else {
									literal = true;
								}
								break;
							default:
								output += format.charAt(iFormat);
						}
					}
				}
			}
			return output;
		},
	
		/* Extract all possible characters from the date format. */
		_possibleChars: function (format) {
			var iFormat,
				chars = "",
				literal = false,
				// Check whether a format character is doubled
				lookAhead = function(match) {
					var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
					if (matches) {
						iFormat++;
					}
					return matches;
				};
	
			for (iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
						literal = false;
					} else {
						chars += format.charAt(iFormat);
					}
				} else {
					switch (format.charAt(iFormat)) {
						case "d": case "m": case "y": case "@":
							chars += "0123456789";
							break;
						case "D": case "M":
							return null; // Accept anything
						case "'":
							if (lookAhead("'")) {
								chars += "'";
							} else {
								literal = true;
							}
							break;
						default:
							chars += format.charAt(iFormat);
					}
				}
			}
			return chars;
		},
	
		/* Get a setting value, defaulting if necessary. */
		_get: function(inst, name) {
			return inst.settings[name] !== undefined ?
				inst.settings[name] : this._defaults[name];
		},
	
		/* Parse existing date and initialise date picker. */
		_setDateFromField: function(inst, noDefault) {
			if (inst.input.val() === inst.lastVal) {
				return;
			}
	
			var dateFormat = this._get(inst, "dateFormat"),
				dates = inst.lastVal = inst.input ? inst.input.val() : null,
				defaultDate = this._getDefaultDate(inst),
				date = defaultDate,
				settings = this._getFormatConfig(inst);
	
			try {
				date = this.parseDate(dateFormat, dates, settings) || defaultDate;
			} catch (event) {
				dates = (noDefault ? "" : dates);
			}
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
			inst.currentDay = (dates ? date.getDate() : 0);
			inst.currentMonth = (dates ? date.getMonth() : 0);
			inst.currentYear = (dates ? date.getFullYear() : 0);
			this._adjustInstDate(inst);
		},
	
		/* Retrieve the default date shown on opening. */
		_getDefaultDate: function(inst) {
			return this._restrictMinMax(inst,
				this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
		},
	
		/* A date may be specified as an exact value or a relative one. */
		_determineDate: function(inst, date, defaultDate) {
			var offsetNumeric = function(offset) {
					var date = new Date();
					date.setDate(date.getDate() + offset);
					return date;
				},
				offsetString = function(offset) {
					try {
						return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
							offset, $.datepicker._getFormatConfig(inst));
					}
					catch (e) {
						// Ignore
					}
	
					var date = (offset.toLowerCase().match(/^c/) ?
						$.datepicker._getDate(inst) : null) || new Date(),
						year = date.getFullYear(),
						month = date.getMonth(),
						day = date.getDate(),
						pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
						matches = pattern.exec(offset);
	
					while (matches) {
						switch (matches[2] || "d") {
							case "d" : case "D" :
								day += parseInt(matches[1],10); break;
							case "w" : case "W" :
								day += parseInt(matches[1],10) * 7; break;
							case "m" : case "M" :
								month += parseInt(matches[1],10);
								day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
								break;
							case "y": case "Y" :
								year += parseInt(matches[1],10);
								day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
								break;
						}
						matches = pattern.exec(offset);
					}
					return new Date(year, month, day);
				},
				newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :
					(typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));
	
			newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
			if (newDate) {
				newDate.setHours(0);
				newDate.setMinutes(0);
				newDate.setSeconds(0);
				newDate.setMilliseconds(0);
			}
			return this._daylightSavingAdjust(newDate);
		},
	
		/* Handle switch to/from daylight saving.
		 * Hours may be non-zero on daylight saving cut-over:
		 * > 12 when midnight changeover, but then cannot generate
		 * midnight datetime, so jump to 1AM, otherwise reset.
		 * @param  date  (Date) the date to check
		 * @return  (Date) the corrected date
		 */
		_daylightSavingAdjust: function(date) {
			if (!date) {
				return null;
			}
			date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
			return date;
		},
	
		/* Set the date(s) directly. */
		_setDate: function(inst, date, noChange) {
			var clear = !date,
				origMonth = inst.selectedMonth,
				origYear = inst.selectedYear,
				newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
	
			inst.selectedDay = inst.currentDay = newDate.getDate();
			inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
			inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
			if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
				this._notifyChange(inst);
			}
			this._adjustInstDate(inst);
			if (inst.input) {
				inst.input.val(clear ? "" : this._formatDate(inst));
			}
		},
	
		/* Retrieve the date(s) directly. */
		_getDate: function(inst) {
			var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
				this._daylightSavingAdjust(new Date(
				inst.currentYear, inst.currentMonth, inst.currentDay)));
				return startDate;
		},
	
		/* Attach the onxxx handlers.  These are declared statically so
		 * they work with static code transformers like Caja.
		 */
		_attachHandlers: function(inst) {
			var stepMonths = this._get(inst, "stepMonths"),
				id = "#" + inst.id.replace( /\\\\/g, "\\" );
			inst.dpDiv.find("[data-handler]").map(function () {
				var handler = {
					prev: function () {
						$.datepicker._adjustDate(id, -stepMonths, "M");
					},
					next: function () {
						$.datepicker._adjustDate(id, +stepMonths, "M");
					},
					hide: function () {
						$.datepicker._hideDatepicker();
					},
					today: function () {
						$.datepicker._gotoToday(id);
					},
					selectDay: function () {
						$.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
						return false;
					},
					selectMonth: function () {
						$.datepicker._selectMonthYear(id, this, "M");
						return false;
					},
					selectYear: function () {
						$.datepicker._selectMonthYear(id, this, "Y");
						return false;
					}
				};
				$(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
			});
		},
	
		/* Generate the HTML for the current state of the date picker. */
		_generateHTML: function(inst) {
			var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
				controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
				monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
				selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
				cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
				printDate, dRow, tbody, daySettings, otherMonth, unselectable,
				tempDate = new Date(),
				today = this._daylightSavingAdjust(
					new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
				isRTL = this._get(inst, "isRTL"),
				showButtonPanel = this._get(inst, "showButtonPanel"),
				hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
				navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
				numMonths = this._getNumberOfMonths(inst),
				showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
				stepMonths = this._get(inst, "stepMonths"),
				isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
				currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
					new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
				minDate = this._getMinMaxDate(inst, "min"),
				maxDate = this._getMinMaxDate(inst, "max"),
				drawMonth = inst.drawMonth - showCurrentAtPos,
				drawYear = inst.drawYear;
	
			if (drawMonth < 0) {
				drawMonth += 12;
				drawYear--;
			}
			if (maxDate) {
				maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
					maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
				maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
				while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
					drawMonth--;
					if (drawMonth < 0) {
						drawMonth = 11;
						drawYear--;
					}
				}
			}
			inst.drawMonth = drawMonth;
			inst.drawYear = drawYear;
	
			prevText = this._get(inst, "prevText");
			prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
				this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
				this._getFormatConfig(inst)));
	
			prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
				"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
				" title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
				(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));
	
			nextText = this._get(inst, "nextText");
			nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
				this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
				this._getFormatConfig(inst)));
	
			next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
				"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
				" title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
				(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));
	
			currentText = this._get(inst, "currentText");
			gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
			currentText = (!navigationAsDateFormat ? currentText :
				this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));
	
			controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
				this._get(inst, "closeText") + "</button>" : "");
	
			buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
				(this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
				">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";
	
			firstDay = parseInt(this._get(inst, "firstDay"),10);
			firstDay = (isNaN(firstDay) ? 0 : firstDay);
	
			showWeek = this._get(inst, "showWeek");
			dayNames = this._get(inst, "dayNames");
			dayNamesMin = this._get(inst, "dayNamesMin");
			monthNames = this._get(inst, "monthNames");
			monthNamesShort = this._get(inst, "monthNamesShort");
			beforeShowDay = this._get(inst, "beforeShowDay");
			showOtherMonths = this._get(inst, "showOtherMonths");
			selectOtherMonths = this._get(inst, "selectOtherMonths");
			defaultDate = this._getDefaultDate(inst);
			html = "";
			dow;
			for (row = 0; row < numMonths[0]; row++) {
				group = "";
				this.maxRows = 4;
				for (col = 0; col < numMonths[1]; col++) {
					selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
					cornerClass = " ui-corner-all";
					calender = "";
					if (isMultiMonth) {
						calender += "<div class='ui-datepicker-group";
						if (numMonths[1] > 1) {
							switch (col) {
								case 0: calender += " ui-datepicker-group-first";
									cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;
								case numMonths[1]-1: calender += " ui-datepicker-group-last";
									cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;
								default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
							}
						}
						calender += "'>";
					}
					calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
						(/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
						(/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
						this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
						row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
						"</div><table class='ui-datepicker-calendar'><thead>" +
						"<tr>";
					thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
					for (dow = 0; dow < 7; dow++) { // days of the week
						day = (dow + firstDay) % 7;
						thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
							"<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
					}
					calender += thead + "</tr></thead><tbody>";
					daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
					if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
						inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
					}
					leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
					curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
					numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
					this.maxRows = numRows;
					printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
					for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
						calender += "<tr>";
						tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
							this._get(inst, "calculateWeek")(printDate) + "</td>");
						for (dow = 0; dow < 7; dow++) { // create date picker days
							daySettings = (beforeShowDay ?
								beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
							otherMonth = (printDate.getMonth() !== drawMonth);
							unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
								(minDate && printDate < minDate) || (maxDate && printDate > maxDate);
							tbody += "<td class='" +
								((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
								(otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
								((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
								(defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
								// or defaultDate is current printedDate and defaultDate is selectedDate
								" " + this._dayOverClass : "") + // highlight selected day
								(unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days
								(otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
								(printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
								(printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
								((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
								(unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
								(otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
								(unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
								(printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
								(printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
								(otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
								"' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
							printDate.setDate(printDate.getDate() + 1);
							printDate = this._daylightSavingAdjust(printDate);
						}
						calender += tbody + "</tr>";
					}
					drawMonth++;
					if (drawMonth > 11) {
						drawMonth = 0;
						drawYear++;
					}
					calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
								((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
					group += calender;
				}
				html += group;
			}
			html += buttonPanel;
			inst._keyEvent = false;
			return html;
		},
	
		/* Generate the month and year header. */
		_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
				secondary, monthNames, monthNamesShort) {
	
			var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
				changeMonth = this._get(inst, "changeMonth"),
				changeYear = this._get(inst, "changeYear"),
				showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
				html = "<div class='ui-datepicker-title'>",
				monthHtml = "";
	
			// month selection
			if (secondary || !changeMonth) {
				monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
			} else {
				inMinYear = (minDate && minDate.getFullYear() === drawYear);
				inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
				monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
				for ( month = 0; month < 12; month++) {
					if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
						monthHtml += "<option value='" + month + "'" +
							(month === drawMonth ? " selected='selected'" : "") +
							">" + monthNamesShort[month] + "</option>";
					}
				}
				monthHtml += "</select>";
			}
	
			if (!showMonthAfterYear) {
				html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
			}
	
			// year selection
			if ( !inst.yearshtml ) {
				inst.yearshtml = "";
				if (secondary || !changeYear) {
					html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
				} else {
					// determine range of years to display
					years = this._get(inst, "yearRange").split(":");
					thisYear = new Date().getFullYear();
					determineYear = function(value) {
						var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
							(value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
							parseInt(value, 10)));
						return (isNaN(year) ? thisYear : year);
					};
					year = determineYear(years[0]);
					endYear = Math.max(year, determineYear(years[1] || ""));
					year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
					endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
					inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
					for (; year <= endYear; year++) {
						inst.yearshtml += "<option value='" + year + "'" +
							(year === drawYear ? " selected='selected'" : "") +
							">" + year + "</option>";
					}
					inst.yearshtml += "</select>";
	
					html += inst.yearshtml;
					inst.yearshtml = null;
				}
			}
	
			html += this._get(inst, "yearSuffix");
			if (showMonthAfterYear) {
				html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
			}
			html += "</div>"; // Close datepicker_header
			return html;
		},
	
		/* Adjust one of the date sub-fields. */
		_adjustInstDate: function(inst, offset, period) {
			var year = inst.drawYear + (period === "Y" ? offset : 0),
				month = inst.drawMonth + (period === "M" ? offset : 0),
				day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
				date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));
	
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
			if (period === "M" || period === "Y") {
				this._notifyChange(inst);
			}
		},
	
		/* Ensure a date is within any min/max bounds. */
		_restrictMinMax: function(inst, date) {
			var minDate = this._getMinMaxDate(inst, "min"),
				maxDate = this._getMinMaxDate(inst, "max"),
				newDate = (minDate && date < minDate ? minDate : date);
			return (maxDate && newDate > maxDate ? maxDate : newDate);
		},
	
		/* Notify change of month/year. */
		_notifyChange: function(inst) {
			var onChange = this._get(inst, "onChangeMonthYear");
			if (onChange) {
				onChange.apply((inst.input ? inst.input[0] : null),
					[inst.selectedYear, inst.selectedMonth + 1, inst]);
			}
		},
	
		/* Determine the number of months to show. */
		_getNumberOfMonths: function(inst) {
			var numMonths = this._get(inst, "numberOfMonths");
			return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
		},
	
		/* Determine the current maximum date - ensure no time components are set. */
		_getMinMaxDate: function(inst, minMax) {
			return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
		},
	
		/* Find the number of days in a given month. */
		_getDaysInMonth: function(year, month) {
			return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
		},
	
		/* Find the day of the week of the first of a month. */
		_getFirstDayOfMonth: function(year, month) {
			return new Date(year, month, 1).getDay();
		},
	
		/* Determines if we should allow a "next/prev" month display change. */
		_canAdjustMonth: function(inst, offset, curYear, curMonth) {
			var numMonths = this._getNumberOfMonths(inst),
				date = this._daylightSavingAdjust(new Date(curYear,
				curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));
	
			if (offset < 0) {
				date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
			}
			return this._isInRange(inst, date);
		},
	
		/* Is the given date in the accepted range? */
		_isInRange: function(inst, date) {
			var yearSplit, currentYear,
				minDate = this._getMinMaxDate(inst, "min"),
				maxDate = this._getMinMaxDate(inst, "max"),
				minYear = null,
				maxYear = null,
				years = this._get(inst, "yearRange");
				if (years){
					yearSplit = years.split(":");
					currentYear = new Date().getFullYear();
					minYear = parseInt(yearSplit[0], 10);
					maxYear = parseInt(yearSplit[1], 10);
					if ( yearSplit[0].match(/[+\-].*/) ) {
						minYear += currentYear;
					}
					if ( yearSplit[1].match(/[+\-].*/) ) {
						maxYear += currentYear;
					}
				}
	
			return ((!minDate || date.getTime() >= minDate.getTime()) &&
				(!maxDate || date.getTime() <= maxDate.getTime()) &&
				(!minYear || date.getFullYear() >= minYear) &&
				(!maxYear || date.getFullYear() <= maxYear));
		},
	
		/* Provide the configuration settings for formatting/parsing. */
		_getFormatConfig: function(inst) {
			var shortYearCutoff = this._get(inst, "shortYearCutoff");
			shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
				new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
			return {shortYearCutoff: shortYearCutoff,
				dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
				monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")};
		},
	
		/* Format the given date for display. */
		_formatDate: function(inst, day, month, year) {
			if (!day) {
				inst.currentDay = inst.selectedDay;
				inst.currentMonth = inst.selectedMonth;
				inst.currentYear = inst.selectedYear;
			}
			var date = (day ? (typeof day === "object" ? day :
				this._daylightSavingAdjust(new Date(year, month, day))) :
				this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
			return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
		}
	});
	
	/*
	 * Bind hover events for datepicker elements.
	 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
	 * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
	 */
	function datepicker_bindHover(dpDiv) {
		var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
		return dpDiv.delegate(selector, "mouseout", function() {
				$(this).removeClass("ui-state-hover");
				if (this.className.indexOf("ui-datepicker-prev") !== -1) {
					$(this).removeClass("ui-datepicker-prev-hover");
				}
				if (this.className.indexOf("ui-datepicker-next") !== -1) {
					$(this).removeClass("ui-datepicker-next-hover");
				}
			})
			.delegate( selector, "mouseover", datepicker_handleMouseover );
	}
	
	function datepicker_handleMouseover() {
		if (!$.datepicker._isDisabledDatepicker( datepicker_instActive.inline? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
			$(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
			$(this).addClass("ui-state-hover");
			if (this.className.indexOf("ui-datepicker-prev") !== -1) {
				$(this).addClass("ui-datepicker-prev-hover");
			}
			if (this.className.indexOf("ui-datepicker-next") !== -1) {
				$(this).addClass("ui-datepicker-next-hover");
			}
		}
	}
	
	/* jQuery extend now ignores nulls! */
	function datepicker_extendRemove(target, props) {
		$.extend(target, props);
		for (var name in props) {
			if (props[name] == null) {
				target[name] = props[name];
			}
		}
		return target;
	}
	
	/* Invoke the datepicker functionality.
	   @param  options  string - a command, optionally followed by additional parameters or
						Object - settings for attaching new datepicker functionality
	   @return  jQuery object */
	$.fn.datepicker = function(options){
	
		/* Verify an empty collection wasn't passed - Fixes #6976 */
		if ( !this.length ) {
			return this;
		}
	
		/* Initialise the date picker. */
		if (!$.datepicker.initialized) {
			$(document).mousedown($.datepicker._checkExternalClick);
			$.datepicker.initialized = true;
		}
	
		/* Append datepicker main container to body if not exist. */
		if ($("#"+$.datepicker._mainDivId).length === 0) {
			$("body").append($.datepicker.dpDiv);
		}
	
		var otherArgs = Array.prototype.slice.call(arguments, 1);
		if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
			return $.datepicker["_" + options + "Datepicker"].
				apply($.datepicker, [this[0]].concat(otherArgs));
		}
		if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
			return $.datepicker["_" + options + "Datepicker"].
				apply($.datepicker, [this[0]].concat(otherArgs));
		}
		return this.each(function() {
			typeof options === "string" ?
				$.datepicker["_" + options + "Datepicker"].
					apply($.datepicker, [this].concat(otherArgs)) :
				$.datepicker._attachDatepicker(this, options);
		});
	};
	
	$.datepicker = new Datepicker(); // singleton instance
	$.datepicker.initialized = false;
	$.datepicker.uuid = new Date().getTime();
	$.datepicker.version = "1.11.4";
	
	var datepicker = $.datepicker;
	
	
	/*!
	 * jQuery UI Draggable 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/draggable/
	 */
	
	
	$.widget("ui.draggable", $.ui.mouse, {
		version: "1.11.4",
		widgetEventPrefix: "drag",
		options: {
			addClasses: true,
			appendTo: "parent",
			axis: false,
			connectToSortable: false,
			containment: false,
			cursor: "auto",
			cursorAt: false,
			grid: false,
			handle: false,
			helper: "original",
			iframeFix: false,
			opacity: false,
			refreshPositions: false,
			revert: false,
			revertDuration: 500,
			scope: "default",
			scroll: true,
			scrollSensitivity: 20,
			scrollSpeed: 20,
			snap: false,
			snapMode: "both",
			snapTolerance: 20,
			stack: false,
			zIndex: false,
	
			// callbacks
			drag: null,
			start: null,
			stop: null
		},
		_create: function() {
	
			if ( this.options.helper === "original" ) {
				this._setPositionRelative();
			}
			if (this.options.addClasses){
				this.element.addClass("ui-draggable");
			}
			if (this.options.disabled){
				this.element.addClass("ui-draggable-disabled");
			}
			this._setHandleClassName();
	
			this._mouseInit();
		},
	
		_setOption: function( key, value ) {
			this._super( key, value );
			if ( key === "handle" ) {
				this._removeHandleClassName();
				this._setHandleClassName();
			}
		},
	
		_destroy: function() {
			if ( ( this.helper || this.element ).is( ".ui-draggable-dragging" ) ) {
				this.destroyOnClear = true;
				return;
			}
			this.element.removeClass( "ui-draggable ui-draggable-dragging ui-draggable-disabled" );
			this._removeHandleClassName();
			this._mouseDestroy();
		},
	
		_mouseCapture: function(event) {
			var o = this.options;
	
			this._blurActiveElement( event );
	
			// among others, prevent a drag on a resizable-handle
			if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
				return false;
			}
	
			//Quit if we're not on a valid handle
			this.handle = this._getHandle(event);
			if (!this.handle) {
				return false;
			}
	
			this._blockFrames( o.iframeFix === true ? "iframe" : o.iframeFix );
	
			return true;
	
		},
	
		_blockFrames: function( selector ) {
			this.iframeBlocks = this.document.find( selector ).map(function() {
				var iframe = $( this );
	
				return $( "<div>" )
					.css( "position", "absolute" )
					.appendTo( iframe.parent() )
					.outerWidth( iframe.outerWidth() )
					.outerHeight( iframe.outerHeight() )
					.offset( iframe.offset() )[ 0 ];
			});
		},
	
		_unblockFrames: function() {
			if ( this.iframeBlocks ) {
				this.iframeBlocks.remove();
				delete this.iframeBlocks;
			}
		},
	
		_blurActiveElement: function( event ) {
			var document = this.document[ 0 ];
	
			// Only need to blur if the event occurred on the draggable itself, see #10527
			if ( !this.handleElement.is( event.target ) ) {
				return;
			}
	
			// support: IE9
			// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
			try {
	
				// Support: IE9, IE10
				// If the <body> is blurred, IE will switch windows, see #9520
				if ( document.activeElement && document.activeElement.nodeName.toLowerCase() !== "body" ) {
	
					// Blur any element that currently has focus, see #4261
					$( document.activeElement ).blur();
				}
			} catch ( error ) {}
		},
	
		_mouseStart: function(event) {
	
			var o = this.options;
	
			//Create and append the visible helper
			this.helper = this._createHelper(event);
	
			this.helper.addClass("ui-draggable-dragging");
	
			//Cache the helper size
			this._cacheHelperProportions();
	
			//If ddmanager is used for droppables, set the global draggable
			if ($.ui.ddmanager) {
				$.ui.ddmanager.current = this;
			}
	
			/*
			 * - Position generation -
			 * This block generates everything position related - it's the core of draggables.
			 */
	
			//Cache the margins of the original element
			this._cacheMargins();
	
			//Store the helper's css position
			this.cssPosition = this.helper.css( "position" );
			this.scrollParent = this.helper.scrollParent( true );
			this.offsetParent = this.helper.offsetParent();
			this.hasFixedAncestor = this.helper.parents().filter(function() {
					return $( this ).css( "position" ) === "fixed";
				}).length > 0;
	
			//The element's absolute position on the page minus margins
			this.positionAbs = this.element.offset();
			this._refreshOffsets( event );
	
			//Generate the original position
			this.originalPosition = this.position = this._generatePosition( event, false );
			this.originalPageX = event.pageX;
			this.originalPageY = event.pageY;
	
			//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
			(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));
	
			//Set a containment if given in the options
			this._setContainment();
	
			//Trigger event + callbacks
			if (this._trigger("start", event) === false) {
				this._clear();
				return false;
			}
	
			//Recache the helper size
			this._cacheHelperProportions();
	
			//Prepare the droppable offsets
			if ($.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(this, event);
			}
	
			// Reset helper's right/bottom css if they're set and set explicit width/height instead
			// as this prevents resizing of elements with right/bottom set (see #7772)
			this._normalizeRightBottom();
	
			this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position
	
			//If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
			if ( $.ui.ddmanager ) {
				$.ui.ddmanager.dragStart(this, event);
			}
	
			return true;
		},
	
		_refreshOffsets: function( event ) {
			this.offset = {
				top: this.positionAbs.top - this.margins.top,
				left: this.positionAbs.left - this.margins.left,
				scroll: false,
				parent: this._getParentOffset(),
				relative: this._getRelativeOffset()
			};
	
			this.offset.click = {
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			};
		},
	
		_mouseDrag: function(event, noPropagation) {
			// reset any necessary cached properties (see #5009)
			if ( this.hasFixedAncestor ) {
				this.offset.parent = this._getParentOffset();
			}
	
			//Compute the helpers position
			this.position = this._generatePosition( event, true );
			this.positionAbs = this._convertPositionTo("absolute");
	
			//Call plugins and callbacks and use the resulting position if something is returned
			if (!noPropagation) {
				var ui = this._uiHash();
				if (this._trigger("drag", event, ui) === false) {
					this._mouseUp({});
					return false;
				}
				this.position = ui.position;
			}
	
			this.helper[ 0 ].style.left = this.position.left + "px";
			this.helper[ 0 ].style.top = this.position.top + "px";
	
			if ($.ui.ddmanager) {
				$.ui.ddmanager.drag(this, event);
			}
	
			return false;
		},
	
		_mouseStop: function(event) {
	
			//If we are using droppables, inform the manager about the drop
			var that = this,
				dropped = false;
			if ($.ui.ddmanager && !this.options.dropBehaviour) {
				dropped = $.ui.ddmanager.drop(this, event);
			}
	
			//if a drop comes from outside (a sortable)
			if (this.dropped) {
				dropped = this.dropped;
				this.dropped = false;
			}
	
			if ((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
				$(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
					if (that._trigger("stop", event) !== false) {
						that._clear();
					}
				});
			} else {
				if (this._trigger("stop", event) !== false) {
					this._clear();
				}
			}
	
			return false;
		},
	
		_mouseUp: function( event ) {
			this._unblockFrames();
	
			//If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
			if ( $.ui.ddmanager ) {
				$.ui.ddmanager.dragStop(this, event);
			}
	
			// Only need to focus if the event occurred on the draggable itself, see #10527
			if ( this.handleElement.is( event.target ) ) {
				// The interaction is over; whether or not the click resulted in a drag, focus the element
				this.element.focus();
			}
	
			return $.ui.mouse.prototype._mouseUp.call(this, event);
		},
	
		cancel: function() {
	
			if (this.helper.is(".ui-draggable-dragging")) {
				this._mouseUp({});
			} else {
				this._clear();
			}
	
			return this;
	
		},
	
		_getHandle: function(event) {
			return this.options.handle ?
				!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
				true;
		},
	
		_setHandleClassName: function() {
			this.handleElement = this.options.handle ?
				this.element.find( this.options.handle ) : this.element;
			this.handleElement.addClass( "ui-draggable-handle" );
		},
	
		_removeHandleClassName: function() {
			this.handleElement.removeClass( "ui-draggable-handle" );
		},
	
		_createHelper: function(event) {
	
			var o = this.options,
				helperIsFunction = $.isFunction( o.helper ),
				helper = helperIsFunction ?
					$( o.helper.apply( this.element[ 0 ], [ event ] ) ) :
					( o.helper === "clone" ?
						this.element.clone().removeAttr( "id" ) :
						this.element );
	
			if (!helper.parents("body").length) {
				helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo));
			}
	
			// http://bugs.jqueryui.com/ticket/9446
			// a helper function can return the original element
			// which wouldn't have been set to relative in _create
			if ( helperIsFunction && helper[ 0 ] === this.element[ 0 ] ) {
				this._setPositionRelative();
			}
	
			if (helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) {
				helper.css("position", "absolute");
			}
	
			return helper;
	
		},
	
		_setPositionRelative: function() {
			if ( !( /^(?:r|a|f)/ ).test( this.element.css( "position" ) ) ) {
				this.element[ 0 ].style.position = "relative";
			}
		},
	
		_adjustOffsetFromHelper: function(obj) {
			if (typeof obj === "string") {
				obj = obj.split(" ");
			}
			if ($.isArray(obj)) {
				obj = { left: +obj[0], top: +obj[1] || 0 };
			}
			if ("left" in obj) {
				this.offset.click.left = obj.left + this.margins.left;
			}
			if ("right" in obj) {
				this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
			}
			if ("top" in obj) {
				this.offset.click.top = obj.top + this.margins.top;
			}
			if ("bottom" in obj) {
				this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
			}
		},
	
		_isRootNode: function( element ) {
			return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];
		},
	
		_getParentOffset: function() {
	
			//Get the offsetParent and cache its position
			var po = this.offsetParent.offset(),
				document = this.document[ 0 ];
	
			// This is a special case where we need to modify a offset calculated on start, since the following happened:
			// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
			// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
			//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
			if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
				po.left += this.scrollParent.scrollLeft();
				po.top += this.scrollParent.scrollTop();
			}
	
			if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {
				po = { top: 0, left: 0 };
			}
	
			return {
				top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
				left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
			};
	
		},
	
		_getRelativeOffset: function() {
			if ( this.cssPosition !== "relative" ) {
				return { top: 0, left: 0 };
			}
	
			var p = this.element.position(),
				scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );
	
			return {
				top: p.top - ( parseInt(this.helper.css( "top" ), 10) || 0 ) + ( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),
				left: p.left - ( parseInt(this.helper.css( "left" ), 10) || 0 ) + ( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )
			};
	
		},
	
		_cacheMargins: function() {
			this.margins = {
				left: (parseInt(this.element.css("marginLeft"), 10) || 0),
				top: (parseInt(this.element.css("marginTop"), 10) || 0),
				right: (parseInt(this.element.css("marginRight"), 10) || 0),
				bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)
			};
		},
	
		_cacheHelperProportions: function() {
			this.helperProportions = {
				width: this.helper.outerWidth(),
				height: this.helper.outerHeight()
			};
		},
	
		_setContainment: function() {
	
			var isUserScrollable, c, ce,
				o = this.options,
				document = this.document[ 0 ];
	
			this.relativeContainer = null;
	
			if ( !o.containment ) {
				this.containment = null;
				return;
			}
	
			if ( o.containment === "window" ) {
				this.containment = [
					$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
					$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
					$( window ).scrollLeft() + $( window ).width() - this.helperProportions.width - this.margins.left,
					$( window ).scrollTop() + ( $( window ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
				];
				return;
			}
	
			if ( o.containment === "document") {
				this.containment = [
					0,
					0,
					$( document ).width() - this.helperProportions.width - this.margins.left,
					( $( document ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
				];
				return;
			}
	
			if ( o.containment.constructor === Array ) {
				this.containment = o.containment;
				return;
			}
	
			if ( o.containment === "parent" ) {
				o.containment = this.helper[ 0 ].parentNode;
			}
	
			c = $( o.containment );
			ce = c[ 0 ];
	
			if ( !ce ) {
				return;
			}
	
			isUserScrollable = /(scroll|auto)/.test( c.css( "overflow" ) );
	
			this.containment = [
				( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
				( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingTop" ), 10 ) || 0 ),
				( isUserScrollable ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
					( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) -
					( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) -
					this.helperProportions.width -
					this.margins.left -
					this.margins.right,
				( isUserScrollable ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
					( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) -
					( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) -
					this.helperProportions.height -
					this.margins.top -
					this.margins.bottom
			];
			this.relativeContainer = c;
		},
	
		_convertPositionTo: function(d, pos) {
	
			if (!pos) {
				pos = this.position;
			}
	
			var mod = d === "absolute" ? 1 : -1,
				scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );
	
			return {
				top: (
					pos.top	+																// The absolute mouse position
					this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top * mod -										// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.offset.scroll.top : ( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod)
				),
				left: (
					pos.left +																// The absolute mouse position
					this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.offset.scroll.left : ( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod)
				)
			};
	
		},
	
		_generatePosition: function( event, constrainPosition ) {
	
			var containment, co, top, left,
				o = this.options,
				scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),
				pageX = event.pageX,
				pageY = event.pageY;
	
			// Cache the scroll
			if ( !scrollIsRootNode || !this.offset.scroll ) {
				this.offset.scroll = {
					top: this.scrollParent.scrollTop(),
					left: this.scrollParent.scrollLeft()
				};
			}
	
			/*
			 * - Position constraining -
			 * Constrain the position to a mix of grid, containment.
			 */
	
			// If we are not dragging yet, we won't check for options
			if ( constrainPosition ) {
				if ( this.containment ) {
					if ( this.relativeContainer ){
						co = this.relativeContainer.offset();
						containment = [
							this.containment[ 0 ] + co.left,
							this.containment[ 1 ] + co.top,
							this.containment[ 2 ] + co.left,
							this.containment[ 3 ] + co.top
						];
					} else {
						containment = this.containment;
					}
	
					if (event.pageX - this.offset.click.left < containment[0]) {
						pageX = containment[0] + this.offset.click.left;
					}
					if (event.pageY - this.offset.click.top < containment[1]) {
						pageY = containment[1] + this.offset.click.top;
					}
					if (event.pageX - this.offset.click.left > containment[2]) {
						pageX = containment[2] + this.offset.click.left;
					}
					if (event.pageY - this.offset.click.top > containment[3]) {
						pageY = containment[3] + this.offset.click.top;
					}
				}
	
				if (o.grid) {
					//Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
					top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
					pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;
	
					left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
					pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
				}
	
				if ( o.axis === "y" ) {
					pageX = this.originalPageX;
				}
	
				if ( o.axis === "x" ) {
					pageY = this.originalPageY;
				}
			}
	
			return {
				top: (
					pageY -																	// The absolute mouse position
					this.offset.click.top	-												// Click offset (relative to the element)
					this.offset.relative.top -												// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
					( this.cssPosition === "fixed" ? -this.offset.scroll.top : ( scrollIsRootNode ? 0 : this.offset.scroll.top ) )
				),
				left: (
					pageX -																	// The absolute mouse position
					this.offset.click.left -												// Click offset (relative to the element)
					this.offset.relative.left -												// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
					( this.cssPosition === "fixed" ? -this.offset.scroll.left : ( scrollIsRootNode ? 0 : this.offset.scroll.left ) )
				)
			};
	
		},
	
		_clear: function() {
			this.helper.removeClass("ui-draggable-dragging");
			if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
				this.helper.remove();
			}
			this.helper = null;
			this.cancelHelperRemoval = false;
			if ( this.destroyOnClear ) {
				this.destroy();
			}
		},
	
		_normalizeRightBottom: function() {
			if ( this.options.axis !== "y" && this.helper.css( "right" ) !== "auto" ) {
				this.helper.width( this.helper.width() );
				this.helper.css( "right", "auto" );
			}
			if ( this.options.axis !== "x" && this.helper.css( "bottom" ) !== "auto" ) {
				this.helper.height( this.helper.height() );
				this.helper.css( "bottom", "auto" );
			}
		},
	
		// From now on bulk stuff - mainly helpers
	
		_trigger: function( type, event, ui ) {
			ui = ui || this._uiHash();
			$.ui.plugin.call( this, type, [ event, ui, this ], true );
	
			// Absolute position and offset (see #6884 ) have to be recalculated after plugins
			if ( /^(drag|start|stop)/.test( type ) ) {
				this.positionAbs = this._convertPositionTo( "absolute" );
				ui.offset = this.positionAbs;
			}
			return $.Widget.prototype._trigger.call( this, type, event, ui );
		},
	
		plugins: {},
	
		_uiHash: function() {
			return {
				helper: this.helper,
				position: this.position,
				originalPosition: this.originalPosition,
				offset: this.positionAbs
			};
		}
	
	});
	
	$.ui.plugin.add( "draggable", "connectToSortable", {
		start: function( event, ui, draggable ) {
			var uiSortable = $.extend( {}, ui, {
				item: draggable.element
			});
	
			draggable.sortables = [];
			$( draggable.options.connectToSortable ).each(function() {
				var sortable = $( this ).sortable( "instance" );
	
				if ( sortable && !sortable.options.disabled ) {
					draggable.sortables.push( sortable );
	
					// refreshPositions is called at drag start to refresh the containerCache
					// which is used in drag. This ensures it's initialized and synchronized
					// with any changes that might have happened on the page since initialization.
					sortable.refreshPositions();
					sortable._trigger("activate", event, uiSortable);
				}
			});
		},
		stop: function( event, ui, draggable ) {
			var uiSortable = $.extend( {}, ui, {
				item: draggable.element
			});
	
			draggable.cancelHelperRemoval = false;
	
			$.each( draggable.sortables, function() {
				var sortable = this;
	
				if ( sortable.isOver ) {
					sortable.isOver = 0;
	
					// Allow this sortable to handle removing the helper
					draggable.cancelHelperRemoval = true;
					sortable.cancelHelperRemoval = false;
	
					// Use _storedCSS To restore properties in the sortable,
					// as this also handles revert (#9675) since the draggable
					// may have modified them in unexpected ways (#8809)
					sortable._storedCSS = {
						position: sortable.placeholder.css( "position" ),
						top: sortable.placeholder.css( "top" ),
						left: sortable.placeholder.css( "left" )
					};
	
					sortable._mouseStop(event);
	
					// Once drag has ended, the sortable should return to using
					// its original helper, not the shared helper from draggable
					sortable.options.helper = sortable.options._helper;
				} else {
					// Prevent this Sortable from removing the helper.
					// However, don't set the draggable to remove the helper
					// either as another connected Sortable may yet handle the removal.
					sortable.cancelHelperRemoval = true;
	
					sortable._trigger( "deactivate", event, uiSortable );
				}
			});
		},
		drag: function( event, ui, draggable ) {
			$.each( draggable.sortables, function() {
				var innermostIntersecting = false,
					sortable = this;
	
				// Copy over variables that sortable's _intersectsWith uses
				sortable.positionAbs = draggable.positionAbs;
				sortable.helperProportions = draggable.helperProportions;
				sortable.offset.click = draggable.offset.click;
	
				if ( sortable._intersectsWith( sortable.containerCache ) ) {
					innermostIntersecting = true;
	
					$.each( draggable.sortables, function() {
						// Copy over variables that sortable's _intersectsWith uses
						this.positionAbs = draggable.positionAbs;
						this.helperProportions = draggable.helperProportions;
						this.offset.click = draggable.offset.click;
	
						if ( this !== sortable &&
								this._intersectsWith( this.containerCache ) &&
								$.contains( sortable.element[ 0 ], this.element[ 0 ] ) ) {
							innermostIntersecting = false;
						}
	
						return innermostIntersecting;
					});
				}
	
				if ( innermostIntersecting ) {
					// If it intersects, we use a little isOver variable and set it once,
					// so that the move-in stuff gets fired only once.
					if ( !sortable.isOver ) {
						sortable.isOver = 1;
	
						// Store draggable's parent in case we need to reappend to it later.
						draggable._parent = ui.helper.parent();
	
						sortable.currentItem = ui.helper
							.appendTo( sortable.element )
							.data( "ui-sortable-item", true );
	
						// Store helper option to later restore it
						sortable.options._helper = sortable.options.helper;
	
						sortable.options.helper = function() {
							return ui.helper[ 0 ];
						};
	
						// Fire the start events of the sortable with our passed browser event,
						// and our own helper (so it doesn't create a new one)
						event.target = sortable.currentItem[ 0 ];
						sortable._mouseCapture( event, true );
						sortable._mouseStart( event, true, true );
	
						// Because the browser event is way off the new appended portlet,
						// modify necessary variables to reflect the changes
						sortable.offset.click.top = draggable.offset.click.top;
						sortable.offset.click.left = draggable.offset.click.left;
						sortable.offset.parent.left -= draggable.offset.parent.left -
							sortable.offset.parent.left;
						sortable.offset.parent.top -= draggable.offset.parent.top -
							sortable.offset.parent.top;
	
						draggable._trigger( "toSortable", event );
	
						// Inform draggable that the helper is in a valid drop zone,
						// used solely in the revert option to handle "valid/invalid".
						draggable.dropped = sortable.element;
	
						// Need to refreshPositions of all sortables in the case that
						// adding to one sortable changes the location of the other sortables (#9675)
						$.each( draggable.sortables, function() {
							this.refreshPositions();
						});
	
						// hack so receive/update callbacks work (mostly)
						draggable.currentItem = draggable.element;
						sortable.fromOutside = draggable;
					}
	
					if ( sortable.currentItem ) {
						sortable._mouseDrag( event );
						// Copy the sortable's position because the draggable's can potentially reflect
						// a relative position, while sortable is always absolute, which the dragged
						// element has now become. (#8809)
						ui.position = sortable.position;
					}
				} else {
					// If it doesn't intersect with the sortable, and it intersected before,
					// we fake the drag stop of the sortable, but make sure it doesn't remove
					// the helper by using cancelHelperRemoval.
					if ( sortable.isOver ) {
	
						sortable.isOver = 0;
						sortable.cancelHelperRemoval = true;
	
						// Calling sortable's mouseStop would trigger a revert,
						// so revert must be temporarily false until after mouseStop is called.
						sortable.options._revert = sortable.options.revert;
						sortable.options.revert = false;
	
						sortable._trigger( "out", event, sortable._uiHash( sortable ) );
						sortable._mouseStop( event, true );
	
						// restore sortable behaviors that were modfied
						// when the draggable entered the sortable area (#9481)
						sortable.options.revert = sortable.options._revert;
						sortable.options.helper = sortable.options._helper;
	
						if ( sortable.placeholder ) {
							sortable.placeholder.remove();
						}
	
						// Restore and recalculate the draggable's offset considering the sortable
						// may have modified them in unexpected ways. (#8809, #10669)
						ui.helper.appendTo( draggable._parent );
						draggable._refreshOffsets( event );
						ui.position = draggable._generatePosition( event, true );
	
						draggable._trigger( "fromSortable", event );
	
						// Inform draggable that the helper is no longer in a valid drop zone
						draggable.dropped = false;
	
						// Need to refreshPositions of all sortables just in case removing
						// from one sortable changes the location of other sortables (#9675)
						$.each( draggable.sortables, function() {
							this.refreshPositions();
						});
					}
				}
			});
		}
	});
	
	$.ui.plugin.add("draggable", "cursor", {
		start: function( event, ui, instance ) {
			var t = $( "body" ),
				o = instance.options;
	
			if (t.css("cursor")) {
				o._cursor = t.css("cursor");
			}
			t.css("cursor", o.cursor);
		},
		stop: function( event, ui, instance ) {
			var o = instance.options;
			if (o._cursor) {
				$("body").css("cursor", o._cursor);
			}
		}
	});
	
	$.ui.plugin.add("draggable", "opacity", {
		start: function( event, ui, instance ) {
			var t = $( ui.helper ),
				o = instance.options;
			if (t.css("opacity")) {
				o._opacity = t.css("opacity");
			}
			t.css("opacity", o.opacity);
		},
		stop: function( event, ui, instance ) {
			var o = instance.options;
			if (o._opacity) {
				$(ui.helper).css("opacity", o._opacity);
			}
		}
	});
	
	$.ui.plugin.add("draggable", "scroll", {
		start: function( event, ui, i ) {
			if ( !i.scrollParentNotHidden ) {
				i.scrollParentNotHidden = i.helper.scrollParent( false );
			}
	
			if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] && i.scrollParentNotHidden[ 0 ].tagName !== "HTML" ) {
				i.overflowOffset = i.scrollParentNotHidden.offset();
			}
		},
		drag: function( event, ui, i  ) {
	
			var o = i.options,
				scrolled = false,
				scrollParent = i.scrollParentNotHidden[ 0 ],
				document = i.document[ 0 ];
	
			if ( scrollParent !== document && scrollParent.tagName !== "HTML" ) {
				if ( !o.axis || o.axis !== "x" ) {
					if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY < o.scrollSensitivity ) {
						scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
					} else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {
						scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
					}
				}
	
				if ( !o.axis || o.axis !== "y" ) {
					if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX < o.scrollSensitivity ) {
						scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
					} else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {
						scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
					}
				}
	
			} else {
	
				if (!o.axis || o.axis !== "x") {
					if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
						scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
					} else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
						scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
					}
				}
	
				if (!o.axis || o.axis !== "y") {
					if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
						scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
					} else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
						scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
					}
				}
	
			}
	
			if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(i, event);
			}
	
		}
	});
	
	$.ui.plugin.add("draggable", "snap", {
		start: function( event, ui, i ) {
	
			var o = i.options;
	
			i.snapElements = [];
	
			$(o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap).each(function() {
				var $t = $(this),
					$o = $t.offset();
				if (this !== i.element[0]) {
					i.snapElements.push({
						item: this,
						width: $t.outerWidth(), height: $t.outerHeight(),
						top: $o.top, left: $o.left
					});
				}
			});
	
		},
		drag: function( event, ui, inst ) {
	
			var ts, bs, ls, rs, l, r, t, b, i, first,
				o = inst.options,
				d = o.snapTolerance,
				x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
				y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;
	
			for (i = inst.snapElements.length - 1; i >= 0; i--){
	
				l = inst.snapElements[i].left - inst.margins.left;
				r = l + inst.snapElements[i].width;
				t = inst.snapElements[i].top - inst.margins.top;
				b = t + inst.snapElements[i].height;
	
				if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains( inst.snapElements[ i ].item.ownerDocument, inst.snapElements[ i ].item ) ) {
					if (inst.snapElements[i].snapping) {
						(inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
					}
					inst.snapElements[i].snapping = false;
					continue;
				}
	
				if (o.snapMode !== "inner") {
					ts = Math.abs(t - y2) <= d;
					bs = Math.abs(b - y1) <= d;
					ls = Math.abs(l - x2) <= d;
					rs = Math.abs(r - x1) <= d;
					if (ts) {
						ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top;
					}
					if (bs) {
						ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top;
					}
					if (ls) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left;
					}
					if (rs) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left;
					}
				}
	
				first = (ts || bs || ls || rs);
	
				if (o.snapMode !== "outer") {
					ts = Math.abs(t - y1) <= d;
					bs = Math.abs(b - y2) <= d;
					ls = Math.abs(l - x1) <= d;
					rs = Math.abs(r - x2) <= d;
					if (ts) {
						ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top;
					}
					if (bs) {
						ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top;
					}
					if (ls) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left;
					}
					if (rs) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left;
					}
				}
	
				if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
					(inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
				}
				inst.snapElements[i].snapping = (ts || bs || ls || rs || first);
	
			}
	
		}
	});
	
	$.ui.plugin.add("draggable", "stack", {
		start: function( event, ui, instance ) {
			var min,
				o = instance.options,
				group = $.makeArray($(o.stack)).sort(function(a, b) {
					return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
				});
	
			if (!group.length) { return; }
	
			min = parseInt($(group[0]).css("zIndex"), 10) || 0;
			$(group).each(function(i) {
				$(this).css("zIndex", min + i);
			});
			this.css("zIndex", (min + group.length));
		}
	});
	
	$.ui.plugin.add("draggable", "zIndex", {
		start: function( event, ui, instance ) {
			var t = $( ui.helper ),
				o = instance.options;
	
			if (t.css("zIndex")) {
				o._zIndex = t.css("zIndex");
			}
			t.css("zIndex", o.zIndex);
		},
		stop: function( event, ui, instance ) {
			var o = instance.options;
	
			if (o._zIndex) {
				$(ui.helper).css("zIndex", o._zIndex);
			}
		}
	});
	
	var draggable = $.ui.draggable;
	
	
	/*!
	 * jQuery UI Resizable 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/resizable/
	 */
	
	
	$.widget("ui.resizable", $.ui.mouse, {
		version: "1.11.4",
		widgetEventPrefix: "resize",
		options: {
			alsoResize: false,
			animate: false,
			animateDuration: "slow",
			animateEasing: "swing",
			aspectRatio: false,
			autoHide: false,
			containment: false,
			ghost: false,
			grid: false,
			handles: "e,s,se",
			helper: false,
			maxHeight: null,
			maxWidth: null,
			minHeight: 10,
			minWidth: 10,
			// See #7960
			zIndex: 90,
	
			// callbacks
			resize: null,
			start: null,
			stop: null
		},
	
		_num: function( value ) {
			return parseInt( value, 10 ) || 0;
		},
	
		_isNumber: function( value ) {
			return !isNaN( parseInt( value, 10 ) );
		},
	
		_hasScroll: function( el, a ) {
	
			if ( $( el ).css( "overflow" ) === "hidden") {
				return false;
			}
	
			var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
				has = false;
	
			if ( el[ scroll ] > 0 ) {
				return true;
			}
	
			// TODO: determine which cases actually cause this to happen
			// if the element doesn't have the scroll set, see if it's possible to
			// set the scroll
			el[ scroll ] = 1;
			has = ( el[ scroll ] > 0 );
			el[ scroll ] = 0;
			return has;
		},
	
		_create: function() {
	
			var n, i, handle, axis, hname,
				that = this,
				o = this.options;
			this.element.addClass("ui-resizable");
	
			$.extend(this, {
				_aspectRatio: !!(o.aspectRatio),
				aspectRatio: o.aspectRatio,
				originalElement: this.element,
				_proportionallyResizeElements: [],
				_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
			});
	
			// Wrap the element if it cannot hold child nodes
			if (this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)) {
	
				this.element.wrap(
					$("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
						position: this.element.css("position"),
						width: this.element.outerWidth(),
						height: this.element.outerHeight(),
						top: this.element.css("top"),
						left: this.element.css("left")
					})
				);
	
				this.element = this.element.parent().data(
					"ui-resizable", this.element.resizable( "instance" )
				);
	
				this.elementIsWrapper = true;
	
				this.element.css({
					marginLeft: this.originalElement.css("marginLeft"),
					marginTop: this.originalElement.css("marginTop"),
					marginRight: this.originalElement.css("marginRight"),
					marginBottom: this.originalElement.css("marginBottom")
				});
				this.originalElement.css({
					marginLeft: 0,
					marginTop: 0,
					marginRight: 0,
					marginBottom: 0
				});
				// support: Safari
				// Prevent Safari textarea resize
				this.originalResizeStyle = this.originalElement.css("resize");
				this.originalElement.css("resize", "none");
	
				this._proportionallyResizeElements.push( this.originalElement.css({
					position: "static",
					zoom: 1,
					display: "block"
				}) );
	
				// support: IE9
				// avoid IE jump (hard set the margin)
				this.originalElement.css({ margin: this.originalElement.css("margin") });
	
				this._proportionallyResize();
			}
	
			this.handles = o.handles ||
				( !$(".ui-resizable-handle", this.element).length ?
					"e,s,se" : {
						n: ".ui-resizable-n",
						e: ".ui-resizable-e",
						s: ".ui-resizable-s",
						w: ".ui-resizable-w",
						se: ".ui-resizable-se",
						sw: ".ui-resizable-sw",
						ne: ".ui-resizable-ne",
						nw: ".ui-resizable-nw"
					} );
	
			this._handles = $();
			if ( this.handles.constructor === String ) {
	
				if ( this.handles === "all") {
					this.handles = "n,e,s,w,se,sw,ne,nw";
				}
	
				n = this.handles.split(",");
				this.handles = {};
	
				for (i = 0; i < n.length; i++) {
	
					handle = $.trim(n[i]);
					hname = "ui-resizable-" + handle;
					axis = $("<div class='ui-resizable-handle " + hname + "'></div>");
	
					axis.css({ zIndex: o.zIndex });
	
					// TODO : What's going on here?
					if ("se" === handle) {
						axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
					}
	
					this.handles[handle] = ".ui-resizable-" + handle;
					this.element.append(axis);
				}
	
			}
	
			this._renderAxis = function(target) {
	
				var i, axis, padPos, padWrapper;
	
				target = target || this.element;
	
				for (i in this.handles) {
	
					if (this.handles[i].constructor === String) {
						this.handles[i] = this.element.children( this.handles[ i ] ).first().show();
					} else if ( this.handles[ i ].jquery || this.handles[ i ].nodeType ) {
						this.handles[ i ] = $( this.handles[ i ] );
						this._on( this.handles[ i ], { "mousedown": that._mouseDown });
					}
	
					if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)) {
	
						axis = $(this.handles[i], this.element);
	
						padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();
	
						padPos = [ "padding",
							/ne|nw|n/.test(i) ? "Top" :
							/se|sw|s/.test(i) ? "Bottom" :
							/^e$/.test(i) ? "Right" : "Left" ].join("");
	
						target.css(padPos, padWrapper);
	
						this._proportionallyResize();
					}
	
					this._handles = this._handles.add( this.handles[ i ] );
				}
			};
	
			// TODO: make renderAxis a prototype function
			this._renderAxis(this.element);
	
			this._handles = this._handles.add( this.element.find( ".ui-resizable-handle" ) );
			this._handles.disableSelection();
	
			this._handles.mouseover(function() {
				if (!that.resizing) {
					if (this.className) {
						axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
					}
					that.axis = axis && axis[1] ? axis[1] : "se";
				}
			});
	
			if (o.autoHide) {
				this._handles.hide();
				$(this.element)
					.addClass("ui-resizable-autohide")
					.mouseenter(function() {
						if (o.disabled) {
							return;
						}
						$(this).removeClass("ui-resizable-autohide");
						that._handles.show();
					})
					.mouseleave(function() {
						if (o.disabled) {
							return;
						}
						if (!that.resizing) {
							$(this).addClass("ui-resizable-autohide");
							that._handles.hide();
						}
					});
			}
	
			this._mouseInit();
		},
	
		_destroy: function() {
	
			this._mouseDestroy();
	
			var wrapper,
				_destroy = function(exp) {
					$(exp)
						.removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
						.removeData("resizable")
						.removeData("ui-resizable")
						.unbind(".resizable")
						.find(".ui-resizable-handle")
							.remove();
				};
	
			// TODO: Unwrap at same DOM position
			if (this.elementIsWrapper) {
				_destroy(this.element);
				wrapper = this.element;
				this.originalElement.css({
					position: wrapper.css("position"),
					width: wrapper.outerWidth(),
					height: wrapper.outerHeight(),
					top: wrapper.css("top"),
					left: wrapper.css("left")
				}).insertAfter( wrapper );
				wrapper.remove();
			}
	
			this.originalElement.css("resize", this.originalResizeStyle);
			_destroy(this.originalElement);
	
			return this;
		},
	
		_mouseCapture: function(event) {
			var i, handle,
				capture = false;
	
			for (i in this.handles) {
				handle = $(this.handles[i])[0];
				if (handle === event.target || $.contains(handle, event.target)) {
					capture = true;
				}
			}
	
			return !this.options.disabled && capture;
		},
	
		_mouseStart: function(event) {
	
			var curleft, curtop, cursor,
				o = this.options,
				el = this.element;
	
			this.resizing = true;
	
			this._renderProxy();
	
			curleft = this._num(this.helper.css("left"));
			curtop = this._num(this.helper.css("top"));
	
			if (o.containment) {
				curleft += $(o.containment).scrollLeft() || 0;
				curtop += $(o.containment).scrollTop() || 0;
			}
	
			this.offset = this.helper.offset();
			this.position = { left: curleft, top: curtop };
	
			this.size = this._helper ? {
					width: this.helper.width(),
					height: this.helper.height()
				} : {
					width: el.width(),
					height: el.height()
				};
	
			this.originalSize = this._helper ? {
					width: el.outerWidth(),
					height: el.outerHeight()
				} : {
					width: el.width(),
					height: el.height()
				};
	
			this.sizeDiff = {
				width: el.outerWidth() - el.width(),
				height: el.outerHeight() - el.height()
			};
	
			this.originalPosition = { left: curleft, top: curtop };
			this.originalMousePosition = { left: event.pageX, top: event.pageY };
	
			this.aspectRatio = (typeof o.aspectRatio === "number") ?
				o.aspectRatio :
				((this.originalSize.width / this.originalSize.height) || 1);
	
			cursor = $(".ui-resizable-" + this.axis).css("cursor");
			$("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);
	
			el.addClass("ui-resizable-resizing");
			this._propagate("start", event);
			return true;
		},
	
		_mouseDrag: function(event) {
	
			var data, props,
				smp = this.originalMousePosition,
				a = this.axis,
				dx = (event.pageX - smp.left) || 0,
				dy = (event.pageY - smp.top) || 0,
				trigger = this._change[a];
	
			this._updatePrevProperties();
	
			if (!trigger) {
				return false;
			}
	
			data = trigger.apply(this, [ event, dx, dy ]);
	
			this._updateVirtualBoundaries(event.shiftKey);
			if (this._aspectRatio || event.shiftKey) {
				data = this._updateRatio(data, event);
			}
	
			data = this._respectSize(data, event);
	
			this._updateCache(data);
	
			this._propagate("resize", event);
	
			props = this._applyChanges();
	
			if ( !this._helper && this._proportionallyResizeElements.length ) {
				this._proportionallyResize();
			}
	
			if ( !$.isEmptyObject( props ) ) {
				this._updatePrevProperties();
				this._trigger( "resize", event, this.ui() );
				this._applyChanges();
			}
	
			return false;
		},
	
		_mouseStop: function(event) {
	
			this.resizing = false;
			var pr, ista, soffseth, soffsetw, s, left, top,
				o = this.options, that = this;
	
			if (this._helper) {
	
				pr = this._proportionallyResizeElements;
				ista = pr.length && (/textarea/i).test(pr[0].nodeName);
				soffseth = ista && this._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height;
				soffsetw = ista ? 0 : that.sizeDiff.width;
	
				s = {
					width: (that.helper.width()  - soffsetw),
					height: (that.helper.height() - soffseth)
				};
				left = (parseInt(that.element.css("left"), 10) +
					(that.position.left - that.originalPosition.left)) || null;
				top = (parseInt(that.element.css("top"), 10) +
					(that.position.top - that.originalPosition.top)) || null;
	
				if (!o.animate) {
					this.element.css($.extend(s, { top: top, left: left }));
				}
	
				that.helper.height(that.size.height);
				that.helper.width(that.size.width);
	
				if (this._helper && !o.animate) {
					this._proportionallyResize();
				}
			}
	
			$("body").css("cursor", "auto");
	
			this.element.removeClass("ui-resizable-resizing");
	
			this._propagate("stop", event);
	
			if (this._helper) {
				this.helper.remove();
			}
	
			return false;
	
		},
	
		_updatePrevProperties: function() {
			this.prevPosition = {
				top: this.position.top,
				left: this.position.left
			};
			this.prevSize = {
				width: this.size.width,
				height: this.size.height
			};
		},
	
		_applyChanges: function() {
			var props = {};
	
			if ( this.position.top !== this.prevPosition.top ) {
				props.top = this.position.top + "px";
			}
			if ( this.position.left !== this.prevPosition.left ) {
				props.left = this.position.left + "px";
			}
			if ( this.size.width !== this.prevSize.width ) {
				props.width = this.size.width + "px";
			}
			if ( this.size.height !== this.prevSize.height ) {
				props.height = this.size.height + "px";
			}
	
			this.helper.css( props );
	
			return props;
		},
	
		_updateVirtualBoundaries: function(forceAspectRatio) {
			var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
				o = this.options;
	
			b = {
				minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,
				maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : Infinity,
				minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,
				maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : Infinity
			};
	
			if (this._aspectRatio || forceAspectRatio) {
				pMinWidth = b.minHeight * this.aspectRatio;
				pMinHeight = b.minWidth / this.aspectRatio;
				pMaxWidth = b.maxHeight * this.aspectRatio;
				pMaxHeight = b.maxWidth / this.aspectRatio;
	
				if (pMinWidth > b.minWidth) {
					b.minWidth = pMinWidth;
				}
				if (pMinHeight > b.minHeight) {
					b.minHeight = pMinHeight;
				}
				if (pMaxWidth < b.maxWidth) {
					b.maxWidth = pMaxWidth;
				}
				if (pMaxHeight < b.maxHeight) {
					b.maxHeight = pMaxHeight;
				}
			}
			this._vBoundaries = b;
		},
	
		_updateCache: function(data) {
			this.offset = this.helper.offset();
			if (this._isNumber(data.left)) {
				this.position.left = data.left;
			}
			if (this._isNumber(data.top)) {
				this.position.top = data.top;
			}
			if (this._isNumber(data.height)) {
				this.size.height = data.height;
			}
			if (this._isNumber(data.width)) {
				this.size.width = data.width;
			}
		},
	
		_updateRatio: function( data ) {
	
			var cpos = this.position,
				csize = this.size,
				a = this.axis;
	
			if (this._isNumber(data.height)) {
				data.width = (data.height * this.aspectRatio);
			} else if (this._isNumber(data.width)) {
				data.height = (data.width / this.aspectRatio);
			}
	
			if (a === "sw") {
				data.left = cpos.left + (csize.width - data.width);
				data.top = null;
			}
			if (a === "nw") {
				data.top = cpos.top + (csize.height - data.height);
				data.left = cpos.left + (csize.width - data.width);
			}
	
			return data;
		},
	
		_respectSize: function( data ) {
	
			var o = this._vBoundaries,
				a = this.axis,
				ismaxw = this._isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width),
				ismaxh = this._isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
				isminw = this._isNumber(data.width) && o.minWidth && (o.minWidth > data.width),
				isminh = this._isNumber(data.height) && o.minHeight && (o.minHeight > data.height),
				dw = this.originalPosition.left + this.originalSize.width,
				dh = this.position.top + this.size.height,
				cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
			if (isminw) {
				data.width = o.minWidth;
			}
			if (isminh) {
				data.height = o.minHeight;
			}
			if (ismaxw) {
				data.width = o.maxWidth;
			}
			if (ismaxh) {
				data.height = o.maxHeight;
			}
	
			if (isminw && cw) {
				data.left = dw - o.minWidth;
			}
			if (ismaxw && cw) {
				data.left = dw - o.maxWidth;
			}
			if (isminh && ch) {
				data.top = dh - o.minHeight;
			}
			if (ismaxh && ch) {
				data.top = dh - o.maxHeight;
			}
	
			// Fixing jump error on top/left - bug #2330
			if (!data.width && !data.height && !data.left && data.top) {
				data.top = null;
			} else if (!data.width && !data.height && !data.top && data.left) {
				data.left = null;
			}
	
			return data;
		},
	
		_getPaddingPlusBorderDimensions: function( element ) {
			var i = 0,
				widths = [],
				borders = [
					element.css( "borderTopWidth" ),
					element.css( "borderRightWidth" ),
					element.css( "borderBottomWidth" ),
					element.css( "borderLeftWidth" )
				],
				paddings = [
					element.css( "paddingTop" ),
					element.css( "paddingRight" ),
					element.css( "paddingBottom" ),
					element.css( "paddingLeft" )
				];
	
			for ( ; i < 4; i++ ) {
				widths[ i ] = ( parseInt( borders[ i ], 10 ) || 0 );
				widths[ i ] += ( parseInt( paddings[ i ], 10 ) || 0 );
			}
	
			return {
				height: widths[ 0 ] + widths[ 2 ],
				width: widths[ 1 ] + widths[ 3 ]
			};
		},
	
		_proportionallyResize: function() {
	
			if (!this._proportionallyResizeElements.length) {
				return;
			}
	
			var prel,
				i = 0,
				element = this.helper || this.element;
	
			for ( ; i < this._proportionallyResizeElements.length; i++) {
	
				prel = this._proportionallyResizeElements[i];
	
				// TODO: Seems like a bug to cache this.outerDimensions
				// considering that we are in a loop.
				if (!this.outerDimensions) {
					this.outerDimensions = this._getPaddingPlusBorderDimensions( prel );
				}
	
				prel.css({
					height: (element.height() - this.outerDimensions.height) || 0,
					width: (element.width() - this.outerDimensions.width) || 0
				});
	
			}
	
		},
	
		_renderProxy: function() {
	
			var el = this.element, o = this.options;
			this.elementOffset = el.offset();
	
			if (this._helper) {
	
				this.helper = this.helper || $("<div style='overflow:hidden;'></div>");
	
				this.helper.addClass(this._helper).css({
					width: this.element.outerWidth() - 1,
					height: this.element.outerHeight() - 1,
					position: "absolute",
					left: this.elementOffset.left + "px",
					top: this.elementOffset.top + "px",
					zIndex: ++o.zIndex //TODO: Don't modify option
				});
	
				this.helper
					.appendTo("body")
					.disableSelection();
	
			} else {
				this.helper = this.element;
			}
	
		},
	
		_change: {
			e: function(event, dx) {
				return { width: this.originalSize.width + dx };
			},
			w: function(event, dx) {
				var cs = this.originalSize, sp = this.originalPosition;
				return { left: sp.left + dx, width: cs.width - dx };
			},
			n: function(event, dx, dy) {
				var cs = this.originalSize, sp = this.originalPosition;
				return { top: sp.top + dy, height: cs.height - dy };
			},
			s: function(event, dx, dy) {
				return { height: this.originalSize.height + dy };
			},
			se: function(event, dx, dy) {
				return $.extend(this._change.s.apply(this, arguments),
					this._change.e.apply(this, [ event, dx, dy ]));
			},
			sw: function(event, dx, dy) {
				return $.extend(this._change.s.apply(this, arguments),
					this._change.w.apply(this, [ event, dx, dy ]));
			},
			ne: function(event, dx, dy) {
				return $.extend(this._change.n.apply(this, arguments),
					this._change.e.apply(this, [ event, dx, dy ]));
			},
			nw: function(event, dx, dy) {
				return $.extend(this._change.n.apply(this, arguments),
					this._change.w.apply(this, [ event, dx, dy ]));
			}
		},
	
		_propagate: function(n, event) {
			$.ui.plugin.call(this, n, [ event, this.ui() ]);
			(n !== "resize" && this._trigger(n, event, this.ui()));
		},
	
		plugins: {},
	
		ui: function() {
			return {
				originalElement: this.originalElement,
				element: this.element,
				helper: this.helper,
				position: this.position,
				size: this.size,
				originalSize: this.originalSize,
				originalPosition: this.originalPosition
			};
		}
	
	});
	
	/*
	 * Resizable Extensions
	 */
	
	$.ui.plugin.add("resizable", "animate", {
	
		stop: function( event ) {
			var that = $(this).resizable( "instance" ),
				o = that.options,
				pr = that._proportionallyResizeElements,
				ista = pr.length && (/textarea/i).test(pr[0].nodeName),
				soffseth = ista && that._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height,
				soffsetw = ista ? 0 : that.sizeDiff.width,
				style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },
				left = (parseInt(that.element.css("left"), 10) +
					(that.position.left - that.originalPosition.left)) || null,
				top = (parseInt(that.element.css("top"), 10) +
					(that.position.top - that.originalPosition.top)) || null;
	
			that.element.animate(
				$.extend(style, top && left ? { top: top, left: left } : {}), {
					duration: o.animateDuration,
					easing: o.animateEasing,
					step: function() {
	
						var data = {
							width: parseInt(that.element.css("width"), 10),
							height: parseInt(that.element.css("height"), 10),
							top: parseInt(that.element.css("top"), 10),
							left: parseInt(that.element.css("left"), 10)
						};
	
						if (pr && pr.length) {
							$(pr[0]).css({ width: data.width, height: data.height });
						}
	
						// propagating resize, and updating values for each animation step
						that._updateCache(data);
						that._propagate("resize", event);
	
					}
				}
			);
		}
	
	});
	
	$.ui.plugin.add( "resizable", "containment", {
	
		start: function() {
			var element, p, co, ch, cw, width, height,
				that = $( this ).resizable( "instance" ),
				o = that.options,
				el = that.element,
				oc = o.containment,
				ce = ( oc instanceof $ ) ? oc.get( 0 ) : ( /parent/.test( oc ) ) ? el.parent().get( 0 ) : oc;
	
			if ( !ce ) {
				return;
			}
	
			that.containerElement = $( ce );
	
			if ( /document/.test( oc ) || oc === document ) {
				that.containerOffset = {
					left: 0,
					top: 0
				};
				that.containerPosition = {
					left: 0,
					top: 0
				};
	
				that.parentData = {
					element: $( document ),
					left: 0,
					top: 0,
					width: $( document ).width(),
					height: $( document ).height() || document.body.parentNode.scrollHeight
				};
			} else {
				element = $( ce );
				p = [];
				$([ "Top", "Right", "Left", "Bottom" ]).each(function( i, name ) {
					p[ i ] = that._num( element.css( "padding" + name ) );
				});
	
				that.containerOffset = element.offset();
				that.containerPosition = element.position();
				that.containerSize = {
					height: ( element.innerHeight() - p[ 3 ] ),
					width: ( element.innerWidth() - p[ 1 ] )
				};
	
				co = that.containerOffset;
				ch = that.containerSize.height;
				cw = that.containerSize.width;
				width = ( that._hasScroll ( ce, "left" ) ? ce.scrollWidth : cw );
				height = ( that._hasScroll ( ce ) ? ce.scrollHeight : ch ) ;
	
				that.parentData = {
					element: ce,
					left: co.left,
					top: co.top,
					width: width,
					height: height
				};
			}
		},
	
		resize: function( event ) {
			var woset, hoset, isParent, isOffsetRelative,
				that = $( this ).resizable( "instance" ),
				o = that.options,
				co = that.containerOffset,
				cp = that.position,
				pRatio = that._aspectRatio || event.shiftKey,
				cop = {
					top: 0,
					left: 0
				},
				ce = that.containerElement,
				continueResize = true;
	
			if ( ce[ 0 ] !== document && ( /static/ ).test( ce.css( "position" ) ) ) {
				cop = co;
			}
	
			if ( cp.left < ( that._helper ? co.left : 0 ) ) {
				that.size.width = that.size.width +
					( that._helper ?
						( that.position.left - co.left ) :
						( that.position.left - cop.left ) );
	
				if ( pRatio ) {
					that.size.height = that.size.width / that.aspectRatio;
					continueResize = false;
				}
				that.position.left = o.helper ? co.left : 0;
			}
	
			if ( cp.top < ( that._helper ? co.top : 0 ) ) {
				that.size.height = that.size.height +
					( that._helper ?
						( that.position.top - co.top ) :
						that.position.top );
	
				if ( pRatio ) {
					that.size.width = that.size.height * that.aspectRatio;
					continueResize = false;
				}
				that.position.top = that._helper ? co.top : 0;
			}
	
			isParent = that.containerElement.get( 0 ) === that.element.parent().get( 0 );
			isOffsetRelative = /relative|absolute/.test( that.containerElement.css( "position" ) );
	
			if ( isParent && isOffsetRelative ) {
				that.offset.left = that.parentData.left + that.position.left;
				that.offset.top = that.parentData.top + that.position.top;
			} else {
				that.offset.left = that.element.offset().left;
				that.offset.top = that.element.offset().top;
			}
	
			woset = Math.abs( that.sizeDiff.width +
				(that._helper ?
					that.offset.left - cop.left :
					(that.offset.left - co.left)) );
	
			hoset = Math.abs( that.sizeDiff.height +
				(that._helper ?
					that.offset.top - cop.top :
					(that.offset.top - co.top)) );
	
			if ( woset + that.size.width >= that.parentData.width ) {
				that.size.width = that.parentData.width - woset;
				if ( pRatio ) {
					that.size.height = that.size.width / that.aspectRatio;
					continueResize = false;
				}
			}
	
			if ( hoset + that.size.height >= that.parentData.height ) {
				that.size.height = that.parentData.height - hoset;
				if ( pRatio ) {
					that.size.width = that.size.height * that.aspectRatio;
					continueResize = false;
				}
			}
	
			if ( !continueResize ) {
				that.position.left = that.prevPosition.left;
				that.position.top = that.prevPosition.top;
				that.size.width = that.prevSize.width;
				that.size.height = that.prevSize.height;
			}
		},
	
		stop: function() {
			var that = $( this ).resizable( "instance" ),
				o = that.options,
				co = that.containerOffset,
				cop = that.containerPosition,
				ce = that.containerElement,
				helper = $( that.helper ),
				ho = helper.offset(),
				w = helper.outerWidth() - that.sizeDiff.width,
				h = helper.outerHeight() - that.sizeDiff.height;
	
			if ( that._helper && !o.animate && ( /relative/ ).test( ce.css( "position" ) ) ) {
				$( this ).css({
					left: ho.left - cop.left - co.left,
					width: w,
					height: h
				});
			}
	
			if ( that._helper && !o.animate && ( /static/ ).test( ce.css( "position" ) ) ) {
				$( this ).css({
					left: ho.left - cop.left - co.left,
					width: w,
					height: h
				});
			}
		}
	});
	
	$.ui.plugin.add("resizable", "alsoResize", {
	
		start: function() {
			var that = $(this).resizable( "instance" ),
				o = that.options;
	
			$(o.alsoResize).each(function() {
				var el = $(this);
				el.data("ui-resizable-alsoresize", {
					width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
					left: parseInt(el.css("left"), 10), top: parseInt(el.css("top"), 10)
				});
			});
		},
	
		resize: function(event, ui) {
			var that = $(this).resizable( "instance" ),
				o = that.options,
				os = that.originalSize,
				op = that.originalPosition,
				delta = {
					height: (that.size.height - os.height) || 0,
					width: (that.size.width - os.width) || 0,
					top: (that.position.top - op.top) || 0,
					left: (that.position.left - op.left) || 0
				};
	
				$(o.alsoResize).each(function() {
					var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {},
						css = el.parents(ui.originalElement[0]).length ?
								[ "width", "height" ] :
								[ "width", "height", "top", "left" ];
	
					$.each(css, function(i, prop) {
						var sum = (start[prop] || 0) + (delta[prop] || 0);
						if (sum && sum >= 0) {
							style[prop] = sum || null;
						}
					});
	
					el.css(style);
				});
		},
	
		stop: function() {
			$(this).removeData("resizable-alsoresize");
		}
	});
	
	$.ui.plugin.add("resizable", "ghost", {
	
		start: function() {
	
			var that = $(this).resizable( "instance" ), o = that.options, cs = that.size;
	
			that.ghost = that.originalElement.clone();
			that.ghost
				.css({
					opacity: 0.25,
					display: "block",
					position: "relative",
					height: cs.height,
					width: cs.width,
					margin: 0,
					left: 0,
					top: 0
				})
				.addClass("ui-resizable-ghost")
				.addClass(typeof o.ghost === "string" ? o.ghost : "");
	
			that.ghost.appendTo(that.helper);
	
		},
	
		resize: function() {
			var that = $(this).resizable( "instance" );
			if (that.ghost) {
				that.ghost.css({
					position: "relative",
					height: that.size.height,
					width: that.size.width
				});
			}
		},
	
		stop: function() {
			var that = $(this).resizable( "instance" );
			if (that.ghost && that.helper) {
				that.helper.get(0).removeChild(that.ghost.get(0));
			}
		}
	
	});
	
	$.ui.plugin.add("resizable", "grid", {
	
		resize: function() {
			var outerDimensions,
				that = $(this).resizable( "instance" ),
				o = that.options,
				cs = that.size,
				os = that.originalSize,
				op = that.originalPosition,
				a = that.axis,
				grid = typeof o.grid === "number" ? [ o.grid, o.grid ] : o.grid,
				gridX = (grid[0] || 1),
				gridY = (grid[1] || 1),
				ox = Math.round((cs.width - os.width) / gridX) * gridX,
				oy = Math.round((cs.height - os.height) / gridY) * gridY,
				newWidth = os.width + ox,
				newHeight = os.height + oy,
				isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),
				isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),
				isMinWidth = o.minWidth && (o.minWidth > newWidth),
				isMinHeight = o.minHeight && (o.minHeight > newHeight);
	
			o.grid = grid;
	
			if (isMinWidth) {
				newWidth += gridX;
			}
			if (isMinHeight) {
				newHeight += gridY;
			}
			if (isMaxWidth) {
				newWidth -= gridX;
			}
			if (isMaxHeight) {
				newHeight -= gridY;
			}
	
			if (/^(se|s|e)$/.test(a)) {
				that.size.width = newWidth;
				that.size.height = newHeight;
			} else if (/^(ne)$/.test(a)) {
				that.size.width = newWidth;
				that.size.height = newHeight;
				that.position.top = op.top - oy;
			} else if (/^(sw)$/.test(a)) {
				that.size.width = newWidth;
				that.size.height = newHeight;
				that.position.left = op.left - ox;
			} else {
				if ( newHeight - gridY <= 0 || newWidth - gridX <= 0) {
					outerDimensions = that._getPaddingPlusBorderDimensions( this );
				}
	
				if ( newHeight - gridY > 0 ) {
					that.size.height = newHeight;
					that.position.top = op.top - oy;
				} else {
					newHeight = gridY - outerDimensions.height;
					that.size.height = newHeight;
					that.position.top = op.top + os.height - newHeight;
				}
				if ( newWidth - gridX > 0 ) {
					that.size.width = newWidth;
					that.position.left = op.left - ox;
				} else {
					newWidth = gridX - outerDimensions.width;
					that.size.width = newWidth;
					that.position.left = op.left + os.width - newWidth;
				}
			}
		}
	
	});
	
	var resizable = $.ui.resizable;
	
	
	/*!
	 * jQuery UI Dialog 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/dialog/
	 */
	
	
	var dialog = $.widget( "ui.dialog", {
		version: "1.11.4",
		options: {
			appendTo: "body",
			autoOpen: true,
			buttons: [],
			closeOnEscape: true,
			closeText: "Close",
			dialogClass: "",
			draggable: true,
			hide: null,
			height: "auto",
			maxHeight: null,
			maxWidth: null,
			minHeight: 150,
			minWidth: 150,
			modal: false,
			position: {
				my: "center",
				at: "center",
				of: window,
				collision: "fit",
				// Ensure the titlebar is always visible
				using: function( pos ) {
					var topOffset = $( this ).css( pos ).offset().top;
					if ( topOffset < 0 ) {
						$( this ).css( "top", pos.top - topOffset );
					}
				}
			},
			resizable: true,
			show: null,
			title: null,
			width: 300,
	
			// callbacks
			beforeClose: null,
			close: null,
			drag: null,
			dragStart: null,
			dragStop: null,
			focus: null,
			open: null,
			resize: null,
			resizeStart: null,
			resizeStop: null
		},
	
		sizeRelatedOptions: {
			buttons: true,
			height: true,
			maxHeight: true,
			maxWidth: true,
			minHeight: true,
			minWidth: true,
			width: true
		},
	
		resizableRelatedOptions: {
			maxHeight: true,
			maxWidth: true,
			minHeight: true,
			minWidth: true
		},
	
		_create: function() {
			this.originalCss = {
				display: this.element[ 0 ].style.display,
				width: this.element[ 0 ].style.width,
				minHeight: this.element[ 0 ].style.minHeight,
				maxHeight: this.element[ 0 ].style.maxHeight,
				height: this.element[ 0 ].style.height
			};
			this.originalPosition = {
				parent: this.element.parent(),
				index: this.element.parent().children().index( this.element )
			};
			this.originalTitle = this.element.attr( "title" );
			this.options.title = this.options.title || this.originalTitle;
	
			this._createWrapper();
	
			this.element
				.show()
				.removeAttr( "title" )
				.addClass( "ui-dialog-content ui-widget-content" )
				.appendTo( this.uiDialog );
	
			this._createTitlebar();
			this._createButtonPane();
	
			if ( this.options.draggable && $.fn.draggable ) {
				this._makeDraggable();
			}
			if ( this.options.resizable && $.fn.resizable ) {
				this._makeResizable();
			}
	
			this._isOpen = false;
	
			this._trackFocus();
		},
	
		_init: function() {
			if ( this.options.autoOpen ) {
				this.open();
			}
		},
	
		_appendTo: function() {
			var element = this.options.appendTo;
			if ( element && (element.jquery || element.nodeType) ) {
				return $( element );
			}
			return this.document.find( element || "body" ).eq( 0 );
		},
	
		_destroy: function() {
			var next,
				originalPosition = this.originalPosition;
	
			this._untrackInstance();
			this._destroyOverlay();
	
			this.element
				.removeUniqueId()
				.removeClass( "ui-dialog-content ui-widget-content" )
				.css( this.originalCss )
				// Without detaching first, the following becomes really slow
				.detach();
	
			this.uiDialog.stop( true, true ).remove();
	
			if ( this.originalTitle ) {
				this.element.attr( "title", this.originalTitle );
			}
	
			next = originalPosition.parent.children().eq( originalPosition.index );
			// Don't try to place the dialog next to itself (#8613)
			if ( next.length && next[ 0 ] !== this.element[ 0 ] ) {
				next.before( this.element );
			} else {
				originalPosition.parent.append( this.element );
			}
		},
	
		widget: function() {
			return this.uiDialog;
		},
	
		disable: $.noop,
		enable: $.noop,
	
		close: function( event ) {
			var activeElement,
				that = this;
	
			if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {
				return;
			}
	
			this._isOpen = false;
			this._focusedElement = null;
			this._destroyOverlay();
			this._untrackInstance();
	
			if ( !this.opener.filter( ":focusable" ).focus().length ) {
	
				// support: IE9
				// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
				try {
					activeElement = this.document[ 0 ].activeElement;
	
					// Support: IE9, IE10
					// If the <body> is blurred, IE will switch windows, see #4520
					if ( activeElement && activeElement.nodeName.toLowerCase() !== "body" ) {
	
						// Hiding a focused element doesn't trigger blur in WebKit
						// so in case we have nothing to focus on, explicitly blur the active element
						// https://bugs.webkit.org/show_bug.cgi?id=47182
						$( activeElement ).blur();
					}
				} catch ( error ) {}
			}
	
			this._hide( this.uiDialog, this.options.hide, function() {
				that._trigger( "close", event );
			});
		},
	
		isOpen: function() {
			return this._isOpen;
		},
	
		moveToTop: function() {
			this._moveToTop();
		},
	
		_moveToTop: function( event, silent ) {
			var moved = false,
				zIndices = this.uiDialog.siblings( ".ui-front:visible" ).map(function() {
					return +$( this ).css( "z-index" );
				}).get(),
				zIndexMax = Math.max.apply( null, zIndices );
	
			if ( zIndexMax >= +this.uiDialog.css( "z-index" ) ) {
				this.uiDialog.css( "z-index", zIndexMax + 1 );
				moved = true;
			}
	
			if ( moved && !silent ) {
				this._trigger( "focus", event );
			}
			return moved;
		},
	
		open: function() {
			var that = this;
			if ( this._isOpen ) {
				if ( this._moveToTop() ) {
					this._focusTabbable();
				}
				return;
			}
	
			this._isOpen = true;
			this.opener = $( this.document[ 0 ].activeElement );
	
			this._size();
			this._position();
			this._createOverlay();
			this._moveToTop( null, true );
	
			// Ensure the overlay is moved to the top with the dialog, but only when
			// opening. The overlay shouldn't move after the dialog is open so that
			// modeless dialogs opened after the modal dialog stack properly.
			if ( this.overlay ) {
				this.overlay.css( "z-index", this.uiDialog.css( "z-index" ) - 1 );
			}
	
			this._show( this.uiDialog, this.options.show, function() {
				that._focusTabbable();
				that._trigger( "focus" );
			});
	
			// Track the dialog immediately upon openening in case a focus event
			// somehow occurs outside of the dialog before an element inside the
			// dialog is focused (#10152)
			this._makeFocusTarget();
	
			this._trigger( "open" );
		},
	
		_focusTabbable: function() {
			// Set focus to the first match:
			// 1. An element that was focused previously
			// 2. First element inside the dialog matching [autofocus]
			// 3. Tabbable element inside the content element
			// 4. Tabbable element inside the buttonpane
			// 5. The close button
			// 6. The dialog itself
			var hasFocus = this._focusedElement;
			if ( !hasFocus ) {
				hasFocus = this.element.find( "[autofocus]" );
			}
			if ( !hasFocus.length ) {
				hasFocus = this.element.find( ":tabbable" );
			}
			if ( !hasFocus.length ) {
				hasFocus = this.uiDialogButtonPane.find( ":tabbable" );
			}
			if ( !hasFocus.length ) {
				hasFocus = this.uiDialogTitlebarClose.filter( ":tabbable" );
			}
			if ( !hasFocus.length ) {
				hasFocus = this.uiDialog;
			}
			hasFocus.eq( 0 ).focus();
		},
	
		_keepFocus: function( event ) {
			function checkFocus() {
				var activeElement = this.document[0].activeElement,
					isActive = this.uiDialog[0] === activeElement ||
						$.contains( this.uiDialog[0], activeElement );
				if ( !isActive ) {
					this._focusTabbable();
				}
			}
			event.preventDefault();
			checkFocus.call( this );
			// support: IE
			// IE <= 8 doesn't prevent moving focus even with event.preventDefault()
			// so we check again later
			this._delay( checkFocus );
		},
	
		_createWrapper: function() {
			this.uiDialog = $("<div>")
				.addClass( "ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " +
					this.options.dialogClass )
				.hide()
				.attr({
					// Setting tabIndex makes the div focusable
					tabIndex: -1,
					role: "dialog"
				})
				.appendTo( this._appendTo() );
	
			this._on( this.uiDialog, {
				keydown: function( event ) {
					if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
							event.keyCode === $.ui.keyCode.ESCAPE ) {
						event.preventDefault();
						this.close( event );
						return;
					}
	
					// prevent tabbing out of dialogs
					if ( event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented() ) {
						return;
					}
					var tabbables = this.uiDialog.find( ":tabbable" ),
						first = tabbables.filter( ":first" ),
						last = tabbables.filter( ":last" );
	
					if ( ( event.target === last[0] || event.target === this.uiDialog[0] ) && !event.shiftKey ) {
						this._delay(function() {
							first.focus();
						});
						event.preventDefault();
					} else if ( ( event.target === first[0] || event.target === this.uiDialog[0] ) && event.shiftKey ) {
						this._delay(function() {
							last.focus();
						});
						event.preventDefault();
					}
				},
				mousedown: function( event ) {
					if ( this._moveToTop( event ) ) {
						this._focusTabbable();
					}
				}
			});
	
			// We assume that any existing aria-describedby attribute means
			// that the dialog content is marked up properly
			// otherwise we brute force the content as the description
			if ( !this.element.find( "[aria-describedby]" ).length ) {
				this.uiDialog.attr({
					"aria-describedby": this.element.uniqueId().attr( "id" )
				});
			}
		},
	
		_createTitlebar: function() {
			var uiDialogTitle;
	
			this.uiDialogTitlebar = $( "<div>" )
				.addClass( "ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix" )
				.prependTo( this.uiDialog );
			this._on( this.uiDialogTitlebar, {
				mousedown: function( event ) {
					// Don't prevent click on close button (#8838)
					// Focusing a dialog that is partially scrolled out of view
					// causes the browser to scroll it into view, preventing the click event
					if ( !$( event.target ).closest( ".ui-dialog-titlebar-close" ) ) {
						// Dialog isn't getting focus when dragging (#8063)
						this.uiDialog.focus();
					}
				}
			});
	
			// support: IE
			// Use type="button" to prevent enter keypresses in textboxes from closing the
			// dialog in IE (#9312)
			this.uiDialogTitlebarClose = $( "<button type='button'></button>" )
				.button({
					label: this.options.closeText,
					icons: {
						primary: "ui-icon-closethick"
					},
					text: false
				})
				.addClass( "ui-dialog-titlebar-close" )
				.appendTo( this.uiDialogTitlebar );
			this._on( this.uiDialogTitlebarClose, {
				click: function( event ) {
					event.preventDefault();
					this.close( event );
				}
			});
	
			uiDialogTitle = $( "<span>" )
				.uniqueId()
				.addClass( "ui-dialog-title" )
				.prependTo( this.uiDialogTitlebar );
			this._title( uiDialogTitle );
	
			this.uiDialog.attr({
				"aria-labelledby": uiDialogTitle.attr( "id" )
			});
		},
	
		_title: function( title ) {
			if ( !this.options.title ) {
				title.html( "&#160;" );
			}
			title.text( this.options.title );
		},
	
		_createButtonPane: function() {
			this.uiDialogButtonPane = $( "<div>" )
				.addClass( "ui-dialog-buttonpane ui-widget-content ui-helper-clearfix" );
	
			this.uiButtonSet = $( "<div>" )
				.addClass( "ui-dialog-buttonset" )
				.appendTo( this.uiDialogButtonPane );
	
			this._createButtons();
		},
	
		_createButtons: function() {
			var that = this,
				buttons = this.options.buttons;
	
			// if we already have a button pane, remove it
			this.uiDialogButtonPane.remove();
			this.uiButtonSet.empty();
	
			if ( $.isEmptyObject( buttons ) || ($.isArray( buttons ) && !buttons.length) ) {
				this.uiDialog.removeClass( "ui-dialog-buttons" );
				return;
			}
	
			$.each( buttons, function( name, props ) {
				var click, buttonOptions;
				props = $.isFunction( props ) ?
					{ click: props, text: name } :
					props;
				// Default to a non-submitting button
				props = $.extend( { type: "button" }, props );
				// Change the context for the click callback to be the main element
				click = props.click;
				props.click = function() {
					click.apply( that.element[ 0 ], arguments );
				};
				buttonOptions = {
					icons: props.icons,
					text: props.showText
				};
				delete props.icons;
				delete props.showText;
				$( "<button></button>", props )
					.button( buttonOptions )
					.appendTo( that.uiButtonSet );
			});
			this.uiDialog.addClass( "ui-dialog-buttons" );
			this.uiDialogButtonPane.appendTo( this.uiDialog );
		},
	
		_makeDraggable: function() {
			var that = this,
				options = this.options;
	
			function filteredUi( ui ) {
				return {
					position: ui.position,
					offset: ui.offset
				};
			}
	
			this.uiDialog.draggable({
				cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
				handle: ".ui-dialog-titlebar",
				containment: "document",
				start: function( event, ui ) {
					$( this ).addClass( "ui-dialog-dragging" );
					that._blockFrames();
					that._trigger( "dragStart", event, filteredUi( ui ) );
				},
				drag: function( event, ui ) {
					that._trigger( "drag", event, filteredUi( ui ) );
				},
				stop: function( event, ui ) {
					var left = ui.offset.left - that.document.scrollLeft(),
						top = ui.offset.top - that.document.scrollTop();
	
					options.position = {
						my: "left top",
						at: "left" + (left >= 0 ? "+" : "") + left + " " +
							"top" + (top >= 0 ? "+" : "") + top,
						of: that.window
					};
					$( this ).removeClass( "ui-dialog-dragging" );
					that._unblockFrames();
					that._trigger( "dragStop", event, filteredUi( ui ) );
				}
			});
		},
	
		_makeResizable: function() {
			var that = this,
				options = this.options,
				handles = options.resizable,
				// .ui-resizable has position: relative defined in the stylesheet
				// but dialogs have to use absolute or fixed positioning
				position = this.uiDialog.css("position"),
				resizeHandles = typeof handles === "string" ?
					handles	:
					"n,e,s,w,se,sw,ne,nw";
	
			function filteredUi( ui ) {
				return {
					originalPosition: ui.originalPosition,
					originalSize: ui.originalSize,
					position: ui.position,
					size: ui.size
				};
			}
	
			this.uiDialog.resizable({
				cancel: ".ui-dialog-content",
				containment: "document",
				alsoResize: this.element,
				maxWidth: options.maxWidth,
				maxHeight: options.maxHeight,
				minWidth: options.minWidth,
				minHeight: this._minHeight(),
				handles: resizeHandles,
				start: function( event, ui ) {
					$( this ).addClass( "ui-dialog-resizing" );
					that._blockFrames();
					that._trigger( "resizeStart", event, filteredUi( ui ) );
				},
				resize: function( event, ui ) {
					that._trigger( "resize", event, filteredUi( ui ) );
				},
				stop: function( event, ui ) {
					var offset = that.uiDialog.offset(),
						left = offset.left - that.document.scrollLeft(),
						top = offset.top - that.document.scrollTop();
	
					options.height = that.uiDialog.height();
					options.width = that.uiDialog.width();
					options.position = {
						my: "left top",
						at: "left" + (left >= 0 ? "+" : "") + left + " " +
							"top" + (top >= 0 ? "+" : "") + top,
						of: that.window
					};
					$( this ).removeClass( "ui-dialog-resizing" );
					that._unblockFrames();
					that._trigger( "resizeStop", event, filteredUi( ui ) );
				}
			})
			.css( "position", position );
		},
	
		_trackFocus: function() {
			this._on( this.widget(), {
				focusin: function( event ) {
					this._makeFocusTarget();
					this._focusedElement = $( event.target );
				}
			});
		},
	
		_makeFocusTarget: function() {
			this._untrackInstance();
			this._trackingInstances().unshift( this );
		},
	
		_untrackInstance: function() {
			var instances = this._trackingInstances(),
				exists = $.inArray( this, instances );
			if ( exists !== -1 ) {
				instances.splice( exists, 1 );
			}
		},
	
		_trackingInstances: function() {
			var instances = this.document.data( "ui-dialog-instances" );
			if ( !instances ) {
				instances = [];
				this.document.data( "ui-dialog-instances", instances );
			}
			return instances;
		},
	
		_minHeight: function() {
			var options = this.options;
	
			return options.height === "auto" ?
				options.minHeight :
				Math.min( options.minHeight, options.height );
		},
	
		_position: function() {
			// Need to show the dialog to get the actual offset in the position plugin
			var isVisible = this.uiDialog.is( ":visible" );
			if ( !isVisible ) {
				this.uiDialog.show();
			}
			this.uiDialog.position( this.options.position );
			if ( !isVisible ) {
				this.uiDialog.hide();
			}
		},
	
		_setOptions: function( options ) {
			var that = this,
				resize = false,
				resizableOptions = {};
	
			$.each( options, function( key, value ) {
				that._setOption( key, value );
	
				if ( key in that.sizeRelatedOptions ) {
					resize = true;
				}
				if ( key in that.resizableRelatedOptions ) {
					resizableOptions[ key ] = value;
				}
			});
	
			if ( resize ) {
				this._size();
				this._position();
			}
			if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
				this.uiDialog.resizable( "option", resizableOptions );
			}
		},
	
		_setOption: function( key, value ) {
			var isDraggable, isResizable,
				uiDialog = this.uiDialog;
	
			if ( key === "dialogClass" ) {
				uiDialog
					.removeClass( this.options.dialogClass )
					.addClass( value );
			}
	
			if ( key === "disabled" ) {
				return;
			}
	
			this._super( key, value );
	
			if ( key === "appendTo" ) {
				this.uiDialog.appendTo( this._appendTo() );
			}
	
			if ( key === "buttons" ) {
				this._createButtons();
			}
	
			if ( key === "closeText" ) {
				this.uiDialogTitlebarClose.button({
					// Ensure that we always pass a string
					label: "" + value
				});
			}
	
			if ( key === "draggable" ) {
				isDraggable = uiDialog.is( ":data(ui-draggable)" );
				if ( isDraggable && !value ) {
					uiDialog.draggable( "destroy" );
				}
	
				if ( !isDraggable && value ) {
					this._makeDraggable();
				}
			}
	
			if ( key === "position" ) {
				this._position();
			}
	
			if ( key === "resizable" ) {
				// currently resizable, becoming non-resizable
				isResizable = uiDialog.is( ":data(ui-resizable)" );
				if ( isResizable && !value ) {
					uiDialog.resizable( "destroy" );
				}
	
				// currently resizable, changing handles
				if ( isResizable && typeof value === "string" ) {
					uiDialog.resizable( "option", "handles", value );
				}
	
				// currently non-resizable, becoming resizable
				if ( !isResizable && value !== false ) {
					this._makeResizable();
				}
			}
	
			if ( key === "title" ) {
				this._title( this.uiDialogTitlebar.find( ".ui-dialog-title" ) );
			}
		},
	
		_size: function() {
			// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
			// divs will both have width and height set, so we need to reset them
			var nonContentHeight, minContentHeight, maxContentHeight,
				options = this.options;
	
			// Reset content sizing
			this.element.show().css({
				width: "auto",
				minHeight: 0,
				maxHeight: "none",
				height: 0
			});
	
			if ( options.minWidth > options.width ) {
				options.width = options.minWidth;
			}
	
			// reset wrapper sizing
			// determine the height of all the non-content elements
			nonContentHeight = this.uiDialog.css({
					height: "auto",
					width: options.width
				})
				.outerHeight();
			minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
			maxContentHeight = typeof options.maxHeight === "number" ?
				Math.max( 0, options.maxHeight - nonContentHeight ) :
				"none";
	
			if ( options.height === "auto" ) {
				this.element.css({
					minHeight: minContentHeight,
					maxHeight: maxContentHeight,
					height: "auto"
				});
			} else {
				this.element.height( Math.max( 0, options.height - nonContentHeight ) );
			}
	
			if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
				this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
			}
		},
	
		_blockFrames: function() {
			this.iframeBlocks = this.document.find( "iframe" ).map(function() {
				var iframe = $( this );
	
				return $( "<div>" )
					.css({
						position: "absolute",
						width: iframe.outerWidth(),
						height: iframe.outerHeight()
					})
					.appendTo( iframe.parent() )
					.offset( iframe.offset() )[0];
			});
		},
	
		_unblockFrames: function() {
			if ( this.iframeBlocks ) {
				this.iframeBlocks.remove();
				delete this.iframeBlocks;
			}
		},
	
		_allowInteraction: function( event ) {
			if ( $( event.target ).closest( ".ui-dialog" ).length ) {
				return true;
			}
	
			// TODO: Remove hack when datepicker implements
			// the .ui-front logic (#8989)
			return !!$( event.target ).closest( ".ui-datepicker" ).length;
		},
	
		_createOverlay: function() {
			if ( !this.options.modal ) {
				return;
			}
	
			// We use a delay in case the overlay is created from an
			// event that we're going to be cancelling (#2804)
			var isOpening = true;
			this._delay(function() {
				isOpening = false;
			});
	
			if ( !this.document.data( "ui-dialog-overlays" ) ) {
	
				// Prevent use of anchors and inputs
				// Using _on() for an event handler shared across many instances is
				// safe because the dialogs stack and must be closed in reverse order
				this._on( this.document, {
					focusin: function( event ) {
						if ( isOpening ) {
							return;
						}
	
						if ( !this._allowInteraction( event ) ) {
							event.preventDefault();
							this._trackingInstances()[ 0 ]._focusTabbable();
						}
					}
				});
			}
	
			this.overlay = $( "<div>" )
				.addClass( "ui-widget-overlay ui-front" )
				.appendTo( this._appendTo() );
			this._on( this.overlay, {
				mousedown: "_keepFocus"
			});
			this.document.data( "ui-dialog-overlays",
				(this.document.data( "ui-dialog-overlays" ) || 0) + 1 );
		},
	
		_destroyOverlay: function() {
			if ( !this.options.modal ) {
				return;
			}
	
			if ( this.overlay ) {
				var overlays = this.document.data( "ui-dialog-overlays" ) - 1;
	
				if ( !overlays ) {
					this.document
						.unbind( "focusin" )
						.removeData( "ui-dialog-overlays" );
				} else {
					this.document.data( "ui-dialog-overlays", overlays );
				}
	
				this.overlay.remove();
				this.overlay = null;
			}
		}
	});
	
	
	/*!
	 * jQuery UI Droppable 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/droppable/
	 */
	
	
	$.widget( "ui.droppable", {
		version: "1.11.4",
		widgetEventPrefix: "drop",
		options: {
			accept: "*",
			activeClass: false,
			addClasses: true,
			greedy: false,
			hoverClass: false,
			scope: "default",
			tolerance: "intersect",
	
			// callbacks
			activate: null,
			deactivate: null,
			drop: null,
			out: null,
			over: null
		},
		_create: function() {
	
			var proportions,
				o = this.options,
				accept = o.accept;
	
			this.isover = false;
			this.isout = true;
	
			this.accept = $.isFunction( accept ) ? accept : function( d ) {
				return d.is( accept );
			};
	
			this.proportions = function( /* valueToWrite */ ) {
				if ( arguments.length ) {
					// Store the droppable's proportions
					proportions = arguments[ 0 ];
				} else {
					// Retrieve or derive the droppable's proportions
					return proportions ?
						proportions :
						proportions = {
							width: this.element[ 0 ].offsetWidth,
							height: this.element[ 0 ].offsetHeight
						};
				}
			};
	
			this._addToManager( o.scope );
	
			o.addClasses && this.element.addClass( "ui-droppable" );
	
		},
	
		_addToManager: function( scope ) {
			// Add the reference and positions to the manager
			$.ui.ddmanager.droppables[ scope ] = $.ui.ddmanager.droppables[ scope ] || [];
			$.ui.ddmanager.droppables[ scope ].push( this );
		},
	
		_splice: function( drop ) {
			var i = 0;
			for ( ; i < drop.length; i++ ) {
				if ( drop[ i ] === this ) {
					drop.splice( i, 1 );
				}
			}
		},
	
		_destroy: function() {
			var drop = $.ui.ddmanager.droppables[ this.options.scope ];
	
			this._splice( drop );
	
			this.element.removeClass( "ui-droppable ui-droppable-disabled" );
		},
	
		_setOption: function( key, value ) {
	
			if ( key === "accept" ) {
				this.accept = $.isFunction( value ) ? value : function( d ) {
					return d.is( value );
				};
			} else if ( key === "scope" ) {
				var drop = $.ui.ddmanager.droppables[ this.options.scope ];
	
				this._splice( drop );
				this._addToManager( value );
			}
	
			this._super( key, value );
		},
	
		_activate: function( event ) {
			var draggable = $.ui.ddmanager.current;
			if ( this.options.activeClass ) {
				this.element.addClass( this.options.activeClass );
			}
			if ( draggable ){
				this._trigger( "activate", event, this.ui( draggable ) );
			}
		},
	
		_deactivate: function( event ) {
			var draggable = $.ui.ddmanager.current;
			if ( this.options.activeClass ) {
				this.element.removeClass( this.options.activeClass );
			}
			if ( draggable ){
				this._trigger( "deactivate", event, this.ui( draggable ) );
			}
		},
	
		_over: function( event ) {
	
			var draggable = $.ui.ddmanager.current;
	
			// Bail if draggable and droppable are same element
			if ( !draggable || ( draggable.currentItem || draggable.element )[ 0 ] === this.element[ 0 ] ) {
				return;
			}
	
			if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {
				if ( this.options.hoverClass ) {
					this.element.addClass( this.options.hoverClass );
				}
				this._trigger( "over", event, this.ui( draggable ) );
			}
	
		},
	
		_out: function( event ) {
	
			var draggable = $.ui.ddmanager.current;
	
			// Bail if draggable and droppable are same element
			if ( !draggable || ( draggable.currentItem || draggable.element )[ 0 ] === this.element[ 0 ] ) {
				return;
			}
	
			if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {
				if ( this.options.hoverClass ) {
					this.element.removeClass( this.options.hoverClass );
				}
				this._trigger( "out", event, this.ui( draggable ) );
			}
	
		},
	
		_drop: function( event, custom ) {
	
			var draggable = custom || $.ui.ddmanager.current,
				childrenIntersection = false;
	
			// Bail if draggable and droppable are same element
			if ( !draggable || ( draggable.currentItem || draggable.element )[ 0 ] === this.element[ 0 ] ) {
				return false;
			}
	
			this.element.find( ":data(ui-droppable)" ).not( ".ui-draggable-dragging" ).each(function() {
				var inst = $( this ).droppable( "instance" );
				if (
					inst.options.greedy &&
					!inst.options.disabled &&
					inst.options.scope === draggable.options.scope &&
					inst.accept.call( inst.element[ 0 ], ( draggable.currentItem || draggable.element ) ) &&
					$.ui.intersect( draggable, $.extend( inst, { offset: inst.element.offset() } ), inst.options.tolerance, event )
				) { childrenIntersection = true; return false; }
			});
			if ( childrenIntersection ) {
				return false;
			}
	
			if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {
				if ( this.options.activeClass ) {
					this.element.removeClass( this.options.activeClass );
				}
				if ( this.options.hoverClass ) {
					this.element.removeClass( this.options.hoverClass );
				}
				this._trigger( "drop", event, this.ui( draggable ) );
				return this.element;
			}
	
			return false;
	
		},
	
		ui: function( c ) {
			return {
				draggable: ( c.currentItem || c.element ),
				helper: c.helper,
				position: c.position,
				offset: c.positionAbs
			};
		}
	
	});
	
	$.ui.intersect = (function() {
		function isOverAxis( x, reference, size ) {
			return ( x >= reference ) && ( x < ( reference + size ) );
		}
	
		return function( draggable, droppable, toleranceMode, event ) {
	
			if ( !droppable.offset ) {
				return false;
			}
	
			var x1 = ( draggable.positionAbs || draggable.position.absolute ).left + draggable.margins.left,
				y1 = ( draggable.positionAbs || draggable.position.absolute ).top + draggable.margins.top,
				x2 = x1 + draggable.helperProportions.width,
				y2 = y1 + draggable.helperProportions.height,
				l = droppable.offset.left,
				t = droppable.offset.top,
				r = l + droppable.proportions().width,
				b = t + droppable.proportions().height;
	
			switch ( toleranceMode ) {
			case "fit":
				return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );
			case "intersect":
				return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half
					x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half
					t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half
					y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half
			case "pointer":
				return isOverAxis( event.pageY, t, droppable.proportions().height ) && isOverAxis( event.pageX, l, droppable.proportions().width );
			case "touch":
				return (
					( y1 >= t && y1 <= b ) || // Top edge touching
					( y2 >= t && y2 <= b ) || // Bottom edge touching
					( y1 < t && y2 > b ) // Surrounded vertically
				) && (
					( x1 >= l && x1 <= r ) || // Left edge touching
					( x2 >= l && x2 <= r ) || // Right edge touching
					( x1 < l && x2 > r ) // Surrounded horizontally
				);
			default:
				return false;
			}
		};
	})();
	
	/*
		This manager tracks offsets of draggables and droppables
	*/
	$.ui.ddmanager = {
		current: null,
		droppables: { "default": [] },
		prepareOffsets: function( t, event ) {
	
			var i, j,
				m = $.ui.ddmanager.droppables[ t.options.scope ] || [],
				type = event ? event.type : null, // workaround for #2317
				list = ( t.currentItem || t.element ).find( ":data(ui-droppable)" ).addBack();
	
			droppablesLoop: for ( i = 0; i < m.length; i++ ) {
	
				// No disabled and non-accepted
				if ( m[ i ].options.disabled || ( t && !m[ i ].accept.call( m[ i ].element[ 0 ], ( t.currentItem || t.element ) ) ) ) {
					continue;
				}
	
				// Filter out elements in the current dragged item
				for ( j = 0; j < list.length; j++ ) {
					if ( list[ j ] === m[ i ].element[ 0 ] ) {
						m[ i ].proportions().height = 0;
						continue droppablesLoop;
					}
				}
	
				m[ i ].visible = m[ i ].element.css( "display" ) !== "none";
				if ( !m[ i ].visible ) {
					continue;
				}
	
				// Activate the droppable if used directly from draggables
				if ( type === "mousedown" ) {
					m[ i ]._activate.call( m[ i ], event );
				}
	
				m[ i ].offset = m[ i ].element.offset();
				m[ i ].proportions({ width: m[ i ].element[ 0 ].offsetWidth, height: m[ i ].element[ 0 ].offsetHeight });
	
			}
	
		},
		drop: function( draggable, event ) {
	
			var dropped = false;
			// Create a copy of the droppables in case the list changes during the drop (#9116)
			$.each( ( $.ui.ddmanager.droppables[ draggable.options.scope ] || [] ).slice(), function() {
	
				if ( !this.options ) {
					return;
				}
				if ( !this.options.disabled && this.visible && $.ui.intersect( draggable, this, this.options.tolerance, event ) ) {
					dropped = this._drop.call( this, event ) || dropped;
				}
	
				if ( !this.options.disabled && this.visible && this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {
					this.isout = true;
					this.isover = false;
					this._deactivate.call( this, event );
				}
	
			});
			return dropped;
	
		},
		dragStart: function( draggable, event ) {
			// Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
			draggable.element.parentsUntil( "body" ).bind( "scroll.droppable", function() {
				if ( !draggable.options.refreshPositions ) {
					$.ui.ddmanager.prepareOffsets( draggable, event );
				}
			});
		},
		drag: function( draggable, event ) {
	
			// If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
			if ( draggable.options.refreshPositions ) {
				$.ui.ddmanager.prepareOffsets( draggable, event );
			}
	
			// Run through all droppables and check their positions based on specific tolerance options
			$.each( $.ui.ddmanager.droppables[ draggable.options.scope ] || [], function() {
	
				if ( this.options.disabled || this.greedyChild || !this.visible ) {
					return;
				}
	
				var parentInstance, scope, parent,
					intersects = $.ui.intersect( draggable, this, this.options.tolerance, event ),
					c = !intersects && this.isover ? "isout" : ( intersects && !this.isover ? "isover" : null );
				if ( !c ) {
					return;
				}
	
				if ( this.options.greedy ) {
					// find droppable parents with same scope
					scope = this.options.scope;
					parent = this.element.parents( ":data(ui-droppable)" ).filter(function() {
						return $( this ).droppable( "instance" ).options.scope === scope;
					});
	
					if ( parent.length ) {
						parentInstance = $( parent[ 0 ] ).droppable( "instance" );
						parentInstance.greedyChild = ( c === "isover" );
					}
				}
	
				// we just moved into a greedy child
				if ( parentInstance && c === "isover" ) {
					parentInstance.isover = false;
					parentInstance.isout = true;
					parentInstance._out.call( parentInstance, event );
				}
	
				this[ c ] = true;
				this[c === "isout" ? "isover" : "isout"] = false;
				this[c === "isover" ? "_over" : "_out"].call( this, event );
	
				// we just moved out of a greedy child
				if ( parentInstance && c === "isout" ) {
					parentInstance.isout = false;
					parentInstance.isover = true;
					parentInstance._over.call( parentInstance, event );
				}
			});
	
		},
		dragStop: function( draggable, event ) {
			draggable.element.parentsUntil( "body" ).unbind( "scroll.droppable" );
			// Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
			if ( !draggable.options.refreshPositions ) {
				$.ui.ddmanager.prepareOffsets( draggable, event );
			}
		}
	};
	
	var droppable = $.ui.droppable;
	
	
	/*!
	 * jQuery UI Effects 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/category/effects-core/
	 */
	
	
	var dataSpace = "ui-effects-",
	
		// Create a local jQuery because jQuery Color relies on it and the
		// global may not exist with AMD and a custom build (#10199)
		jQuery = $;
	
	$.effects = {
		effect: {}
	};
	
	/*!
	 * jQuery Color Animations v2.1.2
	 * https://github.com/jquery/jquery-color
	 *
	 * Copyright 2014 jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * Date: Wed Jan 16 08:47:09 2013 -0600
	 */
	(function( jQuery, undefined ) {
	
		var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",
	
		// plusequals test for += 100 -= 100
		rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,
		// a set of RE's that can match strings and generate color tuples.
		stringParsers = [ {
				re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
				parse: function( execResult ) {
					return [
						execResult[ 1 ],
						execResult[ 2 ],
						execResult[ 3 ],
						execResult[ 4 ]
					];
				}
			}, {
				re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
				parse: function( execResult ) {
					return [
						execResult[ 1 ] * 2.55,
						execResult[ 2 ] * 2.55,
						execResult[ 3 ] * 2.55,
						execResult[ 4 ]
					];
				}
			}, {
				// this regex ignores A-F because it's compared against an already lowercased string
				re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
				parse: function( execResult ) {
					return [
						parseInt( execResult[ 1 ], 16 ),
						parseInt( execResult[ 2 ], 16 ),
						parseInt( execResult[ 3 ], 16 )
					];
				}
			}, {
				// this regex ignores A-F because it's compared against an already lowercased string
				re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
				parse: function( execResult ) {
					return [
						parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
						parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
						parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
					];
				}
			}, {
				re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
				space: "hsla",
				parse: function( execResult ) {
					return [
						execResult[ 1 ],
						execResult[ 2 ] / 100,
						execResult[ 3 ] / 100,
						execResult[ 4 ]
					];
				}
			} ],
	
		// jQuery.Color( )
		color = jQuery.Color = function( color, green, blue, alpha ) {
			return new jQuery.Color.fn.parse( color, green, blue, alpha );
		},
		spaces = {
			rgba: {
				props: {
					red: {
						idx: 0,
						type: "byte"
					},
					green: {
						idx: 1,
						type: "byte"
					},
					blue: {
						idx: 2,
						type: "byte"
					}
				}
			},
	
			hsla: {
				props: {
					hue: {
						idx: 0,
						type: "degrees"
					},
					saturation: {
						idx: 1,
						type: "percent"
					},
					lightness: {
						idx: 2,
						type: "percent"
					}
				}
			}
		},
		propTypes = {
			"byte": {
				floor: true,
				max: 255
			},
			"percent": {
				max: 1
			},
			"degrees": {
				mod: 360,
				floor: true
			}
		},
		support = color.support = {},
	
		// element for support tests
		supportElem = jQuery( "<p>" )[ 0 ],
	
		// colors = jQuery.Color.names
		colors,
	
		// local aliases of functions called often
		each = jQuery.each;
	
	// determine rgba support immediately
	supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
	support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;
	
	// define cache name and alpha properties
	// for rgba and hsla spaces
	each( spaces, function( spaceName, space ) {
		space.cache = "_" + spaceName;
		space.props.alpha = {
			idx: 3,
			type: "percent",
			def: 1
		};
	});
	
	function clamp( value, prop, allowEmpty ) {
		var type = propTypes[ prop.type ] || {};
	
		if ( value == null ) {
			return (allowEmpty || !prop.def) ? null : prop.def;
		}
	
		// ~~ is an short way of doing floor for positive numbers
		value = type.floor ? ~~value : parseFloat( value );
	
		// IE will pass in empty strings as value for alpha,
		// which will hit this case
		if ( isNaN( value ) ) {
			return prop.def;
		}
	
		if ( type.mod ) {
			// we add mod before modding to make sure that negatives values
			// get converted properly: -10 -> 350
			return (value + type.mod) % type.mod;
		}
	
		// for now all property types without mod have min and max
		return 0 > value ? 0 : type.max < value ? type.max : value;
	}
	
	function stringParse( string ) {
		var inst = color(),
			rgba = inst._rgba = [];
	
		string = string.toLowerCase();
	
		each( stringParsers, function( i, parser ) {
			var parsed,
				match = parser.re.exec( string ),
				values = match && parser.parse( match ),
				spaceName = parser.space || "rgba";
	
			if ( values ) {
				parsed = inst[ spaceName ]( values );
	
				// if this was an rgba parse the assignment might happen twice
				// oh well....
				inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
				rgba = inst._rgba = parsed._rgba;
	
				// exit each( stringParsers ) here because we matched
				return false;
			}
		});
	
		// Found a stringParser that handled it
		if ( rgba.length ) {
	
			// if this came from a parsed string, force "transparent" when alpha is 0
			// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
			if ( rgba.join() === "0,0,0,0" ) {
				jQuery.extend( rgba, colors.transparent );
			}
			return inst;
		}
	
		// named colors
		return colors[ string ];
	}
	
	color.fn = jQuery.extend( color.prototype, {
		parse: function( red, green, blue, alpha ) {
			if ( red === undefined ) {
				this._rgba = [ null, null, null, null ];
				return this;
			}
			if ( red.jquery || red.nodeType ) {
				red = jQuery( red ).css( green );
				green = undefined;
			}
	
			var inst = this,
				type = jQuery.type( red ),
				rgba = this._rgba = [];
	
			// more than 1 argument specified - assume ( red, green, blue, alpha )
			if ( green !== undefined ) {
				red = [ red, green, blue, alpha ];
				type = "array";
			}
	
			if ( type === "string" ) {
				return this.parse( stringParse( red ) || colors._default );
			}
	
			if ( type === "array" ) {
				each( spaces.rgba.props, function( key, prop ) {
					rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
				});
				return this;
			}
	
			if ( type === "object" ) {
				if ( red instanceof color ) {
					each( spaces, function( spaceName, space ) {
						if ( red[ space.cache ] ) {
							inst[ space.cache ] = red[ space.cache ].slice();
						}
					});
				} else {
					each( spaces, function( spaceName, space ) {
						var cache = space.cache;
						each( space.props, function( key, prop ) {
	
							// if the cache doesn't exist, and we know how to convert
							if ( !inst[ cache ] && space.to ) {
	
								// if the value was null, we don't need to copy it
								// if the key was alpha, we don't need to copy it either
								if ( key === "alpha" || red[ key ] == null ) {
									return;
								}
								inst[ cache ] = space.to( inst._rgba );
							}
	
							// this is the only case where we allow nulls for ALL properties.
							// call clamp with alwaysAllowEmpty
							inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
						});
	
						// everything defined but alpha?
						if ( inst[ cache ] && jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {
							// use the default of 1
							inst[ cache ][ 3 ] = 1;
							if ( space.from ) {
								inst._rgba = space.from( inst[ cache ] );
							}
						}
					});
				}
				return this;
			}
		},
		is: function( compare ) {
			var is = color( compare ),
				same = true,
				inst = this;
	
			each( spaces, function( _, space ) {
				var localCache,
					isCache = is[ space.cache ];
				if (isCache) {
					localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
					each( space.props, function( _, prop ) {
						if ( isCache[ prop.idx ] != null ) {
							same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
							return same;
						}
					});
				}
				return same;
			});
			return same;
		},
		_space: function() {
			var used = [],
				inst = this;
			each( spaces, function( spaceName, space ) {
				if ( inst[ space.cache ] ) {
					used.push( spaceName );
				}
			});
			return used.pop();
		},
		transition: function( other, distance ) {
			var end = color( other ),
				spaceName = end._space(),
				space = spaces[ spaceName ],
				startColor = this.alpha() === 0 ? color( "transparent" ) : this,
				start = startColor[ space.cache ] || space.to( startColor._rgba ),
				result = start.slice();
	
			end = end[ space.cache ];
			each( space.props, function( key, prop ) {
				var index = prop.idx,
					startValue = start[ index ],
					endValue = end[ index ],
					type = propTypes[ prop.type ] || {};
	
				// if null, don't override start value
				if ( endValue === null ) {
					return;
				}
				// if null - use end
				if ( startValue === null ) {
					result[ index ] = endValue;
				} else {
					if ( type.mod ) {
						if ( endValue - startValue > type.mod / 2 ) {
							startValue += type.mod;
						} else if ( startValue - endValue > type.mod / 2 ) {
							startValue -= type.mod;
						}
					}
					result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
				}
			});
			return this[ spaceName ]( result );
		},
		blend: function( opaque ) {
			// if we are already opaque - return ourself
			if ( this._rgba[ 3 ] === 1 ) {
				return this;
			}
	
			var rgb = this._rgba.slice(),
				a = rgb.pop(),
				blend = color( opaque )._rgba;
	
			return color( jQuery.map( rgb, function( v, i ) {
				return ( 1 - a ) * blend[ i ] + a * v;
			}));
		},
		toRgbaString: function() {
			var prefix = "rgba(",
				rgba = jQuery.map( this._rgba, function( v, i ) {
					return v == null ? ( i > 2 ? 1 : 0 ) : v;
				});
	
			if ( rgba[ 3 ] === 1 ) {
				rgba.pop();
				prefix = "rgb(";
			}
	
			return prefix + rgba.join() + ")";
		},
		toHslaString: function() {
			var prefix = "hsla(",
				hsla = jQuery.map( this.hsla(), function( v, i ) {
					if ( v == null ) {
						v = i > 2 ? 1 : 0;
					}
	
					// catch 1 and 2
					if ( i && i < 3 ) {
						v = Math.round( v * 100 ) + "%";
					}
					return v;
				});
	
			if ( hsla[ 3 ] === 1 ) {
				hsla.pop();
				prefix = "hsl(";
			}
			return prefix + hsla.join() + ")";
		},
		toHexString: function( includeAlpha ) {
			var rgba = this._rgba.slice(),
				alpha = rgba.pop();
	
			if ( includeAlpha ) {
				rgba.push( ~~( alpha * 255 ) );
			}
	
			return "#" + jQuery.map( rgba, function( v ) {
	
				// default to 0 when nulls exist
				v = ( v || 0 ).toString( 16 );
				return v.length === 1 ? "0" + v : v;
			}).join("");
		},
		toString: function() {
			return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
		}
	});
	color.fn.parse.prototype = color.fn;
	
	// hsla conversions adapted from:
	// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021
	
	function hue2rgb( p, q, h ) {
		h = ( h + 1 ) % 1;
		if ( h * 6 < 1 ) {
			return p + ( q - p ) * h * 6;
		}
		if ( h * 2 < 1) {
			return q;
		}
		if ( h * 3 < 2 ) {
			return p + ( q - p ) * ( ( 2 / 3 ) - h ) * 6;
		}
		return p;
	}
	
	spaces.hsla.to = function( rgba ) {
		if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
			return [ null, null, null, rgba[ 3 ] ];
		}
		var r = rgba[ 0 ] / 255,
			g = rgba[ 1 ] / 255,
			b = rgba[ 2 ] / 255,
			a = rgba[ 3 ],
			max = Math.max( r, g, b ),
			min = Math.min( r, g, b ),
			diff = max - min,
			add = max + min,
			l = add * 0.5,
			h, s;
	
		if ( min === max ) {
			h = 0;
		} else if ( r === max ) {
			h = ( 60 * ( g - b ) / diff ) + 360;
		} else if ( g === max ) {
			h = ( 60 * ( b - r ) / diff ) + 120;
		} else {
			h = ( 60 * ( r - g ) / diff ) + 240;
		}
	
		// chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
		// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
		if ( diff === 0 ) {
			s = 0;
		} else if ( l <= 0.5 ) {
			s = diff / add;
		} else {
			s = diff / ( 2 - add );
		}
		return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
	};
	
	spaces.hsla.from = function( hsla ) {
		if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
			return [ null, null, null, hsla[ 3 ] ];
		}
		var h = hsla[ 0 ] / 360,
			s = hsla[ 1 ],
			l = hsla[ 2 ],
			a = hsla[ 3 ],
			q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
			p = 2 * l - q;
	
		return [
			Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
			Math.round( hue2rgb( p, q, h ) * 255 ),
			Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
			a
		];
	};
	
	each( spaces, function( spaceName, space ) {
		var props = space.props,
			cache = space.cache,
			to = space.to,
			from = space.from;
	
		// makes rgba() and hsla()
		color.fn[ spaceName ] = function( value ) {
	
			// generate a cache for this space if it doesn't exist
			if ( to && !this[ cache ] ) {
				this[ cache ] = to( this._rgba );
			}
			if ( value === undefined ) {
				return this[ cache ].slice();
			}
	
			var ret,
				type = jQuery.type( value ),
				arr = ( type === "array" || type === "object" ) ? value : arguments,
				local = this[ cache ].slice();
	
			each( props, function( key, prop ) {
				var val = arr[ type === "object" ? key : prop.idx ];
				if ( val == null ) {
					val = local[ prop.idx ];
				}
				local[ prop.idx ] = clamp( val, prop );
			});
	
			if ( from ) {
				ret = color( from( local ) );
				ret[ cache ] = local;
				return ret;
			} else {
				return color( local );
			}
		};
	
		// makes red() green() blue() alpha() hue() saturation() lightness()
		each( props, function( key, prop ) {
			// alpha is included in more than one space
			if ( color.fn[ key ] ) {
				return;
			}
			color.fn[ key ] = function( value ) {
				var vtype = jQuery.type( value ),
					fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
					local = this[ fn ](),
					cur = local[ prop.idx ],
					match;
	
				if ( vtype === "undefined" ) {
					return cur;
				}
	
				if ( vtype === "function" ) {
					value = value.call( this, cur );
					vtype = jQuery.type( value );
				}
				if ( value == null && prop.empty ) {
					return this;
				}
				if ( vtype === "string" ) {
					match = rplusequals.exec( value );
					if ( match ) {
						value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
					}
				}
				local[ prop.idx ] = value;
				return this[ fn ]( local );
			};
		});
	});
	
	// add cssHook and .fx.step function for each named hook.
	// accept a space separated string of properties
	color.hook = function( hook ) {
		var hooks = hook.split( " " );
		each( hooks, function( i, hook ) {
			jQuery.cssHooks[ hook ] = {
				set: function( elem, value ) {
					var parsed, curElem,
						backgroundColor = "";
	
					if ( value !== "transparent" && ( jQuery.type( value ) !== "string" || ( parsed = stringParse( value ) ) ) ) {
						value = color( parsed || value );
						if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
							curElem = hook === "backgroundColor" ? elem.parentNode : elem;
							while (
								(backgroundColor === "" || backgroundColor === "transparent") &&
								curElem && curElem.style
							) {
								try {
									backgroundColor = jQuery.css( curElem, "backgroundColor" );
									curElem = curElem.parentNode;
								} catch ( e ) {
								}
							}
	
							value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
								backgroundColor :
								"_default" );
						}
	
						value = value.toRgbaString();
					}
					try {
						elem.style[ hook ] = value;
					} catch ( e ) {
						// wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'
					}
				}
			};
			jQuery.fx.step[ hook ] = function( fx ) {
				if ( !fx.colorInit ) {
					fx.start = color( fx.elem, hook );
					fx.end = color( fx.end );
					fx.colorInit = true;
				}
				jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
			};
		});
	
	};
	
	color.hook( stepHooks );
	
	jQuery.cssHooks.borderColor = {
		expand: function( value ) {
			var expanded = {};
	
			each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
				expanded[ "border" + part + "Color" ] = value;
			});
			return expanded;
		}
	};
	
	// Basic color names only.
	// Usage of any of the other color names requires adding yourself or including
	// jquery.color.svg-names.js.
	colors = jQuery.Color.names = {
		// 4.1. Basic color keywords
		aqua: "#00ffff",
		black: "#000000",
		blue: "#0000ff",
		fuchsia: "#ff00ff",
		gray: "#808080",
		green: "#008000",
		lime: "#00ff00",
		maroon: "#800000",
		navy: "#000080",
		olive: "#808000",
		purple: "#800080",
		red: "#ff0000",
		silver: "#c0c0c0",
		teal: "#008080",
		white: "#ffffff",
		yellow: "#ffff00",
	
		// 4.2.3. "transparent" color keyword
		transparent: [ null, null, null, 0 ],
	
		_default: "#ffffff"
	};
	
	})( jQuery );
	
	/******************************************************************************/
	/****************************** CLASS ANIMATIONS ******************************/
	/******************************************************************************/
	(function() {
	
	var classAnimationActions = [ "add", "remove", "toggle" ],
		shorthandStyles = {
			border: 1,
			borderBottom: 1,
			borderColor: 1,
			borderLeft: 1,
			borderRight: 1,
			borderTop: 1,
			borderWidth: 1,
			margin: 1,
			padding: 1
		};
	
	$.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function( _, prop ) {
		$.fx.step[ prop ] = function( fx ) {
			if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
				jQuery.style( fx.elem, prop, fx.end );
				fx.setAttr = true;
			}
		};
	});
	
	function getElementStyles( elem ) {
		var key, len,
			style = elem.ownerDocument.defaultView ?
				elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :
				elem.currentStyle,
			styles = {};
	
		if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
			len = style.length;
			while ( len-- ) {
				key = style[ len ];
				if ( typeof style[ key ] === "string" ) {
					styles[ $.camelCase( key ) ] = style[ key ];
				}
			}
		// support: Opera, IE <9
		} else {
			for ( key in style ) {
				if ( typeof style[ key ] === "string" ) {
					styles[ key ] = style[ key ];
				}
			}
		}
	
		return styles;
	}
	
	function styleDifference( oldStyle, newStyle ) {
		var diff = {},
			name, value;
	
		for ( name in newStyle ) {
			value = newStyle[ name ];
			if ( oldStyle[ name ] !== value ) {
				if ( !shorthandStyles[ name ] ) {
					if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
						diff[ name ] = value;
					}
				}
			}
		}
	
		return diff;
	}
	
	// support: jQuery <1.8
	if ( !$.fn.addBack ) {
		$.fn.addBack = function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		};
	}
	
	$.effects.animateClass = function( value, duration, easing, callback ) {
		var o = $.speed( duration, easing, callback );
	
		return this.queue( function() {
			var animated = $( this ),
				baseClass = animated.attr( "class" ) || "",
				applyClassChange,
				allAnimations = o.children ? animated.find( "*" ).addBack() : animated;
	
			// map the animated objects to store the original styles.
			allAnimations = allAnimations.map(function() {
				var el = $( this );
				return {
					el: el,
					start: getElementStyles( this )
				};
			});
	
			// apply class change
			applyClassChange = function() {
				$.each( classAnimationActions, function(i, action) {
					if ( value[ action ] ) {
						animated[ action + "Class" ]( value[ action ] );
					}
				});
			};
			applyClassChange();
	
			// map all animated objects again - calculate new styles and diff
			allAnimations = allAnimations.map(function() {
				this.end = getElementStyles( this.el[ 0 ] );
				this.diff = styleDifference( this.start, this.end );
				return this;
			});
	
			// apply original class
			animated.attr( "class", baseClass );
	
			// map all animated objects again - this time collecting a promise
			allAnimations = allAnimations.map(function() {
				var styleInfo = this,
					dfd = $.Deferred(),
					opts = $.extend({}, o, {
						queue: false,
						complete: function() {
							dfd.resolve( styleInfo );
						}
					});
	
				this.el.animate( this.diff, opts );
				return dfd.promise();
			});
	
			// once all animations have completed:
			$.when.apply( $, allAnimations.get() ).done(function() {
	
				// set the final class
				applyClassChange();
	
				// for each animated element,
				// clear all css properties that were animated
				$.each( arguments, function() {
					var el = this.el;
					$.each( this.diff, function(key) {
						el.css( key, "" );
					});
				});
	
				// this is guarnteed to be there if you use jQuery.speed()
				// it also handles dequeuing the next anim...
				o.complete.call( animated[ 0 ] );
			});
		});
	};
	
	$.fn.extend({
		addClass: (function( orig ) {
			return function( classNames, speed, easing, callback ) {
				return speed ?
					$.effects.animateClass.call( this,
						{ add: classNames }, speed, easing, callback ) :
					orig.apply( this, arguments );
			};
		})( $.fn.addClass ),
	
		removeClass: (function( orig ) {
			return function( classNames, speed, easing, callback ) {
				return arguments.length > 1 ?
					$.effects.animateClass.call( this,
						{ remove: classNames }, speed, easing, callback ) :
					orig.apply( this, arguments );
			};
		})( $.fn.removeClass ),
	
		toggleClass: (function( orig ) {
			return function( classNames, force, speed, easing, callback ) {
				if ( typeof force === "boolean" || force === undefined ) {
					if ( !speed ) {
						// without speed parameter
						return orig.apply( this, arguments );
					} else {
						return $.effects.animateClass.call( this,
							(force ? { add: classNames } : { remove: classNames }),
							speed, easing, callback );
					}
				} else {
					// without force parameter
					return $.effects.animateClass.call( this,
						{ toggle: classNames }, force, speed, easing );
				}
			};
		})( $.fn.toggleClass ),
	
		switchClass: function( remove, add, speed, easing, callback) {
			return $.effects.animateClass.call( this, {
				add: add,
				remove: remove
			}, speed, easing, callback );
		}
	});
	
	})();
	
	/******************************************************************************/
	/*********************************** EFFECTS **********************************/
	/******************************************************************************/
	
	(function() {
	
	$.extend( $.effects, {
		version: "1.11.4",
	
		// Saves a set of properties in a data storage
		save: function( element, set ) {
			for ( var i = 0; i < set.length; i++ ) {
				if ( set[ i ] !== null ) {
					element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
				}
			}
		},
	
		// Restores a set of previously saved properties from a data storage
		restore: function( element, set ) {
			var val, i;
			for ( i = 0; i < set.length; i++ ) {
				if ( set[ i ] !== null ) {
					val = element.data( dataSpace + set[ i ] );
					// support: jQuery 1.6.2
					// http://bugs.jquery.com/ticket/9917
					// jQuery 1.6.2 incorrectly returns undefined for any falsy value.
					// We can't differentiate between "" and 0 here, so we just assume
					// empty string since it's likely to be a more common value...
					if ( val === undefined ) {
						val = "";
					}
					element.css( set[ i ], val );
				}
			}
		},
	
		setMode: function( el, mode ) {
			if (mode === "toggle") {
				mode = el.is( ":hidden" ) ? "show" : "hide";
			}
			return mode;
		},
	
		// Translates a [top,left] array into a baseline value
		// this should be a little more flexible in the future to handle a string & hash
		getBaseline: function( origin, original ) {
			var y, x;
			switch ( origin[ 0 ] ) {
				case "top": y = 0; break;
				case "middle": y = 0.5; break;
				case "bottom": y = 1; break;
				default: y = origin[ 0 ] / original.height;
			}
			switch ( origin[ 1 ] ) {
				case "left": x = 0; break;
				case "center": x = 0.5; break;
				case "right": x = 1; break;
				default: x = origin[ 1 ] / original.width;
			}
			return {
				x: x,
				y: y
			};
		},
	
		// Wraps the element around a wrapper that copies position properties
		createWrapper: function( element ) {
	
			// if the element is already wrapped, return it
			if ( element.parent().is( ".ui-effects-wrapper" )) {
				return element.parent();
			}
	
			// wrap the element
			var props = {
					width: element.outerWidth(true),
					height: element.outerHeight(true),
					"float": element.css( "float" )
				},
				wrapper = $( "<div></div>" )
					.addClass( "ui-effects-wrapper" )
					.css({
						fontSize: "100%",
						background: "transparent",
						border: "none",
						margin: 0,
						padding: 0
					}),
				// Store the size in case width/height are defined in % - Fixes #5245
				size = {
					width: element.width(),
					height: element.height()
				},
				active = document.activeElement;
	
			// support: Firefox
			// Firefox incorrectly exposes anonymous content
			// https://bugzilla.mozilla.org/show_bug.cgi?id=561664
			try {
				active.id;
			} catch ( e ) {
				active = document.body;
			}
	
			element.wrap( wrapper );
	
			// Fixes #7595 - Elements lose focus when wrapped.
			if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
				$( active ).focus();
			}
	
			wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element
	
			// transfer positioning properties to the wrapper
			if ( element.css( "position" ) === "static" ) {
				wrapper.css({ position: "relative" });
				element.css({ position: "relative" });
			} else {
				$.extend( props, {
					position: element.css( "position" ),
					zIndex: element.css( "z-index" )
				});
				$.each([ "top", "left", "bottom", "right" ], function(i, pos) {
					props[ pos ] = element.css( pos );
					if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
						props[ pos ] = "auto";
					}
				});
				element.css({
					position: "relative",
					top: 0,
					left: 0,
					right: "auto",
					bottom: "auto"
				});
			}
			element.css(size);
	
			return wrapper.css( props ).show();
		},
	
		removeWrapper: function( element ) {
			var active = document.activeElement;
	
			if ( element.parent().is( ".ui-effects-wrapper" ) ) {
				element.parent().replaceWith( element );
	
				// Fixes #7595 - Elements lose focus when wrapped.
				if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
					$( active ).focus();
				}
			}
	
			return element;
		},
	
		setTransition: function( element, list, factor, value ) {
			value = value || {};
			$.each( list, function( i, x ) {
				var unit = element.cssUnit( x );
				if ( unit[ 0 ] > 0 ) {
					value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
				}
			});
			return value;
		}
	});
	
	// return an effect options object for the given parameters:
	function _normalizeArguments( effect, options, speed, callback ) {
	
		// allow passing all options as the first parameter
		if ( $.isPlainObject( effect ) ) {
			options = effect;
			effect = effect.effect;
		}
	
		// convert to an object
		effect = { effect: effect };
	
		// catch (effect, null, ...)
		if ( options == null ) {
			options = {};
		}
	
		// catch (effect, callback)
		if ( $.isFunction( options ) ) {
			callback = options;
			speed = null;
			options = {};
		}
	
		// catch (effect, speed, ?)
		if ( typeof options === "number" || $.fx.speeds[ options ] ) {
			callback = speed;
			speed = options;
			options = {};
		}
	
		// catch (effect, options, callback)
		if ( $.isFunction( speed ) ) {
			callback = speed;
			speed = null;
		}
	
		// add options to effect
		if ( options ) {
			$.extend( effect, options );
		}
	
		speed = speed || options.duration;
		effect.duration = $.fx.off ? 0 :
			typeof speed === "number" ? speed :
			speed in $.fx.speeds ? $.fx.speeds[ speed ] :
			$.fx.speeds._default;
	
		effect.complete = callback || options.complete;
	
		return effect;
	}
	
	function standardAnimationOption( option ) {
		// Valid standard speeds (nothing, number, named speed)
		if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {
			return true;
		}
	
		// Invalid strings - treat as "normal" speed
		if ( typeof option === "string" && !$.effects.effect[ option ] ) {
			return true;
		}
	
		// Complete callback
		if ( $.isFunction( option ) ) {
			return true;
		}
	
		// Options hash (but not naming an effect)
		if ( typeof option === "object" && !option.effect ) {
			return true;
		}
	
		// Didn't match any standard API
		return false;
	}
	
	$.fn.extend({
		effect: function( /* effect, options, speed, callback */ ) {
			var args = _normalizeArguments.apply( this, arguments ),
				mode = args.mode,
				queue = args.queue,
				effectMethod = $.effects.effect[ args.effect ];
	
			if ( $.fx.off || !effectMethod ) {
				// delegate to the original method (e.g., .show()) if possible
				if ( mode ) {
					return this[ mode ]( args.duration, args.complete );
				} else {
					return this.each( function() {
						if ( args.complete ) {
							args.complete.call( this );
						}
					});
				}
			}
	
			function run( next ) {
				var elem = $( this ),
					complete = args.complete,
					mode = args.mode;
	
				function done() {
					if ( $.isFunction( complete ) ) {
						complete.call( elem[0] );
					}
					if ( $.isFunction( next ) ) {
						next();
					}
				}
	
				// If the element already has the correct final state, delegate to
				// the core methods so the internal tracking of "olddisplay" works.
				if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {
					elem[ mode ]();
					done();
				} else {
					effectMethod.call( elem[0], args, done );
				}
			}
	
			return queue === false ? this.each( run ) : this.queue( queue || "fx", run );
		},
	
		show: (function( orig ) {
			return function( option ) {
				if ( standardAnimationOption( option ) ) {
					return orig.apply( this, arguments );
				} else {
					var args = _normalizeArguments.apply( this, arguments );
					args.mode = "show";
					return this.effect.call( this, args );
				}
			};
		})( $.fn.show ),
	
		hide: (function( orig ) {
			return function( option ) {
				if ( standardAnimationOption( option ) ) {
					return orig.apply( this, arguments );
				} else {
					var args = _normalizeArguments.apply( this, arguments );
					args.mode = "hide";
					return this.effect.call( this, args );
				}
			};
		})( $.fn.hide ),
	
		toggle: (function( orig ) {
			return function( option ) {
				if ( standardAnimationOption( option ) || typeof option === "boolean" ) {
					return orig.apply( this, arguments );
				} else {
					var args = _normalizeArguments.apply( this, arguments );
					args.mode = "toggle";
					return this.effect.call( this, args );
				}
			};
		})( $.fn.toggle ),
	
		// helper functions
		cssUnit: function(key) {
			var style = this.css( key ),
				val = [];
	
			$.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
				if ( style.indexOf( unit ) > 0 ) {
					val = [ parseFloat( style ), unit ];
				}
			});
			return val;
		}
	});
	
	})();
	
	/******************************************************************************/
	/*********************************** EASING ***********************************/
	/******************************************************************************/
	
	(function() {
	
	// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)
	
	var baseEasings = {};
	
	$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
		baseEasings[ name ] = function( p ) {
			return Math.pow( p, i + 2 );
		};
	});
	
	$.extend( baseEasings, {
		Sine: function( p ) {
			return 1 - Math.cos( p * Math.PI / 2 );
		},
		Circ: function( p ) {
			return 1 - Math.sqrt( 1 - p * p );
		},
		Elastic: function( p ) {
			return p === 0 || p === 1 ? p :
				-Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );
		},
		Back: function( p ) {
			return p * p * ( 3 * p - 2 );
		},
		Bounce: function( p ) {
			var pow2,
				bounce = 4;
	
			while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
			return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
		}
	});
	
	$.each( baseEasings, function( name, easeIn ) {
		$.easing[ "easeIn" + name ] = easeIn;
		$.easing[ "easeOut" + name ] = function( p ) {
			return 1 - easeIn( 1 - p );
		};
		$.easing[ "easeInOut" + name ] = function( p ) {
			return p < 0.5 ?
				easeIn( p * 2 ) / 2 :
				1 - easeIn( p * -2 + 2 ) / 2;
		};
	});
	
	})();
	
	var effect = $.effects;
	
	
	/*!
	 * jQuery UI Effects Blind 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/blind-effect/
	 */
	
	
	var effectBlind = $.effects.effect.blind = function( o, done ) {
		// Create element
		var el = $( this ),
			rvertical = /up|down|vertical/,
			rpositivemotion = /up|left|vertical|horizontal/,
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			direction = o.direction || "up",
			vertical = rvertical.test( direction ),
			ref = vertical ? "height" : "width",
			ref2 = vertical ? "top" : "left",
			motion = rpositivemotion.test( direction ),
			animation = {},
			show = mode === "show",
			wrapper, distance, margin;
	
		// if already wrapped, the wrapper's properties are my property. #6245
		if ( el.parent().is( ".ui-effects-wrapper" ) ) {
			$.effects.save( el.parent(), props );
		} else {
			$.effects.save( el, props );
		}
		el.show();
		wrapper = $.effects.createWrapper( el ).css({
			overflow: "hidden"
		});
	
		distance = wrapper[ ref ]();
		margin = parseFloat( wrapper.css( ref2 ) ) || 0;
	
		animation[ ref ] = show ? distance : 0;
		if ( !motion ) {
			el
				.css( vertical ? "bottom" : "right", 0 )
				.css( vertical ? "top" : "left", "auto" )
				.css({ position: "absolute" });
	
			animation[ ref2 ] = show ? margin : distance + margin;
		}
	
		// start at 0 if we are showing
		if ( show ) {
			wrapper.css( ref, 0 );
			if ( !motion ) {
				wrapper.css( ref2, margin + distance );
			}
		}
	
		// Animate
		wrapper.animate( animation, {
			duration: o.duration,
			easing: o.easing,
			queue: false,
			complete: function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});
	};
	
	
	/*!
	 * jQuery UI Effects Bounce 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/bounce-effect/
	 */
	
	
	var effectBounce = $.effects.effect.bounce = function( o, done ) {
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
	
			// defaults:
			mode = $.effects.setMode( el, o.mode || "effect" ),
			hide = mode === "hide",
			show = mode === "show",
			direction = o.direction || "up",
			distance = o.distance,
			times = o.times || 5,
	
			// number of internal animations
			anims = times * 2 + ( show || hide ? 1 : 0 ),
			speed = o.duration / anims,
			easing = o.easing,
	
			// utility:
			ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
			motion = ( direction === "up" || direction === "left" ),
			i,
			upAnim,
			downAnim,
	
			// we will need to re-assemble the queue to stack our animations in place
			queue = el.queue(),
			queuelen = queue.length;
	
		// Avoid touching opacity to prevent clearType and PNG issues in IE
		if ( show || hide ) {
			props.push( "opacity" );
		}
	
		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el ); // Create Wrapper
	
		// default distance for the BIGGEST bounce is the outer Distance / 3
		if ( !distance ) {
			distance = el[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
		}
	
		if ( show ) {
			downAnim = { opacity: 1 };
			downAnim[ ref ] = 0;
	
			// if we are showing, force opacity 0 and set the initial position
			// then do the "first" animation
			el.css( "opacity", 0 )
				.css( ref, motion ? -distance * 2 : distance * 2 )
				.animate( downAnim, speed, easing );
		}
	
		// start at the smallest distance if we are hiding
		if ( hide ) {
			distance = distance / Math.pow( 2, times - 1 );
		}
	
		downAnim = {};
		downAnim[ ref ] = 0;
		// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
		for ( i = 0; i < times; i++ ) {
			upAnim = {};
			upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;
	
			el.animate( upAnim, speed, easing )
				.animate( downAnim, speed, easing );
	
			distance = hide ? distance * 2 : distance / 2;
		}
	
		// Last Bounce when Hiding
		if ( hide ) {
			upAnim = { opacity: 0 };
			upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;
	
			el.animate( upAnim, speed, easing );
		}
	
		el.queue(function() {
			if ( hide ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		});
	
		// inject all the animations we just queued to be first in line (after "inprogress")
		if ( queuelen > 1) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
		}
		el.dequeue();
	
	};
	
	
	/*!
	 * jQuery UI Effects Clip 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/clip-effect/
	 */
	
	
	var effectClip = $.effects.effect.clip = function( o, done ) {
		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",
			direction = o.direction || "vertical",
			vert = direction === "vertical",
			size = vert ? "height" : "width",
			position = vert ? "top" : "left",
			animation = {},
			wrapper, animate, distance;
	
		// Save & Show
		$.effects.save( el, props );
		el.show();
	
		// Create Wrapper
		wrapper = $.effects.createWrapper( el ).css({
			overflow: "hidden"
		});
		animate = ( el[0].tagName === "IMG" ) ? wrapper : el;
		distance = animate[ size ]();
	
		// Shift
		if ( show ) {
			animate.css( size, 0 );
			animate.css( position, distance / 2 );
		}
	
		// Create Animation Object:
		animation[ size ] = show ? distance : 0;
		animation[ position ] = show ? 0 : distance / 2;
	
		// Animate
		animate.animate( animation, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( !show ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});
	
	};
	
	
	/*!
	 * jQuery UI Effects Drop 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/drop-effect/
	 */
	
	
	var effectDrop = $.effects.effect.drop = function( o, done ) {
	
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",
			direction = o.direction || "left",
			ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
			motion = ( direction === "up" || direction === "left" ) ? "pos" : "neg",
			animation = {
				opacity: show ? 1 : 0
			},
			distance;
	
		// Adjust
		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el );
	
		distance = o.distance || el[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ) / 2;
	
		if ( show ) {
			el
				.css( "opacity", 0 )
				.css( ref, motion === "pos" ? -distance : distance );
		}
	
		// Animation
		animation[ ref ] = ( show ?
			( motion === "pos" ? "+=" : "-=" ) :
			( motion === "pos" ? "-=" : "+=" ) ) +
			distance;
	
		// Animate
		el.animate( animation, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});
	};
	
	
	/*!
	 * jQuery UI Effects Explode 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/explode-effect/
	 */
	
	
	var effectExplode = $.effects.effect.explode = function( o, done ) {
	
		var rows = o.pieces ? Math.round( Math.sqrt( o.pieces ) ) : 3,
			cells = rows,
			el = $( this ),
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",
	
			// show and then visibility:hidden the element before calculating offset
			offset = el.show().css( "visibility", "hidden" ).offset(),
	
			// width and height of a piece
			width = Math.ceil( el.outerWidth() / cells ),
			height = Math.ceil( el.outerHeight() / rows ),
			pieces = [],
	
			// loop
			i, j, left, top, mx, my;
	
		// children animate complete:
		function childComplete() {
			pieces.push( this );
			if ( pieces.length === rows * cells ) {
				animComplete();
			}
		}
	
		// clone the element for each row and cell.
		for ( i = 0; i < rows ; i++ ) { // ===>
			top = offset.top + i * height;
			my = i - ( rows - 1 ) / 2 ;
	
			for ( j = 0; j < cells ; j++ ) { // |||
				left = offset.left + j * width;
				mx = j - ( cells - 1 ) / 2 ;
	
				// Create a clone of the now hidden main element that will be absolute positioned
				// within a wrapper div off the -left and -top equal to size of our pieces
				el
					.clone()
					.appendTo( "body" )
					.wrap( "<div></div>" )
					.css({
						position: "absolute",
						visibility: "visible",
						left: -j * width,
						top: -i * height
					})
	
				// select the wrapper - make it overflow: hidden and absolute positioned based on
				// where the original was located +left and +top equal to the size of pieces
					.parent()
					.addClass( "ui-effects-explode" )
					.css({
						position: "absolute",
						overflow: "hidden",
						width: width,
						height: height,
						left: left + ( show ? mx * width : 0 ),
						top: top + ( show ? my * height : 0 ),
						opacity: show ? 0 : 1
					}).animate({
						left: left + ( show ? 0 : mx * width ),
						top: top + ( show ? 0 : my * height ),
						opacity: show ? 1 : 0
					}, o.duration || 500, o.easing, childComplete );
			}
		}
	
		function animComplete() {
			el.css({
				visibility: "visible"
			});
			$( pieces ).remove();
			if ( !show ) {
				el.hide();
			}
			done();
		}
	};
	
	
	/*!
	 * jQuery UI Effects Fade 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/fade-effect/
	 */
	
	
	var effectFade = $.effects.effect.fade = function( o, done ) {
		var el = $( this ),
			mode = $.effects.setMode( el, o.mode || "toggle" );
	
		el.animate({
			opacity: mode
		}, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: done
		});
	};
	
	
	/*!
	 * jQuery UI Effects Fold 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/fold-effect/
	 */
	
	
	var effectFold = $.effects.effect.fold = function( o, done ) {
	
		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",
			hide = mode === "hide",
			size = o.size || 15,
			percent = /([0-9]+)%/.exec( size ),
			horizFirst = !!o.horizFirst,
			widthFirst = show !== horizFirst,
			ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ],
			duration = o.duration / 2,
			wrapper, distance,
			animation1 = {},
			animation2 = {};
	
		$.effects.save( el, props );
		el.show();
	
		// Create Wrapper
		wrapper = $.effects.createWrapper( el ).css({
			overflow: "hidden"
		});
		distance = widthFirst ?
			[ wrapper.width(), wrapper.height() ] :
			[ wrapper.height(), wrapper.width() ];
	
		if ( percent ) {
			size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
		}
		if ( show ) {
			wrapper.css( horizFirst ? {
				height: 0,
				width: size
			} : {
				height: size,
				width: 0
			});
		}
	
		// Animation
		animation1[ ref[ 0 ] ] = show ? distance[ 0 ] : size;
		animation2[ ref[ 1 ] ] = show ? distance[ 1 ] : 0;
	
		// Animate
		wrapper
			.animate( animation1, duration, o.easing )
			.animate( animation2, duration, o.easing, function() {
				if ( hide ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			});
	
	};
	
	
	/*!
	 * jQuery UI Effects Highlight 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/highlight-effect/
	 */
	
	
	var effectHighlight = $.effects.effect.highlight = function( o, done ) {
		var elem = $( this ),
			props = [ "backgroundImage", "backgroundColor", "opacity" ],
			mode = $.effects.setMode( elem, o.mode || "show" ),
			animation = {
				backgroundColor: elem.css( "backgroundColor" )
			};
	
		if (mode === "hide") {
			animation.opacity = 0;
		}
	
		$.effects.save( elem, props );
	
		elem
			.show()
			.css({
				backgroundImage: "none",
				backgroundColor: o.color || "#ffff99"
			})
			.animate( animation, {
				queue: false,
				duration: o.duration,
				easing: o.easing,
				complete: function() {
					if ( mode === "hide" ) {
						elem.hide();
					}
					$.effects.restore( elem, props );
					done();
				}
			});
	};
	
	
	/*!
	 * jQuery UI Effects Size 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/size-effect/
	 */
	
	
	var effectSize = $.effects.effect.size = function( o, done ) {
	
		// Create element
		var original, baseline, factor,
			el = $( this ),
			props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ],
	
			// Always restore
			props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ],
	
			// Copy for children
			props2 = [ "width", "height", "overflow" ],
			cProps = [ "fontSize" ],
			vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
			hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],
	
			// Set options
			mode = $.effects.setMode( el, o.mode || "effect" ),
			restore = o.restore || mode !== "effect",
			scale = o.scale || "both",
			origin = o.origin || [ "middle", "center" ],
			position = el.css( "position" ),
			props = restore ? props0 : props1,
			zero = {
				height: 0,
				width: 0,
				outerHeight: 0,
				outerWidth: 0
			};
	
		if ( mode === "show" ) {
			el.show();
		}
		original = {
			height: el.height(),
			width: el.width(),
			outerHeight: el.outerHeight(),
			outerWidth: el.outerWidth()
		};
	
		if ( o.mode === "toggle" && mode === "show" ) {
			el.from = o.to || zero;
			el.to = o.from || original;
		} else {
			el.from = o.from || ( mode === "show" ? zero : original );
			el.to = o.to || ( mode === "hide" ? zero : original );
		}
	
		// Set scaling factor
		factor = {
			from: {
				y: el.from.height / original.height,
				x: el.from.width / original.width
			},
			to: {
				y: el.to.height / original.height,
				x: el.to.width / original.width
			}
		};
	
		// Scale the css box
		if ( scale === "box" || scale === "both" ) {
	
			// Vertical props scaling
			if ( factor.from.y !== factor.to.y ) {
				props = props.concat( vProps );
				el.from = $.effects.setTransition( el, vProps, factor.from.y, el.from );
				el.to = $.effects.setTransition( el, vProps, factor.to.y, el.to );
			}
	
			// Horizontal props scaling
			if ( factor.from.x !== factor.to.x ) {
				props = props.concat( hProps );
				el.from = $.effects.setTransition( el, hProps, factor.from.x, el.from );
				el.to = $.effects.setTransition( el, hProps, factor.to.x, el.to );
			}
		}
	
		// Scale the content
		if ( scale === "content" || scale === "both" ) {
	
			// Vertical props scaling
			if ( factor.from.y !== factor.to.y ) {
				props = props.concat( cProps ).concat( props2 );
				el.from = $.effects.setTransition( el, cProps, factor.from.y, el.from );
				el.to = $.effects.setTransition( el, cProps, factor.to.y, el.to );
			}
		}
	
		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el );
		el.css( "overflow", "hidden" ).css( el.from );
	
		// Adjust
		if (origin) { // Calculate baseline shifts
			baseline = $.effects.getBaseline( origin, original );
			el.from.top = ( original.outerHeight - el.outerHeight() ) * baseline.y;
			el.from.left = ( original.outerWidth - el.outerWidth() ) * baseline.x;
			el.to.top = ( original.outerHeight - el.to.outerHeight ) * baseline.y;
			el.to.left = ( original.outerWidth - el.to.outerWidth ) * baseline.x;
		}
		el.css( el.from ); // set top & left
	
		// Animate
		if ( scale === "content" || scale === "both" ) { // Scale the children
	
			// Add margins/font-size
			vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps);
			hProps = hProps.concat([ "marginLeft", "marginRight" ]);
			props2 = props0.concat(vProps).concat(hProps);
	
			el.find( "*[width]" ).each( function() {
				var child = $( this ),
					c_original = {
						height: child.height(),
						width: child.width(),
						outerHeight: child.outerHeight(),
						outerWidth: child.outerWidth()
					};
				if (restore) {
					$.effects.save(child, props2);
				}
	
				child.from = {
					height: c_original.height * factor.from.y,
					width: c_original.width * factor.from.x,
					outerHeight: c_original.outerHeight * factor.from.y,
					outerWidth: c_original.outerWidth * factor.from.x
				};
				child.to = {
					height: c_original.height * factor.to.y,
					width: c_original.width * factor.to.x,
					outerHeight: c_original.height * factor.to.y,
					outerWidth: c_original.width * factor.to.x
				};
	
				// Vertical props scaling
				if ( factor.from.y !== factor.to.y ) {
					child.from = $.effects.setTransition( child, vProps, factor.from.y, child.from );
					child.to = $.effects.setTransition( child, vProps, factor.to.y, child.to );
				}
	
				// Horizontal props scaling
				if ( factor.from.x !== factor.to.x ) {
					child.from = $.effects.setTransition( child, hProps, factor.from.x, child.from );
					child.to = $.effects.setTransition( child, hProps, factor.to.x, child.to );
				}
	
				// Animate children
				child.css( child.from );
				child.animate( child.to, o.duration, o.easing, function() {
	
					// Restore children
					if ( restore ) {
						$.effects.restore( child, props2 );
					}
				});
			});
		}
	
		// Animate
		el.animate( el.to, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( el.to.opacity === 0 ) {
					el.css( "opacity", el.from.opacity );
				}
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				if ( !restore ) {
	
					// we need to calculate our new positioning based on the scaling
					if ( position === "static" ) {
						el.css({
							position: "relative",
							top: el.to.top,
							left: el.to.left
						});
					} else {
						$.each([ "top", "left" ], function( idx, pos ) {
							el.css( pos, function( _, str ) {
								var val = parseInt( str, 10 ),
									toRef = idx ? el.to.left : el.to.top;
	
								// if original was "auto", recalculate the new value from wrapper
								if ( str === "auto" ) {
									return toRef + "px";
								}
	
								return val + toRef + "px";
							});
						});
					}
				}
	
				$.effects.removeWrapper( el );
				done();
			}
		});
	
	};
	
	
	/*!
	 * jQuery UI Effects Scale 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/scale-effect/
	 */
	
	
	var effectScale = $.effects.effect.scale = function( o, done ) {
	
		// Create element
		var el = $( this ),
			options = $.extend( true, {}, o ),
			mode = $.effects.setMode( el, o.mode || "effect" ),
			percent = parseInt( o.percent, 10 ) ||
				( parseInt( o.percent, 10 ) === 0 ? 0 : ( mode === "hide" ? 0 : 100 ) ),
			direction = o.direction || "both",
			origin = o.origin,
			original = {
				height: el.height(),
				width: el.width(),
				outerHeight: el.outerHeight(),
				outerWidth: el.outerWidth()
			},
			factor = {
				y: direction !== "horizontal" ? (percent / 100) : 1,
				x: direction !== "vertical" ? (percent / 100) : 1
			};
	
		// We are going to pass this effect to the size effect:
		options.effect = "size";
		options.queue = false;
		options.complete = done;
	
		// Set default origin and restore for show/hide
		if ( mode !== "effect" ) {
			options.origin = origin || [ "middle", "center" ];
			options.restore = true;
		}
	
		options.from = o.from || ( mode === "show" ? {
			height: 0,
			width: 0,
			outerHeight: 0,
			outerWidth: 0
		} : original );
		options.to = {
			height: original.height * factor.y,
			width: original.width * factor.x,
			outerHeight: original.outerHeight * factor.y,
			outerWidth: original.outerWidth * factor.x
		};
	
		// Fade option to support puff
		if ( options.fade ) {
			if ( mode === "show" ) {
				options.from.opacity = 0;
				options.to.opacity = 1;
			}
			if ( mode === "hide" ) {
				options.from.opacity = 1;
				options.to.opacity = 0;
			}
		}
	
		// Animate
		el.effect( options );
	
	};
	
	
	/*!
	 * jQuery UI Effects Puff 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/puff-effect/
	 */
	
	
	var effectPuff = $.effects.effect.puff = function( o, done ) {
		var elem = $( this ),
			mode = $.effects.setMode( elem, o.mode || "hide" ),
			hide = mode === "hide",
			percent = parseInt( o.percent, 10 ) || 150,
			factor = percent / 100,
			original = {
				height: elem.height(),
				width: elem.width(),
				outerHeight: elem.outerHeight(),
				outerWidth: elem.outerWidth()
			};
	
		$.extend( o, {
			effect: "scale",
			queue: false,
			fade: true,
			mode: mode,
			complete: done,
			percent: hide ? percent : 100,
			from: hide ?
				original :
				{
					height: original.height * factor,
					width: original.width * factor,
					outerHeight: original.outerHeight * factor,
					outerWidth: original.outerWidth * factor
				}
		});
	
		elem.effect( o );
	};
	
	
	/*!
	 * jQuery UI Effects Pulsate 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/pulsate-effect/
	 */
	
	
	var effectPulsate = $.effects.effect.pulsate = function( o, done ) {
		var elem = $( this ),
			mode = $.effects.setMode( elem, o.mode || "show" ),
			show = mode === "show",
			hide = mode === "hide",
			showhide = ( show || mode === "hide" ),
	
			// showing or hiding leaves of the "last" animation
			anims = ( ( o.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
			duration = o.duration / anims,
			animateTo = 0,
			queue = elem.queue(),
			queuelen = queue.length,
			i;
	
		if ( show || !elem.is(":visible")) {
			elem.css( "opacity", 0 ).show();
			animateTo = 1;
		}
	
		// anims - 1 opacity "toggles"
		for ( i = 1; i < anims; i++ ) {
			elem.animate({
				opacity: animateTo
			}, duration, o.easing );
			animateTo = 1 - animateTo;
		}
	
		elem.animate({
			opacity: animateTo
		}, duration, o.easing);
	
		elem.queue(function() {
			if ( hide ) {
				elem.hide();
			}
			done();
		});
	
		// We just queued up "anims" animations, we need to put them next in the queue
		if ( queuelen > 1 ) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
		}
		elem.dequeue();
	};
	
	
	/*!
	 * jQuery UI Effects Shake 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/shake-effect/
	 */
	
	
	var effectShake = $.effects.effect.shake = function( o, done ) {
	
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "effect" ),
			direction = o.direction || "left",
			distance = o.distance || 20,
			times = o.times || 3,
			anims = times * 2 + 1,
			speed = Math.round( o.duration / anims ),
			ref = (direction === "up" || direction === "down") ? "top" : "left",
			positiveMotion = (direction === "up" || direction === "left"),
			animation = {},
			animation1 = {},
			animation2 = {},
			i,
	
			// we will need to re-assemble the queue to stack our animations in place
			queue = el.queue(),
			queuelen = queue.length;
	
		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el );
	
		// Animation
		animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
		animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
		animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;
	
		// Animate
		el.animate( animation, speed, o.easing );
	
		// Shakes
		for ( i = 1; i < times; i++ ) {
			el.animate( animation1, speed, o.easing ).animate( animation2, speed, o.easing );
		}
		el
			.animate( animation1, speed, o.easing )
			.animate( animation, speed / 2, o.easing )
			.queue(function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			});
	
		// inject all the animations we just queued to be first in line (after "inprogress")
		if ( queuelen > 1) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
		}
		el.dequeue();
	
	};
	
	
	/*!
	 * jQuery UI Effects Slide 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/slide-effect/
	 */
	
	
	var effectSlide = $.effects.effect.slide = function( o, done ) {
	
		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "width", "height" ],
			mode = $.effects.setMode( el, o.mode || "show" ),
			show = mode === "show",
			direction = o.direction || "left",
			ref = (direction === "up" || direction === "down") ? "top" : "left",
			positiveMotion = (direction === "up" || direction === "left"),
			distance,
			animation = {};
	
		// Adjust
		$.effects.save( el, props );
		el.show();
		distance = o.distance || el[ ref === "top" ? "outerHeight" : "outerWidth" ]( true );
	
		$.effects.createWrapper( el ).css({
			overflow: "hidden"
		});
	
		if ( show ) {
			el.css( ref, positiveMotion ? (isNaN(distance) ? "-" + distance : -distance) : distance );
		}
	
		// Animation
		animation[ ref ] = ( show ?
			( positiveMotion ? "+=" : "-=") :
			( positiveMotion ? "-=" : "+=")) +
			distance;
	
		// Animate
		el.animate( animation, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});
	};
	
	
	/*!
	 * jQuery UI Effects Transfer 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/transfer-effect/
	 */
	
	
	var effectTransfer = $.effects.effect.transfer = function( o, done ) {
		var elem = $( this ),
			target = $( o.to ),
			targetFixed = target.css( "position" ) === "fixed",
			body = $("body"),
			fixTop = targetFixed ? body.scrollTop() : 0,
			fixLeft = targetFixed ? body.scrollLeft() : 0,
			endPosition = target.offset(),
			animation = {
				top: endPosition.top - fixTop,
				left: endPosition.left - fixLeft,
				height: target.innerHeight(),
				width: target.innerWidth()
			},
			startPosition = elem.offset(),
			transfer = $( "<div class='ui-effects-transfer'></div>" )
				.appendTo( document.body )
				.addClass( o.className )
				.css({
					top: startPosition.top - fixTop,
					left: startPosition.left - fixLeft,
					height: elem.innerHeight(),
					width: elem.innerWidth(),
					position: targetFixed ? "fixed" : "absolute"
				})
				.animate( animation, o.duration, o.easing, function() {
					transfer.remove();
					done();
				});
	};
	
	
	/*!
	 * jQuery UI Progressbar 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/progressbar/
	 */
	
	
	var progressbar = $.widget( "ui.progressbar", {
		version: "1.11.4",
		options: {
			max: 100,
			value: 0,
	
			change: null,
			complete: null
		},
	
		min: 0,
	
		_create: function() {
			// Constrain initial value
			this.oldValue = this.options.value = this._constrainedValue();
	
			this.element
				.addClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
				.attr({
					// Only set static values, aria-valuenow and aria-valuemax are
					// set inside _refreshValue()
					role: "progressbar",
					"aria-valuemin": this.min
				});
	
			this.valueDiv = $( "<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>" )
				.appendTo( this.element );
	
			this._refreshValue();
		},
	
		_destroy: function() {
			this.element
				.removeClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
				.removeAttr( "role" )
				.removeAttr( "aria-valuemin" )
				.removeAttr( "aria-valuemax" )
				.removeAttr( "aria-valuenow" );
	
			this.valueDiv.remove();
		},
	
		value: function( newValue ) {
			if ( newValue === undefined ) {
				return this.options.value;
			}
	
			this.options.value = this._constrainedValue( newValue );
			this._refreshValue();
		},
	
		_constrainedValue: function( newValue ) {
			if ( newValue === undefined ) {
				newValue = this.options.value;
			}
	
			this.indeterminate = newValue === false;
	
			// sanitize value
			if ( typeof newValue !== "number" ) {
				newValue = 0;
			}
	
			return this.indeterminate ? false :
				Math.min( this.options.max, Math.max( this.min, newValue ) );
		},
	
		_setOptions: function( options ) {
			// Ensure "value" option is set after other values (like max)
			var value = options.value;
			delete options.value;
	
			this._super( options );
	
			this.options.value = this._constrainedValue( value );
			this._refreshValue();
		},
	
		_setOption: function( key, value ) {
			if ( key === "max" ) {
				// Don't allow a max less than min
				value = Math.max( this.min, value );
			}
			if ( key === "disabled" ) {
				this.element
					.toggleClass( "ui-state-disabled", !!value )
					.attr( "aria-disabled", value );
			}
			this._super( key, value );
		},
	
		_percentage: function() {
			return this.indeterminate ? 100 : 100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
		},
	
		_refreshValue: function() {
			var value = this.options.value,
				percentage = this._percentage();
	
			this.valueDiv
				.toggle( this.indeterminate || value > this.min )
				.toggleClass( "ui-corner-right", value === this.options.max )
				.width( percentage.toFixed(0) + "%" );
	
			this.element.toggleClass( "ui-progressbar-indeterminate", this.indeterminate );
	
			if ( this.indeterminate ) {
				this.element.removeAttr( "aria-valuenow" );
				if ( !this.overlayDiv ) {
					this.overlayDiv = $( "<div class='ui-progressbar-overlay'></div>" ).appendTo( this.valueDiv );
				}
			} else {
				this.element.attr({
					"aria-valuemax": this.options.max,
					"aria-valuenow": value
				});
				if ( this.overlayDiv ) {
					this.overlayDiv.remove();
					this.overlayDiv = null;
				}
			}
	
			if ( this.oldValue !== value ) {
				this.oldValue = value;
				this._trigger( "change" );
			}
			if ( value === this.options.max ) {
				this._trigger( "complete" );
			}
		}
	});
	
	
	/*!
	 * jQuery UI Selectable 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/selectable/
	 */
	
	
	var selectable = $.widget("ui.selectable", $.ui.mouse, {
		version: "1.11.4",
		options: {
			appendTo: "body",
			autoRefresh: true,
			distance: 0,
			filter: "*",
			tolerance: "touch",
	
			// callbacks
			selected: null,
			selecting: null,
			start: null,
			stop: null,
			unselected: null,
			unselecting: null
		},
		_create: function() {
			var selectees,
				that = this;
	
			this.element.addClass("ui-selectable");
	
			this.dragged = false;
	
			// cache selectee children based on filter
			this.refresh = function() {
				selectees = $(that.options.filter, that.element[0]);
				selectees.addClass("ui-selectee");
				selectees.each(function() {
					var $this = $(this),
						pos = $this.offset();
					$.data(this, "selectable-item", {
						element: this,
						$element: $this,
						left: pos.left,
						top: pos.top,
						right: pos.left + $this.outerWidth(),
						bottom: pos.top + $this.outerHeight(),
						startselected: false,
						selected: $this.hasClass("ui-selected"),
						selecting: $this.hasClass("ui-selecting"),
						unselecting: $this.hasClass("ui-unselecting")
					});
				});
			};
			this.refresh();
	
			this.selectees = selectees.addClass("ui-selectee");
	
			this._mouseInit();
	
			this.helper = $("<div class='ui-selectable-helper'></div>");
		},
	
		_destroy: function() {
			this.selectees
				.removeClass("ui-selectee")
				.removeData("selectable-item");
			this.element
				.removeClass("ui-selectable ui-selectable-disabled");
			this._mouseDestroy();
		},
	
		_mouseStart: function(event) {
			var that = this,
				options = this.options;
	
			this.opos = [ event.pageX, event.pageY ];
	
			if (this.options.disabled) {
				return;
			}
	
			this.selectees = $(options.filter, this.element[0]);
	
			this._trigger("start", event);
	
			$(options.appendTo).append(this.helper);
			// position helper (lasso)
			this.helper.css({
				"left": event.pageX,
				"top": event.pageY,
				"width": 0,
				"height": 0
			});
	
			if (options.autoRefresh) {
				this.refresh();
			}
	
			this.selectees.filter(".ui-selected").each(function() {
				var selectee = $.data(this, "selectable-item");
				selectee.startselected = true;
				if (!event.metaKey && !event.ctrlKey) {
					selectee.$element.removeClass("ui-selected");
					selectee.selected = false;
					selectee.$element.addClass("ui-unselecting");
					selectee.unselecting = true;
					// selectable UNSELECTING callback
					that._trigger("unselecting", event, {
						unselecting: selectee.element
					});
				}
			});
	
			$(event.target).parents().addBack().each(function() {
				var doSelect,
					selectee = $.data(this, "selectable-item");
				if (selectee) {
					doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass("ui-selected");
					selectee.$element
						.removeClass(doSelect ? "ui-unselecting" : "ui-selected")
						.addClass(doSelect ? "ui-selecting" : "ui-unselecting");
					selectee.unselecting = !doSelect;
					selectee.selecting = doSelect;
					selectee.selected = doSelect;
					// selectable (UN)SELECTING callback
					if (doSelect) {
						that._trigger("selecting", event, {
							selecting: selectee.element
						});
					} else {
						that._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
					return false;
				}
			});
	
		},
	
		_mouseDrag: function(event) {
	
			this.dragged = true;
	
			if (this.options.disabled) {
				return;
			}
	
			var tmp,
				that = this,
				options = this.options,
				x1 = this.opos[0],
				y1 = this.opos[1],
				x2 = event.pageX,
				y2 = event.pageY;
	
			if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
			if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }
			this.helper.css({ left: x1, top: y1, width: x2 - x1, height: y2 - y1 });
	
			this.selectees.each(function() {
				var selectee = $.data(this, "selectable-item"),
					hit = false;
	
				//prevent helper from being selected if appendTo: selectable
				if (!selectee || selectee.element === that.element[0]) {
					return;
				}
	
				if (options.tolerance === "touch") {
					hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );
				} else if (options.tolerance === "fit") {
					hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
				}
	
				if (hit) {
					// SELECT
					if (selectee.selected) {
						selectee.$element.removeClass("ui-selected");
						selectee.selected = false;
					}
					if (selectee.unselecting) {
						selectee.$element.removeClass("ui-unselecting");
						selectee.unselecting = false;
					}
					if (!selectee.selecting) {
						selectee.$element.addClass("ui-selecting");
						selectee.selecting = true;
						// selectable SELECTING callback
						that._trigger("selecting", event, {
							selecting: selectee.element
						});
					}
				} else {
					// UNSELECT
					if (selectee.selecting) {
						if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
							selectee.$element.removeClass("ui-selecting");
							selectee.selecting = false;
							selectee.$element.addClass("ui-selected");
							selectee.selected = true;
						} else {
							selectee.$element.removeClass("ui-selecting");
							selectee.selecting = false;
							if (selectee.startselected) {
								selectee.$element.addClass("ui-unselecting");
								selectee.unselecting = true;
							}
							// selectable UNSELECTING callback
							that._trigger("unselecting", event, {
								unselecting: selectee.element
							});
						}
					}
					if (selectee.selected) {
						if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
							selectee.$element.removeClass("ui-selected");
							selectee.selected = false;
	
							selectee.$element.addClass("ui-unselecting");
							selectee.unselecting = true;
							// selectable UNSELECTING callback
							that._trigger("unselecting", event, {
								unselecting: selectee.element
							});
						}
					}
				}
			});
	
			return false;
		},
	
		_mouseStop: function(event) {
			var that = this;
	
			this.dragged = false;
	
			$(".ui-unselecting", this.element[0]).each(function() {
				var selectee = $.data(this, "selectable-item");
				selectee.$element.removeClass("ui-unselecting");
				selectee.unselecting = false;
				selectee.startselected = false;
				that._trigger("unselected", event, {
					unselected: selectee.element
				});
			});
			$(".ui-selecting", this.element[0]).each(function() {
				var selectee = $.data(this, "selectable-item");
				selectee.$element.removeClass("ui-selecting").addClass("ui-selected");
				selectee.selecting = false;
				selectee.selected = true;
				selectee.startselected = true;
				that._trigger("selected", event, {
					selected: selectee.element
				});
			});
			this._trigger("stop", event);
	
			this.helper.remove();
	
			return false;
		}
	
	});
	
	
	/*!
	 * jQuery UI Selectmenu 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/selectmenu
	 */
	
	
	var selectmenu = $.widget( "ui.selectmenu", {
		version: "1.11.4",
		defaultElement: "<select>",
		options: {
			appendTo: null,
			disabled: null,
			icons: {
				button: "ui-icon-triangle-1-s"
			},
			position: {
				my: "left top",
				at: "left bottom",
				collision: "none"
			},
			width: null,
	
			// callbacks
			change: null,
			close: null,
			focus: null,
			open: null,
			select: null
		},
	
		_create: function() {
			var selectmenuId = this.element.uniqueId().attr( "id" );
			this.ids = {
				element: selectmenuId,
				button: selectmenuId + "-button",
				menu: selectmenuId + "-menu"
			};
	
			this._drawButton();
			this._drawMenu();
	
			if ( this.options.disabled ) {
				this.disable();
			}
		},
	
		_drawButton: function() {
			var that = this;
	
			// Associate existing label with the new button
			this.label = $( "label[for='" + this.ids.element + "']" ).attr( "for", this.ids.button );
			this._on( this.label, {
				click: function( event ) {
					this.button.focus();
					event.preventDefault();
				}
			});
	
			// Hide original select element
			this.element.hide();
	
			// Create button
			this.button = $( "<span>", {
				"class": "ui-selectmenu-button ui-widget ui-state-default ui-corner-all",
				tabindex: this.options.disabled ? -1 : 0,
				id: this.ids.button,
				role: "combobox",
				"aria-expanded": "false",
				"aria-autocomplete": "list",
				"aria-owns": this.ids.menu,
				"aria-haspopup": "true"
			})
				.insertAfter( this.element );
	
			$( "<span>", {
				"class": "ui-icon " + this.options.icons.button
			})
				.prependTo( this.button );
	
			this.buttonText = $( "<span>", {
				"class": "ui-selectmenu-text"
			})
				.appendTo( this.button );
	
			this._setText( this.buttonText, this.element.find( "option:selected" ).text() );
			this._resizeButton();
	
			this._on( this.button, this._buttonEvents );
			this.button.one( "focusin", function() {
	
				// Delay rendering the menu items until the button receives focus.
				// The menu may have already been rendered via a programmatic open.
				if ( !that.menuItems ) {
					that._refreshMenu();
				}
			});
			this._hoverable( this.button );
			this._focusable( this.button );
		},
	
		_drawMenu: function() {
			var that = this;
	
			// Create menu
			this.menu = $( "<ul>", {
				"aria-hidden": "true",
				"aria-labelledby": this.ids.button,
				id: this.ids.menu
			});
	
			// Wrap menu
			this.menuWrap = $( "<div>", {
				"class": "ui-selectmenu-menu ui-front"
			})
				.append( this.menu )
				.appendTo( this._appendTo() );
	
			// Initialize menu widget
			this.menuInstance = this.menu
				.menu({
					role: "listbox",
					select: function( event, ui ) {
						event.preventDefault();
	
						// support: IE8
						// If the item was selected via a click, the text selection
						// will be destroyed in IE
						that._setSelection();
	
						that._select( ui.item.data( "ui-selectmenu-item" ), event );
					},
					focus: function( event, ui ) {
						var item = ui.item.data( "ui-selectmenu-item" );
	
						// Prevent inital focus from firing and check if its a newly focused item
						if ( that.focusIndex != null && item.index !== that.focusIndex ) {
							that._trigger( "focus", event, { item: item } );
							if ( !that.isOpen ) {
								that._select( item, event );
							}
						}
						that.focusIndex = item.index;
	
						that.button.attr( "aria-activedescendant",
							that.menuItems.eq( item.index ).attr( "id" ) );
					}
				})
				.menu( "instance" );
	
			// Adjust menu styles to dropdown
			this.menu
				.addClass( "ui-corner-bottom" )
				.removeClass( "ui-corner-all" );
	
			// Don't close the menu on mouseleave
			this.menuInstance._off( this.menu, "mouseleave" );
	
			// Cancel the menu's collapseAll on document click
			this.menuInstance._closeOnDocumentClick = function() {
				return false;
			};
	
			// Selects often contain empty items, but never contain dividers
			this.menuInstance._isDivider = function() {
				return false;
			};
		},
	
		refresh: function() {
			this._refreshMenu();
			this._setText( this.buttonText, this._getSelectedItem().text() );
			if ( !this.options.width ) {
				this._resizeButton();
			}
		},
	
		_refreshMenu: function() {
			this.menu.empty();
	
			var item,
				options = this.element.find( "option" );
	
			if ( !options.length ) {
				return;
			}
	
			this._parseOptions( options );
			this._renderMenu( this.menu, this.items );
	
			this.menuInstance.refresh();
			this.menuItems = this.menu.find( "li" ).not( ".ui-selectmenu-optgroup" );
	
			item = this._getSelectedItem();
	
			// Update the menu to have the correct item focused
			this.menuInstance.focus( null, item );
			this._setAria( item.data( "ui-selectmenu-item" ) );
	
			// Set disabled state
			this._setOption( "disabled", this.element.prop( "disabled" ) );
		},
	
		open: function( event ) {
			if ( this.options.disabled ) {
				return;
			}
	
			// If this is the first time the menu is being opened, render the items
			if ( !this.menuItems ) {
				this._refreshMenu();
			} else {
	
				// Menu clears focus on close, reset focus to selected item
				this.menu.find( ".ui-state-focus" ).removeClass( "ui-state-focus" );
				this.menuInstance.focus( null, this._getSelectedItem() );
			}
	
			this.isOpen = true;
			this._toggleAttr();
			this._resizeMenu();
			this._position();
	
			this._on( this.document, this._documentClick );
	
			this._trigger( "open", event );
		},
	
		_position: function() {
			this.menuWrap.position( $.extend( { of: this.button }, this.options.position ) );
		},
	
		close: function( event ) {
			if ( !this.isOpen ) {
				return;
			}
	
			this.isOpen = false;
			this._toggleAttr();
	
			this.range = null;
			this._off( this.document );
	
			this._trigger( "close", event );
		},
	
		widget: function() {
			return this.button;
		},
	
		menuWidget: function() {
			return this.menu;
		},
	
		_renderMenu: function( ul, items ) {
			var that = this,
				currentOptgroup = "";
	
			$.each( items, function( index, item ) {
				if ( item.optgroup !== currentOptgroup ) {
					$( "<li>", {
						"class": "ui-selectmenu-optgroup ui-menu-divider" +
							( item.element.parent( "optgroup" ).prop( "disabled" ) ?
								" ui-state-disabled" :
								"" ),
						text: item.optgroup
					})
						.appendTo( ul );
	
					currentOptgroup = item.optgroup;
				}
	
				that._renderItemData( ul, item );
			});
		},
	
		_renderItemData: function( ul, item ) {
			return this._renderItem( ul, item ).data( "ui-selectmenu-item", item );
		},
	
		_renderItem: function( ul, item ) {
			var li = $( "<li>" );
	
			if ( item.disabled ) {
				li.addClass( "ui-state-disabled" );
			}
			this._setText( li, item.label );
	
			return li.appendTo( ul );
		},
	
		_setText: function( element, value ) {
			if ( value ) {
				element.text( value );
			} else {
				element.html( "&#160;" );
			}
		},
	
		_move: function( direction, event ) {
			var item, next,
				filter = ".ui-menu-item";
	
			if ( this.isOpen ) {
				item = this.menuItems.eq( this.focusIndex );
			} else {
				item = this.menuItems.eq( this.element[ 0 ].selectedIndex );
				filter += ":not(.ui-state-disabled)";
			}
	
			if ( direction === "first" || direction === "last" ) {
				next = item[ direction === "first" ? "prevAll" : "nextAll" ]( filter ).eq( -1 );
			} else {
				next = item[ direction + "All" ]( filter ).eq( 0 );
			}
	
			if ( next.length ) {
				this.menuInstance.focus( event, next );
			}
		},
	
		_getSelectedItem: function() {
			return this.menuItems.eq( this.element[ 0 ].selectedIndex );
		},
	
		_toggle: function( event ) {
			this[ this.isOpen ? "close" : "open" ]( event );
		},
	
		_setSelection: function() {
			var selection;
	
			if ( !this.range ) {
				return;
			}
	
			if ( window.getSelection ) {
				selection = window.getSelection();
				selection.removeAllRanges();
				selection.addRange( this.range );
	
			// support: IE8
			} else {
				this.range.select();
			}
	
			// support: IE
			// Setting the text selection kills the button focus in IE, but
			// restoring the focus doesn't kill the selection.
			this.button.focus();
		},
	
		_documentClick: {
			mousedown: function( event ) {
				if ( !this.isOpen ) {
					return;
				}
	
				if ( !$( event.target ).closest( ".ui-selectmenu-menu, #" + this.ids.button ).length ) {
					this.close( event );
				}
			}
		},
	
		_buttonEvents: {
	
			// Prevent text selection from being reset when interacting with the selectmenu (#10144)
			mousedown: function() {
				var selection;
	
				if ( window.getSelection ) {
					selection = window.getSelection();
					if ( selection.rangeCount ) {
						this.range = selection.getRangeAt( 0 );
					}
	
				// support: IE8
				} else {
					this.range = document.selection.createRange();
				}
			},
	
			click: function( event ) {
				this._setSelection();
				this._toggle( event );
			},
	
			keydown: function( event ) {
				var preventDefault = true;
				switch ( event.keyCode ) {
					case $.ui.keyCode.TAB:
					case $.ui.keyCode.ESCAPE:
						this.close( event );
						preventDefault = false;
						break;
					case $.ui.keyCode.ENTER:
						if ( this.isOpen ) {
							this._selectFocusedItem( event );
						}
						break;
					case $.ui.keyCode.UP:
						if ( event.altKey ) {
							this._toggle( event );
						} else {
							this._move( "prev", event );
						}
						break;
					case $.ui.keyCode.DOWN:
						if ( event.altKey ) {
							this._toggle( event );
						} else {
							this._move( "next", event );
						}
						break;
					case $.ui.keyCode.SPACE:
						if ( this.isOpen ) {
							this._selectFocusedItem( event );
						} else {
							this._toggle( event );
						}
						break;
					case $.ui.keyCode.LEFT:
						this._move( "prev", event );
						break;
					case $.ui.keyCode.RIGHT:
						this._move( "next", event );
						break;
					case $.ui.keyCode.HOME:
					case $.ui.keyCode.PAGE_UP:
						this._move( "first", event );
						break;
					case $.ui.keyCode.END:
					case $.ui.keyCode.PAGE_DOWN:
						this._move( "last", event );
						break;
					default:
						this.menu.trigger( event );
						preventDefault = false;
				}
	
				if ( preventDefault ) {
					event.preventDefault();
				}
			}
		},
	
		_selectFocusedItem: function( event ) {
			var item = this.menuItems.eq( this.focusIndex );
			if ( !item.hasClass( "ui-state-disabled" ) ) {
				this._select( item.data( "ui-selectmenu-item" ), event );
			}
		},
	
		_select: function( item, event ) {
			var oldIndex = this.element[ 0 ].selectedIndex;
	
			// Change native select element
			this.element[ 0 ].selectedIndex = item.index;
			this._setText( this.buttonText, item.label );
			this._setAria( item );
			this._trigger( "select", event, { item: item } );
	
			if ( item.index !== oldIndex ) {
				this._trigger( "change", event, { item: item } );
			}
	
			this.close( event );
		},
	
		_setAria: function( item ) {
			var id = this.menuItems.eq( item.index ).attr( "id" );
	
			this.button.attr({
				"aria-labelledby": id,
				"aria-activedescendant": id
			});
			this.menu.attr( "aria-activedescendant", id );
		},
	
		_setOption: function( key, value ) {
			if ( key === "icons" ) {
				this.button.find( "span.ui-icon" )
					.removeClass( this.options.icons.button )
					.addClass( value.button );
			}
	
			this._super( key, value );
	
			if ( key === "appendTo" ) {
				this.menuWrap.appendTo( this._appendTo() );
			}
	
			if ( key === "disabled" ) {
				this.menuInstance.option( "disabled", value );
				this.button
					.toggleClass( "ui-state-disabled", value )
					.attr( "aria-disabled", value );
	
				this.element.prop( "disabled", value );
				if ( value ) {
					this.button.attr( "tabindex", -1 );
					this.close();
				} else {
					this.button.attr( "tabindex", 0 );
				}
			}
	
			if ( key === "width" ) {
				this._resizeButton();
			}
		},
	
		_appendTo: function() {
			var element = this.options.appendTo;
	
			if ( element ) {
				element = element.jquery || element.nodeType ?
					$( element ) :
					this.document.find( element ).eq( 0 );
			}
	
			if ( !element || !element[ 0 ] ) {
				element = this.element.closest( ".ui-front" );
			}
	
			if ( !element.length ) {
				element = this.document[ 0 ].body;
			}
	
			return element;
		},
	
		_toggleAttr: function() {
			this.button
				.toggleClass( "ui-corner-top", this.isOpen )
				.toggleClass( "ui-corner-all", !this.isOpen )
				.attr( "aria-expanded", this.isOpen );
			this.menuWrap.toggleClass( "ui-selectmenu-open", this.isOpen );
			this.menu.attr( "aria-hidden", !this.isOpen );
		},
	
		_resizeButton: function() {
			var width = this.options.width;
	
			if ( !width ) {
				width = this.element.show().outerWidth();
				this.element.hide();
			}
	
			this.button.outerWidth( width );
		},
	
		_resizeMenu: function() {
			this.menu.outerWidth( Math.max(
				this.button.outerWidth(),
	
				// support: IE10
				// IE10 wraps long text (possibly a rounding bug)
				// so we add 1px to avoid the wrapping
				this.menu.width( "" ).outerWidth() + 1
			) );
		},
	
		_getCreateOptions: function() {
			return { disabled: this.element.prop( "disabled" ) };
		},
	
		_parseOptions: function( options ) {
			var data = [];
			options.each(function( index, item ) {
				var option = $( item ),
					optgroup = option.parent( "optgroup" );
				data.push({
					element: option,
					index: index,
					value: option.val(),
					label: option.text(),
					optgroup: optgroup.attr( "label" ) || "",
					disabled: optgroup.prop( "disabled" ) || option.prop( "disabled" )
				});
			});
			this.items = data;
		},
	
		_destroy: function() {
			this.menuWrap.remove();
			this.button.remove();
			this.element.show();
			this.element.removeUniqueId();
			this.label.attr( "for", this.ids.element );
		}
	});
	
	
	/*!
	 * jQuery UI Slider 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/slider/
	 */
	
	
	var slider = $.widget( "ui.slider", $.ui.mouse, {
		version: "1.11.4",
		widgetEventPrefix: "slide",
	
		options: {
			animate: false,
			distance: 0,
			max: 100,
			min: 0,
			orientation: "horizontal",
			range: false,
			step: 1,
			value: 0,
			values: null,
	
			// callbacks
			change: null,
			slide: null,
			start: null,
			stop: null
		},
	
		// number of pages in a slider
		// (how many times can you page up/down to go through the whole range)
		numPages: 5,
	
		_create: function() {
			this._keySliding = false;
			this._mouseSliding = false;
			this._animateOff = true;
			this._handleIndex = null;
			this._detectOrientation();
			this._mouseInit();
			this._calculateNewMax();
	
			this.element
				.addClass( "ui-slider" +
					" ui-slider-" + this.orientation +
					" ui-widget" +
					" ui-widget-content" +
					" ui-corner-all");
	
			this._refresh();
			this._setOption( "disabled", this.options.disabled );
	
			this._animateOff = false;
		},
	
		_refresh: function() {
			this._createRange();
			this._createHandles();
			this._setupEvents();
			this._refreshValue();
		},
	
		_createHandles: function() {
			var i, handleCount,
				options = this.options,
				existingHandles = this.element.find( ".ui-slider-handle" ).addClass( "ui-state-default ui-corner-all" ),
				handle = "<span class='ui-slider-handle ui-state-default ui-corner-all' tabindex='0'></span>",
				handles = [];
	
			handleCount = ( options.values && options.values.length ) || 1;
	
			if ( existingHandles.length > handleCount ) {
				existingHandles.slice( handleCount ).remove();
				existingHandles = existingHandles.slice( 0, handleCount );
			}
	
			for ( i = existingHandles.length; i < handleCount; i++ ) {
				handles.push( handle );
			}
	
			this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );
	
			this.handle = this.handles.eq( 0 );
	
			this.handles.each(function( i ) {
				$( this ).data( "ui-slider-handle-index", i );
			});
		},
	
		_createRange: function() {
			var options = this.options,
				classes = "";
	
			if ( options.range ) {
				if ( options.range === true ) {
					if ( !options.values ) {
						options.values = [ this._valueMin(), this._valueMin() ];
					} else if ( options.values.length && options.values.length !== 2 ) {
						options.values = [ options.values[0], options.values[0] ];
					} else if ( $.isArray( options.values ) ) {
						options.values = options.values.slice(0);
					}
				}
	
				if ( !this.range || !this.range.length ) {
					this.range = $( "<div></div>" )
						.appendTo( this.element );
	
					classes = "ui-slider-range" +
					// note: this isn't the most fittingly semantic framework class for this element,
					// but worked best visually with a variety of themes
					" ui-widget-header ui-corner-all";
				} else {
					this.range.removeClass( "ui-slider-range-min ui-slider-range-max" )
						// Handle range switching from true to min/max
						.css({
							"left": "",
							"bottom": ""
						});
				}
	
				this.range.addClass( classes +
					( ( options.range === "min" || options.range === "max" ) ? " ui-slider-range-" + options.range : "" ) );
			} else {
				if ( this.range ) {
					this.range.remove();
				}
				this.range = null;
			}
		},
	
		_setupEvents: function() {
			this._off( this.handles );
			this._on( this.handles, this._handleEvents );
			this._hoverable( this.handles );
			this._focusable( this.handles );
		},
	
		_destroy: function() {
			this.handles.remove();
			if ( this.range ) {
				this.range.remove();
			}
	
			this.element
				.removeClass( "ui-slider" +
					" ui-slider-horizontal" +
					" ui-slider-vertical" +
					" ui-widget" +
					" ui-widget-content" +
					" ui-corner-all" );
	
			this._mouseDestroy();
		},
	
		_mouseCapture: function( event ) {
			var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
				that = this,
				o = this.options;
	
			if ( o.disabled ) {
				return false;
			}
	
			this.elementSize = {
				width: this.element.outerWidth(),
				height: this.element.outerHeight()
			};
			this.elementOffset = this.element.offset();
	
			position = { x: event.pageX, y: event.pageY };
			normValue = this._normValueFromMouse( position );
			distance = this._valueMax() - this._valueMin() + 1;
			this.handles.each(function( i ) {
				var thisDistance = Math.abs( normValue - that.values(i) );
				if (( distance > thisDistance ) ||
					( distance === thisDistance &&
						(i === that._lastChangedValue || that.values(i) === o.min ))) {
					distance = thisDistance;
					closestHandle = $( this );
					index = i;
				}
			});
	
			allowed = this._start( event, index );
			if ( allowed === false ) {
				return false;
			}
			this._mouseSliding = true;
	
			this._handleIndex = index;
	
			closestHandle
				.addClass( "ui-state-active" )
				.focus();
	
			offset = closestHandle.offset();
			mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );
			this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
				left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
				top: event.pageY - offset.top -
					( closestHandle.height() / 2 ) -
					( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -
					( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +
					( parseInt( closestHandle.css("marginTop"), 10 ) || 0)
			};
	
			if ( !this.handles.hasClass( "ui-state-hover" ) ) {
				this._slide( event, index, normValue );
			}
			this._animateOff = true;
			return true;
		},
	
		_mouseStart: function() {
			return true;
		},
	
		_mouseDrag: function( event ) {
			var position = { x: event.pageX, y: event.pageY },
				normValue = this._normValueFromMouse( position );
	
			this._slide( event, this._handleIndex, normValue );
	
			return false;
		},
	
		_mouseStop: function( event ) {
			this.handles.removeClass( "ui-state-active" );
			this._mouseSliding = false;
	
			this._stop( event, this._handleIndex );
			this._change( event, this._handleIndex );
	
			this._handleIndex = null;
			this._clickOffset = null;
			this._animateOff = false;
	
			return false;
		},
	
		_detectOrientation: function() {
			this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
		},
	
		_normValueFromMouse: function( position ) {
			var pixelTotal,
				pixelMouse,
				percentMouse,
				valueTotal,
				valueMouse;
	
			if ( this.orientation === "horizontal" ) {
				pixelTotal = this.elementSize.width;
				pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
			} else {
				pixelTotal = this.elementSize.height;
				pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
			}
	
			percentMouse = ( pixelMouse / pixelTotal );
			if ( percentMouse > 1 ) {
				percentMouse = 1;
			}
			if ( percentMouse < 0 ) {
				percentMouse = 0;
			}
			if ( this.orientation === "vertical" ) {
				percentMouse = 1 - percentMouse;
			}
	
			valueTotal = this._valueMax() - this._valueMin();
			valueMouse = this._valueMin() + percentMouse * valueTotal;
	
			return this._trimAlignValue( valueMouse );
		},
	
		_start: function( event, index ) {
			var uiHash = {
				handle: this.handles[ index ],
				value: this.value()
			};
			if ( this.options.values && this.options.values.length ) {
				uiHash.value = this.values( index );
				uiHash.values = this.values();
			}
			return this._trigger( "start", event, uiHash );
		},
	
		_slide: function( event, index, newVal ) {
			var otherVal,
				newValues,
				allowed;
	
			if ( this.options.values && this.options.values.length ) {
				otherVal = this.values( index ? 0 : 1 );
	
				if ( ( this.options.values.length === 2 && this.options.range === true ) &&
						( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )
					) {
					newVal = otherVal;
				}
	
				if ( newVal !== this.values( index ) ) {
					newValues = this.values();
					newValues[ index ] = newVal;
					// A slide can be canceled by returning false from the slide callback
					allowed = this._trigger( "slide", event, {
						handle: this.handles[ index ],
						value: newVal,
						values: newValues
					} );
					otherVal = this.values( index ? 0 : 1 );
					if ( allowed !== false ) {
						this.values( index, newVal );
					}
				}
			} else {
				if ( newVal !== this.value() ) {
					// A slide can be canceled by returning false from the slide callback
					allowed = this._trigger( "slide", event, {
						handle: this.handles[ index ],
						value: newVal
					} );
					if ( allowed !== false ) {
						this.value( newVal );
					}
				}
			}
		},
	
		_stop: function( event, index ) {
			var uiHash = {
				handle: this.handles[ index ],
				value: this.value()
			};
			if ( this.options.values && this.options.values.length ) {
				uiHash.value = this.values( index );
				uiHash.values = this.values();
			}
	
			this._trigger( "stop", event, uiHash );
		},
	
		_change: function( event, index ) {
			if ( !this._keySliding && !this._mouseSliding ) {
				var uiHash = {
					handle: this.handles[ index ],
					value: this.value()
				};
				if ( this.options.values && this.options.values.length ) {
					uiHash.value = this.values( index );
					uiHash.values = this.values();
				}
	
				//store the last changed value index for reference when handles overlap
				this._lastChangedValue = index;
	
				this._trigger( "change", event, uiHash );
			}
		},
	
		value: function( newValue ) {
			if ( arguments.length ) {
				this.options.value = this._trimAlignValue( newValue );
				this._refreshValue();
				this._change( null, 0 );
				return;
			}
	
			return this._value();
		},
	
		values: function( index, newValue ) {
			var vals,
				newValues,
				i;
	
			if ( arguments.length > 1 ) {
				this.options.values[ index ] = this._trimAlignValue( newValue );
				this._refreshValue();
				this._change( null, index );
				return;
			}
	
			if ( arguments.length ) {
				if ( $.isArray( arguments[ 0 ] ) ) {
					vals = this.options.values;
					newValues = arguments[ 0 ];
					for ( i = 0; i < vals.length; i += 1 ) {
						vals[ i ] = this._trimAlignValue( newValues[ i ] );
						this._change( null, i );
					}
					this._refreshValue();
				} else {
					if ( this.options.values && this.options.values.length ) {
						return this._values( index );
					} else {
						return this.value();
					}
				}
			} else {
				return this._values();
			}
		},
	
		_setOption: function( key, value ) {
			var i,
				valsLength = 0;
	
			if ( key === "range" && this.options.range === true ) {
				if ( value === "min" ) {
					this.options.value = this._values( 0 );
					this.options.values = null;
				} else if ( value === "max" ) {
					this.options.value = this._values( this.options.values.length - 1 );
					this.options.values = null;
				}
			}
	
			if ( $.isArray( this.options.values ) ) {
				valsLength = this.options.values.length;
			}
	
			if ( key === "disabled" ) {
				this.element.toggleClass( "ui-state-disabled", !!value );
			}
	
			this._super( key, value );
	
			switch ( key ) {
				case "orientation":
					this._detectOrientation();
					this.element
						.removeClass( "ui-slider-horizontal ui-slider-vertical" )
						.addClass( "ui-slider-" + this.orientation );
					this._refreshValue();
	
					// Reset positioning from previous orientation
					this.handles.css( value === "horizontal" ? "bottom" : "left", "" );
					break;
				case "value":
					this._animateOff = true;
					this._refreshValue();
					this._change( null, 0 );
					this._animateOff = false;
					break;
				case "values":
					this._animateOff = true;
					this._refreshValue();
					for ( i = 0; i < valsLength; i += 1 ) {
						this._change( null, i );
					}
					this._animateOff = false;
					break;
				case "step":
				case "min":
				case "max":
					this._animateOff = true;
					this._calculateNewMax();
					this._refreshValue();
					this._animateOff = false;
					break;
				case "range":
					this._animateOff = true;
					this._refresh();
					this._animateOff = false;
					break;
			}
		},
	
		//internal value getter
		// _value() returns value trimmed by min and max, aligned by step
		_value: function() {
			var val = this.options.value;
			val = this._trimAlignValue( val );
	
			return val;
		},
	
		//internal values getter
		// _values() returns array of values trimmed by min and max, aligned by step
		// _values( index ) returns single value trimmed by min and max, aligned by step
		_values: function( index ) {
			var val,
				vals,
				i;
	
			if ( arguments.length ) {
				val = this.options.values[ index ];
				val = this._trimAlignValue( val );
	
				return val;
			} else if ( this.options.values && this.options.values.length ) {
				// .slice() creates a copy of the array
				// this copy gets trimmed by min and max and then returned
				vals = this.options.values.slice();
				for ( i = 0; i < vals.length; i += 1) {
					vals[ i ] = this._trimAlignValue( vals[ i ] );
				}
	
				return vals;
			} else {
				return [];
			}
		},
	
		// returns the step-aligned value that val is closest to, between (inclusive) min and max
		_trimAlignValue: function( val ) {
			if ( val <= this._valueMin() ) {
				return this._valueMin();
			}
			if ( val >= this._valueMax() ) {
				return this._valueMax();
			}
			var step = ( this.options.step > 0 ) ? this.options.step : 1,
				valModStep = (val - this._valueMin()) % step,
				alignValue = val - valModStep;
	
			if ( Math.abs(valModStep) * 2 >= step ) {
				alignValue += ( valModStep > 0 ) ? step : ( -step );
			}
	
			// Since JavaScript has problems with large floats, round
			// the final value to 5 digits after the decimal point (see #4124)
			return parseFloat( alignValue.toFixed(5) );
		},
	
		_calculateNewMax: function() {
			var max = this.options.max,
				min = this._valueMin(),
				step = this.options.step,
				aboveMin = Math.floor( ( +( max - min ).toFixed( this._precision() ) ) / step ) * step;
			max = aboveMin + min;
			this.max = parseFloat( max.toFixed( this._precision() ) );
		},
	
		_precision: function() {
			var precision = this._precisionOf( this.options.step );
			if ( this.options.min !== null ) {
				precision = Math.max( precision, this._precisionOf( this.options.min ) );
			}
			return precision;
		},
	
		_precisionOf: function( num ) {
			var str = num.toString(),
				decimal = str.indexOf( "." );
			return decimal === -1 ? 0 : str.length - decimal - 1;
		},
	
		_valueMin: function() {
			return this.options.min;
		},
	
		_valueMax: function() {
			return this.max;
		},
	
		_refreshValue: function() {
			var lastValPercent, valPercent, value, valueMin, valueMax,
				oRange = this.options.range,
				o = this.options,
				that = this,
				animate = ( !this._animateOff ) ? o.animate : false,
				_set = {};
	
			if ( this.options.values && this.options.values.length ) {
				this.handles.each(function( i ) {
					valPercent = ( that.values(i) - that._valueMin() ) / ( that._valueMax() - that._valueMin() ) * 100;
					_set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
					$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
					if ( that.options.range === true ) {
						if ( that.orientation === "horizontal" ) {
							if ( i === 0 ) {
								that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );
							}
							if ( i === 1 ) {
								that.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
							}
						} else {
							if ( i === 0 ) {
								that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );
							}
							if ( i === 1 ) {
								that.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
							}
						}
					}
					lastValPercent = valPercent;
				});
			} else {
				value = this.value();
				valueMin = this._valueMin();
				valueMax = this._valueMax();
				valPercent = ( valueMax !== valueMin ) ?
						( value - valueMin ) / ( valueMax - valueMin ) * 100 :
						0;
				_set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
				this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
	
				if ( oRange === "min" && this.orientation === "horizontal" ) {
					this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );
				}
				if ( oRange === "max" && this.orientation === "horizontal" ) {
					this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
				}
				if ( oRange === "min" && this.orientation === "vertical" ) {
					this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );
				}
				if ( oRange === "max" && this.orientation === "vertical" ) {
					this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
				}
			}
		},
	
		_handleEvents: {
			keydown: function( event ) {
				var allowed, curVal, newVal, step,
					index = $( event.target ).data( "ui-slider-handle-index" );
	
				switch ( event.keyCode ) {
					case $.ui.keyCode.HOME:
					case $.ui.keyCode.END:
					case $.ui.keyCode.PAGE_UP:
					case $.ui.keyCode.PAGE_DOWN:
					case $.ui.keyCode.UP:
					case $.ui.keyCode.RIGHT:
					case $.ui.keyCode.DOWN:
					case $.ui.keyCode.LEFT:
						event.preventDefault();
						if ( !this._keySliding ) {
							this._keySliding = true;
							$( event.target ).addClass( "ui-state-active" );
							allowed = this._start( event, index );
							if ( allowed === false ) {
								return;
							}
						}
						break;
				}
	
				step = this.options.step;
				if ( this.options.values && this.options.values.length ) {
					curVal = newVal = this.values( index );
				} else {
					curVal = newVal = this.value();
				}
	
				switch ( event.keyCode ) {
					case $.ui.keyCode.HOME:
						newVal = this._valueMin();
						break;
					case $.ui.keyCode.END:
						newVal = this._valueMax();
						break;
					case $.ui.keyCode.PAGE_UP:
						newVal = this._trimAlignValue(
							curVal + ( ( this._valueMax() - this._valueMin() ) / this.numPages )
						);
						break;
					case $.ui.keyCode.PAGE_DOWN:
						newVal = this._trimAlignValue(
							curVal - ( (this._valueMax() - this._valueMin()) / this.numPages ) );
						break;
					case $.ui.keyCode.UP:
					case $.ui.keyCode.RIGHT:
						if ( curVal === this._valueMax() ) {
							return;
						}
						newVal = this._trimAlignValue( curVal + step );
						break;
					case $.ui.keyCode.DOWN:
					case $.ui.keyCode.LEFT:
						if ( curVal === this._valueMin() ) {
							return;
						}
						newVal = this._trimAlignValue( curVal - step );
						break;
				}
	
				this._slide( event, index, newVal );
			},
			keyup: function( event ) {
				var index = $( event.target ).data( "ui-slider-handle-index" );
	
				if ( this._keySliding ) {
					this._keySliding = false;
					this._stop( event, index );
					this._change( event, index );
					$( event.target ).removeClass( "ui-state-active" );
				}
			}
		}
	});
	
	
	/*!
	 * jQuery UI Sortable 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/sortable/
	 */
	
	
	var sortable = $.widget("ui.sortable", $.ui.mouse, {
		version: "1.11.4",
		widgetEventPrefix: "sort",
		ready: false,
		options: {
			appendTo: "parent",
			axis: false,
			connectWith: false,
			containment: false,
			cursor: "auto",
			cursorAt: false,
			dropOnEmpty: true,
			forcePlaceholderSize: false,
			forceHelperSize: false,
			grid: false,
			handle: false,
			helper: "original",
			items: "> *",
			opacity: false,
			placeholder: false,
			revert: false,
			scroll: true,
			scrollSensitivity: 20,
			scrollSpeed: 20,
			scope: "default",
			tolerance: "intersect",
			zIndex: 1000,
	
			// callbacks
			activate: null,
			beforeStop: null,
			change: null,
			deactivate: null,
			out: null,
			over: null,
			receive: null,
			remove: null,
			sort: null,
			start: null,
			stop: null,
			update: null
		},
	
		_isOverAxis: function( x, reference, size ) {
			return ( x >= reference ) && ( x < ( reference + size ) );
		},
	
		_isFloating: function( item ) {
			return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));
		},
	
		_create: function() {
			this.containerCache = {};
			this.element.addClass("ui-sortable");
	
			//Get the items
			this.refresh();
	
			//Let's determine the parent's offset
			this.offset = this.element.offset();
	
			//Initialize mouse events for interaction
			this._mouseInit();
	
			this._setHandleClassName();
	
			//We're ready to go
			this.ready = true;
	
		},
	
		_setOption: function( key, value ) {
			this._super( key, value );
	
			if ( key === "handle" ) {
				this._setHandleClassName();
			}
		},
	
		_setHandleClassName: function() {
			this.element.find( ".ui-sortable-handle" ).removeClass( "ui-sortable-handle" );
			$.each( this.items, function() {
				( this.instance.options.handle ?
					this.item.find( this.instance.options.handle ) : this.item )
					.addClass( "ui-sortable-handle" );
			});
		},
	
		_destroy: function() {
			this.element
				.removeClass( "ui-sortable ui-sortable-disabled" )
				.find( ".ui-sortable-handle" )
					.removeClass( "ui-sortable-handle" );
			this._mouseDestroy();
	
			for ( var i = this.items.length - 1; i >= 0; i-- ) {
				this.items[i].item.removeData(this.widgetName + "-item");
			}
	
			return this;
		},
	
		_mouseCapture: function(event, overrideHandle) {
			var currentItem = null,
				validHandle = false,
				that = this;
	
			if (this.reverting) {
				return false;
			}
	
			if(this.options.disabled || this.options.type === "static") {
				return false;
			}
	
			//We have to refresh the items data once first
			this._refreshItems(event);
	
			//Find out if the clicked node (or one of its parents) is a actual item in this.items
			$(event.target).parents().each(function() {
				if($.data(this, that.widgetName + "-item") === that) {
					currentItem = $(this);
					return false;
				}
			});
			if($.data(event.target, that.widgetName + "-item") === that) {
				currentItem = $(event.target);
			}
	
			if(!currentItem) {
				return false;
			}
			if(this.options.handle && !overrideHandle) {
				$(this.options.handle, currentItem).find("*").addBack().each(function() {
					if(this === event.target) {
						validHandle = true;
					}
				});
				if(!validHandle) {
					return false;
				}
			}
	
			this.currentItem = currentItem;
			this._removeCurrentsFromItems();
			return true;
	
		},
	
		_mouseStart: function(event, overrideHandle, noActivation) {
	
			var i, body,
				o = this.options;
	
			this.currentContainer = this;
	
			//We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
			this.refreshPositions();
	
			//Create and append the visible helper
			this.helper = this._createHelper(event);
	
			//Cache the helper size
			this._cacheHelperProportions();
	
			/*
			 * - Position generation -
			 * This block generates everything position related - it's the core of draggables.
			 */
	
			//Cache the margins of the original element
			this._cacheMargins();
	
			//Get the next scrolling parent
			this.scrollParent = this.helper.scrollParent();
	
			//The element's absolute position on the page minus margins
			this.offset = this.currentItem.offset();
			this.offset = {
				top: this.offset.top - this.margins.top,
				left: this.offset.left - this.margins.left
			};
	
			$.extend(this.offset, {
				click: { //Where the click happened, relative to the element
					left: event.pageX - this.offset.left,
					top: event.pageY - this.offset.top
				},
				parent: this._getParentOffset(),
				relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
			});
	
			// Only after we got the offset, we can change the helper's position to absolute
			// TODO: Still need to figure out a way to make relative sorting possible
			this.helper.css("position", "absolute");
			this.cssPosition = this.helper.css("position");
	
			//Generate the original position
			this.originalPosition = this._generatePosition(event);
			this.originalPageX = event.pageX;
			this.originalPageY = event.pageY;
	
			//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
			(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));
	
			//Cache the former DOM position
			this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };
	
			//If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
			if(this.helper[0] !== this.currentItem[0]) {
				this.currentItem.hide();
			}
	
			//Create the placeholder
			this._createPlaceholder();
	
			//Set a containment if given in the options
			if(o.containment) {
				this._setContainment();
			}
	
			if( o.cursor && o.cursor !== "auto" ) { // cursor option
				body = this.document.find( "body" );
	
				// support: IE
				this.storedCursor = body.css( "cursor" );
				body.css( "cursor", o.cursor );
	
				this.storedStylesheet = $( "<style>*{ cursor: "+o.cursor+" !important; }</style>" ).appendTo( body );
			}
	
			if(o.opacity) { // opacity option
				if (this.helper.css("opacity")) {
					this._storedOpacity = this.helper.css("opacity");
				}
				this.helper.css("opacity", o.opacity);
			}
	
			if(o.zIndex) { // zIndex option
				if (this.helper.css("zIndex")) {
					this._storedZIndex = this.helper.css("zIndex");
				}
				this.helper.css("zIndex", o.zIndex);
			}
	
			//Prepare scrolling
			if(this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {
				this.overflowOffset = this.scrollParent.offset();
			}
	
			//Call callbacks
			this._trigger("start", event, this._uiHash());
	
			//Recache the helper size
			if(!this._preserveHelperProportions) {
				this._cacheHelperProportions();
			}
	
	
			//Post "activate" events to possible containers
			if( !noActivation ) {
				for ( i = this.containers.length - 1; i >= 0; i-- ) {
					this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
				}
			}
	
			//Prepare possible droppables
			if($.ui.ddmanager) {
				$.ui.ddmanager.current = this;
			}
	
			if ($.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(this, event);
			}
	
			this.dragging = true;
	
			this.helper.addClass("ui-sortable-helper");
			this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
			return true;
	
		},
	
		_mouseDrag: function(event) {
			var i, item, itemElement, intersection,
				o = this.options,
				scrolled = false;
	
			//Compute the helpers position
			this.position = this._generatePosition(event);
			this.positionAbs = this._convertPositionTo("absolute");
	
			if (!this.lastPositionAbs) {
				this.lastPositionAbs = this.positionAbs;
			}
	
			//Do scrolling
			if(this.options.scroll) {
				if(this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {
	
					if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
						this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
					} else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
						this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
					}
	
					if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
						this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
					} else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
						this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
					}
	
				} else {
	
					if(event.pageY - this.document.scrollTop() < o.scrollSensitivity) {
						scrolled = this.document.scrollTop(this.document.scrollTop() - o.scrollSpeed);
					} else if(this.window.height() - (event.pageY - this.document.scrollTop()) < o.scrollSensitivity) {
						scrolled = this.document.scrollTop(this.document.scrollTop() + o.scrollSpeed);
					}
	
					if(event.pageX - this.document.scrollLeft() < o.scrollSensitivity) {
						scrolled = this.document.scrollLeft(this.document.scrollLeft() - o.scrollSpeed);
					} else if(this.window.width() - (event.pageX - this.document.scrollLeft()) < o.scrollSensitivity) {
						scrolled = this.document.scrollLeft(this.document.scrollLeft() + o.scrollSpeed);
					}
	
				}
	
				if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
					$.ui.ddmanager.prepareOffsets(this, event);
				}
			}
	
			//Regenerate the absolute position used for position checks
			this.positionAbs = this._convertPositionTo("absolute");
	
			//Set the helper position
			if(!this.options.axis || this.options.axis !== "y") {
				this.helper[0].style.left = this.position.left+"px";
			}
			if(!this.options.axis || this.options.axis !== "x") {
				this.helper[0].style.top = this.position.top+"px";
			}
	
			//Rearrange
			for (i = this.items.length - 1; i >= 0; i--) {
	
				//Cache variables and intersection, continue if no intersection
				item = this.items[i];
				itemElement = item.item[0];
				intersection = this._intersectsWithPointer(item);
				if (!intersection) {
					continue;
				}
	
				// Only put the placeholder inside the current Container, skip all
				// items from other containers. This works because when moving
				// an item from one container to another the
				// currentContainer is switched before the placeholder is moved.
				//
				// Without this, moving items in "sub-sortables" can cause
				// the placeholder to jitter between the outer and inner container.
				if (item.instance !== this.currentContainer) {
					continue;
				}
	
				// cannot intersect with itself
				// no useless actions that have been done before
				// no action if the item moved is the parent of the item checked
				if (itemElement !== this.currentItem[0] &&
					this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
					!$.contains(this.placeholder[0], itemElement) &&
					(this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
				) {
	
					this.direction = intersection === 1 ? "down" : "up";
	
					if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
						this._rearrange(event, item);
					} else {
						break;
					}
	
					this._trigger("change", event, this._uiHash());
					break;
				}
			}
	
			//Post events to containers
			this._contactContainers(event);
	
			//Interconnect with droppables
			if($.ui.ddmanager) {
				$.ui.ddmanager.drag(this, event);
			}
	
			//Call callbacks
			this._trigger("sort", event, this._uiHash());
	
			this.lastPositionAbs = this.positionAbs;
			return false;
	
		},
	
		_mouseStop: function(event, noPropagation) {
	
			if(!event) {
				return;
			}
	
			//If we are using droppables, inform the manager about the drop
			if ($.ui.ddmanager && !this.options.dropBehaviour) {
				$.ui.ddmanager.drop(this, event);
			}
	
			if(this.options.revert) {
				var that = this,
					cur = this.placeholder.offset(),
					axis = this.options.axis,
					animation = {};
	
				if ( !axis || axis === "x" ) {
					animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft);
				}
				if ( !axis || axis === "y" ) {
					animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop);
				}
				this.reverting = true;
				$(this.helper).animate( animation, parseInt(this.options.revert, 10) || 500, function() {
					that._clear(event);
				});
			} else {
				this._clear(event, noPropagation);
			}
	
			return false;
	
		},
	
		cancel: function() {
	
			if(this.dragging) {
	
				this._mouseUp({ target: null });
	
				if(this.options.helper === "original") {
					this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
				} else {
					this.currentItem.show();
				}
	
				//Post deactivating events to containers
				for (var i = this.containers.length - 1; i >= 0; i--){
					this.containers[i]._trigger("deactivate", null, this._uiHash(this));
					if(this.containers[i].containerCache.over) {
						this.containers[i]._trigger("out", null, this._uiHash(this));
						this.containers[i].containerCache.over = 0;
					}
				}
	
			}
	
			if (this.placeholder) {
				//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
				if(this.placeholder[0].parentNode) {
					this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
				}
				if(this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
					this.helper.remove();
				}
	
				$.extend(this, {
					helper: null,
					dragging: false,
					reverting: false,
					_noFinalSort: null
				});
	
				if(this.domPosition.prev) {
					$(this.domPosition.prev).after(this.currentItem);
				} else {
					$(this.domPosition.parent).prepend(this.currentItem);
				}
			}
	
			return this;
	
		},
	
		serialize: function(o) {
	
			var items = this._getItemsAsjQuery(o && o.connected),
				str = [];
			o = o || {};
	
			$(items).each(function() {
				var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));
				if (res) {
					str.push((o.key || res[1]+"[]")+"="+(o.key && o.expression ? res[1] : res[2]));
				}
			});
	
			if(!str.length && o.key) {
				str.push(o.key + "=");
			}
	
			return str.join("&");
	
		},
	
		toArray: function(o) {
	
			var items = this._getItemsAsjQuery(o && o.connected),
				ret = [];
	
			o = o || {};
	
			items.each(function() { ret.push($(o.item || this).attr(o.attribute || "id") || ""); });
			return ret;
	
		},
	
		/* Be careful with the following core functions */
		_intersectsWith: function(item) {
	
			var x1 = this.positionAbs.left,
				x2 = x1 + this.helperProportions.width,
				y1 = this.positionAbs.top,
				y2 = y1 + this.helperProportions.height,
				l = item.left,
				r = l + item.width,
				t = item.top,
				b = t + item.height,
				dyClick = this.offset.click.top,
				dxClick = this.offset.click.left,
				isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t && ( y1 + dyClick ) < b ),
				isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l && ( x1 + dxClick ) < r ),
				isOverElement = isOverElementHeight && isOverElementWidth;
	
			if ( this.options.tolerance === "pointer" ||
				this.options.forcePointerForContainers ||
				(this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])
			) {
				return isOverElement;
			} else {
	
				return (l < x1 + (this.helperProportions.width / 2) && // Right Half
					x2 - (this.helperProportions.width / 2) < r && // Left Half
					t < y1 + (this.helperProportions.height / 2) && // Bottom Half
					y2 - (this.helperProportions.height / 2) < b ); // Top Half
	
			}
		},
	
		_intersectsWithPointer: function(item) {
	
			var isOverElementHeight = (this.options.axis === "x") || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
				isOverElementWidth = (this.options.axis === "y") || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
				isOverElement = isOverElementHeight && isOverElementWidth,
				verticalDirection = this._getDragVerticalDirection(),
				horizontalDirection = this._getDragHorizontalDirection();
	
			if (!isOverElement) {
				return false;
			}
	
			return this.floating ?
				( ((horizontalDirection && horizontalDirection === "right") || verticalDirection === "down") ? 2 : 1 )
				: ( verticalDirection && (verticalDirection === "down" ? 2 : 1) );
	
		},
	
		_intersectsWithSides: function(item) {
	
			var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
				isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
				verticalDirection = this._getDragVerticalDirection(),
				horizontalDirection = this._getDragHorizontalDirection();
	
			if (this.floating && horizontalDirection) {
				return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf));
			} else {
				return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf));
			}
	
		},
	
		_getDragVerticalDirection: function() {
			var delta = this.positionAbs.top - this.lastPositionAbs.top;
			return delta !== 0 && (delta > 0 ? "down" : "up");
		},
	
		_getDragHorizontalDirection: function() {
			var delta = this.positionAbs.left - this.lastPositionAbs.left;
			return delta !== 0 && (delta > 0 ? "right" : "left");
		},
	
		refresh: function(event) {
			this._refreshItems(event);
			this._setHandleClassName();
			this.refreshPositions();
			return this;
		},
	
		_connectWith: function() {
			var options = this.options;
			return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
		},
	
		_getItemsAsjQuery: function(connected) {
	
			var i, j, cur, inst,
				items = [],
				queries = [],
				connectWith = this._connectWith();
	
			if(connectWith && connected) {
				for (i = connectWith.length - 1; i >= 0; i--){
					cur = $(connectWith[i], this.document[0]);
					for ( j = cur.length - 1; j >= 0; j--){
						inst = $.data(cur[j], this.widgetFullName);
						if(inst && inst !== this && !inst.options.disabled) {
							queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]);
						}
					}
				}
			}
	
			queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);
	
			function addItems() {
				items.push( this );
			}
			for (i = queries.length - 1; i >= 0; i--){
				queries[i][0].each( addItems );
			}
	
			return $(items);
	
		},
	
		_removeCurrentsFromItems: function() {
	
			var list = this.currentItem.find(":data(" + this.widgetName + "-item)");
	
			this.items = $.grep(this.items, function (item) {
				for (var j=0; j < list.length; j++) {
					if(list[j] === item.item[0]) {
						return false;
					}
				}
				return true;
			});
	
		},
	
		_refreshItems: function(event) {
	
			this.items = [];
			this.containers = [this];
	
			var i, j, cur, inst, targetData, _queries, item, queriesLength,
				items = this.items,
				queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
				connectWith = this._connectWith();
	
			if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
				for (i = connectWith.length - 1; i >= 0; i--){
					cur = $(connectWith[i], this.document[0]);
					for (j = cur.length - 1; j >= 0; j--){
						inst = $.data(cur[j], this.widgetFullName);
						if(inst && inst !== this && !inst.options.disabled) {
							queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
							this.containers.push(inst);
						}
					}
				}
			}
	
			for (i = queries.length - 1; i >= 0; i--) {
				targetData = queries[i][1];
				_queries = queries[i][0];
	
				for (j=0, queriesLength = _queries.length; j < queriesLength; j++) {
					item = $(_queries[j]);
	
					item.data(this.widgetName + "-item", targetData); // Data for target checking (mouse manager)
	
					items.push({
						item: item,
						instance: targetData,
						width: 0, height: 0,
						left: 0, top: 0
					});
				}
			}
	
		},
	
		refreshPositions: function(fast) {
	
			// Determine whether items are being displayed horizontally
			this.floating = this.items.length ?
				this.options.axis === "x" || this._isFloating( this.items[ 0 ].item ) :
				false;
	
			//This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
			if(this.offsetParent && this.helper) {
				this.offset.parent = this._getParentOffset();
			}
	
			var i, item, t, p;
	
			for (i = this.items.length - 1; i >= 0; i--){
				item = this.items[i];
	
				//We ignore calculating positions of all connected containers when we're not over them
				if(item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
					continue;
				}
	
				t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;
	
				if (!fast) {
					item.width = t.outerWidth();
					item.height = t.outerHeight();
				}
	
				p = t.offset();
				item.left = p.left;
				item.top = p.top;
			}
	
			if(this.options.custom && this.options.custom.refreshContainers) {
				this.options.custom.refreshContainers.call(this);
			} else {
				for (i = this.containers.length - 1; i >= 0; i--){
					p = this.containers[i].element.offset();
					this.containers[i].containerCache.left = p.left;
					this.containers[i].containerCache.top = p.top;
					this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
					this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
				}
			}
	
			return this;
		},
	
		_createPlaceholder: function(that) {
			that = that || this;
			var className,
				o = that.options;
	
			if(!o.placeholder || o.placeholder.constructor === String) {
				className = o.placeholder;
				o.placeholder = {
					element: function() {
	
						var nodeName = that.currentItem[0].nodeName.toLowerCase(),
							element = $( "<" + nodeName + ">", that.document[0] )
								.addClass(className || that.currentItem[0].className+" ui-sortable-placeholder")
								.removeClass("ui-sortable-helper");
	
						if ( nodeName === "tbody" ) {
							that._createTrPlaceholder(
								that.currentItem.find( "tr" ).eq( 0 ),
								$( "<tr>", that.document[ 0 ] ).appendTo( element )
							);
						} else if ( nodeName === "tr" ) {
							that._createTrPlaceholder( that.currentItem, element );
						} else if ( nodeName === "img" ) {
							element.attr( "src", that.currentItem.attr( "src" ) );
						}
	
						if ( !className ) {
							element.css( "visibility", "hidden" );
						}
	
						return element;
					},
					update: function(container, p) {
	
						// 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
						// 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
						if(className && !o.forcePlaceholderSize) {
							return;
						}
	
						//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
						if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop")||0, 10) - parseInt(that.currentItem.css("paddingBottom")||0, 10)); }
						if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft")||0, 10) - parseInt(that.currentItem.css("paddingRight")||0, 10)); }
					}
				};
			}
	
			//Create the placeholder
			that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));
	
			//Append it after the actual current item
			that.currentItem.after(that.placeholder);
	
			//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
			o.placeholder.update(that, that.placeholder);
	
		},
	
		_createTrPlaceholder: function( sourceTr, targetTr ) {
			var that = this;
	
			sourceTr.children().each(function() {
				$( "<td>&#160;</td>", that.document[ 0 ] )
					.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
					.appendTo( targetTr );
			});
		},
	
		_contactContainers: function(event) {
			var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis,
				innermostContainer = null,
				innermostIndex = null;
	
			// get innermost container that intersects with item
			for (i = this.containers.length - 1; i >= 0; i--) {
	
				// never consider a container that's located within the item itself
				if($.contains(this.currentItem[0], this.containers[i].element[0])) {
					continue;
				}
	
				if(this._intersectsWith(this.containers[i].containerCache)) {
	
					// if we've already found a container and it's more "inner" than this, then continue
					if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
						continue;
					}
	
					innermostContainer = this.containers[i];
					innermostIndex = i;
	
				} else {
					// container doesn't intersect. trigger "out" event if necessary
					if(this.containers[i].containerCache.over) {
						this.containers[i]._trigger("out", event, this._uiHash(this));
						this.containers[i].containerCache.over = 0;
					}
				}
	
			}
	
			// if no intersecting containers found, return
			if(!innermostContainer) {
				return;
			}
	
			// move the item into the container if it's not there already
			if(this.containers.length === 1) {
				if (!this.containers[innermostIndex].containerCache.over) {
					this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
					this.containers[innermostIndex].containerCache.over = 1;
				}
			} else {
	
				//When entering a new container, we will find the item with the least distance and append our item near it
				dist = 10000;
				itemWithLeastDistance = null;
				floating = innermostContainer.floating || this._isFloating(this.currentItem);
				posProperty = floating ? "left" : "top";
				sizeProperty = floating ? "width" : "height";
				axis = floating ? "clientX" : "clientY";
	
				for (j = this.items.length - 1; j >= 0; j--) {
					if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
						continue;
					}
					if(this.items[j].item[0] === this.currentItem[0]) {
						continue;
					}
	
					cur = this.items[j].item.offset()[posProperty];
					nearBottom = false;
					if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
						nearBottom = true;
					}
	
					if ( Math.abs( event[ axis ] - cur ) < dist ) {
						dist = Math.abs( event[ axis ] - cur );
						itemWithLeastDistance = this.items[ j ];
						this.direction = nearBottom ? "up": "down";
					}
				}
	
				//Check if dropOnEmpty is enabled
				if(!itemWithLeastDistance && !this.options.dropOnEmpty) {
					return;
				}
	
				if(this.currentContainer === this.containers[innermostIndex]) {
					if ( !this.currentContainer.containerCache.over ) {
						this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash() );
						this.currentContainer.containerCache.over = 1;
					}
					return;
				}
	
				itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
				this._trigger("change", event, this._uiHash());
				this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
				this.currentContainer = this.containers[innermostIndex];
	
				//Update the placeholder
				this.options.placeholder.update(this.currentContainer, this.placeholder);
	
				this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
				this.containers[innermostIndex].containerCache.over = 1;
			}
	
	
		},
	
		_createHelper: function(event) {
	
			var o = this.options,
				helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);
	
			//Add the helper to the DOM if that didn't happen already
			if(!helper.parents("body").length) {
				$(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
			}
	
			if(helper[0] === this.currentItem[0]) {
				this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
			}
	
			if(!helper[0].style.width || o.forceHelperSize) {
				helper.width(this.currentItem.width());
			}
			if(!helper[0].style.height || o.forceHelperSize) {
				helper.height(this.currentItem.height());
			}
	
			return helper;
	
		},
	
		_adjustOffsetFromHelper: function(obj) {
			if (typeof obj === "string") {
				obj = obj.split(" ");
			}
			if ($.isArray(obj)) {
				obj = {left: +obj[0], top: +obj[1] || 0};
			}
			if ("left" in obj) {
				this.offset.click.left = obj.left + this.margins.left;
			}
			if ("right" in obj) {
				this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
			}
			if ("top" in obj) {
				this.offset.click.top = obj.top + this.margins.top;
			}
			if ("bottom" in obj) {
				this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
			}
		},
	
		_getParentOffset: function() {
	
	
			//Get the offsetParent and cache its position
			this.offsetParent = this.helper.offsetParent();
			var po = this.offsetParent.offset();
	
			// This is a special case where we need to modify a offset calculated on start, since the following happened:
			// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
			// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
			//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
			if(this.cssPosition === "absolute" && this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) {
				po.left += this.scrollParent.scrollLeft();
				po.top += this.scrollParent.scrollTop();
			}
	
			// This needs to be actually done for all browsers, since pageX/pageY includes this information
			// with an ugly IE fix
			if( this.offsetParent[0] === this.document[0].body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
				po = { top: 0, left: 0 };
			}
	
			return {
				top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
				left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
			};
	
		},
	
		_getRelativeOffset: function() {
	
			if(this.cssPosition === "relative") {
				var p = this.currentItem.position();
				return {
					top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
					left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
				};
			} else {
				return { top: 0, left: 0 };
			}
	
		},
	
		_cacheMargins: function() {
			this.margins = {
				left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
				top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
			};
		},
	
		_cacheHelperProportions: function() {
			this.helperProportions = {
				width: this.helper.outerWidth(),
				height: this.helper.outerHeight()
			};
		},
	
		_setContainment: function() {
	
			var ce, co, over,
				o = this.options;
			if(o.containment === "parent") {
				o.containment = this.helper[0].parentNode;
			}
			if(o.containment === "document" || o.containment === "window") {
				this.containment = [
					0 - this.offset.relative.left - this.offset.parent.left,
					0 - this.offset.relative.top - this.offset.parent.top,
					o.containment === "document" ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left,
					(o.containment === "document" ? this.document.width() : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
				];
			}
	
			if(!(/^(document|window|parent)$/).test(o.containment)) {
				ce = $(o.containment)[0];
				co = $(o.containment).offset();
				over = ($(ce).css("overflow") !== "hidden");
	
				this.containment = [
					co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
					co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
					co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
					co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
				];
			}
	
		},
	
		_convertPositionTo: function(d, pos) {
	
			if(!pos) {
				pos = this.position;
			}
			var mod = d === "absolute" ? 1 : -1,
				scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
				scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
	
			return {
				top: (
					pos.top	+																// The absolute mouse position
					this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top * mod -											// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
				),
				left: (
					pos.left +																// The absolute mouse position
					this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
				)
			};
	
		},
	
		_generatePosition: function(event) {
	
			var top, left,
				o = this.options,
				pageX = event.pageX,
				pageY = event.pageY,
				scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
	
			// This is another very weird special case that only happens for relative elements:
			// 1. If the css position is relative
			// 2. and the scroll parent is the document or similar to the offset parent
			// we have to refresh the relative offset during the scroll so there are no jumps
			if(this.cssPosition === "relative" && !(this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0])) {
				this.offset.relative = this._getRelativeOffset();
			}
	
			/*
			 * - Position constraining -
			 * Constrain the position to a mix of grid, containment.
			 */
	
			if(this.originalPosition) { //If we are not dragging yet, we won't check for options
	
				if(this.containment) {
					if(event.pageX - this.offset.click.left < this.containment[0]) {
						pageX = this.containment[0] + this.offset.click.left;
					}
					if(event.pageY - this.offset.click.top < this.containment[1]) {
						pageY = this.containment[1] + this.offset.click.top;
					}
					if(event.pageX - this.offset.click.left > this.containment[2]) {
						pageX = this.containment[2] + this.offset.click.left;
					}
					if(event.pageY - this.offset.click.top > this.containment[3]) {
						pageY = this.containment[3] + this.offset.click.top;
					}
				}
	
				if(o.grid) {
					top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
					pageY = this.containment ? ( (top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;
	
					left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
					pageX = this.containment ? ( (left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
				}
	
			}
	
			return {
				top: (
					pageY -																// The absolute mouse position
					this.offset.click.top -													// Click offset (relative to the element)
					this.offset.relative.top	-											// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
				),
				left: (
					pageX -																// The absolute mouse position
					this.offset.click.left -												// Click offset (relative to the element)
					this.offset.relative.left	-											// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
				)
			};
	
		},
	
		_rearrange: function(event, i, a, hardRefresh) {
	
			a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));
	
			//Various things done here to improve the performance:
			// 1. we create a setTimeout, that calls refreshPositions
			// 2. on the instance, we have a counter variable, that get's higher after every append
			// 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
			// 4. this lets only the last addition to the timeout stack through
			this.counter = this.counter ? ++this.counter : 1;
			var counter = this.counter;
	
			this._delay(function() {
				if(counter === this.counter) {
					this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
				}
			});
	
		},
	
		_clear: function(event, noPropagation) {
	
			this.reverting = false;
			// We delay all events that have to be triggered to after the point where the placeholder has been removed and
			// everything else normalized again
			var i,
				delayedTriggers = [];
	
			// We first have to update the dom position of the actual currentItem
			// Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
			if(!this._noFinalSort && this.currentItem.parent().length) {
				this.placeholder.before(this.currentItem);
			}
			this._noFinalSort = null;
	
			if(this.helper[0] === this.currentItem[0]) {
				for(i in this._storedCSS) {
					if(this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
						this._storedCSS[i] = "";
					}
				}
				this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
			} else {
				this.currentItem.show();
			}
	
			if(this.fromOutside && !noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
			}
			if((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
			}
	
			// Check if the items Container has Changed and trigger appropriate
			// events.
			if (this !== this.currentContainer) {
				if(!noPropagation) {
					delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
					delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
					delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
				}
			}
	
	
			//Post events to containers
			function delayEvent( type, instance, container ) {
				return function( event ) {
					container._trigger( type, event, instance._uiHash( instance ) );
				};
			}
			for (i = this.containers.length - 1; i >= 0; i--){
				if (!noPropagation) {
					delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
				}
				if(this.containers[i].containerCache.over) {
					delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
					this.containers[i].containerCache.over = 0;
				}
			}
	
			//Do what was originally in plugins
			if ( this.storedCursor ) {
				this.document.find( "body" ).css( "cursor", this.storedCursor );
				this.storedStylesheet.remove();
			}
			if(this._storedOpacity) {
				this.helper.css("opacity", this._storedOpacity);
			}
			if(this._storedZIndex) {
				this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
			}
	
			this.dragging = false;
	
			if(!noPropagation) {
				this._trigger("beforeStop", event, this._uiHash());
			}
	
			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
			this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
	
			if ( !this.cancelHelperRemoval ) {
				if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
					this.helper.remove();
				}
				this.helper = null;
			}
	
			if(!noPropagation) {
				for (i=0; i < delayedTriggers.length; i++) {
					delayedTriggers[i].call(this, event);
				} //Trigger all delayed events
				this._trigger("stop", event, this._uiHash());
			}
	
			this.fromOutside = false;
			return !this.cancelHelperRemoval;
	
		},
	
		_trigger: function() {
			if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
				this.cancel();
			}
		},
	
		_uiHash: function(_inst) {
			var inst = _inst || this;
			return {
				helper: inst.helper,
				placeholder: inst.placeholder || $([]),
				position: inst.position,
				originalPosition: inst.originalPosition,
				offset: inst.positionAbs,
				item: inst.currentItem,
				sender: _inst ? _inst.element : null
			};
		}
	
	});
	
	
	/*!
	 * jQuery UI Spinner 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/spinner/
	 */
	
	
	function spinner_modifier( fn ) {
		return function() {
			var previous = this.element.val();
			fn.apply( this, arguments );
			this._refresh();
			if ( previous !== this.element.val() ) {
				this._trigger( "change" );
			}
		};
	}
	
	var spinner = $.widget( "ui.spinner", {
		version: "1.11.4",
		defaultElement: "<input>",
		widgetEventPrefix: "spin",
		options: {
			culture: null,
			icons: {
				down: "ui-icon-triangle-1-s",
				up: "ui-icon-triangle-1-n"
			},
			incremental: true,
			max: null,
			min: null,
			numberFormat: null,
			page: 10,
			step: 1,
	
			change: null,
			spin: null,
			start: null,
			stop: null
		},
	
		_create: function() {
			// handle string values that need to be parsed
			this._setOption( "max", this.options.max );
			this._setOption( "min", this.options.min );
			this._setOption( "step", this.options.step );
	
			// Only format if there is a value, prevents the field from being marked
			// as invalid in Firefox, see #9573.
			if ( this.value() !== "" ) {
				// Format the value, but don't constrain.
				this._value( this.element.val(), true );
			}
	
			this._draw();
			this._on( this._events );
			this._refresh();
	
			// turning off autocomplete prevents the browser from remembering the
			// value when navigating through history, so we re-enable autocomplete
			// if the page is unloaded before the widget is destroyed. #7790
			this._on( this.window, {
				beforeunload: function() {
					this.element.removeAttr( "autocomplete" );
				}
			});
		},
	
		_getCreateOptions: function() {
			var options = {},
				element = this.element;
	
			$.each( [ "min", "max", "step" ], function( i, option ) {
				var value = element.attr( option );
				if ( value !== undefined && value.length ) {
					options[ option ] = value;
				}
			});
	
			return options;
		},
	
		_events: {
			keydown: function( event ) {
				if ( this._start( event ) && this._keydown( event ) ) {
					event.preventDefault();
				}
			},
			keyup: "_stop",
			focus: function() {
				this.previous = this.element.val();
			},
			blur: function( event ) {
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}
	
				this._stop();
				this._refresh();
				if ( this.previous !== this.element.val() ) {
					this._trigger( "change", event );
				}
			},
			mousewheel: function( event, delta ) {
				if ( !delta ) {
					return;
				}
				if ( !this.spinning && !this._start( event ) ) {
					return false;
				}
	
				this._spin( (delta > 0 ? 1 : -1) * this.options.step, event );
				clearTimeout( this.mousewheelTimer );
				this.mousewheelTimer = this._delay(function() {
					if ( this.spinning ) {
						this._stop( event );
					}
				}, 100 );
				event.preventDefault();
			},
			"mousedown .ui-spinner-button": function( event ) {
				var previous;
	
				// We never want the buttons to have focus; whenever the user is
				// interacting with the spinner, the focus should be on the input.
				// If the input is focused then this.previous is properly set from
				// when the input first received focus. If the input is not focused
				// then we need to set this.previous based on the value before spinning.
				previous = this.element[0] === this.document[0].activeElement ?
					this.previous : this.element.val();
				function checkFocus() {
					var isActive = this.element[0] === this.document[0].activeElement;
					if ( !isActive ) {
						this.element.focus();
						this.previous = previous;
						// support: IE
						// IE sets focus asynchronously, so we need to check if focus
						// moved off of the input because the user clicked on the button.
						this._delay(function() {
							this.previous = previous;
						});
					}
				}
	
				// ensure focus is on (or stays on) the text field
				event.preventDefault();
				checkFocus.call( this );
	
				// support: IE
				// IE doesn't prevent moving focus even with event.preventDefault()
				// so we set a flag to know when we should ignore the blur event
				// and check (again) if focus moved off of the input.
				this.cancelBlur = true;
				this._delay(function() {
					delete this.cancelBlur;
					checkFocus.call( this );
				});
	
				if ( this._start( event ) === false ) {
					return;
				}
	
				this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
			},
			"mouseup .ui-spinner-button": "_stop",
			"mouseenter .ui-spinner-button": function( event ) {
				// button will add ui-state-active if mouse was down while mouseleave and kept down
				if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
					return;
				}
	
				if ( this._start( event ) === false ) {
					return false;
				}
				this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
			},
			// TODO: do we really want to consider this a stop?
			// shouldn't we just stop the repeater and wait until mouseup before
			// we trigger the stop event?
			"mouseleave .ui-spinner-button": "_stop"
		},
	
		_draw: function() {
			var uiSpinner = this.uiSpinner = this.element
				.addClass( "ui-spinner-input" )
				.attr( "autocomplete", "off" )
				.wrap( this._uiSpinnerHtml() )
				.parent()
					// add buttons
					.append( this._buttonHtml() );
	
			this.element.attr( "role", "spinbutton" );
	
			// button bindings
			this.buttons = uiSpinner.find( ".ui-spinner-button" )
				.attr( "tabIndex", -1 )
				.button()
				.removeClass( "ui-corner-all" );
	
			// IE 6 doesn't understand height: 50% for the buttons
			// unless the wrapper has an explicit height
			if ( this.buttons.height() > Math.ceil( uiSpinner.height() * 0.5 ) &&
					uiSpinner.height() > 0 ) {
				uiSpinner.height( uiSpinner.height() );
			}
	
			// disable spinner if element was already disabled
			if ( this.options.disabled ) {
				this.disable();
			}
		},
	
		_keydown: function( event ) {
			var options = this.options,
				keyCode = $.ui.keyCode;
	
			switch ( event.keyCode ) {
			case keyCode.UP:
				this._repeat( null, 1, event );
				return true;
			case keyCode.DOWN:
				this._repeat( null, -1, event );
				return true;
			case keyCode.PAGE_UP:
				this._repeat( null, options.page, event );
				return true;
			case keyCode.PAGE_DOWN:
				this._repeat( null, -options.page, event );
				return true;
			}
	
			return false;
		},
	
		_uiSpinnerHtml: function() {
			return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
		},
	
		_buttonHtml: function() {
			return "" +
				"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>" +
					"<span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" +
				"</a>" +
				"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" +
					"<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" +
				"</a>";
		},
	
		_start: function( event ) {
			if ( !this.spinning && this._trigger( "start", event ) === false ) {
				return false;
			}
	
			if ( !this.counter ) {
				this.counter = 1;
			}
			this.spinning = true;
			return true;
		},
	
		_repeat: function( i, steps, event ) {
			i = i || 500;
	
			clearTimeout( this.timer );
			this.timer = this._delay(function() {
				this._repeat( 40, steps, event );
			}, i );
	
			this._spin( steps * this.options.step, event );
		},
	
		_spin: function( step, event ) {
			var value = this.value() || 0;
	
			if ( !this.counter ) {
				this.counter = 1;
			}
	
			value = this._adjustValue( value + step * this._increment( this.counter ) );
	
			if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false) {
				this._value( value );
				this.counter++;
			}
		},
	
		_increment: function( i ) {
			var incremental = this.options.incremental;
	
			if ( incremental ) {
				return $.isFunction( incremental ) ?
					incremental( i ) :
					Math.floor( i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1 );
			}
	
			return 1;
		},
	
		_precision: function() {
			var precision = this._precisionOf( this.options.step );
			if ( this.options.min !== null ) {
				precision = Math.max( precision, this._precisionOf( this.options.min ) );
			}
			return precision;
		},
	
		_precisionOf: function( num ) {
			var str = num.toString(),
				decimal = str.indexOf( "." );
			return decimal === -1 ? 0 : str.length - decimal - 1;
		},
	
		_adjustValue: function( value ) {
			var base, aboveMin,
				options = this.options;
	
			// make sure we're at a valid step
			// - find out where we are relative to the base (min or 0)
			base = options.min !== null ? options.min : 0;
			aboveMin = value - base;
			// - round to the nearest step
			aboveMin = Math.round(aboveMin / options.step) * options.step;
			// - rounding is based on 0, so adjust back to our base
			value = base + aboveMin;
	
			// fix precision from bad JS floating point math
			value = parseFloat( value.toFixed( this._precision() ) );
	
			// clamp the value
			if ( options.max !== null && value > options.max) {
				return options.max;
			}
			if ( options.min !== null && value < options.min ) {
				return options.min;
			}
	
			return value;
		},
	
		_stop: function( event ) {
			if ( !this.spinning ) {
				return;
			}
	
			clearTimeout( this.timer );
			clearTimeout( this.mousewheelTimer );
			this.counter = 0;
			this.spinning = false;
			this._trigger( "stop", event );
		},
	
		_setOption: function( key, value ) {
			if ( key === "culture" || key === "numberFormat" ) {
				var prevValue = this._parse( this.element.val() );
				this.options[ key ] = value;
				this.element.val( this._format( prevValue ) );
				return;
			}
	
			if ( key === "max" || key === "min" || key === "step" ) {
				if ( typeof value === "string" ) {
					value = this._parse( value );
				}
			}
			if ( key === "icons" ) {
				this.buttons.first().find( ".ui-icon" )
					.removeClass( this.options.icons.up )
					.addClass( value.up );
				this.buttons.last().find( ".ui-icon" )
					.removeClass( this.options.icons.down )
					.addClass( value.down );
			}
	
			this._super( key, value );
	
			if ( key === "disabled" ) {
				this.widget().toggleClass( "ui-state-disabled", !!value );
				this.element.prop( "disabled", !!value );
				this.buttons.button( value ? "disable" : "enable" );
			}
		},
	
		_setOptions: spinner_modifier(function( options ) {
			this._super( options );
		}),
	
		_parse: function( val ) {
			if ( typeof val === "string" && val !== "" ) {
				val = window.Globalize && this.options.numberFormat ?
					Globalize.parseFloat( val, 10, this.options.culture ) : +val;
			}
			return val === "" || isNaN( val ) ? null : val;
		},
	
		_format: function( value ) {
			if ( value === "" ) {
				return "";
			}
			return window.Globalize && this.options.numberFormat ?
				Globalize.format( value, this.options.numberFormat, this.options.culture ) :
				value;
		},
	
		_refresh: function() {
			this.element.attr({
				"aria-valuemin": this.options.min,
				"aria-valuemax": this.options.max,
				// TODO: what should we do with values that can't be parsed?
				"aria-valuenow": this._parse( this.element.val() )
			});
		},
	
		isValid: function() {
			var value = this.value();
	
			// null is invalid
			if ( value === null ) {
				return false;
			}
	
			// if value gets adjusted, it's invalid
			return value === this._adjustValue( value );
		},
	
		// update the value without triggering change
		_value: function( value, allowAny ) {
			var parsed;
			if ( value !== "" ) {
				parsed = this._parse( value );
				if ( parsed !== null ) {
					if ( !allowAny ) {
						parsed = this._adjustValue( parsed );
					}
					value = this._format( parsed );
				}
			}
			this.element.val( value );
			this._refresh();
		},
	
		_destroy: function() {
			this.element
				.removeClass( "ui-spinner-input" )
				.prop( "disabled", false )
				.removeAttr( "autocomplete" )
				.removeAttr( "role" )
				.removeAttr( "aria-valuemin" )
				.removeAttr( "aria-valuemax" )
				.removeAttr( "aria-valuenow" );
			this.uiSpinner.replaceWith( this.element );
		},
	
		stepUp: spinner_modifier(function( steps ) {
			this._stepUp( steps );
		}),
		_stepUp: function( steps ) {
			if ( this._start() ) {
				this._spin( (steps || 1) * this.options.step );
				this._stop();
			}
		},
	
		stepDown: spinner_modifier(function( steps ) {
			this._stepDown( steps );
		}),
		_stepDown: function( steps ) {
			if ( this._start() ) {
				this._spin( (steps || 1) * -this.options.step );
				this._stop();
			}
		},
	
		pageUp: spinner_modifier(function( pages ) {
			this._stepUp( (pages || 1) * this.options.page );
		}),
	
		pageDown: spinner_modifier(function( pages ) {
			this._stepDown( (pages || 1) * this.options.page );
		}),
	
		value: function( newVal ) {
			if ( !arguments.length ) {
				return this._parse( this.element.val() );
			}
			spinner_modifier( this._value ).call( this, newVal );
		},
	
		widget: function() {
			return this.uiSpinner;
		}
	});
	
	
	/*!
	 * jQuery UI Tabs 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/tabs/
	 */
	
	
	var tabs = $.widget( "ui.tabs", {
		version: "1.11.4",
		delay: 300,
		options: {
			active: null,
			collapsible: false,
			event: "click",
			heightStyle: "content",
			hide: null,
			show: null,
	
			// callbacks
			activate: null,
			beforeActivate: null,
			beforeLoad: null,
			load: null
		},
	
		_isLocal: (function() {
			var rhash = /#.*$/;
	
			return function( anchor ) {
				var anchorUrl, locationUrl;
	
				// support: IE7
				// IE7 doesn't normalize the href property when set via script (#9317)
				anchor = anchor.cloneNode( false );
	
				anchorUrl = anchor.href.replace( rhash, "" );
				locationUrl = location.href.replace( rhash, "" );
	
				// decoding may throw an error if the URL isn't UTF-8 (#9518)
				try {
					anchorUrl = decodeURIComponent( anchorUrl );
				} catch ( error ) {}
				try {
					locationUrl = decodeURIComponent( locationUrl );
				} catch ( error ) {}
	
				return anchor.hash.length > 1 && anchorUrl === locationUrl;
			};
		})(),
	
		_create: function() {
			var that = this,
				options = this.options;
	
			this.running = false;
	
			this.element
				.addClass( "ui-tabs ui-widget ui-widget-content ui-corner-all" )
				.toggleClass( "ui-tabs-collapsible", options.collapsible );
	
			this._processTabs();
			options.active = this._initialActive();
	
			// Take disabling tabs via class attribute from HTML
			// into account and update option properly.
			if ( $.isArray( options.disabled ) ) {
				options.disabled = $.unique( options.disabled.concat(
					$.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
						return that.tabs.index( li );
					})
				) ).sort();
			}
	
			// check for length avoids error when initializing empty list
			if ( this.options.active !== false && this.anchors.length ) {
				this.active = this._findActive( options.active );
			} else {
				this.active = $();
			}
	
			this._refresh();
	
			if ( this.active.length ) {
				this.load( options.active );
			}
		},
	
		_initialActive: function() {
			var active = this.options.active,
				collapsible = this.options.collapsible,
				locationHash = location.hash.substring( 1 );
	
			if ( active === null ) {
				// check the fragment identifier in the URL
				if ( locationHash ) {
					this.tabs.each(function( i, tab ) {
						if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
							active = i;
							return false;
						}
					});
				}
	
				// check for a tab marked active via a class
				if ( active === null ) {
					active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
				}
	
				// no active tab, set to false
				if ( active === null || active === -1 ) {
					active = this.tabs.length ? 0 : false;
				}
			}
	
			// handle numbers: negative, out of range
			if ( active !== false ) {
				active = this.tabs.index( this.tabs.eq( active ) );
				if ( active === -1 ) {
					active = collapsible ? false : 0;
				}
			}
	
			// don't allow collapsible: false and active: false
			if ( !collapsible && active === false && this.anchors.length ) {
				active = 0;
			}
	
			return active;
		},
	
		_getCreateEventData: function() {
			return {
				tab: this.active,
				panel: !this.active.length ? $() : this._getPanelForTab( this.active )
			};
		},
	
		_tabKeydown: function( event ) {
			var focusedTab = $( this.document[0].activeElement ).closest( "li" ),
				selectedIndex = this.tabs.index( focusedTab ),
				goingForward = true;
	
			if ( this._handlePageNav( event ) ) {
				return;
			}
	
			switch ( event.keyCode ) {
				case $.ui.keyCode.RIGHT:
				case $.ui.keyCode.DOWN:
					selectedIndex++;
					break;
				case $.ui.keyCode.UP:
				case $.ui.keyCode.LEFT:
					goingForward = false;
					selectedIndex--;
					break;
				case $.ui.keyCode.END:
					selectedIndex = this.anchors.length - 1;
					break;
				case $.ui.keyCode.HOME:
					selectedIndex = 0;
					break;
				case $.ui.keyCode.SPACE:
					// Activate only, no collapsing
					event.preventDefault();
					clearTimeout( this.activating );
					this._activate( selectedIndex );
					return;
				case $.ui.keyCode.ENTER:
					// Toggle (cancel delayed activation, allow collapsing)
					event.preventDefault();
					clearTimeout( this.activating );
					// Determine if we should collapse or activate
					this._activate( selectedIndex === this.options.active ? false : selectedIndex );
					return;
				default:
					return;
			}
	
			// Focus the appropriate tab, based on which key was pressed
			event.preventDefault();
			clearTimeout( this.activating );
			selectedIndex = this._focusNextTab( selectedIndex, goingForward );
	
			// Navigating with control/command key will prevent automatic activation
			if ( !event.ctrlKey && !event.metaKey ) {
	
				// Update aria-selected immediately so that AT think the tab is already selected.
				// Otherwise AT may confuse the user by stating that they need to activate the tab,
				// but the tab will already be activated by the time the announcement finishes.
				focusedTab.attr( "aria-selected", "false" );
				this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );
	
				this.activating = this._delay(function() {
					this.option( "active", selectedIndex );
				}, this.delay );
			}
		},
	
		_panelKeydown: function( event ) {
			if ( this._handlePageNav( event ) ) {
				return;
			}
	
			// Ctrl+up moves focus to the current tab
			if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
				event.preventDefault();
				this.active.focus();
			}
		},
	
		// Alt+page up/down moves focus to the previous/next tab (and activates)
		_handlePageNav: function( event ) {
			if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
				this._activate( this._focusNextTab( this.options.active - 1, false ) );
				return true;
			}
			if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
				this._activate( this._focusNextTab( this.options.active + 1, true ) );
				return true;
			}
		},
	
		_findNextTab: function( index, goingForward ) {
			var lastTabIndex = this.tabs.length - 1;
	
			function constrain() {
				if ( index > lastTabIndex ) {
					index = 0;
				}
				if ( index < 0 ) {
					index = lastTabIndex;
				}
				return index;
			}
	
			while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
				index = goingForward ? index + 1 : index - 1;
			}
	
			return index;
		},
	
		_focusNextTab: function( index, goingForward ) {
			index = this._findNextTab( index, goingForward );
			this.tabs.eq( index ).focus();
			return index;
		},
	
		_setOption: function( key, value ) {
			if ( key === "active" ) {
				// _activate() will handle invalid values and update this.options
				this._activate( value );
				return;
			}
	
			if ( key === "disabled" ) {
				// don't use the widget factory's disabled handling
				this._setupDisabled( value );
				return;
			}
	
			this._super( key, value);
	
			if ( key === "collapsible" ) {
				this.element.toggleClass( "ui-tabs-collapsible", value );
				// Setting collapsible: false while collapsed; open first panel
				if ( !value && this.options.active === false ) {
					this._activate( 0 );
				}
			}
	
			if ( key === "event" ) {
				this._setupEvents( value );
			}
	
			if ( key === "heightStyle" ) {
				this._setupHeightStyle( value );
			}
		},
	
		_sanitizeSelector: function( hash ) {
			return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
		},
	
		refresh: function() {
			var options = this.options,
				lis = this.tablist.children( ":has(a[href])" );
	
			// get disabled tabs from class attribute from HTML
			// this will get converted to a boolean if needed in _refresh()
			options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
				return lis.index( tab );
			});
	
			this._processTabs();
	
			// was collapsed or no tabs
			if ( options.active === false || !this.anchors.length ) {
				options.active = false;
				this.active = $();
			// was active, but active tab is gone
			} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {
				// all remaining tabs are disabled
				if ( this.tabs.length === options.disabled.length ) {
					options.active = false;
					this.active = $();
				// activate previous tab
				} else {
					this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
				}
			// was active, active tab still exists
			} else {
				// make sure active index is correct
				options.active = this.tabs.index( this.active );
			}
	
			this._refresh();
		},
	
		_refresh: function() {
			this._setupDisabled( this.options.disabled );
			this._setupEvents( this.options.event );
			this._setupHeightStyle( this.options.heightStyle );
	
			this.tabs.not( this.active ).attr({
				"aria-selected": "false",
				"aria-expanded": "false",
				tabIndex: -1
			});
			this.panels.not( this._getPanelForTab( this.active ) )
				.hide()
				.attr({
					"aria-hidden": "true"
				});
	
			// Make sure one tab is in the tab order
			if ( !this.active.length ) {
				this.tabs.eq( 0 ).attr( "tabIndex", 0 );
			} else {
				this.active
					.addClass( "ui-tabs-active ui-state-active" )
					.attr({
						"aria-selected": "true",
						"aria-expanded": "true",
						tabIndex: 0
					});
				this._getPanelForTab( this.active )
					.show()
					.attr({
						"aria-hidden": "false"
					});
			}
		},
	
		_processTabs: function() {
			var that = this,
				prevTabs = this.tabs,
				prevAnchors = this.anchors,
				prevPanels = this.panels;
	
			this.tablist = this._getList()
				.addClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
				.attr( "role", "tablist" )
	
				// Prevent users from focusing disabled tabs via click
				.delegate( "> li", "mousedown" + this.eventNamespace, function( event ) {
					if ( $( this ).is( ".ui-state-disabled" ) ) {
						event.preventDefault();
					}
				})
	
				// support: IE <9
				// Preventing the default action in mousedown doesn't prevent IE
				// from focusing the element, so if the anchor gets focused, blur.
				// We don't have to worry about focusing the previously focused
				// element since clicking on a non-focusable element should focus
				// the body anyway.
				.delegate( ".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
					if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
						this.blur();
					}
				});
	
			this.tabs = this.tablist.find( "> li:has(a[href])" )
				.addClass( "ui-state-default ui-corner-top" )
				.attr({
					role: "tab",
					tabIndex: -1
				});
	
			this.anchors = this.tabs.map(function() {
					return $( "a", this )[ 0 ];
				})
				.addClass( "ui-tabs-anchor" )
				.attr({
					role: "presentation",
					tabIndex: -1
				});
	
			this.panels = $();
	
			this.anchors.each(function( i, anchor ) {
				var selector, panel, panelId,
					anchorId = $( anchor ).uniqueId().attr( "id" ),
					tab = $( anchor ).closest( "li" ),
					originalAriaControls = tab.attr( "aria-controls" );
	
				// inline tab
				if ( that._isLocal( anchor ) ) {
					selector = anchor.hash;
					panelId = selector.substring( 1 );
					panel = that.element.find( that._sanitizeSelector( selector ) );
				// remote tab
				} else {
					// If the tab doesn't already have aria-controls,
					// generate an id by using a throw-away element
					panelId = tab.attr( "aria-controls" ) || $( {} ).uniqueId()[ 0 ].id;
					selector = "#" + panelId;
					panel = that.element.find( selector );
					if ( !panel.length ) {
						panel = that._createPanel( panelId );
						panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
					}
					panel.attr( "aria-live", "polite" );
				}
	
				if ( panel.length) {
					that.panels = that.panels.add( panel );
				}
				if ( originalAriaControls ) {
					tab.data( "ui-tabs-aria-controls", originalAriaControls );
				}
				tab.attr({
					"aria-controls": panelId,
					"aria-labelledby": anchorId
				});
				panel.attr( "aria-labelledby", anchorId );
			});
	
			this.panels
				.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
				.attr( "role", "tabpanel" );
	
			// Avoid memory leaks (#10056)
			if ( prevTabs ) {
				this._off( prevTabs.not( this.tabs ) );
				this._off( prevAnchors.not( this.anchors ) );
				this._off( prevPanels.not( this.panels ) );
			}
		},
	
		// allow overriding how to find the list for rare usage scenarios (#7715)
		_getList: function() {
			return this.tablist || this.element.find( "ol,ul" ).eq( 0 );
		},
	
		_createPanel: function( id ) {
			return $( "<div>" )
				.attr( "id", id )
				.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
				.data( "ui-tabs-destroy", true );
		},
	
		_setupDisabled: function( disabled ) {
			if ( $.isArray( disabled ) ) {
				if ( !disabled.length ) {
					disabled = false;
				} else if ( disabled.length === this.anchors.length ) {
					disabled = true;
				}
			}
	
			// disable tabs
			for ( var i = 0, li; ( li = this.tabs[ i ] ); i++ ) {
				if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
					$( li )
						.addClass( "ui-state-disabled" )
						.attr( "aria-disabled", "true" );
				} else {
					$( li )
						.removeClass( "ui-state-disabled" )
						.removeAttr( "aria-disabled" );
				}
			}
	
			this.options.disabled = disabled;
		},
	
		_setupEvents: function( event ) {
			var events = {};
			if ( event ) {
				$.each( event.split(" "), function( index, eventName ) {
					events[ eventName ] = "_eventHandler";
				});
			}
	
			this._off( this.anchors.add( this.tabs ).add( this.panels ) );
			// Always prevent the default action, even when disabled
			this._on( true, this.anchors, {
				click: function( event ) {
					event.preventDefault();
				}
			});
			this._on( this.anchors, events );
			this._on( this.tabs, { keydown: "_tabKeydown" } );
			this._on( this.panels, { keydown: "_panelKeydown" } );
	
			this._focusable( this.tabs );
			this._hoverable( this.tabs );
		},
	
		_setupHeightStyle: function( heightStyle ) {
			var maxHeight,
				parent = this.element.parent();
	
			if ( heightStyle === "fill" ) {
				maxHeight = parent.height();
				maxHeight -= this.element.outerHeight() - this.element.height();
	
				this.element.siblings( ":visible" ).each(function() {
					var elem = $( this ),
						position = elem.css( "position" );
	
					if ( position === "absolute" || position === "fixed" ) {
						return;
					}
					maxHeight -= elem.outerHeight( true );
				});
	
				this.element.children().not( this.panels ).each(function() {
					maxHeight -= $( this ).outerHeight( true );
				});
	
				this.panels.each(function() {
					$( this ).height( Math.max( 0, maxHeight -
						$( this ).innerHeight() + $( this ).height() ) );
				})
				.css( "overflow", "auto" );
			} else if ( heightStyle === "auto" ) {
				maxHeight = 0;
				this.panels.each(function() {
					maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
				}).height( maxHeight );
			}
		},
	
		_eventHandler: function( event ) {
			var options = this.options,
				active = this.active,
				anchor = $( event.currentTarget ),
				tab = anchor.closest( "li" ),
				clickedIsActive = tab[ 0 ] === active[ 0 ],
				collapsing = clickedIsActive && options.collapsible,
				toShow = collapsing ? $() : this._getPanelForTab( tab ),
				toHide = !active.length ? $() : this._getPanelForTab( active ),
				eventData = {
					oldTab: active,
					oldPanel: toHide,
					newTab: collapsing ? $() : tab,
					newPanel: toShow
				};
	
			event.preventDefault();
	
			if ( tab.hasClass( "ui-state-disabled" ) ||
					// tab is already loading
					tab.hasClass( "ui-tabs-loading" ) ||
					// can't switch durning an animation
					this.running ||
					// click on active header, but not collapsible
					( clickedIsActive && !options.collapsible ) ||
					// allow canceling activation
					( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
				return;
			}
	
			options.active = collapsing ? false : this.tabs.index( tab );
	
			this.active = clickedIsActive ? $() : tab;
			if ( this.xhr ) {
				this.xhr.abort();
			}
	
			if ( !toHide.length && !toShow.length ) {
				$.error( "jQuery UI Tabs: Mismatching fragment identifier." );
			}
	
			if ( toShow.length ) {
				this.load( this.tabs.index( tab ), event );
			}
			this._toggle( event, eventData );
		},
	
		// handles show/hide for selecting tabs
		_toggle: function( event, eventData ) {
			var that = this,
				toShow = eventData.newPanel,
				toHide = eventData.oldPanel;
	
			this.running = true;
	
			function complete() {
				that.running = false;
				that._trigger( "activate", event, eventData );
			}
	
			function show() {
				eventData.newTab.closest( "li" ).addClass( "ui-tabs-active ui-state-active" );
	
				if ( toShow.length && that.options.show ) {
					that._show( toShow, that.options.show, complete );
				} else {
					toShow.show();
					complete();
				}
			}
	
			// start out by hiding, then showing, then completing
			if ( toHide.length && this.options.hide ) {
				this._hide( toHide, this.options.hide, function() {
					eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
					show();
				});
			} else {
				eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
				toHide.hide();
				show();
			}
	
			toHide.attr( "aria-hidden", "true" );
			eventData.oldTab.attr({
				"aria-selected": "false",
				"aria-expanded": "false"
			});
			// If we're switching tabs, remove the old tab from the tab order.
			// If we're opening from collapsed state, remove the previous tab from the tab order.
			// If we're collapsing, then keep the collapsing tab in the tab order.
			if ( toShow.length && toHide.length ) {
				eventData.oldTab.attr( "tabIndex", -1 );
			} else if ( toShow.length ) {
				this.tabs.filter(function() {
					return $( this ).attr( "tabIndex" ) === 0;
				})
				.attr( "tabIndex", -1 );
			}
	
			toShow.attr( "aria-hidden", "false" );
			eventData.newTab.attr({
				"aria-selected": "true",
				"aria-expanded": "true",
				tabIndex: 0
			});
		},
	
		_activate: function( index ) {
			var anchor,
				active = this._findActive( index );
	
			// trying to activate the already active panel
			if ( active[ 0 ] === this.active[ 0 ] ) {
				return;
			}
	
			// trying to collapse, simulate a click on the current active header
			if ( !active.length ) {
				active = this.active;
			}
	
			anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
			this._eventHandler({
				target: anchor,
				currentTarget: anchor,
				preventDefault: $.noop
			});
		},
	
		_findActive: function( index ) {
			return index === false ? $() : this.tabs.eq( index );
		},
	
		_getIndex: function( index ) {
			// meta-function to give users option to provide a href string instead of a numerical index.
			if ( typeof index === "string" ) {
				index = this.anchors.index( this.anchors.filter( "[href$='" + index + "']" ) );
			}
	
			return index;
		},
	
		_destroy: function() {
			if ( this.xhr ) {
				this.xhr.abort();
			}
	
			this.element.removeClass( "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible" );
	
			this.tablist
				.removeClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
				.removeAttr( "role" );
	
			this.anchors
				.removeClass( "ui-tabs-anchor" )
				.removeAttr( "role" )
				.removeAttr( "tabIndex" )
				.removeUniqueId();
	
			this.tablist.unbind( this.eventNamespace );
	
			this.tabs.add( this.panels ).each(function() {
				if ( $.data( this, "ui-tabs-destroy" ) ) {
					$( this ).remove();
				} else {
					$( this )
						.removeClass( "ui-state-default ui-state-active ui-state-disabled " +
							"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel" )
						.removeAttr( "tabIndex" )
						.removeAttr( "aria-live" )
						.removeAttr( "aria-busy" )
						.removeAttr( "aria-selected" )
						.removeAttr( "aria-labelledby" )
						.removeAttr( "aria-hidden" )
						.removeAttr( "aria-expanded" )
						.removeAttr( "role" );
				}
			});
	
			this.tabs.each(function() {
				var li = $( this ),
					prev = li.data( "ui-tabs-aria-controls" );
				if ( prev ) {
					li
						.attr( "aria-controls", prev )
						.removeData( "ui-tabs-aria-controls" );
				} else {
					li.removeAttr( "aria-controls" );
				}
			});
	
			this.panels.show();
	
			if ( this.options.heightStyle !== "content" ) {
				this.panels.css( "height", "" );
			}
		},
	
		enable: function( index ) {
			var disabled = this.options.disabled;
			if ( disabled === false ) {
				return;
			}
	
			if ( index === undefined ) {
				disabled = false;
			} else {
				index = this._getIndex( index );
				if ( $.isArray( disabled ) ) {
					disabled = $.map( disabled, function( num ) {
						return num !== index ? num : null;
					});
				} else {
					disabled = $.map( this.tabs, function( li, num ) {
						return num !== index ? num : null;
					});
				}
			}
			this._setupDisabled( disabled );
		},
	
		disable: function( index ) {
			var disabled = this.options.disabled;
			if ( disabled === true ) {
				return;
			}
	
			if ( index === undefined ) {
				disabled = true;
			} else {
				index = this._getIndex( index );
				if ( $.inArray( index, disabled ) !== -1 ) {
					return;
				}
				if ( $.isArray( disabled ) ) {
					disabled = $.merge( [ index ], disabled ).sort();
				} else {
					disabled = [ index ];
				}
			}
			this._setupDisabled( disabled );
		},
	
		load: function( index, event ) {
			index = this._getIndex( index );
			var that = this,
				tab = this.tabs.eq( index ),
				anchor = tab.find( ".ui-tabs-anchor" ),
				panel = this._getPanelForTab( tab ),
				eventData = {
					tab: tab,
					panel: panel
				},
				complete = function( jqXHR, status ) {
					if ( status === "abort" ) {
						that.panels.stop( false, true );
					}
	
					tab.removeClass( "ui-tabs-loading" );
					panel.removeAttr( "aria-busy" );
	
					if ( jqXHR === that.xhr ) {
						delete that.xhr;
					}
				};
	
			// not remote
			if ( this._isLocal( anchor[ 0 ] ) ) {
				return;
			}
	
			this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );
	
			// support: jQuery <1.8
			// jQuery <1.8 returns false if the request is canceled in beforeSend,
			// but as of 1.8, $.ajax() always returns a jqXHR object.
			if ( this.xhr && this.xhr.statusText !== "canceled" ) {
				tab.addClass( "ui-tabs-loading" );
				panel.attr( "aria-busy", "true" );
	
				this.xhr
					.done(function( response, status, jqXHR ) {
						// support: jQuery <1.8
						// http://bugs.jquery.com/ticket/11778
						setTimeout(function() {
							panel.html( response );
							that._trigger( "load", event, eventData );
	
							complete( jqXHR, status );
						}, 1 );
					})
					.fail(function( jqXHR, status ) {
						// support: jQuery <1.8
						// http://bugs.jquery.com/ticket/11778
						setTimeout(function() {
							complete( jqXHR, status );
						}, 1 );
					});
			}
		},
	
		_ajaxSettings: function( anchor, event, eventData ) {
			var that = this;
			return {
				url: anchor.attr( "href" ),
				beforeSend: function( jqXHR, settings ) {
					return that._trigger( "beforeLoad", event,
						$.extend( { jqXHR: jqXHR, ajaxSettings: settings }, eventData ) );
				}
			};
		},
	
		_getPanelForTab: function( tab ) {
			var id = $( tab ).attr( "aria-controls" );
			return this.element.find( this._sanitizeSelector( "#" + id ) );
		}
	});
	
	
	/*!
	 * jQuery UI Tooltip 1.11.4
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/tooltip/
	 */
	
	
	var tooltip = $.widget( "ui.tooltip", {
		version: "1.11.4",
		options: {
			content: function() {
				// support: IE<9, Opera in jQuery <1.7
				// .text() can't accept undefined, so coerce to a string
				var title = $( this ).attr( "title" ) || "";
				// Escape title, since we're going from an attribute to raw HTML
				return $( "<a>" ).text( title ).html();
			},
			hide: true,
			// Disabled elements have inconsistent behavior across browsers (#8661)
			items: "[title]:not([disabled])",
			position: {
				my: "left top+15",
				at: "left bottom",
				collision: "flipfit flip"
			},
			show: true,
			tooltipClass: null,
			track: false,
	
			// callbacks
			close: null,
			open: null
		},
	
		_addDescribedBy: function( elem, id ) {
			var describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ );
			describedby.push( id );
			elem
				.data( "ui-tooltip-id", id )
				.attr( "aria-describedby", $.trim( describedby.join( " " ) ) );
		},
	
		_removeDescribedBy: function( elem ) {
			var id = elem.data( "ui-tooltip-id" ),
				describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ ),
				index = $.inArray( id, describedby );
	
			if ( index !== -1 ) {
				describedby.splice( index, 1 );
			}
	
			elem.removeData( "ui-tooltip-id" );
			describedby = $.trim( describedby.join( " " ) );
			if ( describedby ) {
				elem.attr( "aria-describedby", describedby );
			} else {
				elem.removeAttr( "aria-describedby" );
			}
		},
	
		_create: function() {
			this._on({
				mouseover: "open",
				focusin: "open"
			});
	
			// IDs of generated tooltips, needed for destroy
			this.tooltips = {};
	
			// IDs of parent tooltips where we removed the title attribute
			this.parents = {};
	
			if ( this.options.disabled ) {
				this._disable();
			}
	
			// Append the aria-live region so tooltips announce correctly
			this.liveRegion = $( "<div>" )
				.attr({
					role: "log",
					"aria-live": "assertive",
					"aria-relevant": "additions"
				})
				.addClass( "ui-helper-hidden-accessible" )
				.appendTo( this.document[ 0 ].body );
		},
	
		_setOption: function( key, value ) {
			var that = this;
	
			if ( key === "disabled" ) {
				this[ value ? "_disable" : "_enable" ]();
				this.options[ key ] = value;
				// disable element style changes
				return;
			}
	
			this._super( key, value );
	
			if ( key === "content" ) {
				$.each( this.tooltips, function( id, tooltipData ) {
					that._updateContent( tooltipData.element );
				});
			}
		},
	
		_disable: function() {
			var that = this;
	
			// close open tooltips
			$.each( this.tooltips, function( id, tooltipData ) {
				var event = $.Event( "blur" );
				event.target = event.currentTarget = tooltipData.element[ 0 ];
				that.close( event, true );
			});
	
			// remove title attributes to prevent native tooltips
			this.element.find( this.options.items ).addBack().each(function() {
				var element = $( this );
				if ( element.is( "[title]" ) ) {
					element
						.data( "ui-tooltip-title", element.attr( "title" ) )
						.removeAttr( "title" );
				}
			});
		},
	
		_enable: function() {
			// restore title attributes
			this.element.find( this.options.items ).addBack().each(function() {
				var element = $( this );
				if ( element.data( "ui-tooltip-title" ) ) {
					element.attr( "title", element.data( "ui-tooltip-title" ) );
				}
			});
		},
	
		open: function( event ) {
			var that = this,
				target = $( event ? event.target : this.element )
					// we need closest here due to mouseover bubbling,
					// but always pointing at the same event target
					.closest( this.options.items );
	
			// No element to show a tooltip for or the tooltip is already open
			if ( !target.length || target.data( "ui-tooltip-id" ) ) {
				return;
			}
	
			if ( target.attr( "title" ) ) {
				target.data( "ui-tooltip-title", target.attr( "title" ) );
			}
	
			target.data( "ui-tooltip-open", true );
	
			// kill parent tooltips, custom or native, for hover
			if ( event && event.type === "mouseover" ) {
				target.parents().each(function() {
					var parent = $( this ),
						blurEvent;
					if ( parent.data( "ui-tooltip-open" ) ) {
						blurEvent = $.Event( "blur" );
						blurEvent.target = blurEvent.currentTarget = this;
						that.close( blurEvent, true );
					}
					if ( parent.attr( "title" ) ) {
						parent.uniqueId();
						that.parents[ this.id ] = {
							element: this,
							title: parent.attr( "title" )
						};
						parent.attr( "title", "" );
					}
				});
			}
	
			this._registerCloseHandlers( event, target );
			this._updateContent( target, event );
		},
	
		_updateContent: function( target, event ) {
			var content,
				contentOption = this.options.content,
				that = this,
				eventType = event ? event.type : null;
	
			if ( typeof contentOption === "string" ) {
				return this._open( event, target, contentOption );
			}
	
			content = contentOption.call( target[0], function( response ) {
	
				// IE may instantly serve a cached response for ajax requests
				// delay this call to _open so the other call to _open runs first
				that._delay(function() {
	
					// Ignore async response if tooltip was closed already
					if ( !target.data( "ui-tooltip-open" ) ) {
						return;
					}
	
					// jQuery creates a special event for focusin when it doesn't
					// exist natively. To improve performance, the native event
					// object is reused and the type is changed. Therefore, we can't
					// rely on the type being correct after the event finished
					// bubbling, so we set it back to the previous value. (#8740)
					if ( event ) {
						event.type = eventType;
					}
					this._open( event, target, response );
				});
			});
			if ( content ) {
				this._open( event, target, content );
			}
		},
	
		_open: function( event, target, content ) {
			var tooltipData, tooltip, delayedShow, a11yContent,
				positionOption = $.extend( {}, this.options.position );
	
			if ( !content ) {
				return;
			}
	
			// Content can be updated multiple times. If the tooltip already
			// exists, then just update the content and bail.
			tooltipData = this._find( target );
			if ( tooltipData ) {
				tooltipData.tooltip.find( ".ui-tooltip-content" ).html( content );
				return;
			}
	
			// if we have a title, clear it to prevent the native tooltip
			// we have to check first to avoid defining a title if none exists
			// (we don't want to cause an element to start matching [title])
			//
			// We use removeAttr only for key events, to allow IE to export the correct
			// accessible attributes. For mouse events, set to empty string to avoid
			// native tooltip showing up (happens only when removing inside mouseover).
			if ( target.is( "[title]" ) ) {
				if ( event && event.type === "mouseover" ) {
					target.attr( "title", "" );
				} else {
					target.removeAttr( "title" );
				}
			}
	
			tooltipData = this._tooltip( target );
			tooltip = tooltipData.tooltip;
			this._addDescribedBy( target, tooltip.attr( "id" ) );
			tooltip.find( ".ui-tooltip-content" ).html( content );
	
			// Support: Voiceover on OS X, JAWS on IE <= 9
			// JAWS announces deletions even when aria-relevant="additions"
			// Voiceover will sometimes re-read the entire log region's contents from the beginning
			this.liveRegion.children().hide();
			if ( content.clone ) {
				a11yContent = content.clone();
				a11yContent.removeAttr( "id" ).find( "[id]" ).removeAttr( "id" );
			} else {
				a11yContent = content;
			}
			$( "<div>" ).html( a11yContent ).appendTo( this.liveRegion );
	
			function position( event ) {
				positionOption.of = event;
				if ( tooltip.is( ":hidden" ) ) {
					return;
				}
				tooltip.position( positionOption );
			}
			if ( this.options.track && event && /^mouse/.test( event.type ) ) {
				this._on( this.document, {
					mousemove: position
				});
				// trigger once to override element-relative positioning
				position( event );
			} else {
				tooltip.position( $.extend({
					of: target
				}, this.options.position ) );
			}
	
			tooltip.hide();
	
			this._show( tooltip, this.options.show );
			// Handle tracking tooltips that are shown with a delay (#8644). As soon
			// as the tooltip is visible, position the tooltip using the most recent
			// event.
			if ( this.options.show && this.options.show.delay ) {
				delayedShow = this.delayedShow = setInterval(function() {
					if ( tooltip.is( ":visible" ) ) {
						position( positionOption.of );
						clearInterval( delayedShow );
					}
				}, $.fx.interval );
			}
	
			this._trigger( "open", event, { tooltip: tooltip } );
		},
	
		_registerCloseHandlers: function( event, target ) {
			var events = {
				keyup: function( event ) {
					if ( event.keyCode === $.ui.keyCode.ESCAPE ) {
						var fakeEvent = $.Event(event);
						fakeEvent.currentTarget = target[0];
						this.close( fakeEvent, true );
					}
				}
			};
	
			// Only bind remove handler for delegated targets. Non-delegated
			// tooltips will handle this in destroy.
			if ( target[ 0 ] !== this.element[ 0 ] ) {
				events.remove = function() {
					this._removeTooltip( this._find( target ).tooltip );
				};
			}
	
			if ( !event || event.type === "mouseover" ) {
				events.mouseleave = "close";
			}
			if ( !event || event.type === "focusin" ) {
				events.focusout = "close";
			}
			this._on( true, target, events );
		},
	
		close: function( event ) {
			var tooltip,
				that = this,
				target = $( event ? event.currentTarget : this.element ),
				tooltipData = this._find( target );
	
			// The tooltip may already be closed
			if ( !tooltipData ) {
	
				// We set ui-tooltip-open immediately upon open (in open()), but only set the
				// additional data once there's actually content to show (in _open()). So even if the
				// tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in
				// the period between open() and _open().
				target.removeData( "ui-tooltip-open" );
				return;
			}
	
			tooltip = tooltipData.tooltip;
	
			// disabling closes the tooltip, so we need to track when we're closing
			// to avoid an infinite loop in case the tooltip becomes disabled on close
			if ( tooltipData.closing ) {
				return;
			}
	
			// Clear the interval for delayed tracking tooltips
			clearInterval( this.delayedShow );
	
			// only set title if we had one before (see comment in _open())
			// If the title attribute has changed since open(), don't restore
			if ( target.data( "ui-tooltip-title" ) && !target.attr( "title" ) ) {
				target.attr( "title", target.data( "ui-tooltip-title" ) );
			}
	
			this._removeDescribedBy( target );
	
			tooltipData.hiding = true;
			tooltip.stop( true );
			this._hide( tooltip, this.options.hide, function() {
				that._removeTooltip( $( this ) );
			});
	
			target.removeData( "ui-tooltip-open" );
			this._off( target, "mouseleave focusout keyup" );
	
			// Remove 'remove' binding only on delegated targets
			if ( target[ 0 ] !== this.element[ 0 ] ) {
				this._off( target, "remove" );
			}
			this._off( this.document, "mousemove" );
	
			if ( event && event.type === "mouseleave" ) {
				$.each( this.parents, function( id, parent ) {
					$( parent.element ).attr( "title", parent.title );
					delete that.parents[ id ];
				});
			}
	
			tooltipData.closing = true;
			this._trigger( "close", event, { tooltip: tooltip } );
			if ( !tooltipData.hiding ) {
				tooltipData.closing = false;
			}
		},
	
		_tooltip: function( element ) {
			var tooltip = $( "<div>" )
					.attr( "role", "tooltip" )
					.addClass( "ui-tooltip ui-widget ui-corner-all ui-widget-content " +
						( this.options.tooltipClass || "" ) ),
				id = tooltip.uniqueId().attr( "id" );
	
			$( "<div>" )
				.addClass( "ui-tooltip-content" )
				.appendTo( tooltip );
	
			tooltip.appendTo( this.document[0].body );
	
			return this.tooltips[ id ] = {
				element: element,
				tooltip: tooltip
			};
		},
	
		_find: function( target ) {
			var id = target.data( "ui-tooltip-id" );
			return id ? this.tooltips[ id ] : null;
		},
	
		_removeTooltip: function( tooltip ) {
			tooltip.remove();
			delete this.tooltips[ tooltip.attr( "id" ) ];
		},
	
		_destroy: function() {
			var that = this;
	
			// close open tooltips
			$.each( this.tooltips, function( id, tooltipData ) {
				// Delegate to close method to handle common cleanup
				var event = $.Event( "blur" ),
					element = tooltipData.element;
				event.target = event.currentTarget = element[ 0 ];
				that.close( event, true );
	
				// Remove immediately; destroying an open tooltip doesn't use the
				// hide animation
				$( "#" + id ).remove();
	
				// Restore the title
				if ( element.data( "ui-tooltip-title" ) ) {
					// If the title attribute has changed since open(), don't restore
					if ( !element.attr( "title" ) ) {
						element.attr( "title", element.data( "ui-tooltip-title" ) );
					}
					element.removeData( "ui-tooltip-title" );
				}
			});
			this.liveRegion.remove();
		}
	});
	
	
	
	}));

/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * Created by puchunjie on 16/8/4.
	 */
	exports.config = {
	    avalonInit: function () {
	        //avalon配置
	        avalon.config({
	            debug: false
	        })
	    },
	    //域名配置
	    uploadUrl: 'http://192.168.40.87:8088/site/Model/accept',
	    downloadUrl: 'http://192.168.40.87:8088/site/Model/achieve/'
	}

/***/ },
/* 6 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 7 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 8 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 9 */
/***/ function(module, exports) {

	/**
	 * Created by puchunjie on 16/8/4.
	 */
	
	exports.addWatch = function () {
	    /*  ======================== 设置面板监听 =========================  */
	    //监听模块公共属性的变化
	    avalon.vmodels.settingspanel.$watch('baseSettingObj.moduleSet.outLook.*.*', function (a, b, name) {
	        //把修改的值同步到layouts中去
	        avalon.vmodels.app.layouts[this.layoutKey].slotModeules[this.slotModeulesKey].moduleSet.outLook = this.$model.baseSettingObj.moduleSet.outLook
	    })
	    //监听模块高级属性的变化
	    avalon.vmodels.settingspanel.$watch('baseSettingObj.moduleSet.advancedSetting.*', function (a, b, name) {
	        //把修改的值同步到layouts中去
	        avalon.vmodels.app.layouts[this.layoutKey].slotModeules[this.slotModeulesKey].moduleSet.advancedSetting = this.$model.baseSettingObj.moduleSet.advancedSetting
	    })
	
	
	
	    /*  ======================== 导航设置面板监听 =========================  */
	    //监听模块公共属性的变化
	    avalon.vmodels.navpanel.$watch('settingObj.moduleSet.outLook.*.*', function (a, b, name) {
	        //把修改的值同步到layouts中去
	        this.settingObj.moduleSet.outLook.stylesul2.top = this.$model.settingObj.moduleSet.moduleContent.defstyles.height
	        avalon.vmodels.app.layouts[this.layoutKey].slotModeules[this.slotModeulesKey] = this.$model.settingObj
	        //面板修改值去同步页面变化
	        avalon.vmodels[this.slotModeulesKey] = this.$model.settingObj
	    })
	    //监听单个li属性的变化
	    avalon.vmodels.navpanel.$watch('settingObj.moduleSet.moduleContent.*.*', function (a, b, name) {
	        //把修改的值同步到layouts中去
	        avalon.vmodels.app.layouts[this.layoutKey].slotModeules[this.slotModeulesKey] = this.$model.settingObj
	        //面板修改值去同步页面变化
	        avalon.vmodels[this.slotModeulesKey] = this.$model.settingObj
	    })
	
	
	
	    /*  ======================== 顶部栏中偏移值改变同步到页面中监听 =========================  */
	    //topBar.$watch('left', function (a, b,name) {
	    //    vm.layouts[this.layoutKey].slotModeules[this.slotModeulesKey].moduleSet.outLook.styles[name] = a
	    //})
	    //topBar.$watch('top', function (a, b,name) {
	    //    vm.layouts[this.layoutKey].slotModeules[this.slotModeulesKey].moduleSet.outLook.styles[name] = a
	    //})
	}
	


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by puchunjie on 16/8/4.
	 * 常用到的公共小方法封装集合
	 */
	__webpack_require__(2)
	var Tools = {
	    //判断对象是否为空
	    isEmptyObject: function (obj) {
	        for (var key in obj) {
	            return false;
	        }
	        return true;
	    }
	}
	
	exports.Tools = Tools

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = {
		"moduleId": "",
		"moduleName": "drag",
		"styles": {
			"height": 300,
			"width": "100%"
		},
		"slotModeules": null
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/**
	 * Created by puchunjie on 16/7/7.
	 */
	var avalon = __webpack_require__(3);
	var T =__webpack_require__(10) //公共小方法
	var cf = __webpack_require__(5);//载入通用配置项
	__webpack_require__(13);
	
	
	avalon.component('ms-drag', {
	    template: __webpack_require__(14),
	    defaults: {
	        onReady: function () {
	            var _this = this  //保存vm
	            //真是dom生成后绑定拖动函数
	            $(this.$element).resizable({
	                autoHide: true,
	                stop: function () {
	                    _this.styles.height = Number($(this).css("height").replace("px", ""))
	                }
	            });
	            //真是dom生成后绑定放置函数
	            $(this.$element).droppable({
	                activeClass: "bst-reception-wait",
	                hoverClass: "bst-reception-hover",
	                accept: ".draggle-module",//设置可接收元素的类型
	                //完成拖入后的回调,通栏中拖动添加子模块
	                drop: function (event, ui) {
	                    //保存_this指向为根vm
	                    var _this = avalon.vmodels.app
	
	                    //找出拖拽后放置模块的通栏Id
	                    var subVm = $(event.target).attr("wid")
	                    var subVmAt = subVm.split("_")[1]
	
	                    //接收容器VM,vm$model
	                    var receiveTopVm, receiveVm, receiveVmModel, receiveTopVmModel
	                    //如果模块拖入的通栏为顶部或者底部公共通栏
	                    if (subVm == 'drag_header' || subVm == 'drag_footer') {
	                        var key = subVm.split("_")[1]
	                        receiveTopVm = avalon.vmodels["public" + key][key + "Layouts"]
	                        receiveTopVmModel = avalon.vmodels["public" + key].$model[key + "Layouts"]
	                        receiveVm = avalon.vmodels["public" + key][key + "Layouts"]
	                        receiveVmModel = avalon.vmodels["public" + key].$model[key + "Layouts"]
	                    } else {
	                        //如果在app中的layouts数组中,把下标改为number类型
	                        subVmAt = Number(subVmAt)
	                        receiveTopVm = avalon.vmodels.app.layouts
	                        receiveTopVmModel = avalon.vmodels.app.$model.layouts
	                        receiveVm = avalon.vmodels.app.layouts[subVmAt]
	                        receiveVmModel = avalon.vmodels.app.$model.layouts[subVmAt]
	                    }
	
	
	                    //如果模块拖拽来源是左侧栏
	                    if ($(ui.helper).attr("data-base") == "true") {
	                        //创建一个接收模块数据空对象
	                        var moduelBox = {}
	                        //var geturl = cf.config.downloadUrl + $(ui.helper).attr("jsonname")
	                        var geturl = "http://localhost:8090/src/jsons/" + $(ui.helper).attr("jsonname") + ".json"
	                        //请求模块默认数据
	                        $.when($.ajax({type: "GET",url: geturl,dataType: "json"})).then(function (data) {
	                            moduelBox = data
	                            //复制模块数据,给复制的模块添加唯一ID
	                            moduelBox.moduleId = moduelBox.moduleName + "_" + new Date().getTime()
	                            //设置拖入通栏后的位置
	                            var t = event.pageY - $(event.target).position().top
	                            var l = event.pageX - $(".bst-main-width").offset().left
	                            moduelBox.moduleSet.outLook.styles.top = t
	                            moduelBox.moduleSet.outLook.styles.left = l
	
	                            //获取拖入模块的高度,拖入模块距离接收容器顶部的距离
	                            var moduleHeight = moduelBox.moduleSet.outLook.styles.height + moduelBox.moduleSet.outLook.styles.marginTop + moduelBox.moduleSet.outLook.styles.marginBottom
	                            var moduleTop = moduelBox.moduleSet.outLook.styles.top
	
	                            //如果模块拖出来再通栏边界,则自动撑开通栏
	                            if ((moduleHeight + moduleTop) > receiveVmModel) {
	                                receiveVm.styles.height = moduleHeight + moduleTop + 10
	                            }
	
	                            //取出当前通栏下的所有模块数据
	                            var old = T.Tools.isEmptyObject(receiveVm.slotModeules) ? {} : receiveVmModel.slotModeules
	                            //把新加的模块添加到old对象上
	                            old[moduelBox.moduleId] = moduelBox
	                            //把新的数据给到通栏子模块集合
	                            receiveVm.slotModeules = old
	                        },function(xhr){
	                            console.log(xhr)
	                        })
	                    } else {//如果是拖拽页面上的元素
	                        //获取当前被拖动元素节点
	                        var moveNow = $(ui.draggable)
	                        //当前被拖动元素节点ID
	                        var moveNowId = moveNow.attr("wid")
	                        //当前元素节点父容器ID
	                        var moveParentId = moveNow.parent().attr("wid").split("_")[1]
	                        if (moveParentId !== 'header' && moveParentId !== 'footer') {
	                            moveParentId = Number(moveParentId)
	                        }
	                        //获取偏移值
	                        var l = Number(moveNow.css("left").replace("px", ""))
	                        var t = Number(moveNow.css("top").replace("px", ""))
	                        //如果没有拖出通栏
	                        if (subVmAt == moveParentId) {
	                            //如果移除边界,就强制设为贴边
	                            if (t < 0) {
	                                t = 0
	                            } else if ((t + moveNow.outerHeight()) > moveNow.parent().height()) {
	                                t = moveNow.parent().height() - moveNow.outerHeight()
	                            }
	
	                            //取到父容器的数据对象,把移动的位置同步到数据中去
	                            receiveVm.slotModeules[moveNowId].moduleSet.outLook.styles.top = t
	                            receiveVm.slotModeules[moveNowId].moduleSet.outLook.styles.left = l
	                        } else {
	                            //调整top值
	
	                            //console.log($(event.target).position())
	                            //console.log("left:"+event.pageX+"top:"+event.pageY)
	
	                            t = event.pageY - $(event.target).position().top
	                            l = event.pageX - $(event.target).position().left
	                            //console.log(t)
	
	                            //从原父对象中复制出数据
	                            moveObj = avalon.vmodels[moveNow.parent().attr("wid")].slotModeules[moveNowId]
	                            //删除原对象中数据
	                            var oldMod
	                            if (typeof moveParentId == 'number') {
	                                oldMod = avalon.vmodels.app.$model.layouts[moveParentId].slotModeules
	                                delete oldMod[moveNowId]
	                                //如果对象为空了就设置成null
	                                oldMod = T.Tools.isEmptyObject(oldMod) ? null : oldMod
	                                avalon.vmodels.app.layouts[moveParentId].slotModeules = oldMod
	                            } else {
	                                oldMod = avalon.vmodels["public" + moveParentId].$model[moveParentId + "Layouts"].slotModeules
	                                delete oldMod[moveNowId]
	                                //如果对象为空了就设置成null
	                                oldMod = T.Tools.isEmptyObject(oldMod) ? null : oldMod
	                                avalon.vmodels["public" + moveParentId][moveParentId + "Layouts"].slotModeules = oldMod
	                            }
	
	                            //改变拖动后偏移值
	                            moveObj.moduleSet.outLook.styles.top = t
	                            moveObj.moduleSet.outLook.styles.left = l
	                            //拖动时hover为true,手动改变状态
	                            moveObj.flag = true
	
	
	                            //加入新父对象中
	                            var old = T.Tools.isEmptyObject(receiveVm.slotModeules) ? {} : receiveVmModel.slotModeules
	                            old[moveNowId] = moveObj
	                            receiveVm.slotModeules = old
	                            //调整视图层top值
	                            moveNow.css({"top":t,"left":l})
	                        }
	                    }
	                }
	            });
	
	            //禁止拖动设置宽度
	            $(this.$element).children(".ui-resizable-e").remove()
	            $(this.$element).children(".ui-resizable-se").remove()
	        },
	        //删除通栏
	        removeDrag: function () {
	            var index = Number($(this.$element).attr("wid").split("_")[1])
	            avalon.vmodels.app.layouts.removeAt(index)
	            console.log(avalon.vmodels.app.layouts.$model)
	        },
	        //通栏上移
	        moveTop: function () {
	            var index = Number($(this.$element).attr("wid").split("_")[1])
	            var arr = avalon.vmodels.app.layouts.$model
	            if (index == 0) {
	                alert("眼瞎了吗!没看到到顶了?!")
	            } else {
	                arr[index - 1] = avalon.vmodels.app.layouts.$model[index]
	                arr[index] = avalon.vmodels.app.layouts.$model[index - 1]
	                avalon.vmodels.app.layouts = arr
	            }
	        },
	        //通栏下移
	        moveBottom: function () {
	            var index = Number($(this.$element).attr("wid").split("_")[1])
	            var arr = avalon.vmodels.app.layouts.$model
	            if (index == arr.length - 1) {
	                alert("到底了,傻逼?!")
	            } else {
	                arr[index + 1] = avalon.vmodels.app.layouts.$model[index]
	                arr[index] = avalon.vmodels.app.layouts.$model[index + 1]
	                avalon.vmodels.app.layouts = arr
	            }
	        },
	        moduleId: "",
	        moduleName: 'drag',
	        styles: {
	            height: 300,
	            width: "100%"
	        },
	        slotModeules: null
	    }
	})
	
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 13 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = "<div ms-attr=\"{id: @moduleId}\"\n     class=\"bst-banner-content\"\n     ms-css=\"@styles\">\n    <xmp ms-for='(index,slotmodeul) in @slotModeules'\n         ms-widget='[{is:\"ms-\"+slotmodeul.moduleName,$id:index},slotmodeul]'></xmp>\n    <div ms-if=\"@slotModeules == null\" class=\"drag-palcehold\">{{ @palceHold || '请添加模块' }}</div>\n    <ul class=\"drag-setting\" ms-if=\"@moduleName !== 'drag_common'\">\n        <li ms-click=\"@moveTop\">上移</li>\n        <li ms-click=\"@moveBottom\">下移</li>\n        <li ms-click=\"@removeDrag\">删除</li>\n    </ul>\n</div>\n"

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by puchunjie on 16/7/7.
	 */
	var avalon = __webpack_require__(3)
	var modInit = __webpack_require__(16)
	
	avalon.component('ms-word', {
	    template: __webpack_require__(17),
	    defaults: {
	        onReady: function () {
	            //模块初始化
	            modInit.moduleInit(this)
	        },
	        addHoverStyle: function () {
	            this.flag = !this.flag
	        },
	        removeHoverStyle: function () {
	            this.flag = !this.flag
	        },
	        "moduleName": "word",
	        "moduleId": "",
	        "tools": [
	            {
	                "name": "设置",
	                "type": "settings",
	                "icon": "icon-shezhi"
	            },
	            {
	                "name": "删除",
	                "type": "delete",
	                "icon": "icon-shanchu"
	            },
	            {
	                "name": "复制",
	                "type": "copy",
	                "icon": "icon-fuzhi"
	            }
	        ],
	        "flag": true,
	        "moduleSet": {
	            "outLook": {
	                "styles": {
	                    "borderRadius": 5,
	                    "width": 100,
	                    "height": 100,
	                    "left": 0,
	                    "top": 0,
	                    "paddingTop": 0,
	                    "paddingRight": 0,
	                    "paddingBottom": 0,
	                    "paddingLeft": 0,
	                    "cursor": "move",
	                    "position": "absolute"
	                },
	                "beforeHover": {
	                    "backgroundColor": "red",
	                    "backgroundImage": "none",
	                    "backgroundPosition": "left center",
	                    "backgroundRepeat": "repeat-x",
	                    "borderTopColor": "#fff",
	                    "borderTopWidth": 1,
	                    "borderTopStyle": "dashed",
	                    "borderBottomColor": "#000",
	                    "borderBottomWidth": 2,
	                    "borderBottomStyle": "solid",
	                    "borderLeftColor": "#eee",
	                    "borderLeftWidth": 3,
	                    "borderLeftStyle": "dashed",
	                    "borderRightColor": "#c01",
	                    "borderRightWidth": 4,
	                    "borderRightStyle": "dashed"
	                },
	                "hoverStyle": {
	                    "backgroundColor": "#ccc",
	                    "backgroundImage": "none",
	                    "backgroundPosition": "left center",
	                    "backgroundRepeat": "repeat-x",
	                    "borderTopColor": "#fff",
	                    "borderTopWidth": 1,
	                    "borderTopStyle": "dashed",
	                    "borderBottomColor": "#000",
	                    "borderBottomWidth": 2,
	                    "borderBottomStyle": "solid",
	                    "borderLeftColor": "#eee",
	                    "borderLeftWidth": 10,
	                    "borderLeftStyle": "dashed",
	                    "borderRightColor": "#c01",
	                    "borderRightWidth": 8,
	                    "borderRightStyle": "dashed"
	                }
	            },
	            "moduleTitle": {
	                "isShow": true,
	                "styles": {}
	            },
	            "moduleContent": {},
	            "advancedSetting": null
	        }
	    }
	
	})
	
	avalon.component('ms-wordset', {
	    template: __webpack_require__(18),
	    defaults: {
	        "worddetails": "sdadsadsadasd"
	    }
	})

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/**
	 * Created by puchunjie on 16/8/3.
	 * 模块初始化,参数a为当前模块vm
	 */
	exports.moduleInit = function (a) {
	    var _this = a
	    $(_this.$element).draggable({
	        containment: ".bst-main-view",
	        stack: ".bst-banner-content .bst-module",
	        snap: true,
	        start: function (event, ui) {
	            //开始移动模块的时候,关闭工具条
	            avalon.vmodels.toolbar.ishide = false
	        },
	        stop: function (event, ui) {
	            var t = Number($(this).css("top").replace("px", ""))
	            var l = Number($(this).css("left").replace("px", ""))
	            //如果top值为负数则置0
	            if (t < 0) {
	                t = 0
	                $(event.targe).css("top", t)
	            }
	            //同步偏移值到layouts中和顶部工具栏中
	            _this.moduleSet.outLook.styles.top = t
	            _this.moduleSet.outLook.styles.left = l
	
	            //_this.moduleSet.outLook.styles.top = avalon.vmodels.topbar.top = t
	            //_this.moduleSet.outLook.styles.left = avalon.vmodels.topbar.left = l
	
	
	        }
	    }).resizable({
	        autoHide: true,
	        stop: function () {
	            _this.moduleSet.outLook.styles.width = Number($(this).css("width").replace("px", ""))
	            _this.moduleSet.outLook.styles.height = Number($(this).css("height").replace("px", ""))
	            //如果模块超出了通栏,则把通栏的高度自适应
	            var moduleHeight = $(this).outerHeight(true)
	            var moduleTop = Number($(this).css("top").replace("px", ""))
	            var banner = $(this).parent()
	            var bannerId = Number($(this).parent().attr("wid").split("_")[1])
	            if ((moduleHeight + moduleTop) > banner.height()) {
	                avalon.vmodels.app.layouts[bannerId].styles.height = moduleHeight + moduleTop + 10
	            }
	        }
	    }) //真是dom生成后绑定拖动函数
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = "<h1 class=\"bst-module draggle-module\" ms-css=\"@moduleSet.outLook.styles\"\n    ms-css-1=\"@flag?@moduleSet.outLook.beforeHover:@moduleSet.outLook.hoverStyle\"\n    ms-mouseenter=\"@addHoverStyle\"\n    ms-mouseleave=\"@removeHoverStyle\">\n    {{ @moduleSet.advancedSetting.worddetails }}\n</h1>"

/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = "<div class=\"attribute-content\">\n    <!--文字-->\n    <div class=\"attribute-content-item\">\n        <span class=\"attribute-name\">内容:</span>\n        <textarea type=\"text\" ms-duplex=\"@details\"></textarea>\n    </div>\n</div>"

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by puchunjie on 16/7/6.
	 */
	var avalon = __webpack_require__(3)
	__webpack_require__(20)
	
	avalon.component('ms-tabs', {
	    template: __webpack_require__(21),
	    defaults: {
	        tabs: [
	            {
	                name: '选项一',
	                component: '1'
	            },
	            {
	                name: '选项2',
	                component: '2'
	            },
	            {
	                name: '选项三',
	                component: '3'
	            }
	        ],
	        tpl: '',
	        currentTab: 0,
	        onChangeTab: function (index) {
	            this.currentTab = index;
	            this.tpl = '<p>' + this.tabs[index].component + '</p>';
	        },
	        onInit: function () {
	            var index = this.currentTab;
	            this.onChangeTab(index);
	        }
	    }
	})

/***/ },
/* 20 */
/***/ function(module, exports) {

	module.exports = "// removed by extract-text-webpack-plugin"

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = "<div class=\"ms-tab\">\n    <ul class=\"tabs\">\n        <li ms-for=\"($index, tab) in @tabs\"\n            ms-class=\"['tab', ($index == @currentTab) && 'current']\"\n            ms-click=\"@onChangeTab($index)\" >\n            <p ms-text=\"tab.name\"></p>\n        </li>\n    </ul>\n    <div class=\"panel\" ms-html=\"@tpl\"></div>\n</div>"

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/**
	 * Created by puchunjie on 16/6/30.
	 */
	var avalon = __webpack_require__(3)
	__webpack_require__(23)
	
	
	
	avalon.component('ms-menu', {
	    template: __webpack_require__(24),
	    defaults: {
	            	onReady: function () {
	                    var _this = this
	                    $(this.$element).draggable({
	                        containment: ".bst-main-view",
	                        stack: ".bst-banner-content .bst-module",
	                        snap: true,
	                        start: function (event, ui) {
	                            //开始移动模块的时候,关闭工具条
	                            avalon.vmodels.toolbar.ishide = false
	                        },
	                        stop: function () {
	                            _this.moduleSet.outLook.styles.left = Number($(this).css("left").replace("px", ""))
	                            _this.moduleSet.outLook.styles.top = Number($(this).css("top").replace("px", ""))
	                        }
	                    }).resizable({
	                        autoHide: true,
	                        stop: function () {
	                            _this.moduleSet.outLook.styles.width = Number($(this).css("width").replace("px", ""))
	                            _this.moduleSet.outLook.styles.height = Number($(this).css("height").replace("px", ""))
	                            //如果模块超出了通栏,则把通栏的高度自适应
	                            var moduleHeight = $(this).outerHeight(true)
	                            var moduleTop = Number($(this).css("top").replace("px", ""))
	                            var banner = $(this).parent()
	                            var bannerId = Number($(this).parent().attr("wid").split("_")[1])
	                            if ((moduleHeight + moduleTop) > banner.height()) {
	                                banner.height(moduleHeight + moduleTop)
	                                avalon.vmodels.app.layouts[bannerId].styles.height = moduleHeight + moduleTop
	                            }
	                        }
	                    }) //真是dom生成后绑定拖动函数
	
	                    $(this.$element).children(".ui-resizable-s").remove()
	                },
	                addHoverStyle:function(a){
	                    console.log(a)
	                    a.flag = !a.flag
	                    // console.log("qqqqq")
	                },
	                removeHoverStyle:function(a){
	                    a.flag = !a.flag
	                },
	                mouseover:function(){
	
	                }
	        },
	        
	    soleSlot: 'content'
	})
	
	
	
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 23 */
/***/ function(module, exports) {

	module.exports = "// removed by extract-text-webpack-plugin"

/***/ },
/* 24 */
/***/ function(module, exports) {

	module.exports = "<div ms-css=\"@moduleSet.outLook.styles\" class=\"menu bst-module draggle-module\">\n\n\t\t<ul>\n\t\t\t<li ms-for=\"(a,b) in @moduleSet.navData\" \n\t\t\t\tms-if-loop=\"b.cj == '1'\"  \n\t\t\t\tms-css=\"@moduleSet.moduleContent.defstyles\"     >\n\t\t\t\t<a  ms-css=\"@moduleSet.moduleContent.defstylesAlink\" \n\t\t\t\t\tms-css-1=\"b.flag?@moduleSet.moduleContent.beforeHover:@moduleSet.moduleContent.hoverstyles\" \n\t\t\t\t\tms-css-2=\"b.flag?{backgroundImage:'url('+b.befimg + ')'}:{backgroundImage:'url('+b.hovimg + ')'}\"\n\t\t\t\t\tms-css-lineheight=\"{lineHeight:@moduleSet.moduleContent.defstylesAlink.lineHeight+'px'}\"\n\t\t\t\t\tms-mouseenter=\"@addHoverStyle(b)\" \n\t\t\t\t\tms-mouseleave=\"@removeHoverStyle(b)\" >\n\t\t\t\t\t{{b.name}}\n\t\t\t\t\t<p ms-if=\"b.ename !== ''\"  ms-css=\"b.flag?@moduleSet.moduleContent.estyles:@moduleSet.moduleContent.ehovstyles\"  >\n\t\t\t\t\t{{b.ename}}</p>\n\t\t\t\t</a>\n\t\t\t  \t<ul ms-css=\"@moduleSet.outLook.stylesul2\"  class=\"ul2\">\n\t\t\t\t\t<li ms-if=\"d.cj == '2' && b.cid == d.pid\"   ms-for=\"(c,d) in @moduleSet.navData\" >\n\t\t\t\t\t\t<a ms-mouseenter=\"@addHoverStyle(d)\" ms-mouseleave=\"@removeHoverStyle(d)\" ms-css=\"@moduleSet.moduleContent.defstylesul2\" ms-css-1=\"d.flag?@moduleSet.moduleContent.beforeHoverul2:@moduleSet.moduleContent.hoverstylesul2\" >{{d.name}}</a>\n\t\t\t\t\t\t<ul class=\"ul3\">\n\t\t\t\t\t\t\t<li  ms-if=\"f.cj == '3' && d.cid == f.pid\"   ms-for=\"(e,f) in @moduleSet.navData\">\n\t\t\t\t\t\t\t<a ms-mouseenter=\"@addHoverStyle(f)\" ms-mouseleave=\"@removeHoverStyle(f)\" ms-css=\"@moduleSet.moduleContent.defstylesul3\" ms-css-1=\"f.flag?@moduleSet.moduleContent.beforeHoverul3:@moduleSet.moduleContent.hoverstylesul3\">{{f.name}}</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</li>\n\t\t</ul>\n\t\t<div style=\"overflow: hidden;clear: both;\"></div>\n\n</div>"

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/**
	 * Created by xukai on 16/6/30.
	 */
	var avalon = __webpack_require__(3)
	var modInit = __webpack_require__(16)
	__webpack_require__(26)
	
	
	
	avalon.component('ms-menu', {
	    template: __webpack_require__(27),
	    defaults: {
	            	onReady: function () {
	                    modInit.moduleInit(this)
	                    $(this.$element).children(".ui-resizable-s").remove()
	                },
	                addHoverStyle:function(a){
	                    console.log(a)
	                    a.flag = !a.flag
	                    // console.log("qqqqq")
	                },
	                removeHoverStyle:function(a){
	                    a.flag = !a.flag
	                },
	                mouseover:function(){
	
	                }
	        },
	        
	    soleSlot: 'content'
	})
	
	
	
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 26 */
/***/ function(module, exports) {

	module.exports = "// removed by extract-text-webpack-plugin"

/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = "<div ms-css=\"@moduleSet.outLook.styles\" class=\"menu bst-module draggle-module\">\n\n\t\t<ul>\n\t\t\t<li ms-for=\"(a,b) in @moduleSet.navData\" \n\t\t\t\tms-if-loop=\"b.cj == '1'\"  \n\t\t\t\tms-css=\"@moduleSet.moduleContent.defstyles\"     >\n\t\t\t\t<a ms-attr=\"{href:b.url}\"  ms-css=\"@moduleSet.moduleContent.defstylesAlink\" \n\t\t\t\t\tms-css-2=\"b.flag?{backgroundImage:'url('+b.befimg + ')'}:{backgroundImage:'url('+b.hovimg + ')'}\"\n\t\t\t\t\tms-css-1=\"b.flag?@moduleSet.moduleContent.beforeHover:@moduleSet.moduleContent.hoverstyles\" \n\t\t\t\t\tms-css-lineheight=\"{lineHeight:@moduleSet.moduleContent.defstylesAlink.lineHeight+'px'}\"\n\t\t\t\t\tms-mouseenter=\"@addHoverStyle(b)\" \n\t\t\t\t\tms-mouseleave=\"@removeHoverStyle(b)\" >\n\t\t\t\t\t{{b.name}}\n\t\t\t\t\t<p ms-if=\"b.ename !== ''\"  ms-css=\"b.flag?@moduleSet.moduleContent.estyles:@moduleSet.moduleContent.ehovstyles\"  >\n\t\t\t\t\t{{b.ename}}</p>\n\t\t\t\t</a>\n\t\t\t  \t<ul ms-css=\"@moduleSet.outLook.stylesul2\"  class=\"ul2\">\n\t\t\t\t\t<li ms-if=\"d.cj == '2' && b.cid == d.pid\"   ms-for=\"(c,d) in @moduleSet.navData\" >\n\t\t\t\t\t\t<a ms-mouseenter=\"@addHoverStyle(d)\" ms-mouseleave=\"@removeHoverStyle(d)\" ms-css=\"@moduleSet.moduleContent.defstylesul2\" ms-css-1=\"d.flag?@moduleSet.moduleContent.beforeHoverul2:@moduleSet.moduleContent.hoverstylesul2\" >{{d.name}}</a>\n\t\t\t\t\t\t<ul class=\"ul3\">\n\t\t\t\t\t\t\t<li  ms-if=\"f.cj == '3' && d.cid == f.pid\"   ms-for=\"(e,f) in @moduleSet.navData\">\n\t\t\t\t\t\t\t<a ms-mouseenter=\"@addHoverStyle(f)\" ms-mouseleave=\"@removeHoverStyle(f)\" ms-css=\"@moduleSet.moduleContent.defstylesul3\" ms-css-1=\"f.flag?@moduleSet.moduleContent.beforeHoverul3:@moduleSet.moduleContent.hoverstylesul3\">{{f.name}}</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</li>\n\t\t</ul>\n\t\t<div style=\"overflow: hidden;clear: both;\"></div>\n\n</div>"

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by puchunjie on 16/7/20.
	 */
	var avalon = __webpack_require__(3)
	var modInit = __webpack_require__(16)
	__webpack_require__(29)
	
	avalon.component('ms-picture', {
	    template: __webpack_require__(30),
	    defaults: {
	        onReady: function () {
	            modInit.moduleInit(this)
	        },
	        flag: true,
	        addHoverStyle: function () {
	            this.flag = !this.flag
	        },
	        removeHoverStyle: function () {
	            this.flag = !this.flag
	        },
	        "moduleName": "picture",
	        "moduleId": "",
	        "tools": [
	            {
	                "name": "设置",
	                "type": "settings",
	                "icon": "icon-shezhi"
	            },
	            {
	                "name": "删除",
	                "type": "delete",
	                "icon": "icon-shanchu"
	            },
	            {
	                "name": "复制",
	                "type": "copy",
	                "icon": "icon-fuzhi"
	            }
	        ],
	        "moduleSet": {
	            "styleType": {},
	            "outLook": {
	                "width": 100,
	                "height": 100,
	                "left": 0,
	                "top": 0,
	                "paddingTop": 0,
	                "paddingRight": 0,
	                "paddingBottom": 0,
	                "paddingLeft": 0,
	                "borderWidth": 10,
	                "borderStyle": "solid",
	                "borderColor": "#ccc",
	                "cursor": "move",
	                "position": "absolute"
	            },
	            "moduleTitle": {
	                "isShow": true,
	                "styles": {}
	            },
	            "moduleContent": {},
	            "advancedSetting": null
	        }
	    }
	
	})
	
	//高级设置面板
	avalon.component('ms-pictureset', {
	    template: __webpack_require__(31),
	    defaults: {
	        "src": "http://ftp.ytbbs.com/attachments/forum/201404/14/165935vfzw45q2574ggvii.gif",
	        "href": "bst.index.html",
	        "target": "_blank"
	    }
	})
	


/***/ },
/* 29 */
/***/ function(module, exports) {

	module.exports = "// removed by extract-text-webpack-plugin"

/***/ },
/* 30 */
/***/ function(module, exports) {

	module.exports = "<div class=\"bst-module draggle-module picture-module\"\n     ms-css=\"@moduleSet.outLook.styles\"\n     ms-css-1=\"@flag?@moduleSet.outLook.beforeHover:@moduleSet.outLook.hoverStyle\"\n     ms-mouseenter=\"@addHoverStyle\"\n     ms-mouseleave=\"@removeHoverStyle\">\n    <img ms-attr=\"{src:@moduleSet.advancedSetting.picturesrc}\" >\n</div>"

/***/ },
/* 31 */
/***/ function(module, exports) {

	module.exports = "<div class=\"attribute-content\">\n    <!--图片-->\n    <div class=\"attribute-content-item\">\n        <span class=\"attribute-name\">图片:</span>\n        <input type=\"text\" disabled ms-duplex=\"@src\">\n        <button>上传</button>\n    </div>\n    <div class=\"attribute-content-item\">\n        <span class=\"attribute-name\">打开方式:</span>\n        <select ms-duplex=\"@target\">\n            <option value=\"_blank\">新页面打开</option>\n            <option value=\"_self\">本页打开</option>\n        </select>\n    </div>\n    <div class=\"attribute-content-item\">\n        <span class=\"attribute-name\">链接:</span>\n        <input type=\"text\" ms-duplex=\"@href\">\n    </div>\n</div>"

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/**
	 * Created by puchunjie on 16/7/14.
	 */
	var avalon = __webpack_require__(3)
	__webpack_require__(33)//颜色拾取插件
	var cp = __webpack_require__(34)
	
	
	__webpack_require__(35)
	__webpack_require__(36)
	__webpack_require__(37)
	__webpack_require__(38)
	__webpack_require__(39)
	
	avalon.component('ms-settings', {
	    template: __webpack_require__(40),
	    defaults: {
	        onReady: function () {
	            //初始化颜色拾取
	            cp.colorPickerInit(this)
	            //初始化富文本编辑器
	            UEditorInit();
	        },
	        onViewChange: function () {
	            UEditorInit();
	        },
	        showPanel:function(target){
	            $(".attribute-wrap > div").fadeOut(200)
	            $('.'+target).fadeIn(200)
	        },
	        setDefault: function (val,oldVal,key) {
	            //参数说明:val-属性父对象集合,oldVal-默认值存储集合,key-当前属性的key值、及属性名
	            //隐藏所有自定义属性面板
	            $(".attribute-custom").hide()
	            //批量恢复默认属性
	           for(var i=0;i<val.length;i++){
	               val[i][key[i]] = oldVal[i]
	           }
	        },
	        showCustom: function (e) {
	            $(e.target).siblings(".attribute-custom").show()
	        },
	        setFliter: function (e) {
	            $(e.target).siblings(".minicolors").find("input").val('')
	            $(e.target).siblings(".minicolors").find(".minicolors-swatch-color").attr("style","")
	            var keys = $(e.target).siblings(".minicolors").find("input").attr('valName').split(".")
	            this[keys[0]][keys[1]][keys[2]][keys[3]] = ''
	        },
	        "outLook": {
	            "backgroundColor":"#ccc",
	            "backgroundImage":"none",
	            "backgroundPosition":"left center",
	            "borderRadius":0,
	            "width": 100,
	            "height": 100,
	            "left": 0,
	            "top": 0,
	            "paddingTop":0,
	            "paddingRight":0,
	            "paddingBottom":0,
	            "paddingLeft":0,
	            "borderWidth":1,
	            "borderStyle":"solid",
	            "borderColor":"#ccc",
	            "cursor": "move",
	            "position": "absolute"
	        },
	        "moduleTitle": {
	            "isShow":true,
	            "styles":{}
	
	        },
	        "moduleContent": {},
	        "advancedSetting": null
	    }
	})
	
	
	function hiddenCustom(item){
	    if(!$(item).siblings(".attribute-custom").is(":hidden")){
	        $(item).siblings(".attribute-custom").hide()
	    }
	}
	
	//初始化富文本编辑器
	function UEditorInit(){
	    if($("#container").length > 0){
	        var ue = UE.getEditor('container');
	        console.log("富文本编辑器初始化成功")
	    }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/*
	 * jQuery MiniColors: A tiny color picker built on jQuery
	 *
	 * Copyright Cory LaViska for A Beautiful Site, LLC. (http://www.abeautifulsite.net/)
	 *
	 * Licensed under the MIT license: http://opensource.org/licenses/MIT
	 *
	 */
	if(jQuery) (function($) {
		
		// Defaults
		$.minicolors = {
			defaults: {
				animationSpeed: 50,
				animationEasing: 'swing',
				change: null,
				changeDelay: 0,
				control: 'hue',
				defaultValue: '',
				hide: null,
				hideSpeed: 100,
				inline: false,
				letterCase: 'lowercase',
				opacity: false,
				position: 'bottom left',
				show: null,
				showSpeed: 100,
				theme: 'default'
			}
		};
		
		// Public methods
		$.extend($.fn, {
			minicolors: function(method, data) {
				
				switch(method) {
					
					// Destroy the control
					case 'destroy':
						$(this).each( function() {
							destroy($(this));
						});
						return $(this);
					
					// Hide the color picker
					case 'hide':
						hide();
						return $(this);
					
					// Get/set opacity
					case 'opacity':
						// Getter
						if( data === undefined ) {
							// Getter
							return $(this).attr('data-opacity');
						} else {
							// Setter
							$(this).each( function() {
								updateFromInput($(this).attr('data-opacity', data));
							});
						}
						return $(this);
					
					// Get an RGB(A) object based on the current color/opacity
					case 'rgbObject':
						return rgbObject($(this), method === 'rgbaObject');
					
					// Get an RGB(A) string based on the current color/opacity
					case 'rgbString':
					case 'rgbaString':
						return rgbString($(this), method === 'rgbaString');
					
					// Get/set settings on the fly
					case 'settings':
						if( data === undefined ) {
							return $(this).data('minicolors-settings');
						} else {
							// Setter
							$(this).each( function() {
								var settings = $(this).data('minicolors-settings') || {};
								destroy($(this));
								$(this).minicolors($.extend(true, settings, data));
							});
						}
						return $(this);
					
					// Show the color picker
					case 'show':
						show( $(this).eq(0) );
						return $(this);
					
					// Get/set the hex color value
					case 'value':
						if( data === undefined ) {
							// Getter
							return $(this).val();
						} else {
							// Setter
							$(this).each( function() {
								updateFromInput($(this).val(data));
							});
						}
						return $(this);
					
					// Initializes the control
					default:
						if( method !== 'create' ) data = method;
						$(this).each( function() {
							init($(this), data);
						});
						return $(this);
					
				}
				
			}
		});
		
		// Initialize input elements
		function init(input, settings) {
			
			var minicolors = $('<div class="minicolors" />'),
				defaults = $.minicolors.defaults;
			
			// Do nothing if already initialized
			if( input.data('minicolors-initialized') ) return;
			
			// Handle settings
			settings = $.extend(true, {}, defaults, settings);
			
			// The wrapper
			minicolors
				.addClass('minicolors-theme-' + settings.theme)
				.toggleClass('minicolors-with-opacity', settings.opacity);
			
			// Custom positioning
			if( settings.position !== undefined ) {
				$.each(settings.position.split(' '), function() {
					minicolors.addClass('minicolors-position-' + this);
				});
			}
			
			// The input
			input
				.addClass('minicolors-input')
				.data('minicolors-initialized', false)
				.data('minicolors-settings', settings)
				.prop('size', 7)
				.wrap(minicolors)
				.after(
					'<div class="minicolors-panel minicolors-slider-' + settings.control + '">' + 
						'<div class="minicolors-slider">' + 
							'<div class="minicolors-picker"></div>' +
						'</div>' + 
						'<div class="minicolors-opacity-slider">' + 
							'<div class="minicolors-picker"></div>' +
						'</div>' +
						'<div class="minicolors-grid">' +
							'<div class="minicolors-grid-inner"></div>' +
							'<div class="minicolors-picker"><div></div></div>' +
						'</div>' +
					'</div>'
				);
			
			// The swatch
			if( !settings.inline ) {
				input.after('<span class="minicolors-swatch"><span class="minicolors-swatch-color"></span></span>');
				input.next('.minicolors-swatch').on('click', function(event) {
					event.preventDefault();
					input.focus();
				});
			}
			
			// Prevent text selection in IE
			input.parent().find('.minicolors-panel').on('selectstart', function() { return false; }).end();
			
			// Inline controls
			if( settings.inline ) input.parent().addClass('minicolors-inline');
			
			updateFromInput(input, false);
			
			input.data('minicolors-initialized', true);
			
		}
		
		// Returns the input back to its original state
		function destroy(input) {
			
			var minicolors = input.parent();
			
			// Revert the input element
			input
				.removeData('minicolors-initialized')
				.removeData('minicolors-settings')
				.removeProp('size')
				.removeClass('minicolors-input');
			
			// Remove the wrap and destroy whatever remains
			minicolors.before(input).remove();
			
		}
		
		// Shows the specified dropdown panel
		function show(input) {
			
			var minicolors = input.parent(),
				panel = minicolors.find('.minicolors-panel'),
				settings = input.data('minicolors-settings');
			
			// Do nothing if uninitialized, disabled, inline, or already open
			if( !input.data('minicolors-initialized') || 
				input.prop('disabled') || 
				minicolors.hasClass('minicolors-inline') || 
				minicolors.hasClass('minicolors-focus')
			) return;
			
			hide();
			
			minicolors.addClass('minicolors-focus');
			panel
				.stop(true, true)
				.fadeIn(settings.showSpeed, function() {
					if( settings.show ) settings.show.call(input.get(0));
				});
			
		}
		
		// Hides all dropdown panels
		function hide() {
			
			$('.minicolors-input').each( function() {
				
				var input = $(this),
					settings = input.data('minicolors-settings'),
					minicolors = input.parent();
				
				// Don't hide inline controls
				if( settings.inline ) return;
				
				minicolors.find('.minicolors-panel').fadeOut(settings.hideSpeed, function() {
					if(minicolors.hasClass('minicolors-focus')) {
						if( settings.hide ) settings.hide.call(input.get(0));
					}
					minicolors.removeClass('minicolors-focus');
				});			
							
			});
		}
		
		// Moves the selected picker
		function move(target, event, animate) {
			
			var input = target.parents('.minicolors').find('.minicolors-input'),
				settings = input.data('minicolors-settings'),
				picker = target.find('[class$=-picker]'),
				offsetX = target.offset().left,
				offsetY = target.offset().top,
				x = Math.round(event.pageX - offsetX),
				y = Math.round(event.pageY - offsetY),
				duration = animate ? settings.animationSpeed : 0,
				wx, wy, r, phi;
				
			
			// Touch support
			if( event.originalEvent.changedTouches ) {
				x = event.originalEvent.changedTouches[0].pageX - offsetX;
				y = event.originalEvent.changedTouches[0].pageY - offsetY;
			}
			
			// Constrain picker to its container
			if( x < 0 ) x = 0;
			if( y < 0 ) y = 0;
			if( x > target.width() ) x = target.width();
			if( y > target.height() ) y = target.height();
			
			// Constrain color wheel values to the wheel
			if( target.parent().is('.minicolors-slider-wheel') && picker.parent().is('.minicolors-grid') ) {
				wx = 75 - x;
				wy = 75 - y;
				r = Math.sqrt(wx * wx + wy * wy);
				phi = Math.atan2(wy, wx);
				if( phi < 0 ) phi += Math.PI * 2;
				if( r > 75 ) {
					r = 75;
					x = 75 - (75 * Math.cos(phi));
					y = 75 - (75 * Math.sin(phi));
				}
				x = Math.round(x);
				y = Math.round(y);
			}
			
			// Move the picker
			if( target.is('.minicolors-grid') ) {
				picker
					.stop(true)
					.animate({
						top: y + 'px',
						left: x + 'px'
					}, duration, settings.animationEasing, function() {
						updateFromControl(input, target);
					});
			} else {
				picker
					.stop(true)
					.animate({
						top: y + 'px'
					}, duration, settings.animationEasing, function() {
						updateFromControl(input, target);
					});
			}
			
		}
		
		// Sets the input based on the color picker values
		function updateFromControl(input, target) {
			
			function getCoords(picker, container) {
				
				var left, top;
				if( !picker.length || !container ) return null;
				left = picker.offset().left;
				top = picker.offset().top;
				
				return {
					x: left - container.offset().left + (picker.outerWidth() / 2),
					y: top - container.offset().top + (picker.outerHeight() / 2)
				};
				
			}
			
			var hue, saturation, brightness, x, y, r, phi,
				
				hex = input.val(),
				opacity = input.attr('data-opacity'),
				
				// Helpful references
				minicolors = input.parent(),
				settings = input.data('minicolors-settings'),
				swatch = minicolors.find('.minicolors-swatch'),
				
				// Panel objects
				grid = minicolors.find('.minicolors-grid'),
				slider = minicolors.find('.minicolors-slider'),
				opacitySlider = minicolors.find('.minicolors-opacity-slider'),
				
				// Picker objects
				gridPicker = grid.find('[class$=-picker]'),
				sliderPicker = slider.find('[class$=-picker]'),
				opacityPicker = opacitySlider.find('[class$=-picker]'),
				
				// Picker positions
				gridPos = getCoords(gridPicker, grid),
				sliderPos = getCoords(sliderPicker, slider),
				opacityPos = getCoords(opacityPicker, opacitySlider);
			
			// Handle colors
			if( target.is('.minicolors-grid, .minicolors-slider') ) {
				
				// Determine HSB values
				switch(settings.control) {
					
					case 'wheel':
						// Calculate hue, saturation, and brightness
						x = (grid.width() / 2) - gridPos.x;
						y = (grid.height() / 2) - gridPos.y;
						r = Math.sqrt(x * x + y * y);
						phi = Math.atan2(y, x);
						if( phi < 0 ) phi += Math.PI * 2;
						if( r > 75 ) {
							r = 75;
							gridPos.x = 69 - (75 * Math.cos(phi));
							gridPos.y = 69 - (75 * Math.sin(phi));
						}
						saturation = keepWithin(r / 0.75, 0, 100);
						hue = keepWithin(phi * 180 / Math.PI, 0, 360);
						brightness = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
						hex = hsb2hex({
							h: hue,
							s: saturation,
							b: brightness
						});
						
						// Update UI
						slider.css('backgroundColor', hsb2hex({ h: hue, s: saturation, b: 100 }));
						break;
					
					case 'saturation':
						// Calculate hue, saturation, and brightness
						hue = keepWithin(parseInt(gridPos.x * (360 / grid.width()), 10), 0, 360);
						saturation = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
						brightness = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
						hex = hsb2hex({
							h: hue,
							s: saturation,
							b: brightness
						});
						
						// Update UI
						slider.css('backgroundColor', hsb2hex({ h: hue, s: 100, b: brightness }));
						minicolors.find('.minicolors-grid-inner').css('opacity', saturation / 100);
						break;
					
					case 'brightness':
						// Calculate hue, saturation, and brightness
						hue = keepWithin(parseInt(gridPos.x * (360 / grid.width()), 10), 0, 360);
						saturation = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
						brightness = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
						hex = hsb2hex({
							h: hue,
							s: saturation,
							b: brightness
						});
						
						// Update UI
						slider.css('backgroundColor', hsb2hex({ h: hue, s: saturation, b: 100 }));
						minicolors.find('.minicolors-grid-inner').css('opacity', 1 - (brightness / 100));
						break;
					
					default:
						// Calculate hue, saturation, and brightness
						hue = keepWithin(360 - parseInt(sliderPos.y * (360 / slider.height()), 10), 0, 360);
						saturation = keepWithin(Math.floor(gridPos.x * (100 / grid.width())), 0, 100);
						brightness = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
						hex = hsb2hex({
							h: hue,
							s: saturation,
							b: brightness
						});
						
						// Update UI
						grid.css('backgroundColor', hsb2hex({ h: hue, s: 100, b: 100 }));
						break;
					
				}
			
				// Adjust case
				input.val( convertCase(hex, settings.letterCase) );
				
			}
			
			// Handle opacity
			if( target.is('.minicolors-opacity-slider') ) {
				if( settings.opacity ) {
					opacity = parseFloat(1 - (opacityPos.y / opacitySlider.height())).toFixed(2);
				} else {
					opacity = 1;
				}
				if( settings.opacity ) input.attr('data-opacity', opacity);
			}
			
			// Set swatch color
			swatch.find('SPAN').css({
				backgroundColor: hex,
				opacity: opacity
			});
			
			// Handle change event
			doChange(input, hex, opacity);
			
		}
		
		// Sets the color picker values from the input
		function updateFromInput(input, preserveInputValue) {
			
			var hex,
				hsb,
				opacity,
				x, y, r, phi,
				
				// Helpful references
				minicolors = input.parent(),
				settings = input.data('minicolors-settings'),
				swatch = minicolors.find('.minicolors-swatch'),
				
				// Panel objects
				grid = minicolors.find('.minicolors-grid'),
				slider = minicolors.find('.minicolors-slider'),
				opacitySlider = minicolors.find('.minicolors-opacity-slider'),
				
				// Picker objects
				gridPicker = grid.find('[class$=-picker]'),
				sliderPicker = slider.find('[class$=-picker]'),
				opacityPicker = opacitySlider.find('[class$=-picker]');
			
			// Determine hex/HSB values
			hex = convertCase(parseHex(input.val(), true), settings.letterCase);
			if( !hex ){
				hex = convertCase(parseHex(settings.defaultValue, true), settings.letterCase);
			}
			hsb = hex2hsb(hex);
			
			// Update input value
			if( !preserveInputValue ) input.val(hex);
			
			// Determine opacity value
			if( settings.opacity ) {
				// Get from data-opacity attribute and keep within 0-1 range
				opacity = input.attr('data-opacity') === '' ? 1 : keepWithin(parseFloat(input.attr('data-opacity')).toFixed(2), 0, 1);
				if( isNaN(opacity) ) opacity = 1;
				input.attr('data-opacity', opacity);
				swatch.find('SPAN').css('opacity', opacity);
				
				// Set opacity picker position
				y = keepWithin(opacitySlider.height() - (opacitySlider.height() * opacity), 0, opacitySlider.height());
				opacityPicker.css('top', y + 'px');
			}
			
			// Update swatch
			swatch.find('SPAN').css('backgroundColor', hex);
			
			// Determine picker locations
			switch(settings.control) {
				
				case 'wheel':
					// Set grid position
					r = keepWithin(Math.ceil(hsb.s * 0.75), 0, grid.height() / 2);
					phi = hsb.h * Math.PI / 180;
					x = keepWithin(75 - Math.cos(phi) * r, 0, grid.width());
					y = keepWithin(75 - Math.sin(phi) * r, 0, grid.height());
					gridPicker.css({
						top: y + 'px',
						left: x + 'px'
					});
					
					// Set slider position
					y = 150 - (hsb.b / (100 / grid.height()));
					if( hex === '' ) y = 0;
					sliderPicker.css('top', y + 'px');
					
					// Update panel color
					slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: hsb.s, b: 100 }));
					break;
				
				case 'saturation':
					// Set grid position
					x = keepWithin((5 * hsb.h) / 12, 0, 150);
					y = keepWithin(grid.height() - Math.ceil(hsb.b / (100 / grid.height())), 0, grid.height());
					gridPicker.css({
						top: y + 'px',
						left: x + 'px'
					});				
					
					// Set slider position
					y = keepWithin(slider.height() - (hsb.s * (slider.height() / 100)), 0, slider.height());
					sliderPicker.css('top', y + 'px');
					
					// Update UI
					slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: 100, b: hsb.b }));
					minicolors.find('.minicolors-grid-inner').css('opacity', hsb.s / 100);
					break;
				
				case 'brightness':
					// Set grid position
					x = keepWithin((5 * hsb.h) / 12, 0, 150);
					y = keepWithin(grid.height() - Math.ceil(hsb.s / (100 / grid.height())), 0, grid.height());
					gridPicker.css({
						top: y + 'px',
						left: x + 'px'
					});				
					
					// Set slider position
					y = keepWithin(slider.height() - (hsb.b * (slider.height() / 100)), 0, slider.height());
					sliderPicker.css('top', y + 'px');
					
					// Update UI
					slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: hsb.s, b: 100 }));
					minicolors.find('.minicolors-grid-inner').css('opacity', 1 - (hsb.b / 100));
					break;
				
				default:
					// Set grid position
					x = keepWithin(Math.ceil(hsb.s / (100 / grid.width())), 0, grid.width());
					y = keepWithin(grid.height() - Math.ceil(hsb.b / (100 / grid.height())), 0, grid.height());
					gridPicker.css({
						top: y + 'px',
						left: x + 'px'
					});
					
					// Set slider position
					y = keepWithin(slider.height() - (hsb.h / (360 / slider.height())), 0, slider.height());
					sliderPicker.css('top', y + 'px');
					
					// Update panel color
					grid.css('backgroundColor', hsb2hex({ h: hsb.h, s: 100, b: 100 }));
					break;
					
			}
			
			// Fire change event, but only if minicolors is fully initialized
			if( input.data('minicolors-initialized') ) {
				doChange(input, hex, opacity);
			}
			
		}
		
		// Runs the change and changeDelay callbacks
		function doChange(input, hex, opacity) {
			
			var settings = input.data('minicolors-settings'),
				lastChange = input.data('minicolors-lastChange');
			
			// Only run if it actually changed
			if( !lastChange || lastChange.hex !== hex || lastChange.opacity !== opacity ) {
				
				// Remember last-changed value
				input.data('minicolors-lastChange', {
					hex: hex,
					opacity: opacity
				});
				
				// Fire change event
				if( settings.change ) {
					if( settings.changeDelay ) {
						// Call after a delay
						clearTimeout(input.data('minicolors-changeTimeout'));
						input.data('minicolors-changeTimeout', setTimeout( function() {
							settings.change.call(input.get(0), hex, opacity);
						}, settings.changeDelay));
					} else {
						// Call immediately
						settings.change.call(input.get(0), hex, opacity);
					}
				}
				input.trigger('change').trigger('input');
			}
		
		}
		
		// Generates an RGB(A) object based on the input's value
		function rgbObject(input) {
			var hex = parseHex($(input).val(), true),
				rgb = hex2rgb(hex),
				opacity = $(input).attr('data-opacity');
			if( !rgb ) return null;
			if( opacity !== undefined ) $.extend(rgb, { a: parseFloat(opacity) });
			return rgb;
		}
		
		// Genearates an RGB(A) string based on the input's value
		function rgbString(input, alpha) {
			var hex = parseHex($(input).val(), true),
				rgb = hex2rgb(hex),
				opacity = $(input).attr('data-opacity');
			if( !rgb ) return null;
			if( opacity === undefined ) opacity = 1;
			if( alpha ) {
				return 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + parseFloat(opacity) + ')';
			} else {
				return 'rgb(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ')';
			}
		}
		
		// Converts to the letter case specified in settings
		function convertCase(string, letterCase) {
			return letterCase === 'uppercase' ? string.toUpperCase() : string.toLowerCase();
		}
		
		// Parses a string and returns a valid hex string when possible
		function parseHex(string, expand) {
			string = string.replace(/[^A-F0-9]/ig, '');
			if( string.length !== 3 && string.length !== 6 ) return '';
			if( string.length === 3 && expand ) {
				string = string[0] + string[0] + string[1] + string[1] + string[2] + string[2];
			}
			return '#' + string;
		}
		
		// Keeps value within min and max
		function keepWithin(value, min, max) {
			if( value < min ) value = min;
			if( value > max ) value = max;
			return value;
		}
		
		// Converts an HSB object to an RGB object
		function hsb2rgb(hsb) {
			var rgb = {};
			var h = Math.round(hsb.h);
			var s = Math.round(hsb.s * 255 / 100);
			var v = Math.round(hsb.b * 255 / 100);
			if(s === 0) {
				rgb.r = rgb.g = rgb.b = v;
			} else {
				var t1 = v;
				var t2 = (255 - s) * v / 255;
				var t3 = (t1 - t2) * (h % 60) / 60;
				if( h === 360 ) h = 0;
				if( h < 60 ) { rgb.r = t1; rgb.b = t2; rgb.g = t2 + t3; }
				else if( h < 120 ) {rgb.g = t1; rgb.b = t2; rgb.r = t1 - t3; }
				else if( h < 180 ) {rgb.g = t1; rgb.r = t2; rgb.b = t2 + t3; }
				else if( h < 240 ) {rgb.b = t1; rgb.r = t2; rgb.g = t1 - t3; }
				else if( h < 300 ) {rgb.b = t1; rgb.g = t2; rgb.r = t2 + t3; }
				else if( h < 360 ) {rgb.r = t1; rgb.g = t2; rgb.b = t1 - t3; }
				else { rgb.r = 0; rgb.g = 0; rgb.b = 0; }
			}
			return {
				r: Math.round(rgb.r),
				g: Math.round(rgb.g),
				b: Math.round(rgb.b)
			};
		}
		
		// Converts an RGB object to a hex string
		function rgb2hex(rgb) {
			var hex = [
				rgb.r.toString(16),
				rgb.g.toString(16),
				rgb.b.toString(16)
			];
			$.each(hex, function(nr, val) {
				if (val.length === 1) hex[nr] = '0' + val;
			});
			return '#' + hex.join('');
		}
		
		// Converts an HSB object to a hex string
		function hsb2hex(hsb) {
			return rgb2hex(hsb2rgb(hsb));
		}
		
		// Converts a hex string to an HSB object
		function hex2hsb(hex) {
			var hsb = rgb2hsb(hex2rgb(hex));
			if( hsb.s === 0 ) hsb.h = 360;
			return hsb;
		}
		
		// Converts an RGB object to an HSB object
		function rgb2hsb(rgb) {
			var hsb = { h: 0, s: 0, b: 0 };
			var min = Math.min(rgb.r, rgb.g, rgb.b);
			var max = Math.max(rgb.r, rgb.g, rgb.b);
			var delta = max - min;
			hsb.b = max;
			hsb.s = max !== 0 ? 255 * delta / max : 0;
			if( hsb.s !== 0 ) {
				if( rgb.r === max ) {
					hsb.h = (rgb.g - rgb.b) / delta;
				} else if( rgb.g === max ) {
					hsb.h = 2 + (rgb.b - rgb.r) / delta;
				} else {
					hsb.h = 4 + (rgb.r - rgb.g) / delta;
				}
			} else {
				hsb.h = -1;
			}
			hsb.h *= 60;
			if( hsb.h < 0 ) {
				hsb.h += 360;
			}
			hsb.s *= 100/255;
			hsb.b *= 100/255;
			return hsb;
		}
		
		// Converts a hex string to an RGB object
		function hex2rgb(hex) {
			hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
			return {
				r: hex >> 16,
				g: (hex & 0x00FF00) >> 8,
				b: (hex & 0x0000FF)
			};
		}
		
		// Handle events
		$(document)
			// Hide on clicks outside of the control
			.on('mousedown.minicolors touchstart.minicolors', function(event) {
				if( !$(event.target).parents().add(event.target).hasClass('minicolors') ) {
					hide();
				}
			})
			// Start moving
			.on('mousedown.minicolors touchstart.minicolors', '.minicolors-grid, .minicolors-slider, .minicolors-opacity-slider', function(event) {
				var target = $(this);
				event.preventDefault();
				$(document).data('minicolors-target', target);
				move(target, event, true);
			})
			// Move pickers
			.on('mousemove.minicolors touchmove.minicolors', function(event) {
				var target = $(document).data('minicolors-target');
				if( target ) move(target, event);
			})
			// Stop moving
			.on('mouseup.minicolors touchend.minicolors', function() {
				$(this).removeData('minicolors-target');
			})
			// Show panel when swatch is clicked
			.on('mousedown.minicolors touchstart.minicolors', '.minicolors-swatch', function(event) {
				var input = $(this).parent().find('.minicolors-input');
				event.preventDefault();
				show(input);
			})
			// Show on focus
			.on('focus.minicolors', '.minicolors-input', function() {
				var input = $(this);
				if( !input.data('minicolors-initialized') ) return;
				show(input);
			})
			// Fix hex on blur
			.on('blur.minicolors', '.minicolors-input', function() {
				var input = $(this),
					settings = input.data('minicolors-settings');
				if( !input.data('minicolors-initialized') ) return;
				
				// Parse Hex
				input.val(parseHex(input.val(), true));
				
				// Is it blank?
				if( input.val() === '' ) input.val(parseHex(settings.defaultValue, true));
				
				// Adjust case
				input.val( convertCase(input.val(), settings.letterCase) );
				
			})
			// Handle keypresses
			.on('keydown.minicolors', '.minicolors-input', function(event) {
				var input = $(this);
				if( !input.data('minicolors-initialized') ) return;
				switch(event.keyCode) {
					case 9: // tab
						hide();
						break;
					case 13: // enter
					case 27: // esc
						hide();
						input.blur();
						break;
				}
			})
			// Update on keyup
			.on('keyup.minicolors', '.minicolors-input', function() {
				var input = $(this);
				if( !input.data('minicolors-initialized') ) return;
				updateFromInput(input, true);
			})
			// Update on paste
			.on('paste.minicolors', '.minicolors-input', function() {
				var input = $(this);
				if( !input.data('minicolors-initialized') ) return;
				setTimeout( function() {
					updateFromInput(input, true);
				}, 1);
			});
		
	})(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/**
	 * Created by puchunjie on 16/8/4.
	 * 颜色拾取器初始化
	 */
	
	exports.colorPickerInit = function(_this){
	    $(".color-pick").minicolors({
	        control: $(this).attr('data-control') || 'hue',
	        defaultValue: $(this).attr('data-defaultValue') || '',
	        inline: $(this).attr('data-inline') === 'true',
	        letterCase: $(this).attr('data-letterCase') || 'lowercase',
	        opacity: $(this).attr('data-opacity'),
	        position: $(this).attr('data-position') || 'bottom left',
	        changeDelay:100,
	        change: function(hex, opacity) {
	            var log;
	            try {
	                log = hex ? hex : 'transparent';
	                if( opacity ) log += ', ' + opacity;
	                var key = $(this).attr("valName").split(".")
	                _this[key[0]][key[1]][key[2]][key[3]] = log
	
	            } catch(e) {}
	        },
	        theme: 'default'
	    });
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * ueditor完整配置项
	 * 可以在这里配置整个编辑器的特性
	 */
	/**************************提示********************************
	 * 所有被注释的配置项均为UEditor默认值。
	 * 修改默认配置请首先确保已经完全明确该参数的真实用途。
	 * 主要有两种修改方案，一种是取消此处注释，然后修改成对应参数；另一种是在实例化编辑器时传入对应参数。
	 * 当升级编辑器时，可直接使用旧版配置文件替换新版配置文件,不用担心旧版配置文件中因缺少新功能所需的参数而导致脚本报错。
	 **************************提示********************************/
	
	(function () {
	
	    /**
	     * 编辑器资源文件根路径。它所表示的含义是：以编辑器实例化页面为当前路径，指向编辑器资源文件（即dialog等文件夹）的路径。
	     * 鉴于很多同学在使用编辑器的时候出现的种种路径问题，此处强烈建议大家使用"相对于网站根目录的相对路径"进行配置。
	     * "相对于网站根目录的相对路径"也就是以斜杠开头的形如"/myProject/ueditor/"这样的路径。
	     * 如果站点中有多个不在同一层级的页面需要实例化编辑器，且引用了同一UEditor的时候，此处的URL可能不适用于每个页面的编辑器。
	     * 因此，UEditor提供了针对不同页面的编辑器可单独配置的根路径，具体来说，在需要实例化编辑器的页面最顶部写上如下代码即可。当然，需要令此处的URL等于对应的配置。
	     * window.UEDITOR_HOME_URL = "/xxxx/xxxx/";
	     */
		window.UEDITOR_HOME_URL = "/src/assets/vendor/UEditor/"
	    var URL = window.UEDITOR_HOME_URL || getUEBasePath();
	
	    /**
	     * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。
	     */
	    window.UEDITOR_CONFIG = {
	
	        //为编辑器实例添加一个路径，这个不能被注释
	        UEDITOR_HOME_URL: URL
	
	        // 服务器统一请求接口路径
	        , serverUrl: URL + "php/controller.php"
	
	        //工具栏上的所有的功能按钮和下拉框，可以在new编辑器的实例时选择自己需要的重新定义
	        , toolbars: [[
	            'fullscreen', 'source', '|', 'undo', 'redo', '|',
	            'bold', 'italic', 'underline', 'fontborder', 'strikethrough', 'superscript', 'subscript', 'removeformat', 'formatmatch', 'autotypeset', 'blockquote', 'pasteplain', '|', 'forecolor', 'backcolor', 'insertorderedlist', 'insertunorderedlist', 'selectall', 'cleardoc', '|',
	            'rowspacingtop', 'rowspacingbottom', 'lineheight', '|',
	            'customstyle', 'paragraph', 'fontfamily', 'fontsize', '|',
	            'directionalityltr', 'directionalityrtl', 'indent', '|',
	            'justifyleft', 'justifycenter', 'justifyright', 'justifyjustify', '|', 'touppercase', 'tolowercase', '|',
	            'link', 'unlink', 'anchor', '|', 'imagenone', 'imageleft', 'imageright', 'imagecenter', '|',
	            'simpleupload', 'insertimage', 'emotion', 'scrawl', 'insertvideo', 'music', 'attachment', 'map', 'gmap', 'insertframe', 'insertcode', 'webapp', 'pagebreak', 'template', 'background', '|',
	            'horizontal', 'date', 'time', 'spechars', 'snapscreen', 'wordimage', '|',
	            'inserttable', 'deletetable', 'insertparagraphbeforetable', 'insertrow', 'deleterow', 'insertcol', 'deletecol', 'mergecells', 'mergeright', 'mergedown', 'splittocells', 'splittorows', 'splittocols', 'charts', '|',
	            'print', 'preview', 'searchreplace', 'drafts', 'help'
	        ]]
	        //当鼠标放在工具栏上时显示的tooltip提示,留空支持自动多语言配置，否则以配置值为准
	        //,labelMap:{
	        //    'anchor':'', 'undo':''
	        //}
	
	        //语言配置项,默认是zh-cn。有需要的话也可以使用如下这样的方式来自动多语言切换，当然，前提条件是lang文件夹下存在对应的语言文件：
	        //lang值也可以通过自动获取 (navigator.language||navigator.browserLanguage ||navigator.userLanguage).toLowerCase()
	        //,lang:"zh-cn"
	        //,langPath:URL +"lang/"
	
	        //主题配置项,默认是default。有需要的话也可以使用如下这样的方式来自动多主题切换，当然，前提条件是themes文件夹下存在对应的主题文件：
	        //现有如下皮肤:default
	        //,theme:'default'
	        //,themePath:URL +"themes/"
	
	        //,zIndex : 900     //编辑器层级的基数,默认是900
	
	        //针对getAllHtml方法，会在对应的head标签中增加该编码设置。
	        //,charset:"utf-8"
	
	        //若实例化编辑器的页面手动修改的domain，此处需要设置为true
	        //,customDomain:false
	
	        //常用配置项目
	        //,isShow : true    //默认显示编辑器
	
	        //,textarea:'editorValue' // 提交表单时，服务器获取编辑器提交内容的所用的参数，多实例时可以给容器name属性，会将name给定的值最为每个实例的键值，不用每次实例化的时候都设置这个值
	
	        //,initialContent:'欢迎使用ueditor!'    //初始化编辑器的内容,也可以通过textarea/script给值，看官网例子
	
	        //,autoClearinitialContent:true //是否自动清除编辑器初始内容，注意：如果focus属性设置为true,这个也为真，那么编辑器一上来就会触发导致初始化的内容看不到了
	
	        //,focus:false //初始化时，是否让编辑器获得焦点true或false
	
	        //如果自定义，最好给p标签如下的行高，要不输入中文时，会有跳动感
	        //,initialStyle:'p{line-height:1em}'//编辑器层级的基数,可以用来改变字体等
	
	        //,iframeCssUrl: URL + '/themes/iframe.css' //给编辑区域的iframe引入一个css文件
	
	        //indentValue
	        //首行缩进距离,默认是2em
	        //,indentValue:'2em'
	
	        //,initialFrameWidth:1000  //初始化编辑器宽度,默认1000
	        //,initialFrameHeight:320  //初始化编辑器高度,默认320
	
	        //,readonly : false //编辑器初始化结束后,编辑区域是否是只读的，默认是false
	
	        //,autoClearEmptyNode : true //getContent时，是否删除空的inlineElement节点（包括嵌套的情况）
	
	        //启用自动保存
	        //,enableAutoSave: true
	        //自动保存间隔时间， 单位ms
	        //,saveInterval: 500
	
	        //,fullscreen : false //是否开启初始化时即全屏，默认关闭
	
	        //,imagePopup:true      //图片操作的浮层开关，默认打开
	
	        //,autoSyncData:true //自动同步编辑器要提交的数据
	        //,emotionLocalization:false //是否开启表情本地化，默认关闭。若要开启请确保emotion文件夹下包含官网提供的images表情文件夹
	
	        //粘贴只保留标签，去除标签所有属性
	        //,retainOnlyLabelPasted: false
	
	        //,pasteplain:false  //是否默认为纯文本粘贴。false为不使用纯文本粘贴，true为使用纯文本粘贴
	        //纯文本粘贴模式下的过滤规则
	        //'filterTxtRules' : function(){
	        //    function transP(node){
	        //        node.tagName = 'p';
	        //        node.setStyle();
	        //    }
	        //    return {
	        //        //直接删除及其字节点内容
	        //        '-' : 'script style object iframe embed input select',
	        //        'p': {$:{}},
	        //        'br':{$:{}},
	        //        'div':{'$':{}},
	        //        'li':{'$':{}},
	        //        'caption':transP,
	        //        'th':transP,
	        //        'tr':transP,
	        //        'h1':transP,'h2':transP,'h3':transP,'h4':transP,'h5':transP,'h6':transP,
	        //        'td':function(node){
	        //            //没有内容的td直接删掉
	        //            var txt = !!node.innerText();
	        //            if(txt){
	        //                node.parentNode.insertAfter(UE.uNode.createText(' &nbsp; &nbsp;'),node);
	        //            }
	        //            node.parentNode.removeChild(node,node.innerText())
	        //        }
	        //    }
	        //}()
	
	        //,allHtmlEnabled:false //提交到后台的数据是否包含整个html字符串
	
	        //insertorderedlist
	        //有序列表的下拉配置,值留空时支持多语言自动识别，若配置值，则以此值为准
	        //,'insertorderedlist':{
	        //      //自定的样式
	        //        'num':'1,2,3...',
	        //        'num1':'1),2),3)...',
	        //        'num2':'(1),(2),(3)...',
	        //        'cn':'一,二,三....',
	        //        'cn1':'一),二),三)....',
	        //        'cn2':'(一),(二),(三)....',
	        //     //系统自带
	        //     'decimal' : '' ,         //'1,2,3...'
	        //     'lower-alpha' : '' ,    // 'a,b,c...'
	        //     'lower-roman' : '' ,    //'i,ii,iii...'
	        //     'upper-alpha' : '' , lang   //'A,B,C'
	        //     'upper-roman' : ''      //'I,II,III...'
	        //}
	
	        //insertunorderedlist
	        //无序列表的下拉配置，值留空时支持多语言自动识别，若配置值，则以此值为准
	        //,insertunorderedlist : { //自定的样式
	        //    'dash' :'— 破折号', //-破折号
	        //    'dot':' 。 小圆圈', //系统自带
	        //    'circle' : '',  // '○ 小圆圈'
	        //    'disc' : '',    // '● 小圆点'
	        //    'square' : ''   //'■ 小方块'
	        //}
	        //,listDefaultPaddingLeft : '30'//默认的左边缩进的基数倍
	        //,listiconpath : 'http://bs.baidu.com/listicon/'//自定义标号的路径
	        //,maxListLevel : 3 //限制可以tab的级数, 设置-1为不限制
	
	        //,autoTransWordToList:false  //禁止word中粘贴进来的列表自动变成列表标签
	
	        //fontfamily
	        //字体设置 label留空支持多语言自动切换，若配置，则以配置值为准
	        //,'fontfamily':[
	        //    { label:'',name:'songti',val:'宋体,SimSun'},
	        //    { label:'',name:'kaiti',val:'楷体,楷体_GB2312, SimKai'},
	        //    { label:'',name:'yahei',val:'微软雅黑,Microsoft YaHei'},
	        //    { label:'',name:'heiti',val:'黑体, SimHei'},
	        //    { label:'',name:'lishu',val:'隶书, SimLi'},
	        //    { label:'',name:'andaleMono',val:'andale mono'},
	        //    { label:'',name:'arial',val:'arial, helvetica,sans-serif'},
	        //    { label:'',name:'arialBlack',val:'arial black,avant garde'},
	        //    { label:'',name:'comicSansMs',val:'comic sans ms'},
	        //    { label:'',name:'impact',val:'impact,chicago'},
	        //    { label:'',name:'timesNewRoman',val:'times new roman'}
	        //]
	
	        //fontsize
	        //字号
	        //,'fontsize':[10, 11, 12, 14, 16, 18, 20, 24, 36]
	
	        //paragraph
	        //段落格式 值留空时支持多语言自动识别，若配置，则以配置值为准
	        //,'paragraph':{'p':'', 'h1':'', 'h2':'', 'h3':'', 'h4':'', 'h5':'', 'h6':''}
	
	        //rowspacingtop
	        //段间距 值和显示的名字相同
	        //,'rowspacingtop':['5', '10', '15', '20', '25']
	
	        //rowspacingBottom
	        //段间距 值和显示的名字相同
	        //,'rowspacingbottom':['5', '10', '15', '20', '25']
	
	        //lineheight
	        //行内间距 值和显示的名字相同
	        //,'lineheight':['1', '1.5','1.75','2', '3', '4', '5']
	
	        //customstyle
	        //自定义样式，不支持国际化，此处配置值即可最后显示值
	        //block的元素是依据设置段落的逻辑设置的，inline的元素依据BIU的逻辑设置
	        //尽量使用一些常用的标签
	        //参数说明
	        //tag 使用的标签名字
	        //label 显示的名字也是用来标识不同类型的标识符，注意这个值每个要不同，
	        //style 添加的样式
	        //每一个对象就是一个自定义的样式
	        //,'customstyle':[
	        //    {tag:'h1', name:'tc', label:'', style:'border-bottom:#ccc 2px solid;padding:0 4px 0 0;text-align:center;margin:0 0 20px 0;'},
	        //    {tag:'h1', name:'tl',label:'', style:'border-bottom:#ccc 2px solid;padding:0 4px 0 0;margin:0 0 10px 0;'},
	        //    {tag:'span',name:'im', label:'', style:'font-style:italic;font-weight:bold'},
	        //    {tag:'span',name:'hi', label:'', style:'font-style:italic;font-weight:bold;color:rgb(51, 153, 204)'}
	        //]
	
	        //打开右键菜单功能
	        //,enableContextMenu: true
	        //右键菜单的内容，可以参考plugins/contextmenu.js里边的默认菜单的例子，label留空支持国际化，否则以此配置为准
	        //,contextMenu:[
	        //    {
	        //        label:'',       //显示的名称
	        //        cmdName:'selectall',//执行的command命令，当点击这个右键菜单时
	        //        //exec可选，有了exec就会在点击时执行这个function，优先级高于cmdName
	        //        exec:function () {
	        //            //this是当前编辑器的实例
	        //            //this.ui._dialogs['inserttableDialog'].open();
	        //        }
	        //    }
	        //]
	
	        //快捷菜单
	        //,shortcutMenu:["fontfamily", "fontsize", "bold", "italic", "underline", "forecolor", "backcolor", "insertorderedlist", "insertunorderedlist"]
	
	        //elementPathEnabled
	        //是否启用元素路径，默认是显示
	        //,elementPathEnabled : true
	
	        //wordCount
	        //,wordCount:true          //是否开启字数统计
	        //,maximumWords:10000       //允许的最大字符数
	        //字数统计提示，{#count}代表当前字数，{#leave}代表还可以输入多少字符数,留空支持多语言自动切换，否则按此配置显示
	        //,wordCountMsg:''   //当前已输入 {#count} 个字符，您还可以输入{#leave} 个字符
	        //超出字数限制提示  留空支持多语言自动切换，否则按此配置显示
	        //,wordOverFlowMsg:''    //<span style="color:red;">你输入的字符个数已经超出最大允许值，服务器可能会拒绝保存！</span>
	
	        //tab
	        //点击tab键时移动的距离,tabSize倍数，tabNode什么字符做为单位
	        //,tabSize:4
	        //,tabNode:'&nbsp;'
	
	        //removeFormat
	        //清除格式时可以删除的标签和属性
	        //removeForamtTags标签
	        //,removeFormatTags:'b,big,code,del,dfn,em,font,i,ins,kbd,q,samp,small,span,strike,strong,sub,sup,tt,u,var'
	        //removeFormatAttributes属性
	        //,removeFormatAttributes:'class,style,lang,width,height,align,hspace,valign'
	
	        //undo
	        //可以最多回退的次数,默认20
	        //,maxUndoCount:20
	        //当输入的字符数超过该值时，保存一次现场
	        //,maxInputCount:1
	
	        //autoHeightEnabled
	        // 是否自动长高,默认true
	        //,autoHeightEnabled:true
	
	        //scaleEnabled
	        //是否可以拉伸长高,默认true(当开启时，自动长高失效)
	        //,scaleEnabled:false
	        //,minFrameWidth:800    //编辑器拖动时最小宽度,默认800
	        //,minFrameHeight:220  //编辑器拖动时最小高度,默认220
	
	        //autoFloatEnabled
	        //是否保持toolbar的位置不动,默认true
	        //,autoFloatEnabled:true
	        //浮动时工具栏距离浏览器顶部的高度，用于某些具有固定头部的页面
	        //,topOffset:30
	        //编辑器底部距离工具栏高度(如果参数大于等于编辑器高度，则设置无效)
	        //,toolbarTopOffset:400
	
	        //设置远程图片是否抓取到本地保存
	        //,catchRemoteImageEnable: true //设置是否抓取远程图片
	
	        //pageBreakTag
	        //分页标识符,默认是_ueditor_page_break_tag_
	        //,pageBreakTag:'_ueditor_page_break_tag_'
	
	        //autotypeset
	        //自动排版参数
	        //,autotypeset: {
	        //    mergeEmptyline: true,           //合并空行
	        //    removeClass: true,              //去掉冗余的class
	        //    removeEmptyline: false,         //去掉空行
	        //    textAlign:"left",               //段落的排版方式，可以是 left,right,center,justify 去掉这个属性表示不执行排版
	        //    imageBlockLine: 'center',       //图片的浮动方式，独占一行剧中,左右浮动，默认: center,left,right,none 去掉这个属性表示不执行排版
	        //    pasteFilter: false,             //根据规则过滤没事粘贴进来的内容
	        //    clearFontSize: false,           //去掉所有的内嵌字号，使用编辑器默认的字号
	        //    clearFontFamily: false,         //去掉所有的内嵌字体，使用编辑器默认的字体
	        //    removeEmptyNode: false,         // 去掉空节点
	        //    //可以去掉的标签
	        //    removeTagNames: {标签名字:1},
	        //    indent: false,                  // 行首缩进
	        //    indentValue : '2em',            //行首缩进的大小
	        //    bdc2sb: false,
	        //    tobdc: false
	        //}
	
	        //tableDragable
	        //表格是否可以拖拽
	        //,tableDragable: true
	
	
	
	        //sourceEditor
	        //源码的查看方式,codemirror 是代码高亮，textarea是文本框,默认是codemirror
	        //注意默认codemirror只能在ie8+和非ie中使用
	        //,sourceEditor:"codemirror"
	        //如果sourceEditor是codemirror，还用配置一下两个参数
	        //codeMirrorJsUrl js加载的路径，默认是 URL + "third-party/codemirror/codemirror.js"
	        //,codeMirrorJsUrl:URL + "third-party/codemirror/codemirror.js"
	        //codeMirrorCssUrl css加载的路径，默认是 URL + "third-party/codemirror/codemirror.css"
	        //,codeMirrorCssUrl:URL + "third-party/codemirror/codemirror.css"
	        //编辑器初始化完成后是否进入源码模式，默认为否。
	        //,sourceEditorFirst:false
	
	        //iframeUrlMap
	        //dialog内容的路径 ～会被替换成URL,垓属性一旦打开，将覆盖所有的dialog的默认路径
	        //,iframeUrlMap:{
	        //    'anchor':'~/dialogs/anchor/anchor.html',
	        //}
	
	        //allowLinkProtocol 允许的链接地址，有这些前缀的链接地址不会自动添加http
	        //, allowLinkProtocols: ['http:', 'https:', '#', '/', 'ftp:', 'mailto:', 'tel:', 'git:', 'svn:']
	
	        //webAppKey 百度应用的APIkey，每个站长必须首先去百度官网注册一个key后方能正常使用app功能，注册介绍，http://app.baidu.com/static/cms/getapikey.html
	        //, webAppKey: ""
	
	        //默认过滤规则相关配置项目
	        //,disabledTableInTable:true  //禁止表格嵌套
	        //,allowDivTransToP:true      //允许进入编辑器的div标签自动变成p标签
	        //,rgb2Hex:true               //默认产出的数据中的color自动从rgb格式变成16进制格式
	
			// xss 过滤是否开启,inserthtml等操作
			,xssFilterRules: true
			//input xss过滤
			,inputXssFilter: true
			//output xss过滤
			,outputXssFilter: true
			// xss过滤白名单 名单来源: https://raw.githubusercontent.com/leizongmin/js-xss/master/lib/default.js
			,whitList: {
				a:      ['target', 'href', 'title', 'class', 'style'],
				abbr:   ['title', 'class', 'style'],
				address: ['class', 'style'],
				area:   ['shape', 'coords', 'href', 'alt'],
				article: [],
				aside:  [],
				audio:  ['autoplay', 'controls', 'loop', 'preload', 'src', 'class', 'style'],
				b:      ['class', 'style'],
				bdi:    ['dir'],
				bdo:    ['dir'],
				big:    [],
				blockquote: ['cite', 'class', 'style'],
				br:     [],
				caption: ['class', 'style'],
				center: [],
				cite:   [],
				code:   ['class', 'style'],
				col:    ['align', 'valign', 'span', 'width', 'class', 'style'],
				colgroup: ['align', 'valign', 'span', 'width', 'class', 'style'],
				dd:     ['class', 'style'],
				del:    ['datetime'],
				details: ['open'],
				div:    ['class', 'style'],
				dl:     ['class', 'style'],
				dt:     ['class', 'style'],
				em:     ['class', 'style'],
				font:   ['color', 'size', 'face'],
				footer: [],
				h1:     ['class', 'style'],
				h2:     ['class', 'style'],
				h3:     ['class', 'style'],
				h4:     ['class', 'style'],
				h5:     ['class', 'style'],
				h6:     ['class', 'style'],
				header: [],
				hr:     [],
				i:      ['class', 'style'],
				img:    ['src', 'alt', 'title', 'width', 'height', 'id', '_src', 'loadingclass', 'class'],
				ins:    ['datetime'],
				li:     ['class', 'style'],
				mark:   [],
				nav:    [],
				ol:     ['class', 'style'],
				p:      ['class', 'style'],
				pre:    ['class', 'style'],
				s:      [],
				section:[],
				small:  [],
				span:   ['class', 'style'],
				sub:    ['class', 'style'],
				sup:    ['class', 'style'],
				strong: ['class', 'style'],
				table:  ['width', 'border', 'align', 'valign', 'class', 'style'],
				tbody:  ['align', 'valign', 'class', 'style'],
				td:     ['width', 'rowspan', 'colspan', 'align', 'valign', 'class', 'style'],
				tfoot:  ['align', 'valign', 'class', 'style'],
				th:     ['width', 'rowspan', 'colspan', 'align', 'valign', 'class', 'style'],
				thead:  ['align', 'valign', 'class', 'style'],
				tr:     ['rowspan', 'align', 'valign', 'class', 'style'],
				tt:     [],
				u:      [],
				ul:     ['class', 'style'],
				video:  ['autoplay', 'controls', 'loop', 'preload', 'src', 'height', 'width', 'class', 'style']
			}
	    };
	
	    function getUEBasePath(docUrl, confUrl) {
	
	        return getBasePath(docUrl || self.document.URL || self.location.href, confUrl || getConfigFilePath());
	
	    }
	
	    function getConfigFilePath() {
	
	        var configPath = document.getElementsByTagName('script');
	
	        return configPath[ configPath.length - 1 ].src;
	
	    }
	
	    function getBasePath(docUrl, confUrl) {
	
	        var basePath = confUrl;
	
	
	        if (/^(\/|\\\\)/.test(confUrl)) {
	
	            basePath = /^.+?\w(\/|\\\\)/.exec(docUrl)[0] + confUrl.replace(/^(\/|\\\\)/, '');
	
	        } else if (!/^[a-z]+:/i.test(confUrl)) {
	
	            docUrl = docUrl.split("#")[0].split("?")[0].replace(/[^\\\/]+$/, '');
	
	            basePath = docUrl + "" + confUrl;
	
	        }
	
	        return optimizationPath(basePath);
	
	    }
	
	    function optimizationPath(path) {
	
	        var protocol = /^[a-z]+:\/\//.exec(path)[ 0 ],
	            tmp = null,
	            res = [];
	
	        path = path.replace(protocol, "").split("?")[0].split("#")[0];
	
	        path = path.replace(/\\/g, '/').split(/\//);
	
	        path[ path.length - 1 ] = "";
	
	        while (path.length) {
	
	            if (( tmp = path.shift() ) === "..") {
	                res.pop();
	            } else if (tmp !== ".") {
	                res.push(tmp);
	            }
	
	        }
	
	        return protocol + res.join("/");
	
	    }
	
	    window.UE = {
	        getUEBasePath: getUEBasePath
	    };
	
	})();


/***/ },
/* 36 */
/***/ function(module, exports) {

	/*!
	 * UEditor
	 * version: ueditor
	 * build: Thu Jun 16 2016 12:33:50 GMT+0800 (CST)
	 */
	
	(function(){
	
	// editor.js
	UEDITOR_CONFIG = window.UEDITOR_CONFIG || {};
	
	var baidu = window.baidu || {};
	
	window.baidu = baidu;
	
	window.UE = baidu.editor =  window.UE || {};
	
	UE.plugins = {};
	
	UE.commands = {};
	
	UE.instants = {};
	
	UE.I18N = {};
	
	UE._customizeUI = {};
	
	UE.version = "1.4.3";
	
	var dom = UE.dom = {};
	
	// core/browser.js
	/**
	 * 浏览器判断模块
	 * @file
	 * @module UE.browser
	 * @since 1.2.6.1
	 */
	
	/**
	 * 提供浏览器检测的模块
	 * @unfile
	 * @module UE.browser
	 */
	var browser = UE.browser = function(){
	    var agent = navigator.userAgent.toLowerCase(),
	        opera = window.opera,
	        browser = {
	        /**
	         * @property {boolean} ie 检测当前浏览器是否为IE
	         * @example
	         * ```javascript
	         * if ( UE.browser.ie ) {
	         *     console.log( '当前浏览器是IE' );
	         * }
	         * ```
	         */
	        ie		:  /(msie\s|trident.*rv:)([\w.]+)/.test(agent),
	
	        /**
	         * @property {boolean} opera 检测当前浏览器是否为Opera
	         * @example
	         * ```javascript
	         * if ( UE.browser.opera ) {
	         *     console.log( '当前浏览器是Opera' );
	         * }
	         * ```
	         */
	        opera	: ( !!opera && opera.version ),
	
	        /**
	         * @property {boolean} webkit 检测当前浏览器是否是webkit内核的浏览器
	         * @example
	         * ```javascript
	         * if ( UE.browser.webkit ) {
	         *     console.log( '当前浏览器是webkit内核浏览器' );
	         * }
	         * ```
	         */
	        webkit	: ( agent.indexOf( ' applewebkit/' ) > -1 ),
	
	        /**
	         * @property {boolean} mac 检测当前浏览器是否是运行在mac平台下
	         * @example
	         * ```javascript
	         * if ( UE.browser.mac ) {
	         *     console.log( '当前浏览器运行在mac平台下' );
	         * }
	         * ```
	         */
	        mac	: ( agent.indexOf( 'macintosh' ) > -1 ),
	
	        /**
	         * @property {boolean} quirks 检测当前浏览器是否处于“怪异模式”下
	         * @example
	         * ```javascript
	         * if ( UE.browser.quirks ) {
	         *     console.log( '当前浏览器运行处于“怪异模式”' );
	         * }
	         * ```
	         */
	        quirks : ( document.compatMode == 'BackCompat' )
	    };
	
	    /**
	    * @property {boolean} gecko 检测当前浏览器内核是否是gecko内核
	    * @example
	    * ```javascript
	    * if ( UE.browser.gecko ) {
	    *     console.log( '当前浏览器内核是gecko内核' );
	    * }
	    * ```
	    */
	    browser.gecko =( navigator.product == 'Gecko' && !browser.webkit && !browser.opera && !browser.ie);
	
	    var version = 0;
	
	    // Internet Explorer 6.0+
	    if ( browser.ie ){
	
	        var v1 =  agent.match(/(?:msie\s([\w.]+))/);
	        var v2 = agent.match(/(?:trident.*rv:([\w.]+))/);
	        if(v1 && v2 && v1[1] && v2[1]){
	            version = Math.max(v1[1]*1,v2[1]*1);
	        }else if(v1 && v1[1]){
	            version = v1[1]*1;
	        }else if(v2 && v2[1]){
	            version = v2[1]*1;
	        }else{
	            version = 0;
	        }
	
	        browser.ie11Compat = document.documentMode == 11;
	        /**
	         * @property { boolean } ie9Compat 检测浏览器模式是否为 IE9 兼容模式
	         * @warning 如果浏览器不是IE， 则该值为undefined
	         * @example
	         * ```javascript
	         * if ( UE.browser.ie9Compat ) {
	         *     console.log( '当前浏览器运行在IE9兼容模式下' );
	         * }
	         * ```
	         */
	        browser.ie9Compat = document.documentMode == 9;
	
	        /**
	         * @property { boolean } ie8 检测浏览器是否是IE8浏览器
	         * @warning 如果浏览器不是IE， 则该值为undefined
	         * @example
	         * ```javascript
	         * if ( UE.browser.ie8 ) {
	         *     console.log( '当前浏览器是IE8浏览器' );
	         * }
	         * ```
	         */
	        browser.ie8 = !!document.documentMode;
	
	        /**
	         * @property { boolean } ie8Compat 检测浏览器模式是否为 IE8 兼容模式
	         * @warning 如果浏览器不是IE， 则该值为undefined
	         * @example
	         * ```javascript
	         * if ( UE.browser.ie8Compat ) {
	         *     console.log( '当前浏览器运行在IE8兼容模式下' );
	         * }
	         * ```
	         */
	        browser.ie8Compat = document.documentMode == 8;
	
	        /**
	         * @property { boolean } ie7Compat 检测浏览器模式是否为 IE7 兼容模式
	         * @warning 如果浏览器不是IE， 则该值为undefined
	         * @example
	         * ```javascript
	         * if ( UE.browser.ie7Compat ) {
	         *     console.log( '当前浏览器运行在IE7兼容模式下' );
	         * }
	         * ```
	         */
	        browser.ie7Compat = ( ( version == 7 && !document.documentMode )
	                || document.documentMode == 7 );
	
	        /**
	         * @property { boolean } ie6Compat 检测浏览器模式是否为 IE6 模式 或者怪异模式
	         * @warning 如果浏览器不是IE， 则该值为undefined
	         * @example
	         * ```javascript
	         * if ( UE.browser.ie6Compat ) {
	         *     console.log( '当前浏览器运行在IE6模式或者怪异模式下' );
	         * }
	         * ```
	         */
	        browser.ie6Compat = ( version < 7 || browser.quirks );
	
	        browser.ie9above = version > 8;
	
	        browser.ie9below = version < 9;
	
	        browser.ie11above = version > 10;
	
	        browser.ie11below = version < 11;
	
	    }
	
	    // Gecko.
	    if ( browser.gecko ){
	        var geckoRelease = agent.match( /rv:([\d\.]+)/ );
	        if ( geckoRelease )
	        {
	            geckoRelease = geckoRelease[1].split( '.' );
	            version = geckoRelease[0] * 10000 + ( geckoRelease[1] || 0 ) * 100 + ( geckoRelease[2] || 0 ) * 1;
	        }
	    }
	
	    /**
	     * @property { Number } chrome 检测当前浏览器是否为Chrome, 如果是，则返回Chrome的大版本号
	     * @warning 如果浏览器不是chrome， 则该值为undefined
	     * @example
	     * ```javascript
	     * if ( UE.browser.chrome ) {
	     *     console.log( '当前浏览器是Chrome' );
	     * }
	     * ```
	     */
	    if (/chrome\/(\d+\.\d)/i.test(agent)) {
	        browser.chrome = + RegExp['\x241'];
	    }
	
	    /**
	     * @property { Number } safari 检测当前浏览器是否为Safari, 如果是，则返回Safari的大版本号
	     * @warning 如果浏览器不是safari， 则该值为undefined
	     * @example
	     * ```javascript
	     * if ( UE.browser.safari ) {
	     *     console.log( '当前浏览器是Safari' );
	     * }
	     * ```
	     */
	    if(/(\d+\.\d)?(?:\.\d)?\s+safari\/?(\d+\.\d+)?/i.test(agent) && !/chrome/i.test(agent)){
	    	browser.safari = + (RegExp['\x241'] || RegExp['\x242']);
	    }
	
	
	    // Opera 9.50+
	    if ( browser.opera )
	        version = parseFloat( opera.version() );
	
	    // WebKit 522+ (Safari 3+)
	    if ( browser.webkit )
	        version = parseFloat( agent.match( / applewebkit\/(\d+)/ )[1] );
	
	    /**
	     * @property { Number } version 检测当前浏览器版本号
	     * @remind
	     * <ul>
	     *     <li>IE系列返回值为5,6,7,8,9,10等</li>
	     *     <li>gecko系列会返回10900，158900等</li>
	     *     <li>webkit系列会返回其build号 (如 522等)</li>
	     * </ul>
	     * @example
	     * ```javascript
	     * console.log( '当前浏览器版本号是： ' + UE.browser.version );
	     * ```
	     */
	    browser.version = version;
	
	    /**
	     * @property { boolean } isCompatible 检测当前浏览器是否能够与UEditor良好兼容
	     * @example
	     * ```javascript
	     * if ( UE.browser.isCompatible ) {
	     *     console.log( '浏览器与UEditor能够良好兼容' );
	     * }
	     * ```
	     */
	    browser.isCompatible =
	        !browser.mobile && (
	        ( browser.ie && version >= 6 ) ||
	        ( browser.gecko && version >= 10801 ) ||
	        ( browser.opera && version >= 9.5 ) ||
	        ( browser.air && version >= 1 ) ||
	        ( browser.webkit && version >= 522 ) ||
	        false );
	    return browser;
	}();
	//快捷方式
	var ie = browser.ie,
	    webkit = browser.webkit,
	    gecko = browser.gecko,
	    opera = browser.opera;
	
	// core/utils.js
	/**
	 * 工具函数包
	 * @file
	 * @module UE.utils
	 * @since 1.2.6.1
	 */
	
	/**
	 * UEditor封装使用的静态工具函数
	 * @module UE.utils
	 * @unfile
	 */
	
	var utils = UE.utils = {
	
	    /**
	     * 用给定的迭代器遍历对象
	     * @method each
	     * @param { Object } obj 需要遍历的对象
	     * @param { Function } iterator 迭代器， 该方法接受两个参数， 第一个参数是当前所处理的value， 第二个参数是当前遍历对象的key
	     * @example
	     * ```javascript
	     * var demoObj = {
	     *     key1: 1,
	     *     key2: 2
	     * };
	     *
	     * //output: key1: 1, key2: 2
	     * UE.utils.each( demoObj, funciton ( value, key ) {
	     *
	     *     console.log( key + ":" + value );
	     *
	     * } );
	     * ```
	     */
	
	    /**
	     * 用给定的迭代器遍历数组或类数组对象
	     * @method each
	     * @param { Array } array 需要遍历的数组或者类数组
	     * @param { Function } iterator 迭代器， 该方法接受两个参数， 第一个参数是当前所处理的value， 第二个参数是当前遍历对象的key
	     * @example
	     * ```javascript
	     * var divs = document.getElmentByTagNames( "div" );
	     *
	     * //output: 0: DIV, 1: DIV ...
	     * UE.utils.each( divs, funciton ( value, key ) {
	     *
	     *     console.log( key + ":" + value.tagName );
	     *
	     * } );
	     * ```
	     */
	    each : function(obj, iterator, context) {
	        if (obj == null) return;
	        if (obj.length === +obj.length) {
	            for (var i = 0, l = obj.length; i < l; i++) {
	                if(iterator.call(context, obj[i], i, obj) === false)
	                    return false;
	            }
	        } else {
	            for (var key in obj) {
	                if (obj.hasOwnProperty(key)) {
	                    if(iterator.call(context, obj[key], key, obj) === false)
	                        return false;
	                }
	            }
	        }
	    },
	
	    /**
	     * 以给定对象作为原型创建一个新对象
	     * @method makeInstance
	     * @param { Object } protoObject 该对象将作为新创建对象的原型
	     * @return { Object } 新的对象， 该对象的原型是给定的protoObject对象
	     * @example
	     * ```javascript
	     *
	     * var protoObject = { sayHello: function () { console.log('Hello UEditor!'); } };
	     *
	     * var newObject = UE.utils.makeInstance( protoObject );
	     * //output: Hello UEditor!
	     * newObject.sayHello();
	     * ```
	     */
	    makeInstance:function (obj) {
	        var noop = new Function();
	        noop.prototype = obj;
	        obj = new noop;
	        noop.prototype = null;
	        return obj;
	    },
	
	    /**
	     * 将source对象中的属性扩展到target对象上
	     * @method extend
	     * @remind 该方法将强制把source对象上的属性复制到target对象上
	     * @see UE.utils.extend(Object,Object,Boolean)
	     * @param { Object } target 目标对象， 新的属性将附加到该对象上
	     * @param { Object } source 源对象， 该对象的属性会被附加到target对象上
	     * @return { Object } 返回target对象
	     * @example
	     * ```javascript
	     *
	     * var target = { name: 'target', sex: 1 },
	     *      source = { name: 'source', age: 17 };
	     *
	     * UE.utils.extend( target, source );
	     *
	     * //output: { name: 'source', sex: 1, age: 17 }
	     * console.log( target );
	     *
	     * ```
	     */
	
	    /**
	     * 将source对象中的属性扩展到target对象上， 根据指定的isKeepTarget值决定是否保留目标对象中与
	     * 源对象属性名相同的属性值。
	     * @method extend
	     * @param { Object } target 目标对象， 新的属性将附加到该对象上
	     * @param { Object } source 源对象， 该对象的属性会被附加到target对象上
	     * @param { Boolean } isKeepTarget 是否保留目标对象中与源对象中属性名相同的属性
	     * @return { Object } 返回target对象
	     * @example
	     * ```javascript
	     *
	     * var target = { name: 'target', sex: 1 },
	     *      source = { name: 'source', age: 17 };
	     *
	     * UE.utils.extend( target, source, true );
	     *
	     * //output: { name: 'target', sex: 1, age: 17 }
	     * console.log( target );
	     *
	     * ```
	     */
	    extend:function (t, s, b) {
	        if (s) {
	            for (var k in s) {
	                if (!b || !t.hasOwnProperty(k)) {
	                    t[k] = s[k];
	                }
	            }
	        }
	        return t;
	    },
	
	    /**
	     * 将给定的多个对象的属性复制到目标对象target上
	     * @method extend2
	     * @remind 该方法将强制把源对象上的属性复制到target对象上
	     * @remind 该方法支持两个及以上的参数， 从第二个参数开始， 其属性都会被复制到第一个参数上。 如果遇到同名的属性，
	     *          将会覆盖掉之前的值。
	     * @param { Object } target 目标对象， 新的属性将附加到该对象上
	     * @param { Object... } source 源对象， 支持多个对象， 该对象的属性会被附加到target对象上
	     * @return { Object } 返回target对象
	     * @example
	     * ```javascript
	     *
	     * var target = {},
	     *     source1 = { name: 'source', age: 17 },
	     *     source2 = { title: 'dev' };
	     *
	     * UE.utils.extend2( target, source1, source2 );
	     *
	     * //output: { name: 'source', age: 17, title: 'dev' }
	     * console.log( target );
	     *
	     * ```
	     */
	    extend2:function (t) {
	        var a = arguments;
	        for (var i = 1; i < a.length; i++) {
	            var x = a[i];
	            for (var k in x) {
	                if (!t.hasOwnProperty(k)) {
	                    t[k] = x[k];
	                }
	            }
	        }
	        return t;
	    },
	
	    /**
	     * 模拟继承机制， 使得subClass继承自superClass
	     * @method inherits
	     * @param { Object } subClass 子类对象
	     * @param { Object } superClass 超类对象
	     * @warning 该方法只能让subClass继承超类的原型， subClass对象自身的属性和方法不会被继承
	     * @return { Object } 继承superClass后的子类对象
	     * @example
	     * ```javascript
	     * function SuperClass(){
	     *     this.name = "小李";
	     * }
	     *
	     * SuperClass.prototype = {
	     *     hello:function(str){
	     *         console.log(this.name + str);
	     *     }
	     * }
	     *
	     * function SubClass(){
	     *     this.name = "小张";
	     * }
	     *
	     * UE.utils.inherits(SubClass,SuperClass);
	     *
	     * var sub = new SubClass();
	     * //output: '小张早上好!
	     * sub.hello("早上好!");
	     * ```
	     */
	    inherits:function (subClass, superClass) {
	        var oldP = subClass.prototype,
	            newP = utils.makeInstance(superClass.prototype);
	        utils.extend(newP, oldP, true);
	        subClass.prototype = newP;
	        return (newP.constructor = subClass);
	    },
	
	    /**
	     * 用指定的context对象作为函数fn的上下文
	     * @method bind
	     * @param { Function } fn 需要绑定上下文的函数对象
	     * @param { Object } content 函数fn新的上下文对象
	     * @return { Function } 一个新的函数， 该函数作为原始函数fn的代理， 将完成fn的上下文调换工作。
	     * @example
	     * ```javascript
	     *
	     * var name = 'window',
	     *     newTest = null;
	     *
	     * function test () {
	     *     console.log( this.name );
	     * }
	     *
	     * newTest = UE.utils.bind( test, { name: 'object' } );
	     *
	     * //output: object
	     * newTest();
	     *
	     * //output: window
	     * test();
	     *
	     * ```
	     */
	    bind:function (fn, context) {
	        return function () {
	            return fn.apply(context, arguments);
	        };
	    },
	
	    /**
	     * 创建延迟指定时间后执行的函数fn
	     * @method defer
	     * @param { Function } fn 需要延迟执行的函数对象
	     * @param { int } delay 延迟的时间， 单位是毫秒
	     * @warning 该方法的时间控制是不精确的，仅仅只能保证函数的执行是在给定的时间之后，
	     *           而不能保证刚好到达延迟时间时执行。
	     * @return { Function } 目标函数fn的代理函数， 只有执行该函数才能起到延时效果
	     * @example
	     * ```javascript
	     * var start = 0;
	     *
	     * function test(){
	     *     console.log( new Date() - start );
	     * }
	     *
	     * var testDefer = UE.utils.defer( test, 1000 );
	     * //
	     * start = new Date();
	     * //output: (大约在1000毫秒之后输出) 1000
	     * testDefer();
	     * ```
	     */
	
	    /**
	     * 创建延迟指定时间后执行的函数fn, 如果在延迟时间内再次执行该方法， 将会根据指定的exclusion的值，
	     * 决定是否取消前一次函数的执行， 如果exclusion的值为true， 则取消执行，反之，将继续执行前一个方法。
	     * @method defer
	     * @param { Function } fn 需要延迟执行的函数对象
	     * @param { int } delay 延迟的时间， 单位是毫秒
	     * @param { Boolean } exclusion 如果在延迟时间内再次执行该函数，该值将决定是否取消执行前一次函数的执行，
	     *                     值为true表示取消执行， 反之则将在执行前一次函数之后才执行本次函数调用。
	     * @warning 该方法的时间控制是不精确的，仅仅只能保证函数的执行是在给定的时间之后，
	     *           而不能保证刚好到达延迟时间时执行。
	     * @return { Function } 目标函数fn的代理函数， 只有执行该函数才能起到延时效果
	     * @example
	     * ```javascript
	     *
	     * function test(){
	     *     console.log(1);
	     * }
	     *
	     * var testDefer = UE.utils.defer( test, 1000, true );
	     *
	     * //output: (两次调用仅有一次输出) 1
	     * testDefer();
	     * testDefer();
	     * ```
	     */
	    defer:function (fn, delay, exclusion) {
	        var timerID;
	        return function () {
	            if (exclusion) {
	                clearTimeout(timerID);
	            }
	            timerID = setTimeout(fn, delay);
	        };
	    },
	
	    /**
	     * 获取元素item在数组array中首次出现的位置, 如果未找到item， 则返回-1
	     * @method indexOf
	     * @remind 该方法的匹配过程使用的是恒等“===”
	     * @param { Array } array 需要查找的数组对象
	     * @param { * } item 需要在目标数组中查找的值
	     * @return { int } 返回item在目标数组array中首次出现的位置， 如果在数组中未找到item， 则返回-1
	     * @example
	     * ```javascript
	     * var item = 1,
	     *     arr = [ 3, 4, 6, 8, 1, 1, 2 ];
	     *
	     * //output: 4
	     * console.log( UE.utils.indexOf( arr, item ) );
	     * ```
	     */
	
	    /**
	     * 获取元素item数组array中首次出现的位置, 如果未找到item， 则返回-1。通过start的值可以指定搜索的起始位置。
	     * @method indexOf
	     * @remind 该方法的匹配过程使用的是恒等“===”
	     * @param { Array } array 需要查找的数组对象
	     * @param { * } item 需要在目标数组中查找的值
	     * @param { int } start 搜索的起始位置
	     * @return { int } 返回item在目标数组array中的start位置之后首次出现的位置， 如果在数组中未找到item， 则返回-1
	     * @example
	     * ```javascript
	     * var item = 1,
	     *     arr = [ 3, 4, 6, 8, 1, 2, 8, 3, 2, 1, 1, 4 ];
	     *
	     * //output: 9
	     * console.log( UE.utils.indexOf( arr, item, 5 ) );
	     * ```
	     */
	    indexOf:function (array, item, start) {
	        var index = -1;
	        start = this.isNumber(start) ? start : 0;
	        this.each(array, function (v, i) {
	            if (i >= start && v === item) {
	                index = i;
	                return false;
	            }
	        });
	        return index;
	    },
	
	    /**
	     * 移除数组array中所有的元素item
	     * @method removeItem
	     * @param { Array } array 要移除元素的目标数组
	     * @param { * } item 将要被移除的元素
	     * @remind 该方法的匹配过程使用的是恒等“===”
	     * @example
	     * ```javascript
	     * var arr = [ 4, 5, 7, 1, 3, 4, 6 ];
	     *
	     * UE.utils.removeItem( arr, 4 );
	     * //output: [ 5, 7, 1, 3, 6 ]
	     * console.log( arr );
	     *
	     * ```
	     */
	    removeItem:function (array, item) {
	        for (var i = 0, l = array.length; i < l; i++) {
	            if (array[i] === item) {
	                array.splice(i, 1);
	                i--;
	            }
	        }
	    },
	
	    /**
	     * 删除字符串str的首尾空格
	     * @method trim
	     * @param { String } str 需要删除首尾空格的字符串
	     * @return { String } 删除了首尾的空格后的字符串
	     * @example
	     * ```javascript
	     *
	     * var str = " UEdtior ";
	     *
	     * //output: 9
	     * console.log( str.length );
	     *
	     * //output: 7
	     * console.log( UE.utils.trim( " UEdtior " ).length );
	     *
	     * //output: 9
	     * console.log( str.length );
	     *
	     *  ```
	     */
	    trim:function (str) {
	        return str.replace(/(^[ \t\n\r]+)|([ \t\n\r]+$)/g, '');
	    },
	
	    /**
	     * 将字符串str以','分隔成数组后，将该数组转换成哈希对象， 其生成的hash对象的key为数组中的元素， value为1
	     * @method listToMap
	     * @warning 该方法在生成的hash对象中，会为每一个key同时生成一个另一个全大写的key。
	     * @param { String } str 该字符串将被以','分割为数组， 然后进行转化
	     * @return { Object } 转化之后的hash对象
	     * @example
	     * ```javascript
	     *
	     * //output: Object {UEdtior: 1, UEDTIOR: 1, Hello: 1, HELLO: 1}
	     * console.log( UE.utils.listToMap( 'UEdtior,Hello' ) );
	     *
	     * ```
	     */
	
	    /**
	     * 将字符串数组转换成哈希对象， 其生成的hash对象的key为数组中的元素， value为1
	     * @method listToMap
	     * @warning 该方法在生成的hash对象中，会为每一个key同时生成一个另一个全大写的key。
	     * @param { Array } arr 字符串数组
	     * @return { Object } 转化之后的hash对象
	     * @example
	     * ```javascript
	     *
	     * //output: Object {UEdtior: 1, UEDTIOR: 1, Hello: 1, HELLO: 1}
	     * console.log( UE.utils.listToMap( [ 'UEdtior', 'Hello' ] ) );
	     *
	     * ```
	     */
	    listToMap:function (list) {
	        if (!list)return {};
	        list = utils.isArray(list) ? list : list.split(',');
	        for (var i = 0, ci, obj = {}; ci = list[i++];) {
	            obj[ci.toUpperCase()] = obj[ci] = 1;
	        }
	        return obj;
	    },
	
	    /**
	     * 将str中的html符号转义,将转义“'，&，<，"，>”五个字符
	     * @method unhtml
	     * @param { String } str 需要转义的字符串
	     * @return { String } 转义后的字符串
	     * @example
	     * ```javascript
	     * var html = '<body>&</body>';
	     *
	     * //output: &lt;body&gt;&amp;&lt;/body&gt;
	     * console.log( UE.utils.unhtml( html ) );
	     *
	     * ```
	     */
	    unhtml:function (str, reg) {
	        return str ? str.replace(reg || /[&<">'](?:(amp|lt|quot|gt|#39|nbsp|#\d+);)?/g, function (a, b) {
	            if (b) {
	                return a;
	            } else {
	                return {
	                    '<':'&lt;',
	                    '&':'&amp;',
	                    '"':'&quot;',
	                    '>':'&gt;',
	                    "'":'&#39;'
	                }[a]
	            }
	
	        }) : '';
	    },
	    /**
	     * 将url中的html字符转义， 仅转义  ', ", <, > 四个字符
	     * @param  { String } str 需要转义的字符串
	     * @param  { RegExp } reg 自定义的正则
	     * @return { String }     转义后的字符串
	     */
	    unhtmlForUrl:function (str, reg) {
	        return str ? str.replace(reg || /[<">']/g, function (a) {
	            return {
	                '<':'&lt;',
	                '&':'&amp;',
	                '"':'&quot;',
	                '>':'&gt;',
	                "'":'&#39;'
	            }[a]
	
	        }) : '';
	    },
	
	    /**
	     * 将str中的转义字符还原成html字符
	     * @see UE.utils.unhtml(String);
	     * @method html
	     * @param { String } str 需要逆转义的字符串
	     * @return { String } 逆转义后的字符串
	     * @example
	     * ```javascript
	     *
	     * var str = '&lt;body&gt;&amp;&lt;/body&gt;';
	     *
	     * //output: <body>&</body>
	     * console.log( UE.utils.html( str ) );
	     *
	     * ```
	     */
	    html:function (str) {
	        return str ? str.replace(/&((g|l|quo)t|amp|#39|nbsp);/g, function (m) {
	            return {
	                '&lt;':'<',
	                '&amp;':'&',
	                '&quot;':'"',
	                '&gt;':'>',
	                '&#39;':"'",
	                '&nbsp;':' '
	            }[m]
	        }) : '';
	    },
	
	    /**
	     * 将css样式转换为驼峰的形式
	     * @method cssStyleToDomStyle
	     * @param { String } cssName 需要转换的css样式名
	     * @return { String } 转换成驼峰形式后的css样式名
	     * @example
	     * ```javascript
	     *
	     * var str = 'border-top';
	     *
	     * //output: borderTop
	     * console.log( UE.utils.cssStyleToDomStyle( str ) );
	     *
	     * ```
	     */
	    cssStyleToDomStyle:function () {
	        var test = document.createElement('div').style,
	            cache = {
	                'float':test.cssFloat != undefined ? 'cssFloat' : test.styleFloat != undefined ? 'styleFloat' : 'float'
	            };
	
	        return function (cssName) {
	            return cache[cssName] || (cache[cssName] = cssName.toLowerCase().replace(/-./g, function (match) {
	                return match.charAt(1).toUpperCase();
	            }));
	        };
	    }(),
	
	    /**
	     * 动态加载文件到doc中
	     * @method loadFile
	     * @param { DomDocument } document 需要加载资源文件的文档对象
	     * @param { Object } options 加载资源文件的属性集合， 取值请参考代码示例
	     * @example
	     * ```javascript
	     *
	     * UE.utils.loadFile( document, {
	     *     src:"test.js",
	     *     tag:"script",
	     *     type:"text/javascript",
	     *     defer:"defer"
	     * } );
	     *
	     * ```
	     */
	
	    /**
	     * 动态加载文件到doc中，加载成功后执行的回调函数fn
	     * @method loadFile
	     * @param { DomDocument } document 需要加载资源文件的文档对象
	     * @param { Object } options 加载资源文件的属性集合， 该集合支持的值是script标签和style标签支持的所有属性。
	     * @param { Function } fn 资源文件加载成功之后执行的回调
	     * @warning 对于在同一个文档中多次加载同一URL的文件， 该方法会在第一次加载之后缓存该请求，
	     *           在此之后的所有同一URL的请求， 将会直接触发回调。
	     * @example
	     * ```javascript
	     *
	     * UE.utils.loadFile( document, {
	     *     src:"test.js",
	     *     tag:"script",
	     *     type:"text/javascript",
	     *     defer:"defer"
	     * }, function () {
	     *     console.log('加载成功');
	     * } );
	     *
	     * ```
	     */
	    loadFile:function () {
	        var tmpList = [];
	
	        function getItem(doc, obj) {
	            try {
	                for (var i = 0, ci; ci = tmpList[i++];) {
	                    if (ci.doc === doc && ci.url == (obj.src || obj.href)) {
	                        return ci;
	                    }
	                }
	            } catch (e) {
	                return null;
	            }
	
	        }
	
	        return function (doc, obj, fn) {
	            var item = getItem(doc, obj);
	            if (item) {
	                if (item.ready) {
	                    fn && fn();
	                } else {
	                    item.funs.push(fn)
	                }
	                return;
	            }
	            tmpList.push({
	                doc:doc,
	                url:obj.src || obj.href,
	                funs:[fn]
	            });
	            if (!doc.body) {
	                var html = [];
	                for (var p in obj) {
	                    if (p == 'tag')continue;
	                    html.push(p + '="' + obj[p] + '"')
	                }
	                doc.write('<' + obj.tag + ' ' + html.join(' ') + ' ></' + obj.tag + '>');
	                return;
	            }
	            if (obj.id && doc.getElementById(obj.id)) {
	                return;
	            }
	            var element = doc.createElement(obj.tag);
	            delete obj.tag;
	            for (var p in obj) {
	                element.setAttribute(p, obj[p]);
	            }
	            element.onload = element.onreadystatechange = function () {
	                if (!this.readyState || /loaded|complete/.test(this.readyState)) {
	                    item = getItem(doc, obj);
	                    if (item.funs.length > 0) {
	                        item.ready = 1;
	                        for (var fi; fi = item.funs.pop();) {
	                            fi();
	                        }
	                    }
	                    element.onload = element.onreadystatechange = null;
	                }
	            };
	            element.onerror = function () {
	                throw Error('The load ' + (obj.href || obj.src) + ' fails,check the url settings of file ueditor.config.js ')
	            };
	            doc.getElementsByTagName("head")[0].appendChild(element);
	        }
	    }(),
	
	    /**
	     * 判断obj对象是否为空
	     * @method isEmptyObject
	     * @param { * } obj 需要判断的对象
	     * @remind 如果判断的对象是NULL， 将直接返回true， 如果是数组且为空， 返回true， 如果是字符串， 且字符串为空，
	     *          返回true， 如果是普通对象， 且该对象没有任何实例属性， 返回true
	     * @return { Boolean } 对象是否为空
	     * @example
	     * ```javascript
	     *
	     * //output: true
	     * console.log( UE.utils.isEmptyObject( {} ) );
	     *
	     * //output: true
	     * console.log( UE.utils.isEmptyObject( [] ) );
	     *
	     * //output: true
	     * console.log( UE.utils.isEmptyObject( "" ) );
	     *
	     * //output: false
	     * console.log( UE.utils.isEmptyObject( { key: 1 } ) );
	     *
	     * //output: false
	     * console.log( UE.utils.isEmptyObject( [1] ) );
	     *
	     * //output: false
	     * console.log( UE.utils.isEmptyObject( "1" ) );
	     *
	     * ```
	     */
	    isEmptyObject:function (obj) {
	        if (obj == null) return true;
	        if (this.isArray(obj) || this.isString(obj)) return obj.length === 0;
	        for (var key in obj) if (obj.hasOwnProperty(key)) return false;
	        return true;
	    },
	
	    /**
	     * 把rgb格式的颜色值转换成16进制格式
	     * @method fixColor
	     * @param { String } rgb格式的颜色值
	     * @param { String }
	     * @example
	     * rgb(255,255,255)  => "#ffffff"
	     */
	    fixColor:function (name, value) {
	        if (/color/i.test(name) && /rgba?/.test(value)) {
	            var array = value.split(",");
	            if (array.length > 3)
	                return "";
	            value = "#";
	            for (var i = 0, color; color = array[i++];) {
	                color = parseInt(color.replace(/[^\d]/gi, ''), 10).toString(16);
	                value += color.length == 1 ? "0" + color : color;
	            }
	            value = value.toUpperCase();
	        }
	        return  value;
	    },
	    /**
	     * 只针对border,padding,margin做了处理，因为性能问题
	     * @public
	     * @function
	     * @param {String}    val style字符串
	     */
	    optCss:function (val) {
	        var padding, margin, border;
	        val = val.replace(/(padding|margin|border)\-([^:]+):([^;]+);?/gi, function (str, key, name, val) {
	            if (val.split(' ').length == 1) {
	                switch (key) {
	                    case 'padding':
	                        !padding && (padding = {});
	                        padding[name] = val;
	                        return '';
	                    case 'margin':
	                        !margin && (margin = {});
	                        margin[name] = val;
	                        return '';
	                    case 'border':
	                        return val == 'initial' ? '' : str;
	                }
	            }
	            return str;
	        });
	
	        function opt(obj, name) {
	            if (!obj) {
	                return '';
	            }
	            var t = obj.top , b = obj.bottom, l = obj.left, r = obj.right, val = '';
	            if (!t || !l || !b || !r) {
	                for (var p in obj) {
	                    val += ';' + name + '-' + p + ':' + obj[p] + ';';
	                }
	            } else {
	                val += ';' + name + ':' +
	                    (t == b && b == l && l == r ? t :
	                        t == b && l == r ? (t + ' ' + l) :
	                            l == r ? (t + ' ' + l + ' ' + b) : (t + ' ' + r + ' ' + b + ' ' + l)) + ';'
	            }
	            return val;
	        }
	
	        val += opt(padding, 'padding') + opt(margin, 'margin');
	        return val.replace(/^[ \n\r\t;]*|[ \n\r\t]*$/, '').replace(/;([ \n\r\t]+)|\1;/g, ';')
	            .replace(/(&((l|g)t|quot|#39))?;{2,}/g, function (a, b) {
	                return b ? b + ";;" : ';'
	            });
	    },
	
	    /**
	     * 克隆对象
	     * @method clone
	     * @param { Object } source 源对象
	     * @return { Object } source的一个副本
	     */
	
	    /**
	     * 深度克隆对象，将source的属性克隆到target对象， 会覆盖target重名的属性。
	     * @method clone
	     * @param { Object } source 源对象
	     * @param { Object } target 目标对象
	     * @return { Object } 附加了source对象所有属性的target对象
	     */
	    clone:function (source, target) {
	        var tmp;
	        target = target || {};
	        for (var i in source) {
	            if (source.hasOwnProperty(i)) {
	                tmp = source[i];
	                if (typeof tmp == 'object') {
	                    target[i] = utils.isArray(tmp) ? [] : {};
	                    utils.clone(source[i], target[i])
	                } else {
	                    target[i] = tmp;
	                }
	            }
	        }
	        return target;
	    },
	
	    /**
	     * 把cm／pt为单位的值转换为px为单位的值
	     * @method transUnitToPx
	     * @param { String } 待转换的带单位的字符串
	     * @return { String } 转换为px为计量单位的值的字符串
	     * @example
	     * ```javascript
	     *
	     * //output: 500px
	     * console.log( UE.utils.transUnitToPx( '20cm' ) );
	     *
	     * //output: 27px
	     * console.log( UE.utils.transUnitToPx( '20pt' ) );
	     *
	     * ```
	     */
	    transUnitToPx:function (val) {
	        if (!/(pt|cm)/.test(val)) {
	            return val
	        }
	        var unit;
	        val.replace(/([\d.]+)(\w+)/, function (str, v, u) {
	            val = v;
	            unit = u;
	        });
	        switch (unit) {
	            case 'cm':
	                val = parseFloat(val) * 25;
	                break;
	            case 'pt':
	                val = Math.round(parseFloat(val) * 96 / 72);
	        }
	        return val + (val ? 'px' : '');
	    },
	
	    /**
	     * 在dom树ready之后执行给定的回调函数
	     * @method domReady
	     * @remind 如果在执行该方法的时候， dom树已经ready， 那么回调函数将立刻执行
	     * @param { Function } fn dom树ready之后的回调函数
	     * @example
	     * ```javascript
	     *
	     * UE.utils.domReady( function () {
	     *
	     *     console.log('123');
	     *
	     * } );
	     *
	     * ```
	     */
	    domReady:function () {
	
	        var fnArr = [];
	
	        function doReady(doc) {
	            //确保onready只执行一次
	            doc.isReady = true;
	            for (var ci; ci = fnArr.pop(); ci()) {
	            }
	        }
	
	        return function (onready, win) {
	            win = win || window;
	            var doc = win.document;
	            onready && fnArr.push(onready);
	            if (doc.readyState === "complete") {
	                doReady(doc);
	            } else {
	                doc.isReady && doReady(doc);
	                if (browser.ie && browser.version != 11) {
	                    (function () {
	                        if (doc.isReady) return;
	                        try {
	                            doc.documentElement.doScroll("left");
	                        } catch (error) {
	                            setTimeout(arguments.callee, 0);
	                            return;
	                        }
	                        doReady(doc);
	                    })();
	                    win.attachEvent('onload', function () {
	                        doReady(doc)
	                    });
	                } else {
	                    doc.addEventListener("DOMContentLoaded", function () {
	                        doc.removeEventListener("DOMContentLoaded", arguments.callee, false);
	                        doReady(doc);
	                    }, false);
	                    win.addEventListener('load', function () {
	                        doReady(doc)
	                    }, false);
	                }
	            }
	
	        }
	    }(),
	
	    /**
	     * 动态添加css样式
	     * @method cssRule
	     * @param { String } 节点名称
	     * @grammar UE.utils.cssRule('添加的样式的节点名称',['样式'，'放到哪个document上'])
	     * @grammar UE.utils.cssRule('body','body{background:#ccc}') => null  //给body添加背景颜色
	     * @grammar UE.utils.cssRule('body') =>样式的字符串  //取得key值为body的样式的内容,如果没有找到key值先关的样式将返回空，例如刚才那个背景颜色，将返回 body{background:#ccc}
	     * @grammar UE.utils.cssRule('body',document) => 返回指定key的样式，并且指定是哪个document
	     * @grammar UE.utils.cssRule('body','') =>null //清空给定的key值的背景颜色
	     */
	    cssRule:browser.ie && browser.version != 11 ? function (key, style, doc) {
	        var indexList, index;
	        if(style === undefined || style && style.nodeType && style.nodeType == 9){
	            //获取样式
	            doc = style && style.nodeType && style.nodeType == 9 ? style : (doc || document);
	            indexList = doc.indexList || (doc.indexList = {});
	            index = indexList[key];
	            if(index !==  undefined){
	                return doc.styleSheets[index].cssText
	            }
	            return undefined;
	        }
	        doc = doc || document;
	        indexList = doc.indexList || (doc.indexList = {});
	        index = indexList[key];
	        //清除样式
	        if(style === ''){
	            if(index!== undefined){
	                doc.styleSheets[index].cssText = '';
	                delete indexList[key];
	                return true
	            }
	            return false;
	        }
	
	        //添加样式
	        if(index!== undefined){
	            sheetStyle =  doc.styleSheets[index];
	        }else{
	            sheetStyle = doc.createStyleSheet('', index = doc.styleSheets.length);
	            indexList[key] = index;
	        }
	        sheetStyle.cssText = style;
	    }: function (key, style, doc) {
	        var head, node;
	        if(style === undefined || style && style.nodeType && style.nodeType == 9){
	            //获取样式
	            doc = style && style.nodeType && style.nodeType == 9 ? style : (doc || document);
	            node = doc.getElementById(key);
	            return node ? node.innerHTML : undefined;
	        }
	        doc = doc || document;
	        node = doc.getElementById(key);
	
	        //清除样式
	        if(style === ''){
	            if(node){
	                node.parentNode.removeChild(node);
	                return true
	            }
	            return false;
	        }
	
	        //添加样式
	        if(node){
	            node.innerHTML = style;
	        }else{
	            node = doc.createElement('style');
	            node.id = key;
	            node.innerHTML = style;
	            doc.getElementsByTagName('head')[0].appendChild(node);
	        }
	    },
	    sort:function(array,compareFn){
	        compareFn = compareFn || function(item1, item2){ return item1.localeCompare(item2);};
	        for(var i= 0,len = array.length; i<len; i++){
	            for(var j = i,length = array.length; j<length; j++){
	                if(compareFn(array[i], array[j]) > 0){
	                    var t = array[i];
	                    array[i] = array[j];
	                    array[j] = t;
	                }
	            }
	        }
	        return array;
	    },
	    serializeParam:function (json) {
	        var strArr = [];
	        for (var i in json) {
	            //忽略默认的几个参数
	            if(i=="method" || i=="timeout" || i=="async") continue;
	            //传递过来的对象和函数不在提交之列
	            if (!((typeof json[i]).toLowerCase() == "function" || (typeof json[i]).toLowerCase() == "object")) {
	                strArr.push( encodeURIComponent(i) + "="+encodeURIComponent(json[i]) );
	            } else if (utils.isArray(json[i])) {
	                //支持传数组内容
	                for(var j = 0; j < json[i].length; j++) {
	                    strArr.push( encodeURIComponent(i) + "[]="+encodeURIComponent(json[i][j]) );
	                }
	            }
	        }
	        return strArr.join("&");
	    },
	    formatUrl:function (url) {
	        var u = url.replace(/&&/g, '&');
	        u = u.replace(/\?&/g, '?');
	        u = u.replace(/&$/g, '');
	        u = u.replace(/&#/g, '#');
	        u = u.replace(/&+/g, '&');
	        return u;
	    },
	    isCrossDomainUrl:function (url) {
	        var a = document.createElement('a');
	        a.href = url;
	        if (browser.ie) {
	            a.href = a.href;
	        }
	        return !(a.protocol == location.protocol && a.hostname == location.hostname &&
	        (a.port == location.port || (a.port == '80' && location.port == '') || (a.port == '' && location.port == '80')));
	    },
	    clearEmptyAttrs : function(obj){
	        for(var p in obj){
	            if(obj[p] === ''){
	                delete obj[p]
	            }
	        }
	        return obj;
	    },
	    str2json : function(s){
	
	        if (!utils.isString(s)) return null;
	        if (window.JSON) {
	            return JSON.parse(s);
	        } else {
	            return (new Function("return " + utils.trim(s || '')))();
	        }
	
	    },
	    json2str : (function(){
	
	        if (window.JSON) {
	
	            return JSON.stringify;
	
	        } else {
	
	            var escapeMap = {
	                "\b": '\\b',
	                "\t": '\\t',
	                "\n": '\\n',
	                "\f": '\\f',
	                "\r": '\\r',
	                '"' : '\\"',
	                "\\": '\\\\'
	            };
	
	            function encodeString(source) {
	                if (/["\\\x00-\x1f]/.test(source)) {
	                    source = source.replace(
	                        /["\\\x00-\x1f]/g,
	                        function (match) {
	                            var c = escapeMap[match];
	                            if (c) {
	                                return c;
	                            }
	                            c = match.charCodeAt();
	                            return "\\u00"
	                            + Math.floor(c / 16).toString(16)
	                            + (c % 16).toString(16);
	                        });
	                }
	                return '"' + source + '"';
	            }
	
	            function encodeArray(source) {
	                var result = ["["],
	                    l = source.length,
	                    preComma, i, item;
	
	                for (i = 0; i < l; i++) {
	                    item = source[i];
	
	                    switch (typeof item) {
	                        case "undefined":
	                        case "function":
	                        case "unknown":
	                            break;
	                        default:
	                            if(preComma) {
	                                result.push(',');
	                            }
	                            result.push(utils.json2str(item));
	                            preComma = 1;
	                    }
	                }
	                result.push("]");
	                return result.join("");
	            }
	
	            function pad(source) {
	                return source < 10 ? '0' + source : source;
	            }
	
	            function encodeDate(source){
	                return '"' + source.getFullYear() + "-"
	                + pad(source.getMonth() + 1) + "-"
	                + pad(source.getDate()) + "T"
	                + pad(source.getHours()) + ":"
	                + pad(source.getMinutes()) + ":"
	                + pad(source.getSeconds()) + '"';
	            }
	
	            return function (value) {
	                switch (typeof value) {
	                    case 'undefined':
	                        return 'undefined';
	
	                    case 'number':
	                        return isFinite(value) ? String(value) : "null";
	
	                    case 'string':
	                        return encodeString(value);
	
	                    case 'boolean':
	                        return String(value);
	
	                    default:
	                        if (value === null) {
	                            return 'null';
	                        } else if (utils.isArray(value)) {
	                            return encodeArray(value);
	                        } else if (utils.isDate(value)) {
	                            return encodeDate(value);
	                        } else {
	                            var result = ['{'],
	                                encode = utils.json2str,
	                                preComma,
	                                item;
	
	                            for (var key in value) {
	                                if (Object.prototype.hasOwnProperty.call(value, key)) {
	                                    item = value[key];
	                                    switch (typeof item) {
	                                        case 'undefined':
	                                        case 'unknown':
	                                        case 'function':
	                                            break;
	                                        default:
	                                            if (preComma) {
	                                                result.push(',');
	                                            }
	                                            preComma = 1;
	                                            result.push(encode(key) + ':' + encode(item));
	                                    }
	                                }
	                            }
	                            result.push('}');
	                            return result.join('');
	                        }
	                }
	            };
	        }
	
	    })()
	
	};
	/**
	 * 判断给定的对象是否是字符串
	 * @method isString
	 * @param { * } object 需要判断的对象
	 * @return { Boolean } 给定的对象是否是字符串
	 */
	
	/**
	 * 判断给定的对象是否是数组
	 * @method isArray
	 * @param { * } object 需要判断的对象
	 * @return { Boolean } 给定的对象是否是数组
	 */
	
	/**
	 * 判断给定的对象是否是一个Function
	 * @method isFunction
	 * @param { * } object 需要判断的对象
	 * @return { Boolean } 给定的对象是否是Function
	 */
	
	/**
	 * 判断给定的对象是否是Number
	 * @method isNumber
	 * @param { * } object 需要判断的对象
	 * @return { Boolean } 给定的对象是否是Number
	 */
	
	/**
	 * 判断给定的对象是否是一个正则表达式
	 * @method isRegExp
	 * @param { * } object 需要判断的对象
	 * @return { Boolean } 给定的对象是否是正则表达式
	 */
	
	/**
	 * 判断给定的对象是否是一个普通对象
	 * @method isObject
	 * @param { * } object 需要判断的对象
	 * @return { Boolean } 给定的对象是否是普通对象
	 */
	utils.each(['String', 'Function', 'Array', 'Number', 'RegExp', 'Object', 'Date'], function (v) {
	    UE.utils['is' + v] = function (obj) {
	        return Object.prototype.toString.apply(obj) == '[object ' + v + ']';
	    }
	});
	
	
	// core/EventBase.js
	/**
	 * UE采用的事件基类
	 * @file
	 * @module UE
	 * @class EventBase
	 * @since 1.2.6.1
	 */
	
	/**
	 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
	 * @unfile
	 * @module UE
	 */
	
	/**
	 * UE采用的事件基类，继承此类的对应类将获取addListener,removeListener,fireEvent方法。
	 * 在UE中，Editor以及所有ui实例都继承了该类，故可以在对应的ui对象以及editor对象上使用上述方法。
	 * @unfile
	 * @module UE
	 * @class EventBase
	 */
	
	/**
	 * 通过此构造器，子类可以继承EventBase获取事件监听的方法
	 * @constructor
	 * @example
	 * ```javascript
	 * UE.EventBase.call(editor);
	 * ```
	 */
	var EventBase = UE.EventBase = function () {};
	
	EventBase.prototype = {
	
	    /**
	     * 注册事件监听器
	     * @method addListener
	     * @param { String } types 监听的事件名称，同时监听多个事件使用空格分隔
	     * @param { Function } fn 监听的事件被触发时，会执行该回调函数
	     * @waining 事件被触发时，监听的函数假如返回的值恒等于true，回调函数的队列中后面的函数将不执行
	     * @example
	     * ```javascript
	     * editor.addListener('selectionchange',function(){
	     *      console.log("选区已经变化！");
	     * })
	     * editor.addListener('beforegetcontent aftergetcontent',function(type){
	     *         if(type == 'beforegetcontent'){
	     *             //do something
	     *         }else{
	     *             //do something
	     *         }
	     *         console.log(this.getContent) // this是注册的事件的编辑器实例
	     * })
	     * ```
	     * @see UE.EventBase:fireEvent(String)
	     */
	    addListener:function (types, listener) {
	        types = utils.trim(types).split(/\s+/);
	        for (var i = 0, ti; ti = types[i++];) {
	            getListener(this, ti, true).push(listener);
	        }
	    },
	
	    on : function(types, listener){
	      return this.addListener(types,listener);
	    },
	    off : function(types, listener){
	        return this.removeListener(types, listener)
	    },
	    trigger:function(){
	        return this.fireEvent.apply(this,arguments);
	    },
	    /**
	     * 移除事件监听器
	     * @method removeListener
	     * @param { String } types 移除的事件名称，同时移除多个事件使用空格分隔
	     * @param { Function } fn 移除监听事件的函数引用
	     * @example
	     * ```javascript
	     * //changeCallback为方法体
	     * editor.removeListener("selectionchange",changeCallback);
	     * ```
	     */
	    removeListener:function (types, listener) {
	        types = utils.trim(types).split(/\s+/);
	        for (var i = 0, ti; ti = types[i++];) {
	            utils.removeItem(getListener(this, ti) || [], listener);
	        }
	    },
	
	    /**
	     * 触发事件
	     * @method fireEvent
	     * @param { String } types 触发的事件名称，同时触发多个事件使用空格分隔
	     * @remind 该方法会触发addListener
	     * @return { * } 返回触发事件的队列中，最后执行的回调函数的返回值
	     * @example
	     * ```javascript
	     * editor.fireEvent("selectionchange");
	     * ```
	     */
	
	    /**
	     * 触发事件
	     * @method fireEvent
	     * @param { String } types 触发的事件名称，同时触发多个事件使用空格分隔
	     * @param { *... } options 可选参数，可以传入一个或多个参数，会传给事件触发的回调函数
	     * @return { * } 返回触发事件的队列中，最后执行的回调函数的返回值
	     * @example
	     * ```javascript
	     *
	     * editor.addListener( "selectionchange", function ( type, arg1, arg2 ) {
	     *
	     *     console.log( arg1 + " " + arg2 );
	     *
	     * } );
	     *
	     * //触发selectionchange事件， 会执行上面的事件监听器
	     * //output: Hello World
	     * editor.fireEvent("selectionchange", "Hello", "World");
	     * ```
	     */
	    fireEvent:function () {
	        var types = arguments[0];
	        types = utils.trim(types).split(' ');
	        for (var i = 0, ti; ti = types[i++];) {
	            var listeners = getListener(this, ti),
	                r, t, k;
	            if (listeners) {
	                k = listeners.length;
	                while (k--) {
	                    if(!listeners[k])continue;
	                    t = listeners[k].apply(this, arguments);
	                    if(t === true){
	                        return t;
	                    }
	                    if (t !== undefined) {
	                        r = t;
	                    }
	                }
	            }
	            if (t = this['on' + ti.toLowerCase()]) {
	                r = t.apply(this, arguments);
	            }
	        }
	        return r;
	    }
	};
	/**
	 * 获得对象所拥有监听类型的所有监听器
	 * @unfile
	 * @module UE
	 * @since 1.2.6.1
	 * @method getListener
	 * @public
	 * @param { Object } obj  查询监听器的对象
	 * @param { String } type 事件类型
	 * @param { Boolean } force  为true且当前所有type类型的侦听器不存在时，创建一个空监听器数组
	 * @return { Array } 监听器数组
	 */
	function getListener(obj, type, force) {
	    var allListeners;
	    type = type.toLowerCase();
	    return ( ( allListeners = ( obj.__allListeners || force && ( obj.__allListeners = {} ) ) )
	        && ( allListeners[type] || force && ( allListeners[type] = [] ) ) );
	}
	
	
	
	// core/dtd.js
	///import editor.js
	///import core/dom/dom.js
	///import core/utils.js
	/**
	 * dtd html语义化的体现类
	 * @constructor
	 * @namespace dtd
	 */
	var dtd = dom.dtd = (function() {
	    function _( s ) {
	        for (var k in s) {
	            s[k.toUpperCase()] = s[k];
	        }
	        return s;
	    }
	    var X = utils.extend2;
	    var A = _({isindex:1,fieldset:1}),
	        B = _({input:1,button:1,select:1,textarea:1,label:1}),
	        C = X( _({a:1}), B ),
	        D = X( {iframe:1}, C ),
	        E = _({hr:1,ul:1,menu:1,div:1,blockquote:1,noscript:1,table:1,center:1,address:1,dir:1,pre:1,h5:1,dl:1,h4:1,noframes:1,h6:1,ol:1,h1:1,h3:1,h2:1}),
	        F = _({ins:1,del:1,script:1,style:1}),
	        G = X( _({b:1,acronym:1,bdo:1,'var':1,'#':1,abbr:1,code:1,br:1,i:1,cite:1,kbd:1,u:1,strike:1,s:1,tt:1,strong:1,q:1,samp:1,em:1,dfn:1,span:1}), F ),
	        H = X( _({sub:1,img:1,embed:1,object:1,sup:1,basefont:1,map:1,applet:1,font:1,big:1,small:1}), G ),
	        I = X( _({p:1}), H ),
	        J = X( _({iframe:1}), H, B ),
	        K = _({img:1,embed:1,noscript:1,br:1,kbd:1,center:1,button:1,basefont:1,h5:1,h4:1,samp:1,h6:1,ol:1,h1:1,h3:1,h2:1,form:1,font:1,'#':1,select:1,menu:1,ins:1,abbr:1,label:1,code:1,table:1,script:1,cite:1,input:1,iframe:1,strong:1,textarea:1,noframes:1,big:1,small:1,span:1,hr:1,sub:1,bdo:1,'var':1,div:1,object:1,sup:1,strike:1,dir:1,map:1,dl:1,applet:1,del:1,isindex:1,fieldset:1,ul:1,b:1,acronym:1,a:1,blockquote:1,i:1,u:1,s:1,tt:1,address:1,q:1,pre:1,p:1,em:1,dfn:1}),
	
	        L = X( _({a:0}), J ),//a不能被切开，所以把他
	        M = _({tr:1}),
	        N = _({'#':1}),
	        O = X( _({param:1}), K ),
	        P = X( _({form:1}), A, D, E, I ),
	        Q = _({li:1,ol:1,ul:1}),
	        R = _({style:1,script:1}),
	        S = _({base:1,link:1,meta:1,title:1}),
	        T = X( S, R ),
	        U = _({head:1,body:1}),
	        V = _({html:1});
	
	    var block = _({address:1,blockquote:1,center:1,dir:1,div:1,dl:1,fieldset:1,form:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1,hr:1,isindex:1,menu:1,noframes:1,ol:1,p:1,pre:1,table:1,ul:1}),
	
	        empty =  _({area:1,base:1,basefont:1,br:1,col:1,command:1,dialog:1,embed:1,hr:1,img:1,input:1,isindex:1,keygen:1,link:1,meta:1,param:1,source:1,track:1,wbr:1});
	
	    return  _({
	
	        // $ 表示自定的属性
	
	        // body外的元素列表.
	        $nonBodyContent: X( V, U, S ),
	
	        //块结构元素列表
	        $block : block,
	
	        //内联元素列表
	        $inline : L,
	
	        $inlineWithA : X(_({a:1}),L),
	
	        $body : X( _({script:1,style:1}), block ),
	
	        $cdata : _({script:1,style:1}),
	
	        //自闭和元素
	        $empty : empty,
	
	        //不是自闭合，但不能让range选中里边
	        $nonChild : _({iframe:1,textarea:1}),
	        //列表元素列表
	        $listItem : _({dd:1,dt:1,li:1}),
	
	        //列表根元素列表
	        $list: _({ul:1,ol:1,dl:1}),
	
	        //不能认为是空的元素
	        $isNotEmpty : _({table:1,ul:1,ol:1,dl:1,iframe:1,area:1,base:1,col:1,hr:1,img:1,embed:1,input:1,link:1,meta:1,param:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1}),
	
	        //如果没有子节点就可以删除的元素列表，像span,a
	        $removeEmpty : _({a:1,abbr:1,acronym:1,address:1,b:1,bdo:1,big:1,cite:1,code:1,del:1,dfn:1,em:1,font:1,i:1,ins:1,label:1,kbd:1,q:1,s:1,samp:1,small:1,span:1,strike:1,strong:1,sub:1,sup:1,tt:1,u:1,'var':1}),
	
	        $removeEmptyBlock : _({'p':1,'div':1}),
	
	        //在table元素里的元素列表
	        $tableContent : _({caption:1,col:1,colgroup:1,tbody:1,td:1,tfoot:1,th:1,thead:1,tr:1,table:1}),
	        //不转换的标签
	        $notTransContent : _({pre:1,script:1,style:1,textarea:1}),
	        html: U,
	        head: T,
	        style: N,
	        script: N,
	        body: P,
	        base: {},
	        link: {},
	        meta: {},
	        title: N,
	        col : {},
	        tr : _({td:1,th:1}),
	        img : {},
	        embed: {},
	        colgroup : _({thead:1,col:1,tbody:1,tr:1,tfoot:1}),
	        noscript : P,
	        td : P,
	        br : {},
	        th : P,
	        center : P,
	        kbd : L,
	        button : X( I, E ),
	        basefont : {},
	        h5 : L,
	        h4 : L,
	        samp : L,
	        h6 : L,
	        ol : Q,
	        h1 : L,
	        h3 : L,
	        option : N,
	        h2 : L,
	        form : X( A, D, E, I ),
	        select : _({optgroup:1,option:1}),
	        font : L,
	        ins : L,
	        menu : Q,
	        abbr : L,
	        label : L,
	        table : _({thead:1,col:1,tbody:1,tr:1,colgroup:1,caption:1,tfoot:1}),
	        code : L,
	        tfoot : M,
	        cite : L,
	        li : P,
	        input : {},
	        iframe : P,
	        strong : L,
	        textarea : N,
	        noframes : P,
	        big : L,
	        small : L,
	        //trace:
	        span :_({'#':1,br:1,b:1,strong:1,u:1,i:1,em:1,sub:1,sup:1,strike:1,span:1}),
	        hr : L,
	        dt : L,
	        sub : L,
	        optgroup : _({option:1}),
	        param : {},
	        bdo : L,
	        'var' : L,
	        div : P,
	        object : O,
	        sup : L,
	        dd : P,
	        strike : L,
	        area : {},
	        dir : Q,
	        map : X( _({area:1,form:1,p:1}), A, F, E ),
	        applet : O,
	        dl : _({dt:1,dd:1}),
	        del : L,
	        isindex : {},
	        fieldset : X( _({legend:1}), K ),
	        thead : M,
	        ul : Q,
	        acronym : L,
	        b : L,
	        a : X( _({a:1}), J ),
	        blockquote :X(_({td:1,tr:1,tbody:1,li:1}),P),
	        caption : L,
	        i : L,
	        u : L,
	        tbody : M,
	        s : L,
	        address : X( D, I ),
	        tt : L,
	        legend : L,
	        q : L,
	        pre : X( G, C ),
	        p : X(_({'a':1}),L),
	        em :L,
	        dfn : L
	    });
	})();
	
	
	// core/domUtils.js
	/**
	 * Dom操作工具包
	 * @file
	 * @module UE.dom.domUtils
	 * @since 1.2.6.1
	 */
	
	/**
	 * Dom操作工具包
	 * @unfile
	 * @module UE.dom.domUtils
	 */
	function getDomNode(node, start, ltr, startFromChild, fn, guard) {
	    var tmpNode = startFromChild && node[start],
	        parent;
	    !tmpNode && (tmpNode = node[ltr]);
	    while (!tmpNode && (parent = (parent || node).parentNode)) {
	        if (parent.tagName == 'BODY' || guard && !guard(parent)) {
	            return null;
	        }
	        tmpNode = parent[ltr];
	    }
	    if (tmpNode && fn && !fn(tmpNode)) {
	        return  getDomNode(tmpNode, start, ltr, false, fn);
	    }
	    return tmpNode;
	}
	var attrFix = ie && browser.version < 9 ? {
	        tabindex:"tabIndex",
	        readonly:"readOnly",
	        "for":"htmlFor",
	        "class":"className",
	        maxlength:"maxLength",
	        cellspacing:"cellSpacing",
	        cellpadding:"cellPadding",
	        rowspan:"rowSpan",
	        colspan:"colSpan",
	        usemap:"useMap",
	        frameborder:"frameBorder"
	    } : {
	        tabindex:"tabIndex",
	        readonly:"readOnly"
	    },
	    styleBlock = utils.listToMap([
	        '-webkit-box', '-moz-box', 'block' ,
	        'list-item' , 'table' , 'table-row-group' ,
	        'table-header-group', 'table-footer-group' ,
	        'table-row' , 'table-column-group' , 'table-column' ,
	        'table-cell' , 'table-caption'
	    ]);
	var domUtils = dom.domUtils = {
	    //节点常量
	    NODE_ELEMENT:1,
	    NODE_DOCUMENT:9,
	    NODE_TEXT:3,
	    NODE_COMMENT:8,
	    NODE_DOCUMENT_FRAGMENT:11,
	
	    //位置关系
	    POSITION_IDENTICAL:0,
	    POSITION_DISCONNECTED:1,
	    POSITION_FOLLOWING:2,
	    POSITION_PRECEDING:4,
	    POSITION_IS_CONTAINED:8,
	    POSITION_CONTAINS:16,
	    //ie6使用其他的会有一段空白出现
	    fillChar:ie && browser.version == '6' ? '\ufeff' : '\u200B',
	    //-------------------------Node部分--------------------------------
	    keys:{
	        /*Backspace*/ 8:1, /*Delete*/ 46:1,
	        /*Shift*/ 16:1, /*Ctrl*/ 17:1, /*Alt*/ 18:1,
	        37:1, 38:1, 39:1, 40:1,
	        13:1 /*enter*/
	    },
	    /**
	     * 获取节点A相对于节点B的位置关系
	     * @method getPosition
	     * @param { Node } nodeA 需要查询位置关系的节点A
	     * @param { Node } nodeB 需要查询位置关系的节点B
	     * @return { Number } 节点A与节点B的关系
	     * @example
	     * ```javascript
	     * //output: 20
	     * var position = UE.dom.domUtils.getPosition( document.documentElement, document.body );
	     *
	     * switch ( position ) {
	     *
	     *      //0
	     *      case UE.dom.domUtils.POSITION_IDENTICAL:
	     *          console.log('元素相同');
	     *          break;
	     *      //1
	     *      case UE.dom.domUtils.POSITION_DISCONNECTED:
	     *          console.log('两个节点在不同的文档中');
	     *          break;
	     *      //2
	     *      case UE.dom.domUtils.POSITION_FOLLOWING:
	     *          console.log('节点A在节点B之后');
	     *          break;
	     *      //4
	     *      case UE.dom.domUtils.POSITION_PRECEDING;
	     *          console.log('节点A在节点B之前');
	     *          break;
	     *      //8
	     *      case UE.dom.domUtils.POSITION_IS_CONTAINED:
	     *          console.log('节点A被节点B包含');
	     *          break;
	     *      case 10:
	     *          console.log('节点A被节点B包含且节点A在节点B之后');
	     *          break;
	     *      //16
	     *      case UE.dom.domUtils.POSITION_CONTAINS:
	     *          console.log('节点A包含节点B');
	     *          break;
	     *      case 20:
	     *          console.log('节点A包含节点B且节点A在节点B之前');
	     *          break;
	     *
	     * }
	     * ```
	     */
	    getPosition:function (nodeA, nodeB) {
	        // 如果两个节点是同一个节点
	        if (nodeA === nodeB) {
	            // domUtils.POSITION_IDENTICAL
	            return 0;
	        }
	        var node,
	            parentsA = [nodeA],
	            parentsB = [nodeB];
	        node = nodeA;
	        while (node = node.parentNode) {
	            // 如果nodeB是nodeA的祖先节点
	            if (node === nodeB) {
	                // domUtils.POSITION_IS_CONTAINED + domUtils.POSITION_FOLLOWING
	                return 10;
	            }
	            parentsA.push(node);
	        }
	        node = nodeB;
	        while (node = node.parentNode) {
	            // 如果nodeA是nodeB的祖先节点
	            if (node === nodeA) {
	                // domUtils.POSITION_CONTAINS + domUtils.POSITION_PRECEDING
	                return 20;
	            }
	            parentsB.push(node);
	        }
	        parentsA.reverse();
	        parentsB.reverse();
	        if (parentsA[0] !== parentsB[0]) {
	            // domUtils.POSITION_DISCONNECTED
	            return 1;
	        }
	        var i = -1;
	        while (i++, parentsA[i] === parentsB[i]) {
	        }
	        nodeA = parentsA[i];
	        nodeB = parentsB[i];
	        while (nodeA = nodeA.nextSibling) {
	            if (nodeA === nodeB) {
	                // domUtils.POSITION_PRECEDING
	                return 4
	            }
	        }
	        // domUtils.POSITION_FOLLOWING
	        return  2;
	    },
	
	    /**
	     * 检测节点node在父节点中的索引位置
	     * @method getNodeIndex
	     * @param { Node } node 需要检测的节点对象
	     * @return { Number } 该节点在父节点中的位置
	     * @see UE.dom.domUtils.getNodeIndex(Node,Boolean)
	     */
	
	    /**
	     * 检测节点node在父节点中的索引位置， 根据给定的mergeTextNode参数决定是否要合并多个连续的文本节点为一个节点
	     * @method getNodeIndex
	     * @param { Node } node 需要检测的节点对象
	     * @param { Boolean } mergeTextNode 是否合并多个连续的文本节点为一个节点
	     * @return { Number } 该节点在父节点中的位置
	     * @example
	     * ```javascript
	     *
	     *      var node = document.createElement("div");
	     *
	     *      node.appendChild( document.createTextNode( "hello" ) );
	     *      node.appendChild( document.createTextNode( "world" ) );
	     *      node.appendChild( node = document.createElement( "div" ) );
	     *
	     *      //output: 2
	     *      console.log( UE.dom.domUtils.getNodeIndex( node ) );
	     *
	     *      //output: 1
	     *      console.log( UE.dom.domUtils.getNodeIndex( node, true ) );
	     *
	     * ```
	     */
	    getNodeIndex:function (node, ignoreTextNode) {
	        var preNode = node,
	            i = 0;
	        while (preNode = preNode.previousSibling) {
	            if (ignoreTextNode && preNode.nodeType == 3) {
	                if(preNode.nodeType != preNode.nextSibling.nodeType ){
	                    i++;
	                }
	                continue;
	            }
	            i++;
	        }
	        return i;
	    },
	
	    /**
	     * 检测节点node是否在给定的document对象上
	     * @method inDoc
	     * @param { Node } node 需要检测的节点对象
	     * @param { DomDocument } doc 需要检测的document对象
	     * @return { Boolean } 该节点node是否在给定的document的dom树上
	     * @example
	     * ```javascript
	     *
	     * var node = document.createElement("div");
	     *
	     * //output: false
	     * console.log( UE.do.domUtils.inDoc( node, document ) );
	     *
	     * document.body.appendChild( node );
	     *
	     * //output: true
	     * console.log( UE.do.domUtils.inDoc( node, document ) );
	     *
	     * ```
	     */
	    inDoc:function (node, doc) {
	        return domUtils.getPosition(node, doc) == 10;
	    },
	    /**
	     * 根据给定的过滤规则filterFn， 查找符合该过滤规则的node节点的第一个祖先节点，
	     * 查找的起点是给定node节点的父节点。
	     * @method findParent
	     * @param { Node } node 需要查找的节点
	     * @param { Function } filterFn 自定义的过滤方法。
	     * @warning 查找的终点是到body节点为止
	     * @remind 自定义的过滤方法filterFn接受一个Node对象作为参数， 该对象代表当前执行检测的祖先节点。 如果该
	     *          节点满足过滤条件， 则要求返回true， 这时将直接返回该节点作为findParent()的结果， 否则， 请返回false。
	     * @return { Node | Null } 如果找到符合过滤条件的节点， 就返回该节点， 否则返回NULL
	     * @example
	     * ```javascript
	     * var filterNode = UE.dom.domUtils.findParent( document.body.firstChild, function ( node ) {
	     *
	     *     //由于查找的终点是body节点， 所以永远也不会匹配当前过滤器的条件， 即这里永远会返回false
	     *     return node.tagName === "HTML";
	     *
	     * } );
	     *
	     * //output: true
	     * console.log( filterNode === null );
	     * ```
	     */
	
	    /**
	     * 根据给定的过滤规则filterFn， 查找符合该过滤规则的node节点的第一个祖先节点，
	     * 如果includeSelf的值为true，则查找的起点是给定的节点node， 否则， 起点是node的父节点
	     * @method findParent
	     * @param { Node } node 需要查找的节点
	     * @param { Function } filterFn 自定义的过滤方法。
	     * @param { Boolean } includeSelf 查找过程是否包含自身
	     * @warning 查找的终点是到body节点为止
	     * @remind 自定义的过滤方法filterFn接受一个Node对象作为参数， 该对象代表当前执行检测的祖先节点。 如果该
	     *          节点满足过滤条件， 则要求返回true， 这时将直接返回该节点作为findParent()的结果， 否则， 请返回false。
	     * @remind 如果includeSelf为true， 则过滤器第一次执行时的参数会是节点本身。
	     *          反之， 过滤器第一次执行时的参数将是该节点的父节点。
	     * @return { Node | Null } 如果找到符合过滤条件的节点， 就返回该节点， 否则返回NULL
	     * @example
	     * ```html
	     * <body>
	     *
	     *      <div id="test">
	     *      </div>
	     *
	     *      <script type="text/javascript">
	     *
	     *          //output: DIV, BODY
	     *          var filterNode = UE.dom.domUtils.findParent( document.getElementById( "test" ), function ( node ) {
	     *
	     *              console.log( node.tagName );
	     *              return false;
	     *
	     *          }, true );
	     *
	     *      </script>
	     * </body>
	     * ```
	     */
	    findParent:function (node, filterFn, includeSelf) {
	        if (node && !domUtils.isBody(node)) {
	            node = includeSelf ? node : node.parentNode;
	            while (node) {
	                if (!filterFn || filterFn(node) || domUtils.isBody(node)) {
	                    return filterFn && !filterFn(node) && domUtils.isBody(node) ? null : node;
	                }
	                node = node.parentNode;
	            }
	        }
	        return null;
	    },
	    /**
	     * 查找node的节点名为tagName的第一个祖先节点， 查找的起点是node节点的父节点。
	     * @method findParentByTagName
	     * @param { Node } node 需要查找的节点对象
	     * @param { Array } tagNames 需要查找的父节点的名称数组
	     * @warning 查找的终点是到body节点为止
	     * @return { Node | NULL } 如果找到符合条件的节点， 则返回该节点， 否则返回NULL
	     * @example
	     * ```javascript
	     * var node = UE.dom.domUtils.findParentByTagName( document.getElementsByTagName("div")[0], [ "BODY" ] );
	     * //output: BODY
	     * console.log( node.tagName );
	     * ```
	     */
	
	    /**
	     * 查找node的节点名为tagName的祖先节点， 如果includeSelf的值为true，则查找的起点是给定的节点node，
	     * 否则， 起点是node的父节点。
	     * @method findParentByTagName
	     * @param { Node } node 需要查找的节点对象
	     * @param { Array } tagNames 需要查找的父节点的名称数组
	     * @param { Boolean } includeSelf 查找过程是否包含node节点自身
	     * @warning 查找的终点是到body节点为止
	     * @return { Node | NULL } 如果找到符合条件的节点， 则返回该节点， 否则返回NULL
	     * @example
	     * ```javascript
	     * var queryTarget = document.getElementsByTagName("div")[0];
	     * var node = UE.dom.domUtils.findParentByTagName( queryTarget, [ "DIV" ], true );
	     * //output: true
	     * console.log( queryTarget === node );
	     * ```
	     */
	    findParentByTagName:function (node, tagNames, includeSelf, excludeFn) {
	        tagNames = utils.listToMap(utils.isArray(tagNames) ? tagNames : [tagNames]);
	        return domUtils.findParent(node, function (node) {
	            return tagNames[node.tagName] && !(excludeFn && excludeFn(node));
	        }, includeSelf);
	    },
	    /**
	     * 查找节点node的祖先节点集合， 查找的起点是给定节点的父节点，结果集中不包含给定的节点。
	     * @method findParents
	     * @param { Node } node 需要查找的节点对象
	     * @return { Array } 给定节点的祖先节点数组
	     * @grammar UE.dom.domUtils.findParents(node)  => Array  //返回一个祖先节点数组集合，不包含自身
	     * @grammar UE.dom.domUtils.findParents(node,includeSelf)  => Array  //返回一个祖先节点数组集合，includeSelf指定是否包含自身
	     * @grammar UE.dom.domUtils.findParents(node,includeSelf,filterFn)  => Array  //返回一个祖先节点数组集合，filterFn指定过滤条件，返回true的node将被选取
	     * @grammar UE.dom.domUtils.findParents(node,includeSelf,filterFn,closerFirst)  => Array  //返回一个祖先节点数组集合，closerFirst为true的话，node的直接父亲节点是数组的第0个
	     */
	
	    /**
	     * 查找节点node的祖先节点集合， 如果includeSelf的值为true，
	     * 则返回的结果集中允许出现当前给定的节点， 否则， 该节点不会出现在其结果集中。
	     * @method findParents
	     * @param { Node } node 需要查找的节点对象
	     * @param { Boolean } includeSelf 查找的结果中是否允许包含当前查找的节点对象
	     * @return { Array } 给定节点的祖先节点数组
	     */
	    findParents:function (node, includeSelf, filterFn, closerFirst) {
	        var parents = includeSelf && ( filterFn && filterFn(node) || !filterFn ) ? [node] : [];
	        while (node = domUtils.findParent(node, filterFn)) {
	            parents.push(node);
	        }
	        return closerFirst ? parents : parents.reverse();
	    },
	
	    /**
	     * 在节点node后面插入新节点newNode
	     * @method insertAfter
	     * @param { Node } node 目标节点
	     * @param { Node } newNode 新插入的节点， 该节点将置于目标节点之后
	     * @return { Node } 新插入的节点
	     */
	    insertAfter:function (node, newNode) {
	        return node.nextSibling ? node.parentNode.insertBefore(newNode, node.nextSibling):
	            node.parentNode.appendChild(newNode);
	    },
	
	    /**
	     * 删除节点node及其下属的所有节点
	     * @method remove
	     * @param { Node } node 需要删除的节点对象
	     * @return { Node } 返回刚删除的节点对象
	     * @example
	     * ```html
	     * <div id="test">
	     *     <div id="child">你好</div>
	     * </div>
	     * <script>
	     *     UE.dom.domUtils.remove( document.body, false );
	     *     //output: false
	     *     console.log( document.getElementById( "child" ) !== null );
	     * </script>
	     * ```
	     */
	
	    /**
	     * 删除节点node，并根据keepChildren的值决定是否保留子节点
	     * @method remove
	     * @param { Node } node 需要删除的节点对象
	     * @param { Boolean } keepChildren 是否需要保留子节点
	     * @return { Node } 返回刚删除的节点对象
	     * @example
	     * ```html
	     * <div id="test">
	     *     <div id="child">你好</div>
	     * </div>
	     * <script>
	     *     UE.dom.domUtils.remove( document.body, true );
	     *     //output: true
	     *     console.log( document.getElementById( "child" ) !== null );
	     * </script>
	     * ```
	     */
	    remove:function (node, keepChildren) {
	        var parent = node.parentNode,
	            child;
	        if (parent) {
	            if (keepChildren && node.hasChildNodes()) {
	                while (child = node.firstChild) {
	                    parent.insertBefore(child, node);
	                }
	            }
	            parent.removeChild(node);
	        }
	        return node;
	    },
	
	    /**
	     * 取得node节点的下一个兄弟节点， 如果该节点其后没有兄弟节点， 则递归查找其父节点之后的第一个兄弟节点，
	     * 直到找到满足条件的节点或者递归到BODY节点之后才会结束。
	     * @method getNextDomNode
	     * @param { Node } node 需要获取其后的兄弟节点的节点对象
	     * @return { Node | NULL } 如果找满足条件的节点， 则返回该节点， 否则返回NULL
	     * @example
	     * ```html
	     *     <body>
	     *      <div id="test">
	     *          <span></span>
	     *      </div>
	     *      <i>xxx</i>
	     * </body>
	     * <script>
	     *
	     *     //output: i节点
	     *     console.log( UE.dom.domUtils.getNextDomNode( document.getElementById( "test" ) ) );
	     *
	     * </script>
	     * ```
	     * @example
	     * ```html
	     * <body>
	     *      <div>
	     *          <span></span>
	     *          <i id="test">xxx</i>
	     *      </div>
	     *      <b>xxx</b>
	     * </body>
	     * <script>
	     *
	     *     //由于id为test的i节点之后没有兄弟节点， 则查找其父节点（div）后面的兄弟节点
	     *     //output: b节点
	     *     console.log( UE.dom.domUtils.getNextDomNode( document.getElementById( "test" ) ) );
	     *
	     * </script>
	     * ```
	     */
	
	    /**
	     * 取得node节点的下一个兄弟节点， 如果startFromChild的值为ture，则先获取其子节点，
	     * 如果有子节点则直接返回第一个子节点；如果没有子节点或者startFromChild的值为false，
	     * 则执行<a href="#UE.dom.domUtils.getNextDomNode(Node)">getNextDomNode(Node node)</a>的查找过程。
	     * @method getNextDomNode
	     * @param { Node } node 需要获取其后的兄弟节点的节点对象
	     * @param { Boolean } startFromChild 查找过程是否从其子节点开始
	     * @return { Node | NULL } 如果找满足条件的节点， 则返回该节点， 否则返回NULL
	     * @see UE.dom.domUtils.getNextDomNode(Node)
	     */
	    getNextDomNode:function (node, startFromChild, filterFn, guard) {
	        return getDomNode(node, 'firstChild', 'nextSibling', startFromChild, filterFn, guard);
	    },
	    getPreDomNode:function (node, startFromChild, filterFn, guard) {
	        return getDomNode(node, 'lastChild', 'previousSibling', startFromChild, filterFn, guard);
	    },
	    /**
	     * 检测节点node是否属是UEditor定义的bookmark节点
	     * @method isBookmarkNode
	     * @private
	     * @param { Node } node 需要检测的节点对象
	     * @return { Boolean } 是否是bookmark节点
	     * @example
	     * ```html
	     * <span id="_baidu_bookmark_1"></span>
	     * <script>
	     *      var bookmarkNode = document.getElementById("_baidu_bookmark_1");
	     *      //output: true
	     *      console.log( UE.dom.domUtils.isBookmarkNode( bookmarkNode ) );
	     * </script>
	     * ```
	     */
	    isBookmarkNode:function (node) {
	        return node.nodeType == 1 && node.id && /^_baidu_bookmark_/i.test(node.id);
	    },
	    /**
	     * 获取节点node所属的window对象
	     * @method  getWindow
	     * @param { Node } node 节点对象
	     * @return { Window } 当前节点所属的window对象
	     * @example
	     * ```javascript
	     * //output: true
	     * console.log( UE.dom.domUtils.getWindow( document.body ) === window );
	     * ```
	     */
	    getWindow:function (node) {
	        var doc = node.ownerDocument || node;
	        return doc.defaultView || doc.parentWindow;
	    },
	    /**
	     * 获取离nodeA与nodeB最近的公共的祖先节点
	     * @method  getCommonAncestor
	     * @param { Node } nodeA 第一个节点
	     * @param { Node } nodeB 第二个节点
	     * @remind 如果给定的两个节点是同一个节点， 将直接返回该节点。
	     * @return { Node | NULL } 如果未找到公共节点， 返回NULL， 否则返回最近的公共祖先节点。
	     * @example
	     * ```javascript
	     * var commonAncestor = UE.dom.domUtils.getCommonAncestor( document.body, document.body.firstChild );
	     * //output: true
	     * console.log( commonAncestor.tagName.toLowerCase() === 'body' );
	     * ```
	     */
	    getCommonAncestor:function (nodeA, nodeB) {
	        if (nodeA === nodeB)
	            return nodeA;
	        var parentsA = [nodeA] , parentsB = [nodeB], parent = nodeA, i = -1;
	        while (parent = parent.parentNode) {
	            if (parent === nodeB) {
	                return parent;
	            }
	            parentsA.push(parent);
	        }
	        parent = nodeB;
	        while (parent = parent.parentNode) {
	            if (parent === nodeA)
	                return parent;
	            parentsB.push(parent);
	        }
	        parentsA.reverse();
	        parentsB.reverse();
	        while (i++, parentsA[i] === parentsB[i]) {
	        }
	        return i == 0 ? null : parentsA[i - 1];
	
	    },
	    /**
	     * 清除node节点左右连续为空的兄弟inline节点
	     * @method clearEmptySibling
	     * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，
	     * 则这些兄弟节点将被删除
	     * @grammar UE.dom.domUtils.clearEmptySibling(node,ignoreNext)  //ignoreNext指定是否忽略右边空节点
	     * @grammar UE.dom.domUtils.clearEmptySibling(node,ignoreNext,ignorePre)  //ignorePre指定是否忽略左边空节点
	     * @example
	     * ```html
	     * <body>
	     *     <div></div>
	     *     <span id="test"></span>
	     *     <i></i>
	     *     <b></b>
	     *     <em>xxx</em>
	     *     <span></span>
	     * </body>
	     * <script>
	     *
	     *      UE.dom.domUtils.clearEmptySibling( document.getElementById( "test" ) );
	     *
	     *      //output: <div></div><span id="test"></span><em>xxx</em><span></span>
	     *      console.log( document.body.innerHTML );
	     *
	     * </script>
	     * ```
	     */
	
	    /**
	     * 清除node节点左右连续为空的兄弟inline节点， 如果ignoreNext的值为true，
	     * 则忽略对右边兄弟节点的操作。
	     * @method clearEmptySibling
	     * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，
	     * @param { Boolean } ignoreNext 是否忽略忽略对右边的兄弟节点的操作
	     * 则这些兄弟节点将被删除
	     * @see UE.dom.domUtils.clearEmptySibling(Node)
	     */
	
	    /**
	     * 清除node节点左右连续为空的兄弟inline节点， 如果ignoreNext的值为true，
	     * 则忽略对右边兄弟节点的操作， 如果ignorePre的值为true，则忽略对左边兄弟节点的操作。
	     * @method clearEmptySibling
	     * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，
	     * @param { Boolean } ignoreNext 是否忽略忽略对右边的兄弟节点的操作
	     * @param { Boolean } ignorePre 是否忽略忽略对左边的兄弟节点的操作
	     * 则这些兄弟节点将被删除
	     * @see UE.dom.domUtils.clearEmptySibling(Node)
	     */
	    clearEmptySibling:function (node, ignoreNext, ignorePre) {
	        function clear(next, dir) {
	            var tmpNode;
	            while (next && !domUtils.isBookmarkNode(next) && (domUtils.isEmptyInlineElement(next)
	                //这里不能把空格算进来会吧空格干掉，出现文字间的空格丢掉了
	                || !new RegExp('[^\t\n\r' + domUtils.fillChar + ']').test(next.nodeValue) )) {
	                tmpNode = next[dir];
	                domUtils.remove(next);
	                next = tmpNode;
	            }
	        }
	        !ignoreNext && clear(node.nextSibling, 'nextSibling');
	        !ignorePre && clear(node.previousSibling, 'previousSibling');
	    },
	    /**
	     * 将一个文本节点textNode拆分成两个文本节点，offset指定拆分位置
	     * @method split
	     * @param { Node } textNode 需要拆分的文本节点对象
	     * @param { int } offset 需要拆分的位置， 位置计算从0开始
	     * @return { Node } 拆分后形成的新节点
	     * @example
	     * ```html
	     * <div id="test">abcdef</div>
	     * <script>
	     *      var newNode = UE.dom.domUtils.split( document.getElementById( "test" ).firstChild, 3 );
	     *      //output: def
	     *      console.log( newNode.nodeValue );
	     * </script>
	     * ```
	     */
	    split:function (node, offset) {
	        var doc = node.ownerDocument;
	        if (browser.ie && offset == node.nodeValue.length) {
	            var next = doc.createTextNode('');
	            return domUtils.insertAfter(node, next);
	        }
	        var retval = node.splitText(offset);
	        //ie8下splitText不会跟新childNodes,我们手动触发他的更新
	        if (browser.ie8) {
	            var tmpNode = doc.createTextNode('');
	            domUtils.insertAfter(retval, tmpNode);
	            domUtils.remove(tmpNode);
	        }
	        return retval;
	    },
	
	    /**
	     * 检测文本节点textNode是否为空节点（包括空格、换行、占位符等字符）
	     * @method  isWhitespace
	     * @param { Node } node 需要检测的节点对象
	     * @return { Boolean } 检测的节点是否为空
	     * @example
	     * ```html
	     * <div id="test">
	     *
	     * </div>
	     * <script>
	     *      //output: true
	     *      console.log( UE.dom.domUtils.isWhitespace( document.getElementById("test").firstChild ) );
	     * </script>
	     * ```
	     */
	    isWhitespace:function (node) {
	        return !new RegExp('[^ \t\n\r' + domUtils.fillChar + ']').test(node.nodeValue);
	    },
	    /**
	     * 获取元素element相对于viewport的位置坐标
	     * @method getXY
	     * @param { Node } element 需要计算位置的节点对象
	     * @return { Object } 返回形如{x:left,y:top}的一个key-value映射对象， 其中键x代表水平偏移距离，
	     *                          y代表垂直偏移距离。
	     *
	     * @example
	     * ```javascript
	     * var location = UE.dom.domUtils.getXY( document.getElementById("test") );
	     * //output: test的坐标为: 12, 24
	     * console.log( 'test的坐标为： ', location.x, ',', location.y );
	     * ```
	     */
	    getXY:function (element) {
	        var x = 0, y = 0;
	        while (element.offsetParent) {
	            y += element.offsetTop;
	            x += element.offsetLeft;
	            element = element.offsetParent;
	        }
	        return { 'x':x, 'y':y};
	    },
	    /**
	     * 为元素element绑定原生DOM事件，type为事件类型，handler为处理函数
	     * @method on
	     * @param { Node } element 需要绑定事件的节点对象
	     * @param { String } type 绑定的事件类型
	     * @param { Function } handler 事件处理器
	     * @example
	     * ```javascript
	     * UE.dom.domUtils.on(document.body,"click",function(e){
	     *     //e为事件对象，this为被点击元素对戏那个
	     * });
	     * ```
	     */
	
	    /**
	     * 为元素element绑定原生DOM事件，type为事件类型，handler为处理函数
	     * @method on
	     * @param { Node } element 需要绑定事件的节点对象
	     * @param { Array } type 绑定的事件类型数组
	     * @param { Function } handler 事件处理器
	     * @example
	     * ```javascript
	     * UE.dom.domUtils.on(document.body,["click","mousedown"],function(evt){
	     *     //evt为事件对象，this为被点击元素对象
	     * });
	     * ```
	     */
	    on:function (element, type, handler) {
	
	        var types = utils.isArray(type) ? type : utils.trim(type).split(/\s+/),
	            k = types.length;
	        if (k) while (k--) {
	            type = types[k];
	            if (element.addEventListener) {
	                element.addEventListener(type, handler, false);
	            } else {
	                if (!handler._d) {
	                    handler._d = {
	                        els : []
	                    };
	                }
	                var key = type + handler.toString(),index = utils.indexOf(handler._d.els,element);
	                if (!handler._d[key] || index == -1) {
	                    if(index == -1){
	                        handler._d.els.push(element);
	                    }
	                    if(!handler._d[key]){
	                        handler._d[key] = function (evt) {
	                            return handler.call(evt.srcElement, evt || window.event);
	                        };
	                    }
	
	
	                    element.attachEvent('on' + type, handler._d[key]);
	                }
	            }
	        }
	        element = null;
	    },
	    /**
	     * 解除DOM事件绑定
	     * @method un
	     * @param { Node } element 需要解除事件绑定的节点对象
	     * @param { String } type 需要接触绑定的事件类型
	     * @param { Function } handler 对应的事件处理器
	     * @example
	     * ```javascript
	     * UE.dom.domUtils.un(document.body,"click",function(evt){
	     *     //evt为事件对象，this为被点击元素对象
	     * });
	     * ```
	     */
	
	    /**
	     * 解除DOM事件绑定
	     * @method un
	     * @param { Node } element 需要解除事件绑定的节点对象
	     * @param { Array } type 需要接触绑定的事件类型数组
	     * @param { Function } handler 对应的事件处理器
	     * @example
	     * ```javascript
	     * UE.dom.domUtils.un(document.body, ["click","mousedown"],function(evt){
	     *     //evt为事件对象，this为被点击元素对象
	     * });
	     * ```
	     */
	    un:function (element, type, handler) {
	        var types = utils.isArray(type) ? type : utils.trim(type).split(/\s+/),
	            k = types.length;
	        if (k) while (k--) {
	            type = types[k];
	            if (element.removeEventListener) {
	                element.removeEventListener(type, handler, false);
	            } else {
	                var key = type + handler.toString();
	                try{
	                    element.detachEvent('on' + type, handler._d ? handler._d[key] : handler);
	                }catch(e){}
	                if (handler._d && handler._d[key]) {
	                    var index = utils.indexOf(handler._d.els,element);
	                    if(index!=-1){
	                        handler._d.els.splice(index,1);
	                    }
	                    handler._d.els.length == 0 && delete handler._d[key];
	                }
	            }
	        }
	    },
	
	    /**
	     * 比较节点nodeA与节点nodeB是否具有相同的标签名、属性名以及属性值
	     * @method  isSameElement
	     * @param { Node } nodeA 需要比较的节点
	     * @param { Node } nodeB 需要比较的节点
	     * @return { Boolean } 两个节点是否具有相同的标签名、属性名以及属性值
	     * @example
	     * ```html
	     * <span style="font-size:12px">ssss</span>
	     * <span style="font-size:12px">bbbbb</span>
	     * <span style="font-size:13px">ssss</span>
	     * <span style="font-size:14px">bbbbb</span>
	     *
	     * <script>
	     *
	     *     var nodes = document.getElementsByTagName( "span" );
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.isSameElement( nodes[0], nodes[1] ) );
	     *
	     *     //output: false
	     *     console.log( UE.dom.domUtils.isSameElement( nodes[2], nodes[3] ) );
	     *
	     * </script>
	     * ```
	     */
	    isSameElement:function (nodeA, nodeB) {
	        if (nodeA.tagName != nodeB.tagName) {
	            return false;
	        }
	        var thisAttrs = nodeA.attributes,
	            otherAttrs = nodeB.attributes;
	        if (!ie && thisAttrs.length != otherAttrs.length) {
	            return false;
	        }
	        var attrA, attrB, al = 0, bl = 0;
	        for (var i = 0; attrA = thisAttrs[i++];) {
	            if (attrA.nodeName == 'style') {
	                if (attrA.specified) {
	                    al++;
	                }
	                if (domUtils.isSameStyle(nodeA, nodeB)) {
	                    continue;
	                } else {
	                    return false;
	                }
	            }
	            if (ie) {
	                if (attrA.specified) {
	                    al++;
	                    attrB = otherAttrs.getNamedItem(attrA.nodeName);
	                } else {
	                    continue;
	                }
	            } else {
	                attrB = nodeB.attributes[attrA.nodeName];
	            }
	            if (!attrB.specified || attrA.nodeValue != attrB.nodeValue) {
	                return false;
	            }
	        }
	        // 有可能attrB的属性包含了attrA的属性之外还有自己的属性
	        if (ie) {
	            for (i = 0; attrB = otherAttrs[i++];) {
	                if (attrB.specified) {
	                    bl++;
	                }
	            }
	            if (al != bl) {
	                return false;
	            }
	        }
	        return true;
	    },
	
	    /**
	     * 判断节点nodeA与节点nodeB的元素的style属性是否一致
	     * @method isSameStyle
	     * @param { Node } nodeA 需要比较的节点
	     * @param { Node } nodeB 需要比较的节点
	     * @return { Boolean } 两个节点是否具有相同的style属性值
	     * @example
	     * ```html
	     * <span style="font-size:12px">ssss</span>
	     * <span style="font-size:12px">bbbbb</span>
	     * <span style="font-size:13px">ssss</span>
	     * <span style="font-size:14px">bbbbb</span>
	     *
	     * <script>
	     *
	     *     var nodes = document.getElementsByTagName( "span" );
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.isSameStyle( nodes[0], nodes[1] ) );
	     *
	     *     //output: false
	     *     console.log( UE.dom.domUtils.isSameStyle( nodes[2], nodes[3] ) );
	     *
	     * </script>
	     * ```
	     */
	    isSameStyle:function (nodeA, nodeB) {
	        var styleA = nodeA.style.cssText.replace(/( ?; ?)/g, ';').replace(/( ?: ?)/g, ':'),
	            styleB = nodeB.style.cssText.replace(/( ?; ?)/g, ';').replace(/( ?: ?)/g, ':');
	        if (browser.opera) {
	            styleA = nodeA.style;
	            styleB = nodeB.style;
	            if (styleA.length != styleB.length)
	                return false;
	            for (var p in styleA) {
	                if (/^(\d+|csstext)$/i.test(p)) {
	                    continue;
	                }
	                if (styleA[p] != styleB[p]) {
	                    return false;
	                }
	            }
	            return true;
	        }
	        if (!styleA || !styleB) {
	            return styleA == styleB;
	        }
	        styleA = styleA.split(';');
	        styleB = styleB.split(';');
	        if (styleA.length != styleB.length) {
	            return false;
	        }
	        for (var i = 0, ci; ci = styleA[i++];) {
	            if (utils.indexOf(styleB, ci) == -1) {
	                return false;
	            }
	        }
	        return true;
	    },
	    /**
	     * 检查节点node是否为block元素
	     * @method isBlockElm
	     * @param { Node } node 需要检测的节点对象
	     * @return { Boolean } 是否是block元素节点
	     * @warning 该方法的判断规则如下： 如果该元素原本是block元素， 则不论该元素当前的css样式是什么都会返回true；
	     *          否则，检测该元素的css样式， 如果该元素当前是block元素， 则返回true。 其余情况下都返回false。
	     * @example
	     * ```html
	     * <span id="test1" style="display: block"></span>
	     * <span id="test2"></span>
	     * <div id="test3" style="display: inline"></div>
	     *
	     * <script>
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.isBlockElm( document.getElementById("test1") ) );
	     *
	     *     //output: false
	     *     console.log( UE.dom.domUtils.isBlockElm( document.getElementById("test2") ) );
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.isBlockElm( document.getElementById("test3") ) );
	     *
	     * </script>
	     * ```
	     */
	    isBlockElm:function (node) {
	        return node.nodeType == 1 && (dtd.$block[node.tagName] || styleBlock[domUtils.getComputedStyle(node, 'display')]) && !dtd.$nonChild[node.tagName];
	    },
	    /**
	     * 检测node节点是否为body节点
	     * @method isBody
	     * @param { Element } node 需要检测的dom元素
	     * @return { Boolean } 给定的元素是否是body元素
	     * @example
	     * ```javascript
	     * //output: true
	     * console.log( UE.dom.domUtils.isBody( document.body ) );
	     * ```
	     */
	    isBody:function (node) {
	        return  node && node.nodeType == 1 && node.tagName.toLowerCase() == 'body';
	    },
	    /**
	     * 以node节点为分界，将该节点的指定祖先节点parent拆分成两个独立的节点，
	     * 拆分形成的两个节点之间是node节点
	     * @method breakParent
	     * @param { Node } node 作为分界的节点对象
	     * @param { Node } parent 该节点必须是node节点的祖先节点， 且是block节点。
	     * @return { Node } 给定的node分界节点
	     * @example
	     * ```javascript
	     *
	     *      var node = document.createElement("span"),
	     *          wrapNode = document.createElement( "div" ),
	     *          parent = document.createElement("p");
	     *
	     *      parent.appendChild( node );
	     *      wrapNode.appendChild( parent );
	     *
	     *      //拆分前
	     *      //output: <p><span></span></p>
	     *      console.log( wrapNode.innerHTML );
	     *
	     *
	     *      UE.dom.domUtils.breakParent( node, parent );
	     *      //拆分后
	     *      //output: <p></p><span></span><p></p>
	     *      console.log( wrapNode.innerHTML );
	     *
	     * ```
	     */
	    breakParent:function (node, parent) {
	        var tmpNode,
	            parentClone = node,
	            clone = node,
	            leftNodes,
	            rightNodes;
	        do {
	            parentClone = parentClone.parentNode;
	            if (leftNodes) {
	                tmpNode = parentClone.cloneNode(false);
	                tmpNode.appendChild(leftNodes);
	                leftNodes = tmpNode;
	                tmpNode = parentClone.cloneNode(false);
	                tmpNode.appendChild(rightNodes);
	                rightNodes = tmpNode;
	            } else {
	                leftNodes = parentClone.cloneNode(false);
	                rightNodes = leftNodes.cloneNode(false);
	            }
	            while (tmpNode = clone.previousSibling) {
	                leftNodes.insertBefore(tmpNode, leftNodes.firstChild);
	            }
	            while (tmpNode = clone.nextSibling) {
	                rightNodes.appendChild(tmpNode);
	            }
	            clone = parentClone;
	        } while (parent !== parentClone);
	        tmpNode = parent.parentNode;
	        tmpNode.insertBefore(leftNodes, parent);
	        tmpNode.insertBefore(rightNodes, parent);
	        tmpNode.insertBefore(node, rightNodes);
	        domUtils.remove(parent);
	        return node;
	    },
	    /**
	     * 检查节点node是否是空inline节点
	     * @method  isEmptyInlineElement
	     * @param { Node } node 需要检测的节点对象
	     * @return { Number }  如果给定的节点是空的inline节点， 则返回1, 否则返回0。
	     * @example
	     * ```html
	     * <b><i></i></b> => 1
	     * <b><i></i><u></u></b> => 1
	     * <b></b> => 1
	     * <b>xx<i></i></b> => 0
	     * ```
	     */
	    isEmptyInlineElement:function (node) {
	        if (node.nodeType != 1 || !dtd.$removeEmpty[ node.tagName ]) {
	            return 0;
	        }
	        node = node.firstChild;
	        while (node) {
	            //如果是创建的bookmark就跳过
	            if (domUtils.isBookmarkNode(node)) {
	                return 0;
	            }
	            if (node.nodeType == 1 && !domUtils.isEmptyInlineElement(node) ||
	                node.nodeType == 3 && !domUtils.isWhitespace(node)
	                ) {
	                return 0;
	            }
	            node = node.nextSibling;
	        }
	        return 1;
	
	    },
	
	    /**
	     * 删除node节点下首尾两端的空白文本子节点
	     * @method trimWhiteTextNode
	     * @param { Element } node 需要执行删除操作的元素对象
	     * @example
	     * ```javascript
	     *      var node = document.createElement("div");
	     *
	     *      node.appendChild( document.createTextNode( "" ) );
	     *
	     *      node.appendChild( document.createElement("div") );
	     *
	     *      node.appendChild( document.createTextNode( "" ) );
	     *
	     *      //3
	     *      console.log( node.childNodes.length );
	     *
	     *      UE.dom.domUtils.trimWhiteTextNode( node );
	     *
	     *      //1
	     *      console.log( node.childNodes.length );
	     * ```
	     */
	    trimWhiteTextNode:function (node) {
	        function remove(dir) {
	            var child;
	            while ((child = node[dir]) && child.nodeType == 3 && domUtils.isWhitespace(child)) {
	                node.removeChild(child);
	            }
	        }
	        remove('firstChild');
	        remove('lastChild');
	    },
	
	    /**
	     * 合并node节点下相同的子节点
	     * @name mergeChild
	     * @desc
	     * UE.dom.domUtils.mergeChild(node,tagName) //tagName要合并的子节点的标签
	     * @example
	     * <p><span style="font-size:12px;">xx<span style="font-size:12px;">aa</span>xx</span></p>
	     * ==> UE.dom.domUtils.mergeChild(node,'span')
	     * <p><span style="font-size:12px;">xxaaxx</span></p>
	     */
	    mergeChild:function (node, tagName, attrs) {
	        var list = domUtils.getElementsByTagName(node, node.tagName.toLowerCase());
	        for (var i = 0, ci; ci = list[i++];) {
	            if (!ci.parentNode || domUtils.isBookmarkNode(ci)) {
	                continue;
	            }
	            //span单独处理
	            if (ci.tagName.toLowerCase() == 'span') {
	                if (node === ci.parentNode) {
	                    domUtils.trimWhiteTextNode(node);
	                    if (node.childNodes.length == 1) {
	                        node.style.cssText = ci.style.cssText + ";" + node.style.cssText;
	                        domUtils.remove(ci, true);
	                        continue;
	                    }
	                }
	                ci.style.cssText = node.style.cssText + ';' + ci.style.cssText;
	                if (attrs) {
	                    var style = attrs.style;
	                    if (style) {
	                        style = style.split(';');
	                        for (var j = 0, s; s = style[j++];) {
	                            ci.style[utils.cssStyleToDomStyle(s.split(':')[0])] = s.split(':')[1];
	                        }
	                    }
	                }
	                if (domUtils.isSameStyle(ci, node)) {
	                    domUtils.remove(ci, true);
	                }
	                continue;
	            }
	            if (domUtils.isSameElement(node, ci)) {
	                domUtils.remove(ci, true);
	            }
	        }
	    },
	
	    /**
	     * 原生方法getElementsByTagName的封装
	     * @method getElementsByTagName
	     * @param { Node } node 目标节点对象
	     * @param { String } tagName 需要查找的节点的tagName， 多个tagName以空格分割
	     * @return { Array } 符合条件的节点集合
	     */
	    getElementsByTagName:function (node, name,filter) {
	        if(filter && utils.isString(filter)){
	           var className = filter;
	           filter =  function(node){return domUtils.hasClass(node,className)}
	        }
	        name = utils.trim(name).replace(/[ ]{2,}/g,' ').split(' ');
	        var arr = [];
	        for(var n = 0,ni;ni=name[n++];){
	            var list = node.getElementsByTagName(ni);
	            for (var i = 0, ci; ci = list[i++];) {
	                if(!filter || filter(ci))
	                    arr.push(ci);
	            }
	        }
	
	        return arr;
	    },
	    /**
	     * 将节点node提取到父节点上
	     * @method mergeToParent
	     * @param { Element } node 需要提取的元素对象
	     * @example
	     * ```html
	     * <div id="parent">
	     *     <div id="sub">
	     *         <span id="child"></span>
	     *     </div>
	     * </div>
	     *
	     * <script>
	     *
	     *     var child = document.getElementById( "child" );
	     *
	     *     //output: sub
	     *     console.log( child.parentNode.id );
	     *
	     *     UE.dom.domUtils.mergeToParent( child );
	     *
	     *     //output: parent
	     *     console.log( child.parentNode.id );
	     *
	     * </script>
	     * ```
	     */
	    mergeToParent:function (node) {
	        var parent = node.parentNode;
	        while (parent && dtd.$removeEmpty[parent.tagName]) {
	            if (parent.tagName == node.tagName || parent.tagName == 'A') {//针对a标签单独处理
	                domUtils.trimWhiteTextNode(parent);
	                //span需要特殊处理  不处理这样的情况 <span stlye="color:#fff">xxx<span style="color:#ccc">xxx</span>xxx</span>
	                if (parent.tagName == 'SPAN' && !domUtils.isSameStyle(parent, node)
	                    || (parent.tagName == 'A' && node.tagName == 'SPAN')) {
	                    if (parent.childNodes.length > 1 || parent !== node.parentNode) {
	                        node.style.cssText = parent.style.cssText + ";" + node.style.cssText;
	                        parent = parent.parentNode;
	                        continue;
	                    } else {
	                        parent.style.cssText += ";" + node.style.cssText;
	                        //trace:952 a标签要保持下划线
	                        if (parent.tagName == 'A') {
	                            parent.style.textDecoration = 'underline';
	                        }
	                    }
	                }
	                if (parent.tagName != 'A') {
	                    parent === node.parentNode && domUtils.remove(node, true);
	                    break;
	                }
	            }
	            parent = parent.parentNode;
	        }
	    },
	    /**
	     * 合并节点node的左右兄弟节点
	     * @method mergeSibling
	     * @param { Element } node 需要合并的目标节点
	     * @example
	     * ```html
	     * <b>xxxx</b><b id="test">ooo</b><b>xxxx</b>
	     *
	     * <script>
	     *     var demoNode = document.getElementById("test");
	     *     UE.dom.domUtils.mergeSibling( demoNode );
	     *     //output: xxxxoooxxxx
	     *     console.log( demoNode.innerHTML );
	     * </script>
	     * ```
	     */
	
	    /**
	     * 合并节点node的左右兄弟节点， 可以根据给定的条件选择是否忽略合并左节点。
	     * @method mergeSibling
	     * @param { Element } node 需要合并的目标节点
	     * @param { Boolean } ignorePre 是否忽略合并左节点
	     * @example
	     * ```html
	     * <b>xxxx</b><b id="test">ooo</b><b>xxxx</b>
	     *
	     * <script>
	     *     var demoNode = document.getElementById("test");
	     *     UE.dom.domUtils.mergeSibling( demoNode, true );
	     *     //output: oooxxxx
	     *     console.log( demoNode.innerHTML );
	     * </script>
	     * ```
	     */
	
	    /**
	     * 合并节点node的左右兄弟节点，可以根据给定的条件选择是否忽略合并左右节点。
	     * @method mergeSibling
	     * @param { Element } node 需要合并的目标节点
	     * @param { Boolean } ignorePre 是否忽略合并左节点
	     * @param { Boolean } ignoreNext 是否忽略合并右节点
	     * @remind 如果同时忽略左右节点， 则该操作什么也不会做
	     * @example
	     * ```html
	     * <b>xxxx</b><b id="test">ooo</b><b>xxxx</b>
	     *
	     * <script>
	     *     var demoNode = document.getElementById("test");
	     *     UE.dom.domUtils.mergeSibling( demoNode, false, true );
	     *     //output: xxxxooo
	     *     console.log( demoNode.innerHTML );
	     * </script>
	     * ```
	     */
	    mergeSibling:function (node, ignorePre, ignoreNext) {
	        function merge(rtl, start, node) {
	            var next;
	            if ((next = node[rtl]) && !domUtils.isBookmarkNode(next) && next.nodeType == 1 && domUtils.isSameElement(node, next)) {
	                while (next.firstChild) {
	                    if (start == 'firstChild') {
	                        node.insertBefore(next.lastChild, node.firstChild);
	                    } else {
	                        node.appendChild(next.firstChild);
	                    }
	                }
	                domUtils.remove(next);
	            }
	        }
	        !ignorePre && merge('previousSibling', 'firstChild', node);
	        !ignoreNext && merge('nextSibling', 'lastChild', node);
	    },
	
	    /**
	     * 设置节点node及其子节点不会被选中
	     * @method unSelectable
	     * @param { Element } node 需要执行操作的dom元素
	     * @remind 执行该操作后的节点， 将不能被鼠标选中
	     * @example
	     * ```javascript
	     * UE.dom.domUtils.unSelectable( document.body );
	     * ```
	     */
	    unSelectable:ie && browser.ie9below || browser.opera ? function (node) {
	        //for ie9
	        node.onselectstart = function () {
	            return false;
	        };
	        node.onclick = node.onkeyup = node.onkeydown = function () {
	            return false;
	        };
	        node.unselectable = 'on';
	        node.setAttribute("unselectable", "on");
	        for (var i = 0, ci; ci = node.all[i++];) {
	            switch (ci.tagName.toLowerCase()) {
	                case 'iframe' :
	                case 'textarea' :
	                case 'input' :
	                case 'select' :
	                    break;
	                default :
	                    ci.unselectable = 'on';
	                    node.setAttribute("unselectable", "on");
	            }
	        }
	    } : function (node) {
	        node.style.MozUserSelect =
	            node.style.webkitUserSelect =
	                node.style.msUserSelect =
	                    node.style.KhtmlUserSelect = 'none';
	    },
	    /**
	     * 删除节点node上的指定属性名称的属性
	     * @method  removeAttributes
	     * @param { Node } node 需要删除属性的节点对象
	     * @param { String } attrNames 可以是空格隔开的多个属性名称，该操作将会依次删除相应的属性
	     * @example
	     * ```html
	     * <div id="wrap">
	     *      <span style="font-size:14px;" id="test" name="followMe">xxxxx</span>
	     * </div>
	     *
	     * <script>
	     *
	     *     UE.dom.domUtils.removeAttributes( document.getElementById( "test" ), "id name" );
	     *
	     *     //output: <span style="font-size:14px;">xxxxx</span>
	     *     console.log( document.getElementById("wrap").innerHTML );
	     *
	     * </script>
	     * ```
	     */
	
	    /**
	     * 删除节点node上的指定属性名称的属性
	     * @method  removeAttributes
	     * @param { Node } node 需要删除属性的节点对象
	     * @param { Array } attrNames 需要删除的属性名数组
	     * @example
	     * ```html
	     * <div id="wrap">
	     *      <span style="font-size:14px;" id="test" name="followMe">xxxxx</span>
	     * </div>
	     *
	     * <script>
	     *
	     *     UE.dom.domUtils.removeAttributes( document.getElementById( "test" ), ["id", "name"] );
	     *
	     *     //output: <span style="font-size:14px;">xxxxx</span>
	     *     console.log( document.getElementById("wrap").innerHTML );
	     *
	     * </script>
	     * ```
	     */
	    removeAttributes:function (node, attrNames) {
	        attrNames = utils.isArray(attrNames) ? attrNames : utils.trim(attrNames).replace(/[ ]{2,}/g,' ').split(' ');
	        for (var i = 0, ci; ci = attrNames[i++];) {
	            ci = attrFix[ci] || ci;
	            switch (ci) {
	                case 'className':
	                    node[ci] = '';
	                    break;
	                case 'style':
	                    node.style.cssText = '';
	                    var val = node.getAttributeNode('style');
	                    !browser.ie && val && node.removeAttributeNode(val);
	            }
	            node.removeAttribute(ci);
	        }
	    },
	    /**
	     * 在doc下创建一个标签名为tag，属性为attrs的元素
	     * @method createElement
	     * @param { DomDocument } doc 新创建的元素属于该document节点创建
	     * @param { String } tagName 需要创建的元素的标签名
	     * @param { Object } attrs 新创建的元素的属性key-value集合
	     * @return { Element } 新创建的元素对象
	     * @example
	     * ```javascript
	     * var ele = UE.dom.domUtils.createElement( document, 'div', {
	     *     id: 'test'
	     * } );
	     *
	     * //output: DIV
	     * console.log( ele.tagName );
	     *
	     * //output: test
	     * console.log( ele.id );
	     *
	     * ```
	     */
	    createElement:function (doc, tag, attrs) {
	        return domUtils.setAttributes(doc.createElement(tag), attrs)
	    },
	    /**
	     * 为节点node添加属性attrs，attrs为属性键值对
	     * @method setAttributes
	     * @param { Element } node 需要设置属性的元素对象
	     * @param { Object } attrs 需要设置的属性名-值对
	     * @return { Element } 设置属性的元素对象
	     * @example
	     * ```html
	     * <span id="test"></span>
	     *
	     * <script>
	     *
	     *     var testNode = UE.dom.domUtils.setAttributes( document.getElementById( "test" ), {
	     *         id: 'demo'
	     *     } );
	     *
	     *     //output: demo
	     *     console.log( testNode.id );
	     *
	     * </script>
	     *
	     */
	    setAttributes:function (node, attrs) {
	        for (var attr in attrs) {
	            if(attrs.hasOwnProperty(attr)){
	                var value = attrs[attr];
	                switch (attr) {
	                    case 'class':
	                        //ie下要这样赋值，setAttribute不起作用
	                        node.className = value;
	                        break;
	                    case 'style' :
	                        node.style.cssText = node.style.cssText + ";" + value;
	                        break;
	                    case 'innerHTML':
	                        node[attr] = value;
	                        break;
	                    case 'value':
	                        node.value = value;
	                        break;
	                    default:
	                        node.setAttribute(attrFix[attr] || attr, value);
	                }
	            }
	        }
	        return node;
	    },
	
	    /**
	     * 获取元素element经过计算后的样式值
	     * @method getComputedStyle
	     * @param { Element } element 需要获取样式的元素对象
	     * @param { String } styleName 需要获取的样式名
	     * @return { String } 获取到的样式值
	     * @example
	     * ```html
	     * <style type="text/css">
	     *      #test {
	     *          font-size: 15px;
	     *      }
	     * </style>
	     *
	     * <span id="test"></span>
	     *
	     * <script>
	     *     //output: 15px
	     *     console.log( UE.dom.domUtils.getComputedStyle( document.getElementById( "test" ), 'font-size' ) );
	     * </script>
	     * ```
	     */
	    getComputedStyle:function (element, styleName) {
	        //一下的属性单独处理
	        var pros = 'width height top left';
	
	        if(pros.indexOf(styleName) > -1){
	            return element['offset' + styleName.replace(/^\w/,function(s){return s.toUpperCase()})] + 'px';
	        }
	        //忽略文本节点
	        if (element.nodeType == 3) {
	            element = element.parentNode;
	        }
	        //ie下font-size若body下定义了font-size，则从currentStyle里会取到这个font-size. 取不到实际值，故此修改.
	        if (browser.ie && browser.version < 9 && styleName == 'font-size' && !element.style.fontSize &&
	            !dtd.$empty[element.tagName] && !dtd.$nonChild[element.tagName]) {
	            var span = element.ownerDocument.createElement('span');
	            span.style.cssText = 'padding:0;border:0;font-family:simsun;';
	            span.innerHTML = '.';
	            element.appendChild(span);
	            var result = span.offsetHeight;
	            element.removeChild(span);
	            span = null;
	            return result + 'px';
	        }
	        try {
	            var value = domUtils.getStyle(element, styleName) ||
	                (window.getComputedStyle ? domUtils.getWindow(element).getComputedStyle(element, '').getPropertyValue(styleName) :
	                    ( element.currentStyle || element.style )[utils.cssStyleToDomStyle(styleName)]);
	
	        } catch (e) {
	            return "";
	        }
	        return utils.transUnitToPx(utils.fixColor(styleName, value));
	    },
	    /**
	     * 删除元素element指定的className
	     * @method removeClasses
	     * @param { Element } ele 需要删除class的元素节点
	     * @param { String } classNames 需要删除的className， 多个className之间以空格分开
	     * @example
	     * ```html
	     * <span id="test" class="test1 test2 test3">xxx</span>
	     *
	     * <script>
	     *
	     *     var testNode = document.getElementById( "test" );
	     *     UE.dom.domUtils.removeClasses( testNode, "test1 test2" );
	     *
	     *     //output: test3
	     *     console.log( testNode.className );
	     *
	     * </script>
	     * ```
	     */
	
	    /**
	     * 删除元素element指定的className
	     * @method removeClasses
	     * @param { Element } ele 需要删除class的元素节点
	     * @param { Array } classNames 需要删除的className数组
	     * @example
	     * ```html
	     * <span id="test" class="test1 test2 test3">xxx</span>
	     *
	     * <script>
	     *
	     *     var testNode = document.getElementById( "test" );
	     *     UE.dom.domUtils.removeClasses( testNode, ["test1", "test2"] );
	     *
	     *     //output: test3
	     *     console.log( testNode.className );
	     *
	     * </script>
	     * ```
	     */
	    removeClasses:function (elm, classNames) {
	        classNames = utils.isArray(classNames) ? classNames :
	            utils.trim(classNames).replace(/[ ]{2,}/g,' ').split(' ');
	        for(var i = 0,ci,cls = elm.className;ci=classNames[i++];){
	            cls = cls.replace(new RegExp('\\b' + ci + '\\b'),'')
	        }
	        cls = utils.trim(cls).replace(/[ ]{2,}/g,' ');
	        if(cls){
	            elm.className = cls;
	        }else{
	            domUtils.removeAttributes(elm,['class']);
	        }
	    },
	    /**
	     * 给元素element添加className
	     * @method addClass
	     * @param { Node } ele 需要增加className的元素
	     * @param { String } classNames 需要添加的className， 多个className之间以空格分割
	     * @remind 相同的类名不会被重复添加
	     * @example
	     * ```html
	     * <span id="test" class="cls1 cls2"></span>
	     *
	     * <script>
	     *     var testNode = document.getElementById("test");
	     *
	     *     UE.dom.domUtils.addClass( testNode, "cls2 cls3 cls4" );
	     *
	     *     //output: cl1 cls2 cls3 cls4
	     *     console.log( testNode.className );
	     *
	     * <script>
	     * ```
	     */
	
	    /**
	     * 给元素element添加className
	     * @method addClass
	     * @param { Node } ele 需要增加className的元素
	     * @param { Array } classNames 需要添加的className的数组
	     * @remind 相同的类名不会被重复添加
	     * @example
	     * ```html
	     * <span id="test" class="cls1 cls2"></span>
	     *
	     * <script>
	     *     var testNode = document.getElementById("test");
	     *
	     *     UE.dom.domUtils.addClass( testNode, ["cls2", "cls3", "cls4"] );
	     *
	     *     //output: cl1 cls2 cls3 cls4
	     *     console.log( testNode.className );
	     *
	     * <script>
	     * ```
	     */
	    addClass:function (elm, classNames) {
	        if(!elm)return;
	        classNames = utils.trim(classNames).replace(/[ ]{2,}/g,' ').split(' ');
	        for(var i = 0,ci,cls = elm.className;ci=classNames[i++];){
	            if(!new RegExp('\\b' + ci + '\\b').test(cls)){
	                cls += ' ' + ci;
	            }
	        }
	        elm.className = utils.trim(cls);
	    },
	    /**
	     * 判断元素element是否包含给定的样式类名className
	     * @method hasClass
	     * @param { Node } ele 需要检测的元素
	     * @param { String } classNames 需要检测的className， 多个className之间用空格分割
	     * @return { Boolean } 元素是否包含所有给定的className
	     * @example
	     * ```html
	     * <span id="test1" class="cls1 cls2"></span>
	     *
	     * <script>
	     *     var test1 = document.getElementById("test1");
	     *
	     *     //output: false
	     *     console.log( UE.dom.domUtils.hasClass( test1, "cls2 cls1 cls3" ) );
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.hasClass( test1, "cls2 cls1" ) );
	     * </script>
	     * ```
	     */
	
	    /**
	     * 判断元素element是否包含给定的样式类名className
	     * @method hasClass
	     * @param { Node } ele 需要检测的元素
	     * @param { Array } classNames 需要检测的className数组
	     * @return { Boolean } 元素是否包含所有给定的className
	     * @example
	     * ```html
	     * <span id="test1" class="cls1 cls2"></span>
	     *
	     * <script>
	     *     var test1 = document.getElementById("test1");
	     *
	     *     //output: false
	     *     console.log( UE.dom.domUtils.hasClass( test1, [ "cls2", "cls1", "cls3" ] ) );
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.hasClass( test1, [ "cls2", "cls1" ]) );
	     * </script>
	     * ```
	     */
	    hasClass:function (element, className) {
	        if(utils.isRegExp(className)){
	            return className.test(element.className)
	        }
	        className = utils.trim(className).replace(/[ ]{2,}/g,' ').split(' ');
	        for(var i = 0,ci,cls = element.className;ci=className[i++];){
	            if(!new RegExp('\\b' + ci + '\\b','i').test(cls)){
	                return false;
	            }
	        }
	        return i - 1 == className.length;
	    },
	
	    /**
	     * 阻止事件默认行为
	     * @method preventDefault
	     * @param { Event } evt 需要阻止默认行为的事件对象
	     * @example
	     * ```javascript
	     * UE.dom.domUtils.preventDefault( evt );
	     * ```
	     */
	    preventDefault:function (evt) {
	        evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);
	    },
	    /**
	     * 删除元素element指定的样式
	     * @method removeStyle
	     * @param { Element } element 需要删除样式的元素
	     * @param { String } styleName 需要删除的样式名
	     * @example
	     * ```html
	     * <span id="test" style="color: red; background: blue;"></span>
	     *
	     * <script>
	     *
	     *     var testNode = document.getElementById("test");
	     *
	     *     UE.dom.domUtils.removeStyle( testNode, 'color' );
	     *
	     *     //output: background: blue;
	     *     console.log( testNode.style.cssText );
	     *
	     * </script>
	     * ```
	     */
	    removeStyle:function (element, name) {
	        if(browser.ie ){
	            //针对color先单独处理一下
	            if(name == 'color'){
	                name = '(^|;)' + name;
	            }
	            element.style.cssText = element.style.cssText.replace(new RegExp(name + '[^:]*:[^;]+;?','ig'),'')
	        }else{
	            if (element.style.removeProperty) {
	                element.style.removeProperty (name);
	            }else {
	                element.style.removeAttribute (utils.cssStyleToDomStyle(name));
	            }
	        }
	
	
	        if (!element.style.cssText) {
	            domUtils.removeAttributes(element, ['style']);
	        }
	    },
	    /**
	     * 获取元素element的style属性的指定值
	     * @method getStyle
	     * @param { Element } element 需要获取属性值的元素
	     * @param { String } styleName 需要获取的style的名称
	     * @warning 该方法仅获取元素style属性中所标明的值
	     * @return { String } 该元素包含指定的style属性值
	     * @example
	     * ```html
	     * <div id="test" style="color: red;"></div>
	     *
	     * <script>
	     *
	     *      var testNode = document.getElementById( "test" );
	     *
	     *      //output: red
	     *      console.log( UE.dom.domUtils.getStyle( testNode, "color" ) );
	     *
	     *      //output: ""
	     *      console.log( UE.dom.domUtils.getStyle( testNode, "background" ) );
	     *
	     * </script>
	     * ```
	     */
	    getStyle:function (element, name) {
	        var value = element.style[ utils.cssStyleToDomStyle(name) ];
	        return utils.fixColor(name, value);
	    },
	    /**
	     * 为元素element设置样式属性值
	     * @method setStyle
	     * @param { Element } element 需要设置样式的元素
	     * @param { String } styleName 样式名
	     * @param { String } styleValue 样式值
	     * @example
	     * ```html
	     * <div id="test"></div>
	     *
	     * <script>
	     *
	     *      var testNode = document.getElementById( "test" );
	     *
	     *      //output: ""
	     *      console.log( testNode.style.color );
	     *
	     *      UE.dom.domUtils.setStyle( testNode, 'color', 'red' );
	     *      //output: "red"
	     *      console.log( testNode.style.color );
	     *
	     * </script>
	     * ```
	     */
	    setStyle:function (element, name, value) {
	        element.style[utils.cssStyleToDomStyle(name)] = value;
	        if(!utils.trim(element.style.cssText)){
	            this.removeAttributes(element,'style')
	        }
	    },
	    /**
	     * 为元素element设置多个样式属性值
	     * @method setStyles
	     * @param { Element } element 需要设置样式的元素
	     * @param { Object } styles 样式名值对
	     * @example
	     * ```html
	     * <div id="test"></div>
	     *
	     * <script>
	     *
	     *      var testNode = document.getElementById( "test" );
	     *
	     *      //output: ""
	     *      console.log( testNode.style.color );
	     *
	     *      UE.dom.domUtils.setStyles( testNode, {
	     *          'color': 'red'
	     *      } );
	     *      //output: "red"
	     *      console.log( testNode.style.color );
	     *
	     * </script>
	     * ```
	     */
	    setStyles:function (element, styles) {
	        for (var name in styles) {
	            if (styles.hasOwnProperty(name)) {
	                domUtils.setStyle(element, name, styles[name]);
	            }
	        }
	    },
	    /**
	     * 删除_moz_dirty属性
	     * @private
	     * @method removeDirtyAttr
	     */
	    removeDirtyAttr:function (node) {
	        for (var i = 0, ci, nodes = node.getElementsByTagName('*'); ci = nodes[i++];) {
	            ci.removeAttribute('_moz_dirty');
	        }
	        node.removeAttribute('_moz_dirty');
	    },
	    /**
	     * 获取子节点的数量
	     * @method getChildCount
	     * @param { Element } node 需要检测的元素
	     * @return { Number } 给定的node元素的子节点数量
	     * @example
	     * ```html
	     * <div id="test">
	     *      <span></span>
	     * </div>
	     *
	     * <script>
	     *
	     *     //output: 3
	     *     console.log( UE.dom.domUtils.getChildCount( document.getElementById("test") ) );
	     *
	     * </script>
	     * ```
	     */
	
	    /**
	     * 根据给定的过滤规则， 获取符合条件的子节点的数量
	     * @method getChildCount
	     * @param { Element } node 需要检测的元素
	     * @param { Function } fn 过滤器， 要求对符合条件的子节点返回true， 反之则要求返回false
	     * @return { Number } 符合过滤条件的node元素的子节点数量
	     * @example
	     * ```html
	     * <div id="test">
	     *      <span></span>
	     * </div>
	     *
	     * <script>
	     *
	     *     //output: 1
	     *     console.log( UE.dom.domUtils.getChildCount( document.getElementById("test"), function ( node ) {
	     *
	     *         return node.nodeType === 1;
	     *
	     *     } ) );
	     *
	     * </script>
	     * ```
	     */
	    getChildCount:function (node, fn) {
	        var count = 0, first = node.firstChild;
	        fn = fn || function () {
	            return 1;
	        };
	        while (first) {
	            if (fn(first)) {
	                count++;
	            }
	            first = first.nextSibling;
	        }
	        return count;
	    },
	
	    /**
	     * 判断给定节点是否为空节点
	     * @method isEmptyNode
	     * @param { Node } node 需要检测的节点对象
	     * @return { Boolean } 节点是否为空
	     * @example
	     * ```javascript
	     * UE.dom.domUtils.isEmptyNode( document.body );
	     * ```
	     */
	    isEmptyNode:function (node) {
	        return !node.firstChild || domUtils.getChildCount(node, function (node) {
	            return  !domUtils.isBr(node) && !domUtils.isBookmarkNode(node) && !domUtils.isWhitespace(node)
	        }) == 0
	    },
	    clearSelectedArr:function (nodes) {
	        var node;
	        while (node = nodes.pop()) {
	            domUtils.removeAttributes(node, ['class']);
	        }
	    },
	    /**
	     * 将显示区域滚动到指定节点的位置
	     * @method scrollToView
	     * @param    {Node}   node    节点
	     * @param    {window}   win      window对象
	     * @param    {Number}    offsetTop    距离上方的偏移量
	     */
	    scrollToView:function (node, win, offsetTop) {
	        var getViewPaneSize = function () {
	                var doc = win.document,
	                    mode = doc.compatMode == 'CSS1Compat';
	                return {
	                    width:( mode ? doc.documentElement.clientWidth : doc.body.clientWidth ) || 0,
	                    height:( mode ? doc.documentElement.clientHeight : doc.body.clientHeight ) || 0
	                };
	            },
	            getScrollPosition = function (win) {
	                if ('pageXOffset' in win) {
	                    return {
	                        x:win.pageXOffset || 0,
	                        y:win.pageYOffset || 0
	                    };
	                }
	                else {
	                    var doc = win.document;
	                    return {
	                        x:doc.documentElement.scrollLeft || doc.body.scrollLeft || 0,
	                        y:doc.documentElement.scrollTop || doc.body.scrollTop || 0
	                    };
	                }
	            };
	        var winHeight = getViewPaneSize().height, offset = winHeight * -1 + offsetTop;
	        offset += (node.offsetHeight || 0);
	        var elementPosition = domUtils.getXY(node);
	        offset += elementPosition.y;
	        var currentScroll = getScrollPosition(win).y;
	        // offset += 50;
	        if (offset > currentScroll || offset < currentScroll - winHeight) {
	            win.scrollTo(0, offset + (offset < 0 ? -20 : 20));
	        }
	    },
	    /**
	     * 判断给定节点是否为br
	     * @method isBr
	     * @param { Node } node 需要判断的节点对象
	     * @return { Boolean } 给定的节点是否是br节点
	     */
	    isBr:function (node) {
	        return node.nodeType == 1 && node.tagName == 'BR';
	    },
	    /**
	     * 判断给定的节点是否是一个“填充”节点
	     * @private
	     * @method isFillChar
	     * @param { Node } node 需要判断的节点
	     * @param { Boolean } isInStart 是否从节点内容的开始位置匹配
	     * @returns { Boolean } 节点是否是填充节点
	     */
	    isFillChar:function (node,isInStart) {
	        if(node.nodeType != 3)
	            return false;
	        var text = node.nodeValue;
	        if(isInStart){
	            return new RegExp('^' + domUtils.fillChar).test(text)
	        }
	        return !text.replace(new RegExp(domUtils.fillChar,'g'), '').length
	    },
	    isStartInblock:function (range) {
	        var tmpRange = range.cloneRange(),
	            flag = 0,
	            start = tmpRange.startContainer,
	            tmp;
	        if(start.nodeType == 1 && start.childNodes[tmpRange.startOffset]){
	            start = start.childNodes[tmpRange.startOffset];
	            var pre = start.previousSibling;
	            while(pre && domUtils.isFillChar(pre)){
	                start = pre;
	                pre = pre.previousSibling;
	            }
	        }
	        if(this.isFillChar(start,true) && tmpRange.startOffset == 1){
	            tmpRange.setStartBefore(start);
	            start = tmpRange.startContainer;
	        }
	
	        while (start && domUtils.isFillChar(start)) {
	            tmp = start;
	            start = start.previousSibling
	        }
	        if (tmp) {
	            tmpRange.setStartBefore(tmp);
	            start = tmpRange.startContainer;
	        }
	        if (start.nodeType == 1 && domUtils.isEmptyNode(start) && tmpRange.startOffset == 1) {
	            tmpRange.setStart(start, 0).collapse(true);
	        }
	        while (!tmpRange.startOffset) {
	            start = tmpRange.startContainer;
	            if (domUtils.isBlockElm(start) || domUtils.isBody(start)) {
	                flag = 1;
	                break;
	            }
	            var pre = tmpRange.startContainer.previousSibling,
	                tmpNode;
	            if (!pre) {
	                tmpRange.setStartBefore(tmpRange.startContainer);
	            } else {
	                while (pre && domUtils.isFillChar(pre)) {
	                    tmpNode = pre;
	                    pre = pre.previousSibling;
	                }
	                if (tmpNode) {
	                    tmpRange.setStartBefore(tmpNode);
	                } else {
	                    tmpRange.setStartBefore(tmpRange.startContainer);
	                }
	            }
	        }
	        return flag && !domUtils.isBody(tmpRange.startContainer) ? 1 : 0;
	    },
	
	    /**
	     * 判断给定的元素是否是一个空元素
	     * @method isEmptyBlock
	     * @param { Element } node 需要判断的元素
	     * @return { Boolean } 是否是空元素
	     * @example
	     * ```html
	     * <div id="test"></div>
	     *
	     * <script>
	     *     //output: true
	     *     console.log( UE.dom.domUtils.isEmptyBlock( document.getElementById("test") ) );
	     * </script>
	     * ```
	     */
	
	    /**
	     * 根据指定的判断规则判断给定的元素是否是一个空元素
	     * @method isEmptyBlock
	     * @param { Element } node 需要判断的元素
	     * @param { RegExp } reg 对内容执行判断的正则表达式对象
	     * @return { Boolean } 是否是空元素
	     */
	    isEmptyBlock:function (node,reg) {
	        if(node.nodeType != 1)
	            return 0;
	        reg = reg || new RegExp('[ \xa0\t\r\n' + domUtils.fillChar + ']', 'g');
	
	        if (node[browser.ie ? 'innerText' : 'textContent'].replace(reg, '').length > 0) {
	            return 0;
	        }
	        for (var n in dtd.$isNotEmpty) {
	            if (node.getElementsByTagName(n).length) {
	                return 0;
	            }
	        }
	        return 1;
	    },
	
	    /**
	     * 移动元素使得该元素的位置移动指定的偏移量的距离
	     * @method setViewportOffset
	     * @param { Element } element 需要设置偏移量的元素
	     * @param { Object } offset 偏移量， 形如{ left: 100, top: 50 }的一个键值对， 表示该元素将在
	     *                                  现有的位置上向水平方向偏移offset.left的距离， 在竖直方向上偏移
	     *                                  offset.top的距离
	     * @example
	     * ```html
	     * <div id="test" style="top: 100px; left: 50px; position: absolute;"></div>
	     *
	     * <script>
	     *
	     *     var testNode = document.getElementById("test");
	     *
	     *     UE.dom.domUtils.setViewportOffset( testNode, {
	     *         left: 200,
	     *         top: 50
	     *     } );
	     *
	     *     //output: top: 300px; left: 100px; position: absolute;
	     *     console.log( testNode.style.cssText );
	     *
	     * </script>
	     * ```
	     */
	    setViewportOffset:function (element, offset) {
	        var left = parseInt(element.style.left) | 0;
	        var top = parseInt(element.style.top) | 0;
	        var rect = element.getBoundingClientRect();
	        var offsetLeft = offset.left - rect.left;
	        var offsetTop = offset.top - rect.top;
	        if (offsetLeft) {
	            element.style.left = left + offsetLeft + 'px';
	        }
	        if (offsetTop) {
	            element.style.top = top + offsetTop + 'px';
	        }
	    },
	
	    /**
	     * 用“填充字符”填充节点
	     * @method fillNode
	     * @private
	     * @param { DomDocument } doc 填充的节点所在的docment对象
	     * @param { Node } node 需要填充的节点对象
	     * @example
	     * ```html
	     * <div id="test"></div>
	     *
	     * <script>
	     *     var testNode = document.getElementById("test");
	     *
	     *     //output: 0
	     *     console.log( testNode.childNodes.length );
	     *
	     *     UE.dom.domUtils.fillNode( document, testNode );
	     *
	     *     //output: 1
	     *     console.log( testNode.childNodes.length );
	     *
	     * </script>
	     * ```
	     */
	    fillNode:function (doc, node) {
	        var tmpNode = browser.ie ? doc.createTextNode(domUtils.fillChar) : doc.createElement('br');
	        node.innerHTML = '';
	        node.appendChild(tmpNode);
	    },
	
	    /**
	     * 把节点src的所有子节点追加到另一个节点tag上去
	     * @method moveChild
	     * @param { Node } src 源节点， 该节点下的所有子节点将被移除
	     * @param { Node } tag 目标节点， 从源节点移除的子节点将被追加到该节点下
	     * @example
	     * ```html
	     * <div id="test1">
	     *      <span></span>
	     * </div>
	     * <div id="test2">
	     *     <div></div>
	     * </div>
	     *
	     * <script>
	     *
	     *     var test1 = document.getElementById("test1"),
	     *         test2 = document.getElementById("test2");
	     *
	     *     UE.dom.domUtils.moveChild( test1, test2 );
	     *
	     *     //output: ""（空字符串）
	     *     console.log( test1.innerHTML );
	     *
	     *     //output: "<div></div><span></span>"
	     *     console.log( test2.innerHTML );
	     *
	     * </script>
	     * ```
	     */
	
	    /**
	     * 把节点src的所有子节点移动到另一个节点tag上去, 可以通过dir参数控制附加的行为是“追加”还是“插入顶部”
	     * @method moveChild
	     * @param { Node } src 源节点， 该节点下的所有子节点将被移除
	     * @param { Node } tag 目标节点， 从源节点移除的子节点将被附加到该节点下
	     * @param { Boolean } dir 附加方式， 如果为true， 则附加进去的节点将被放到目标节点的顶部， 反之，则放到末尾
	     * @example
	     * ```html
	     * <div id="test1">
	     *      <span></span>
	     * </div>
	     * <div id="test2">
	     *     <div></div>
	     * </div>
	     *
	     * <script>
	     *
	     *     var test1 = document.getElementById("test1"),
	     *         test2 = document.getElementById("test2");
	     *
	     *     UE.dom.domUtils.moveChild( test1, test2, true );
	     *
	     *     //output: ""（空字符串）
	     *     console.log( test1.innerHTML );
	     *
	     *     //output: "<span></span><div></div>"
	     *     console.log( test2.innerHTML );
	     *
	     * </script>
	     * ```
	     */
	    moveChild:function (src, tag, dir) {
	        while (src.firstChild) {
	            if (dir && tag.firstChild) {
	                tag.insertBefore(src.lastChild, tag.firstChild);
	            } else {
	                tag.appendChild(src.firstChild);
	            }
	        }
	    },
	
	    /**
	     * 判断节点的标签上是否不存在任何属性
	     * @method hasNoAttributes
	     * @private
	     * @param { Node } node 需要检测的节点对象
	     * @return { Boolean } 节点是否不包含任何属性
	     * @example
	     * ```html
	     * <div id="test"><span>xxxx</span></div>
	     *
	     * <script>
	     *
	     *     //output: false
	     *     console.log( UE.dom.domUtils.hasNoAttributes( document.getElementById("test") ) );
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.hasNoAttributes( document.getElementById("test").firstChild ) );
	     *
	     * </script>
	     * ```
	     */
	    hasNoAttributes:function (node) {
	        return browser.ie ? /^<\w+\s*?>/.test(node.outerHTML) : node.attributes.length == 0;
	    },
	
	    /**
	     * 检测节点是否是UEditor所使用的辅助节点
	     * @method isCustomeNode
	     * @private
	     * @param { Node } node 需要检测的节点
	     * @remind 辅助节点是指编辑器要完成工作临时添加的节点， 在输出的时候将会从编辑器内移除， 不会影响最终的结果。
	     * @return { Boolean } 给定的节点是否是一个辅助节点
	     */
	    isCustomeNode:function (node) {
	        return node.nodeType == 1 && node.getAttribute('_ue_custom_node_');
	    },
	
	    /**
	     * 检测节点的标签是否是给定的标签
	     * @method isTagNode
	     * @param { Node } node 需要检测的节点对象
	     * @param { String } tagName 标签
	     * @return { Boolean } 节点的标签是否是给定的标签
	     * @example
	     * ```html
	     * <div id="test"></div>
	     *
	     * <script>
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.isTagNode( document.getElementById("test"), "div" ) );
	     *
	     * </script>
	     * ```
	     */
	    isTagNode:function (node, tagNames) {
	        return node.nodeType == 1 && new RegExp('\\b' + node.tagName + '\\b','i').test(tagNames)
	    },
	
	    /**
	     * 给定一个节点数组，在通过指定的过滤器过滤后， 获取其中满足过滤条件的第一个节点
	     * @method filterNodeList
	     * @param { Array } nodeList 需要过滤的节点数组
	     * @param { Function } fn 过滤器， 对符合条件的节点， 执行结果返回true， 反之则返回false
	     * @return { Node | NULL } 如果找到符合过滤条件的节点， 则返回该节点， 否则返回NULL
	     * @example
	     * ```javascript
	     * var divNodes = document.getElementsByTagName("div");
	     * divNodes = [].slice.call( divNodes, 0 );
	     *
	     * //output: null
	     * console.log( UE.dom.domUtils.filterNodeList( divNodes, function ( node ) {
	     *     return node.tagName.toLowerCase() !== 'div';
	     * } ) );
	     * ```
	     */
	
	    /**
	     * 给定一个节点数组nodeList和一组标签名tagNames， 获取其中能够匹配标签名的节点集合中的第一个节点
	     * @method filterNodeList
	     * @param { Array } nodeList 需要过滤的节点数组
	     * @param { String } tagNames 需要匹配的标签名， 多个标签名之间用空格分割
	     * @return { Node | NULL } 如果找到标签名匹配的节点， 则返回该节点， 否则返回NULL
	     * @example
	     * ```javascript
	     * var divNodes = document.getElementsByTagName("div");
	     * divNodes = [].slice.call( divNodes, 0 );
	     *
	     * //output: null
	     * console.log( UE.dom.domUtils.filterNodeList( divNodes, 'a span' ) );
	     * ```
	     */
	
	    /**
	     * 给定一个节点数组，在通过指定的过滤器过滤后， 如果参数forAll为true， 则会返回所有满足过滤
	     * 条件的节点集合， 否则， 返回满足条件的节点集合中的第一个节点
	     * @method filterNodeList
	     * @param { Array } nodeList 需要过滤的节点数组
	     * @param { Function } fn 过滤器， 对符合条件的节点， 执行结果返回true， 反之则返回false
	     * @param { Boolean } forAll 是否返回整个节点数组, 如果该参数为false， 则返回节点集合中的第一个节点
	     * @return { Array | Node | NULL } 如果找到符合过滤条件的节点， 则根据参数forAll的值决定返回满足
	     *                                      过滤条件的节点数组或第一个节点， 否则返回NULL
	     * @example
	     * ```javascript
	     * var divNodes = document.getElementsByTagName("div");
	     * divNodes = [].slice.call( divNodes, 0 );
	     *
	     * //output: 3（假定有3个div）
	     * console.log( divNodes.length );
	     *
	     * var nodes = UE.dom.domUtils.filterNodeList( divNodes, function ( node ) {
	     *     return node.tagName.toLowerCase() === 'div';
	     * }, true );
	     *
	     * //output: 3
	     * console.log( nodes.length );
	     *
	     * var node = UE.dom.domUtils.filterNodeList( divNodes, function ( node ) {
	     *     return node.tagName.toLowerCase() === 'div';
	     * }, false );
	     *
	     * //output: div
	     * console.log( node.nodeName );
	     * ```
	     */
	    filterNodeList : function(nodelist,filter,forAll){
	        var results = [];
	        if(!utils .isFunction(filter)){
	            var str = filter;
	            filter = function(n){
	                return utils.indexOf(utils.isArray(str) ? str:str.split(' '), n.tagName.toLowerCase()) != -1
	            };
	        }
	        utils.each(nodelist,function(n){
	            filter(n) && results.push(n)
	        });
	        return results.length  == 0 ? null : results.length == 1 || !forAll ? results[0] : results
	    },
	
	    /**
	     * 查询给定的range选区是否在给定的node节点内，且在该节点的最末尾
	     * @method isInNodeEndBoundary
	     * @param { UE.dom.Range } rng 需要判断的range对象， 该对象的startContainer不能为NULL
	     * @param node 需要检测的节点对象
	     * @return { Number } 如果给定的选取range对象是在node内部的最末端， 则返回1, 否则返回0
	     */
	    isInNodeEndBoundary : function (rng,node){
	        var start = rng.startContainer;
	        if(start.nodeType == 3 && rng.startOffset != start.nodeValue.length){
	            return 0;
	        }
	        if(start.nodeType == 1 && rng.startOffset != start.childNodes.length){
	            return 0;
	        }
	        while(start !== node){
	            if(start.nextSibling){
	                return 0
	            };
	            start = start.parentNode;
	        }
	        return 1;
	    },
	    isBoundaryNode : function (node,dir){
	        var tmp;
	        while(!domUtils.isBody(node)){
	            tmp = node;
	            node = node.parentNode;
	            if(tmp !== node[dir]){
	                return false;
	            }
	        }
	        return true;
	    },
	    fillHtml :  browser.ie11below ? '&nbsp;' : '<br/>'
	};
	var fillCharReg = new RegExp(domUtils.fillChar, 'g');
	
	// core/Range.js
	/**
	 * Range封装
	 * @file
	 * @module UE.dom
	 * @class Range
	 * @since 1.2.6.1
	 */
	
	/**
	 * dom操作封装
	 * @unfile
	 * @module UE.dom
	 */
	
	/**
	 * Range实现类，本类是UEditor底层核心类，封装不同浏览器之间的Range操作。
	 * @unfile
	 * @module UE.dom
	 * @class Range
	 */
	
	
	(function () {
	    var guid = 0,
	        fillChar = domUtils.fillChar,
	        fillData;
	
	    /**
	     * 更新range的collapse状态
	     * @param  {Range}   range    range对象
	     */
	    function updateCollapse(range) {
	        range.collapsed =
	            range.startContainer && range.endContainer &&
	                range.startContainer === range.endContainer &&
	                range.startOffset == range.endOffset;
	    }
	
	    function selectOneNode(rng){
	        return !rng.collapsed && rng.startContainer.nodeType == 1 && rng.startContainer === rng.endContainer && rng.endOffset - rng.startOffset == 1
	    }
	    function setEndPoint(toStart, node, offset, range) {
	        //如果node是自闭合标签要处理
	        if (node.nodeType == 1 && (dtd.$empty[node.tagName] || dtd.$nonChild[node.tagName])) {
	            offset = domUtils.getNodeIndex(node) + (toStart ? 0 : 1);
	            node = node.parentNode;
	        }
	        if (toStart) {
	            range.startContainer = node;
	            range.startOffset = offset;
	            if (!range.endContainer) {
	                range.collapse(true);
	            }
	        } else {
	            range.endContainer = node;
	            range.endOffset = offset;
	            if (!range.startContainer) {
	                range.collapse(false);
	            }
	        }
	        updateCollapse(range);
	        return range;
	    }
	
	    function execContentsAction(range, action) {
	        //调整边界
	        //range.includeBookmark();
	        var start = range.startContainer,
	            end = range.endContainer,
	            startOffset = range.startOffset,
	            endOffset = range.endOffset,
	            doc = range.document,
	            frag = doc.createDocumentFragment(),
	            tmpStart, tmpEnd;
	        if (start.nodeType == 1) {
	            start = start.childNodes[startOffset] || (tmpStart = start.appendChild(doc.createTextNode('')));
	        }
	        if (end.nodeType == 1) {
	            end = end.childNodes[endOffset] || (tmpEnd = end.appendChild(doc.createTextNode('')));
	        }
	        if (start === end && start.nodeType == 3) {
	            frag.appendChild(doc.createTextNode(start.substringData(startOffset, endOffset - startOffset)));
	            //is not clone
	            if (action) {
	                start.deleteData(startOffset, endOffset - startOffset);
	                range.collapse(true);
	            }
	            return frag;
	        }
	        var current, currentLevel, clone = frag,
	            startParents = domUtils.findParents(start, true), endParents = domUtils.findParents(end, true);
	        for (var i = 0; startParents[i] == endParents[i];) {
	            i++;
	        }
	        for (var j = i, si; si = startParents[j]; j++) {
	            current = si.nextSibling;
	            if (si == start) {
	                if (!tmpStart) {
	                    if (range.startContainer.nodeType == 3) {
	                        clone.appendChild(doc.createTextNode(start.nodeValue.slice(startOffset)));
	                        //is not clone
	                        if (action) {
	                            start.deleteData(startOffset, start.nodeValue.length - startOffset);
	                        }
	                    } else {
	                        clone.appendChild(!action ? start.cloneNode(true) : start);
	                    }
	                }
	            } else {
	                currentLevel = si.cloneNode(false);
	                clone.appendChild(currentLevel);
	            }
	            while (current) {
	                if (current === end || current === endParents[j]) {
	                    break;
	                }
	                si = current.nextSibling;
	                clone.appendChild(!action ? current.cloneNode(true) : current);
	                current = si;
	            }
	            clone = currentLevel;
	        }
	        clone = frag;
	        if (!startParents[i]) {
	            clone.appendChild(startParents[i - 1].cloneNode(false));
	            clone = clone.firstChild;
	        }
	        for (var j = i, ei; ei = endParents[j]; j++) {
	            current = ei.previousSibling;
	            if (ei == end) {
	                if (!tmpEnd && range.endContainer.nodeType == 3) {
	                    clone.appendChild(doc.createTextNode(end.substringData(0, endOffset)));
	                    //is not clone
	                    if (action) {
	                        end.deleteData(0, endOffset);
	                    }
	                }
	            } else {
	                currentLevel = ei.cloneNode(false);
	                clone.appendChild(currentLevel);
	            }
	            //如果两端同级，右边第一次已经被开始做了
	            if (j != i || !startParents[i]) {
	                while (current) {
	                    if (current === start) {
	                        break;
	                    }
	                    ei = current.previousSibling;
	                    clone.insertBefore(!action ? current.cloneNode(true) : current, clone.firstChild);
	                    current = ei;
	                }
	            }
	            clone = currentLevel;
	        }
	        if (action) {
	            range.setStartBefore(!endParents[i] ? endParents[i - 1] : !startParents[i] ? startParents[i - 1] : endParents[i]).collapse(true);
	        }
	        tmpStart && domUtils.remove(tmpStart);
	        tmpEnd && domUtils.remove(tmpEnd);
	        return frag;
	    }
	
	    /**
	     * 创建一个跟document绑定的空的Range实例
	     * @constructor
	     * @param { Document } document 新建的选区所属的文档对象
	     */
	
	    /**
	     * @property { Node } startContainer 当前Range的开始边界的容器节点, 可以是一个元素节点或者是文本节点
	     */
	
	    /**
	     * @property { Node } startOffset 当前Range的开始边界容器节点的偏移量, 如果是元素节点，
	     *                              该值就是childNodes中的第几个节点， 如果是文本节点就是文本内容的第几个字符
	     */
	
	    /**
	     * @property { Node } endContainer 当前Range的结束边界的容器节点, 可以是一个元素节点或者是文本节点
	     */
	
	    /**
	     * @property { Node } endOffset 当前Range的结束边界容器节点的偏移量, 如果是元素节点，
	     *                              该值就是childNodes中的第几个节点， 如果是文本节点就是文本内容的第几个字符
	     */
	
	    /**
	     * @property { Boolean } collapsed 当前Range是否闭合
	     * @default true
	     * @remind Range是闭合的时候， startContainer === endContainer && startOffset === endOffset
	     */
	
	    /**
	     * @property { Document } document 当前Range所属的Document对象
	     * @remind 不同range的的document属性可以是不同的
	     */
	    var Range = dom.Range = function (document) {
	        var me = this;
	        me.startContainer =
	            me.startOffset =
	                me.endContainer =
	                    me.endOffset = null;
	        me.document = document;
	        me.collapsed = true;
	    };
	
	    /**
	     * 删除fillData
	     * @param doc
	     * @param excludeNode
	     */
	    function removeFillData(doc, excludeNode) {
	        try {
	            if (fillData && domUtils.inDoc(fillData, doc)) {
	                if (!fillData.nodeValue.replace(fillCharReg, '').length) {
	                    var tmpNode = fillData.parentNode;
	                    domUtils.remove(fillData);
	                    while (tmpNode && domUtils.isEmptyInlineElement(tmpNode) &&
	                        //safari的contains有bug
	                        (browser.safari ? !(domUtils.getPosition(tmpNode,excludeNode) & domUtils.POSITION_CONTAINS) : !tmpNode.contains(excludeNode))
	                        ) {
	                        fillData = tmpNode.parentNode;
	                        domUtils.remove(tmpNode);
	                        tmpNode = fillData;
	                    }
	                } else {
	                    fillData.nodeValue = fillData.nodeValue.replace(fillCharReg, '');
	                }
	            }
	        } catch (e) {
	        }
	    }
	
	    /**
	     * @param node
	     * @param dir
	     */
	    function mergeSibling(node, dir) {
	        var tmpNode;
	        node = node[dir];
	        while (node && domUtils.isFillChar(node)) {
	            tmpNode = node[dir];
	            domUtils.remove(node);
	            node = tmpNode;
	        }
	    }
	
	    Range.prototype = {
	
	        /**
	         * 克隆选区的内容到一个DocumentFragment里
	         * @method cloneContents
	         * @return { DocumentFragment | NULL } 如果选区是闭合的将返回null， 否则， 返回包含所clone内容的DocumentFragment元素
	         * @example
	         * ```html
	         * <body>
	         *      <!-- 中括号表示选区 -->
	         *      <b>x<i>x[x</i>xx]x</b>
	         *
	         *      <script>
	         *          //range是已选中的选区
	         *          var fragment = range.cloneContents(),
	         *              node = document.createElement("div");
	         *
	         *          node.appendChild( fragment );
	         *
	         *          //output: <i>x</i>xx
	         *          console.log( node.innerHTML );
	         *
	         *      </script>
	         * </body>
	         * ```
	         */
	        cloneContents:function () {
	            return this.collapsed ? null : execContentsAction(this, 0);
	        },
	
	        /**
	         * 删除当前选区范围中的所有内容
	         * @method deleteContents
	         * @remind 执行完该操作后， 当前Range对象变成了闭合状态
	         * @return { UE.dom.Range } 当前操作的Range对象
	         * @example
	         * ```html
	         * <body>
	         *      <!-- 中括号表示选区 -->
	         *      <b>x<i>x[x</i>xx]x</b>
	         *
	         *      <script>
	         *          //range是已选中的选区
	         *          range.deleteContents();
	         *
	         *          //竖线表示闭合后的选区位置
	         *          //output: <b>x<i>x</i>|x</b>
	         *          console.log( document.body.innerHTML );
	         *
	         *          //此时， range的各项属性为
	         *          //output: B
	         *          console.log( range.startContainer.tagName );
	         *          //output: 2
	         *          console.log( range.startOffset );
	         *          //output: B
	         *          console.log( range.endContainer.tagName );
	         *          //output: 2
	         *          console.log( range.endOffset );
	         *          //output: true
	         *          console.log( range.collapsed );
	         *
	         *      </script>
	         * </body>
	         * ```
	         */
	        deleteContents:function () {
	            var txt;
	            if (!this.collapsed) {
	                execContentsAction(this, 1);
	            }
	            if (browser.webkit) {
	                txt = this.startContainer;
	                if (txt.nodeType == 3 && !txt.nodeValue.length) {
	                    this.setStartBefore(txt).collapse(true);
	                    domUtils.remove(txt);
	                }
	            }
	            return this;
	        },
	
	        /**
	         * 将当前选区的内容提取到一个DocumentFragment里
	         * @method extractContents
	         * @remind 执行该操作后， 选区将变成闭合状态
	         * @warning 执行该操作后， 原来选区所选中的内容将从dom树上剥离出来
	         * @return { DocumentFragment } 返回包含所提取内容的DocumentFragment对象
	         * @example
	         * ```html
	         * <body>
	         *      <!-- 中括号表示选区 -->
	         *      <b>x<i>x[x</i>xx]x</b>
	         *
	         *      <script>
	         *          //range是已选中的选区
	         *          var fragment = range.extractContents(),
	         *              node = document.createElement( "div" );
	         *
	         *          node.appendChild( fragment );
	         *
	         *          //竖线表示闭合后的选区位置
	         *
	         *          //output: <b>x<i>x</i>|x</b>
	         *          console.log( document.body.innerHTML );
	         *          //output: <i>x</i>xx
	         *          console.log( node.innerHTML );
	         *
	         *          //此时， range的各项属性为
	         *          //output: B
	         *          console.log( range.startContainer.tagName );
	         *          //output: 2
	         *          console.log( range.startOffset );
	         *          //output: B
	         *          console.log( range.endContainer.tagName );
	         *          //output: 2
	         *          console.log( range.endOffset );
	         *          //output: true
	         *          console.log( range.collapsed );
	         *
	         *      </script>
	         * </body>
	         */
	        extractContents:function () {
	            return this.collapsed ? null : execContentsAction(this, 2);
	        },
	
	        /**
	         * 设置Range的开始容器节点和偏移量
	         * @method  setStart
	         * @remind 如果给定的节点是元素节点，那么offset指的是其子元素中索引为offset的元素，
	         *          如果是文本节点，那么offset指的是其文本内容的第offset个字符
	         * @remind 如果提供的容器节点是一个不能包含子元素的节点， 则该选区的开始容器将被设置
	         *          为该节点的父节点， 此时， 其距离开始容器的偏移量也变成了该节点在其父节点
	         *          中的索引
	         * @param { Node } node 将被设为当前选区开始边界容器的节点对象
	         * @param { int } offset 选区的开始位置偏移量
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         * <!-- 选区 -->
	         * <b>xxx<i>x<span>xx</span>xx<em>xx</em>xxx</i>[xxx]</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.setStart( document.getElementsByTagName("i")[0], 1 );
	         *
	         *     //此时， 选区变成了
	         *     //<b>xxx<i>x[<span>xx</span>xx<em>xx</em>xxx</i>xxx]</b>
	         *
	         * </script>
	         * ```
	         * @example
	         * ```html
	         * <!-- 选区 -->
	         * <b>xxx<img>[xx]x</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.setStart( document.getElementsByTagName("img")[0], 3 );
	         *
	         *     //此时， 选区变成了
	         *     //<b>xxx[<img>xx]x</b>
	         *
	         * </script>
	         * ```
	         */
	        setStart:function (node, offset) {
	            return setEndPoint(true, node, offset, this);
	        },
	
	        /**
	         * 设置Range的结束容器和偏移量
	         * @method  setEnd
	         * @param { Node } node 作为当前选区结束边界容器的节点对象
	         * @param { int } offset 结束边界的偏移量
	         * @see UE.dom.Range:setStart(Node,int)
	         * @return { UE.dom.Range } 当前range对象
	         */
	        setEnd:function (node, offset) {
	            return setEndPoint(false, node, offset, this);
	        },
	
	        /**
	         * 将Range开始位置设置到node节点之后
	         * @method  setStartAfter
	         * @remind 该操作将会把给定节点的父节点作为range的开始容器， 且偏移量是该节点在其父节点中的位置索引+1
	         * @param { Node } node 选区的开始边界将紧接着该节点之后
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>xx<i>xxx</i><span>xx[x</span>xxx]</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.setStartAfter( document.getElementsByTagName("i")[0] );
	         *
	         *     //结果选区
	         *     //<b>xx<i>xxx</i>[<span>xxx</span>xxx]</b>
	         *
	         * </script>
	         * ```
	         */
	        setStartAfter:function (node) {
	            return this.setStart(node.parentNode, domUtils.getNodeIndex(node) + 1);
	        },
	
	        /**
	         * 将Range开始位置设置到node节点之前
	         * @method  setStartBefore
	         * @remind 该操作将会把给定节点的父节点作为range的开始容器， 且偏移量是该节点在其父节点中的位置索引
	         * @param { Node } node 新的选区开始位置在该节点之前
	         * @see UE.dom.Range:setStartAfter(Node)
	         * @return { UE.dom.Range } 当前range对象
	         */
	        setStartBefore:function (node) {
	            return this.setStart(node.parentNode, domUtils.getNodeIndex(node));
	        },
	
	        /**
	         * 将Range结束位置设置到node节点之后
	         * @method  setEndAfter
	         * @remind 该操作将会把给定节点的父节点作为range的结束容器， 且偏移量是该节点在其父节点中的位置索引+1
	         * @param { Node } node 目标节点
	         * @see UE.dom.Range:setStartAfter(Node)
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>[xx<i>xxx</i><span>xx]x</span>xxx</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.setStartAfter( document.getElementsByTagName("span")[0] );
	         *
	         *     //结果选区
	         *     //<b>[xx<i>xxx</i><span>xxx</span>]xxx</b>
	         *
	         * </script>
	         * ```
	         */
	        setEndAfter:function (node) {
	            return this.setEnd(node.parentNode, domUtils.getNodeIndex(node) + 1);
	        },
	
	        /**
	         * 将Range结束位置设置到node节点之前
	         * @method  setEndBefore
	         * @remind 该操作将会把给定节点的父节点作为range的结束容器， 且偏移量是该节点在其父节点中的位置索引
	         * @param { Node } node 目标节点
	         * @see UE.dom.Range:setEndAfter(Node)
	         * @return { UE.dom.Range } 当前range对象
	         */
	        setEndBefore:function (node) {
	            return this.setEnd(node.parentNode, domUtils.getNodeIndex(node));
	        },
	
	        /**
	         * 设置Range的开始位置到node节点内的第一个子节点之前
	         * @method  setStartAtFirst
	         * @remind 选区的开始容器将变成给定的节点， 且偏移量为0
	         * @remind 如果给定的节点是元素节点， 则该节点必须是允许包含子节点的元素。
	         * @param { Node } node 目标节点
	         * @see UE.dom.Range:setStartBefore(Node)
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.setStartAtFirst( document.getElementsByTagName("i")[0] );
	         *
	         *     //结果选区
	         *     //<b>xx<i>[xxx</i><span>xx]x</span>xxx</b>
	         *
	         * </script>
	         * ```
	         */
	        setStartAtFirst:function (node) {
	            return this.setStart(node, 0);
	        },
	
	        /**
	         * 设置Range的开始位置到node节点内的最后一个节点之后
	         * @method setStartAtLast
	         * @remind 选区的开始容器将变成给定的节点， 且偏移量为该节点的子节点数
	         * @remind 如果给定的节点是元素节点， 则该节点必须是允许包含子节点的元素。
	         * @param { Node } node 目标节点
	         * @see UE.dom.Range:setStartAtFirst(Node)
	         * @return { UE.dom.Range } 当前range对象
	         */
	        setStartAtLast:function (node) {
	            return this.setStart(node, node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length);
	        },
	
	        /**
	         * 设置Range的结束位置到node节点内的第一个节点之前
	         * @method  setEndAtFirst
	         * @param { Node } node 目标节点
	         * @remind 选区的结束容器将变成给定的节点， 且偏移量为0
	         * @remind node必须是一个元素节点， 且必须是允许包含子节点的元素。
	         * @see UE.dom.Range:setStartAtFirst(Node)
	         * @return { UE.dom.Range } 当前range对象
	         */
	        setEndAtFirst:function (node) {
	            return this.setEnd(node, 0);
	        },
	
	        /**
	         * 设置Range的结束位置到node节点内的最后一个节点之后
	         * @method  setEndAtLast
	         * @param { Node } node 目标节点
	         * @remind 选区的结束容器将变成给定的节点， 且偏移量为该节点的子节点数量
	         * @remind node必须是一个元素节点， 且必须是允许包含子节点的元素。
	         * @see UE.dom.Range:setStartAtFirst(Node)
	         * @return { UE.dom.Range } 当前range对象
	         */
	        setEndAtLast:function (node) {
	            return this.setEnd(node, node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length);
	        },
	
	        /**
	         * 选中给定节点
	         * @method  selectNode
	         * @remind 此时， 选区的开始容器和结束容器都是该节点的父节点， 其startOffset是该节点在父节点中的位置索引，
	         *          而endOffset为startOffset+1
	         * @param { Node } node 需要选中的节点
	         * @return { UE.dom.Range } 当前range对象，此时的range仅包含当前给定的节点对象
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.selectNode( document.getElementsByTagName("i")[0] );
	         *
	         *     //结果选区
	         *     //<b>xx[<i>xxx</i>]<span>xxx</span>xxx</b>
	         *
	         * </script>
	         * ```
	         */
	        selectNode:function (node) {
	            return this.setStartBefore(node).setEndAfter(node);
	        },
	
	        /**
	         * 选中给定节点内部的所有节点
	         * @method  selectNodeContents
	         * @remind 此时， 选区的开始容器和结束容器都是该节点， 其startOffset为0，
	         *          而endOffset是该节点的子节点数。
	         * @param { Node } node 目标节点， 当前range将包含该节点内的所有节点
	         * @return { UE.dom.Range } 当前range对象， 此时range仅包含给定节点的所有子节点
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.selectNode( document.getElementsByTagName("b")[0] );
	         *
	         *     //结果选区
	         *     //<b>[xx<i>xxx</i><span>xxx</span>xxx]</b>
	         *
	         * </script>
	         * ```
	         */
	        selectNodeContents:function (node) {
	            return this.setStart(node, 0).setEndAtLast(node);
	        },
	
	        /**
	         * clone当前Range对象
	         * @method  cloneRange
	         * @remind 返回的range是一个全新的range对象， 其内部所有属性与当前被clone的range相同。
	         * @return { UE.dom.Range } 当前range对象的一个副本
	         */
	        cloneRange:function () {
	            var me = this;
	            return new Range(me.document).setStart(me.startContainer, me.startOffset).setEnd(me.endContainer, me.endOffset);
	
	        },
	
	        /**
	         * 向当前选区的结束处闭合选区
	         * @method  collapse
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.collapse();
	         *
	         *     //结果选区
	         *     //“|”表示选区已闭合
	         *     //<b>xx<i>xxx</i><span>xx|x</span>xxx</b>
	         *
	         * </script>
	         * ```
	         */
	
	        /**
	         * 闭合当前选区，根据给定的toStart参数项决定是向当前选区开始处闭合还是向结束处闭合，
	         * 如果toStart的值为true，则向开始位置闭合， 反之，向结束位置闭合。
	         * @method  collapse
	         * @param { Boolean } toStart 是否向选区开始处闭合
	         * @return { UE.dom.Range } 当前range对象，此时range对象处于闭合状态
	         * @see UE.dom.Range:collapse()
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.collapse( true );
	         *
	         *     //结果选区
	         *     //“|”表示选区已闭合
	         *     //<b>xx<i>xxx</i><span>|xxx</span>xxx</b>
	         *
	         * </script>
	         * ```
	         */
	        collapse:function (toStart) {
	            var me = this;
	            if (toStart) {
	                me.endContainer = me.startContainer;
	                me.endOffset = me.startOffset;
	            } else {
	                me.startContainer = me.endContainer;
	                me.startOffset = me.endOffset;
	            }
	            me.collapsed = true;
	            return me;
	        },
	
	        /**
	         * 调整range的开始位置和结束位置，使其"收缩"到最小的位置
	         * @method  shrinkBoundary
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         * <span>xx<b>xx[</b>xxxxx]</span> => <span>xx<b>xx</b>[xxxxx]</span>
	         * ```
	         *
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>x[xx</b><i>]xxx</i>
	         *
	         * <script>
	         *
	         *     //执行收缩
	         *     range.shrinkBoundary();
	         *
	         *     //结果选区
	         *     //<b>x[xx]</b><i>xxx</i>
	         * </script>
	         * ```
	         *
	         * @example
	         * ```html
	         * [<b><i>xxxx</i>xxxxxxx</b>] => <b><i>[xxxx</i>xxxxxxx]</b>
	         * ```
	         */
	
	        /**
	         * 调整range的开始位置和结束位置，使其"收缩"到最小的位置，
	         * 如果ignoreEnd的值为true，则忽略对结束位置的调整
	         * @method  shrinkBoundary
	         * @param { Boolean } ignoreEnd 是否忽略对结束位置的调整
	         * @return { UE.dom.Range } 当前range对象
	         * @see UE.dom.domUtils.Range:shrinkBoundary()
	         */
	        shrinkBoundary:function (ignoreEnd) {
	            var me = this, child,
	                collapsed = me.collapsed;
	            function check(node){
	                return node.nodeType == 1 && !domUtils.isBookmarkNode(node) && !dtd.$empty[node.tagName] && !dtd.$nonChild[node.tagName]
	            }
	            while (me.startContainer.nodeType == 1 //是element
	                && (child = me.startContainer.childNodes[me.startOffset]) //子节点也是element
	                && check(child)) {
	                me.setStart(child, 0);
	            }
	            if (collapsed) {
	                return me.collapse(true);
	            }
	            if (!ignoreEnd) {
	                while (me.endContainer.nodeType == 1//是element
	                    && me.endOffset > 0 //如果是空元素就退出 endOffset=0那么endOffst-1为负值，childNodes[endOffset]报错
	                    && (child = me.endContainer.childNodes[me.endOffset - 1]) //子节点也是element
	                    && check(child)) {
	                    me.setEnd(child, child.childNodes.length);
	                }
	            }
	            return me;
	        },
	
	        /**
	         * 获取离当前选区内包含的所有节点最近的公共祖先节点，
	         * @method  getCommonAncestor
	         * @remind 返回的公共祖先节点一定不是range自身的容器节点， 但有可能是一个文本节点
	         * @return { Node } 当前range对象内所有节点的公共祖先节点
	         * @example
	         * ```html
	         * //选区示例
	         * <span>xxx<b>x[x<em>xx]x</em>xxx</b>xx</span>
	         * <script>
	         *
	         *     var node = range.getCommonAncestor();
	         *
	         *     //公共祖先节点是： b节点
	         *     //输出： B
	         *     console.log(node.tagName);
	         *
	         * </script>
	         * ```
	         */
	
	        /**
	         * 获取当前选区所包含的所有节点的公共祖先节点， 可以根据给定的参数 includeSelf 决定获取到
	         * 的公共祖先节点是否可以是当前选区的startContainer或endContainer节点， 如果 includeSelf
	         * 的取值为true， 则返回的节点可以是自身的容器节点， 否则， 则不能是容器节点
	         * @method  getCommonAncestor
	         * @param { Boolean } includeSelf 是否允许获取到的公共祖先节点是当前range对象的容器节点
	         * @return { Node } 当前range对象内所有节点的公共祖先节点
	         * @see UE.dom.Range:getCommonAncestor()
	         * @example
	         * ```html
	         * <body>
	         *
	         *     <!-- 选区示例 -->
	         *     <b>xxx<i>xxxx<span>xx[x</span>xx]x</i>xxxxxxx</b>
	         *
	         *     <script>
	         *
	         *         var node = range.getCommonAncestor( false );
	         *
	         *         //这里的公共祖先节点是B而不是I， 是因为参数限制了获取到的节点不能是容器节点
	         *         //output: B
	         *         console.log( node.tagName );
	         *
	         *     </script>
	         *
	         * </body>
	         * ```
	         */
	
	        /**
	         * 获取当前选区所包含的所有节点的公共祖先节点， 可以根据给定的参数 includeSelf 决定获取到
	         * 的公共祖先节点是否可以是当前选区的startContainer或endContainer节点， 如果 includeSelf
	         * 的取值为true， 则返回的节点可以是自身的容器节点， 否则， 则不能是容器节点； 同时可以根据
	         * ignoreTextNode 参数的取值决定是否忽略类型为文本节点的祖先节点。
	         * @method  getCommonAncestor
	         * @param { Boolean } includeSelf 是否允许获取到的公共祖先节点是当前range对象的容器节点
	         * @param { Boolean } ignoreTextNode 获取祖先节点的过程中是否忽略类型为文本节点的祖先节点
	         * @return { Node } 当前range对象内所有节点的公共祖先节点
	         * @see UE.dom.Range:getCommonAncestor()
	         * @see UE.dom.Range:getCommonAncestor(Boolean)
	         * @example
	         * ```html
	         * <body>
	         *
	         *     <!-- 选区示例 -->
	         *     <b>xxx<i>xxxx<span>x[x]x</span>xxx</i>xxxxxxx</b>
	         *
	         *     <script>
	         *
	         *         var node = range.getCommonAncestor( true, false );
	         *
	         *         //output: SPAN
	         *         console.log( node.tagName );
	         *
	         *     </script>
	         *
	         * </body>
	         * ```
	         */
	        getCommonAncestor:function (includeSelf, ignoreTextNode) {
	            var me = this,
	                start = me.startContainer,
	                end = me.endContainer;
	            if (start === end) {
	                if (includeSelf && selectOneNode(this)) {
	                    start = start.childNodes[me.startOffset];
	                    if(start.nodeType == 1)
	                        return start;
	                }
	                //只有在上来就相等的情况下才会出现是文本的情况
	                return ignoreTextNode && start.nodeType == 3 ? start.parentNode : start;
	            }
	            return domUtils.getCommonAncestor(start, end);
	        },
	
	        /**
	         * 调整当前Range的开始和结束边界容器，如果是容器节点是文本节点,就调整到包含该文本节点的父节点上
	         * @method trimBoundary
	         * @remind 该操作有可能会引起文本节点被切开
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         *
	         * //选区示例
	         * <b>xxx<i>[xxxxx]</i>xxx</b>
	         *
	         * <script>
	         *     //未调整前， 选区的开始容器和结束都是文本节点
	         *     //执行调整
	         *     range.trimBoundary();
	         *
	         *     //调整之后， 容器节点变成了i节点
	         *     //<b>xxx[<i>xxxxx</i>]xxx</b>
	         * </script>
	         * ```
	         */
	
	        /**
	         * 调整当前Range的开始和结束边界容器，如果是容器节点是文本节点,就调整到包含该文本节点的父节点上，
	         * 可以根据 ignoreEnd 参数的值决定是否调整对结束边界的调整
	         * @method trimBoundary
	         * @param { Boolean } ignoreEnd 是否忽略对结束边界的调整
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         *
	         * //选区示例
	         * <b>xxx<i>[xxxxx]</i>xxx</b>
	         *
	         * <script>
	         *     //未调整前， 选区的开始容器和结束都是文本节点
	         *     //执行调整
	         *     range.trimBoundary( true );
	         *
	         *     //调整之后， 开始容器节点变成了i节点
	         *     //但是， 结束容器没有发生变化
	         *     //<b>xxx[<i>xxxxx]</i>xxx</b>
	         * </script>
	         * ```
	         */
	        trimBoundary:function (ignoreEnd) {
	            this.txtToElmBoundary();
	            var start = this.startContainer,
	                offset = this.startOffset,
	                collapsed = this.collapsed,
	                end = this.endContainer;
	            if (start.nodeType == 3) {
	                if (offset == 0) {
	                    this.setStartBefore(start);
	                } else {
	                    if (offset >= start.nodeValue.length) {
	                        this.setStartAfter(start);
	                    } else {
	                        var textNode = domUtils.split(start, offset);
	                        //跟新结束边界
	                        if (start === end) {
	                            this.setEnd(textNode, this.endOffset - offset);
	                        } else if (start.parentNode === end) {
	                            this.endOffset += 1;
	                        }
	                        this.setStartBefore(textNode);
	                    }
	                }
	                if (collapsed) {
	                    return this.collapse(true);
	                }
	            }
	            if (!ignoreEnd) {
	                offset = this.endOffset;
	                end = this.endContainer;
	                if (end.nodeType == 3) {
	                    if (offset == 0) {
	                        this.setEndBefore(end);
	                    } else {
	                        offset < end.nodeValue.length && domUtils.split(end, offset);
	                        this.setEndAfter(end);
	                    }
	                }
	            }
	            return this;
	        },
	
	        /**
	         * 如果选区在文本的边界上，就扩展选区到文本的父节点上, 如果当前选区是闭合的， 则什么也不做
	         * @method txtToElmBoundary
	         * @remind 该操作不会修改dom节点
	         * @return { UE.dom.Range } 当前range对象
	         */
	
	        /**
	         * 如果选区在文本的边界上，就扩展选区到文本的父节点上, 如果当前选区是闭合的， 则根据参数项
	         * ignoreCollapsed 的值决定是否执行该调整
	         * @method txtToElmBoundary
	         * @param { Boolean } ignoreCollapsed 是否忽略选区的闭合状态， 如果该参数取值为true， 则
	         *                      不论选区是否闭合， 都会执行该操作， 反之， 则不会对闭合的选区执行该操作
	         * @return { UE.dom.Range } 当前range对象
	         */
	        txtToElmBoundary:function (ignoreCollapsed) {
	            function adjust(r, c) {
	                var container = r[c + 'Container'],
	                    offset = r[c + 'Offset'];
	                if (container.nodeType == 3) {
	                    if (!offset) {
	                        r['set' + c.replace(/(\w)/, function (a) {
	                            return a.toUpperCase();
	                        }) + 'Before'](container);
	                    } else if (offset >= container.nodeValue.length) {
	                        r['set' + c.replace(/(\w)/, function (a) {
	                            return a.toUpperCase();
	                        }) + 'After' ](container);
	                    }
	                }
	            }
	
	            if (ignoreCollapsed || !this.collapsed) {
	                adjust(this, 'start');
	                adjust(this, 'end');
	            }
	            return this;
	        },
	
	        /**
	         * 在当前选区的开始位置前插入节点，新插入的节点会被该range包含
	         * @method  insertNode
	         * @param { Node } node 需要插入的节点
	         * @remind 插入的节点可以是一个DocumentFragment依次插入多个节点
	         * @return { UE.dom.Range } 当前range对象
	         */
	        insertNode:function (node) {
	            var first = node, length = 1;
	            if (node.nodeType == 11) {
	                first = node.firstChild;
	                length = node.childNodes.length;
	            }
	            this.trimBoundary(true);
	            var start = this.startContainer,
	                offset = this.startOffset;
	            var nextNode = start.childNodes[ offset ];
	            if (nextNode) {
	                start.insertBefore(node, nextNode);
	            } else {
	                start.appendChild(node);
	            }
	            if (first.parentNode === this.endContainer) {
	                this.endOffset = this.endOffset + length;
	            }
	            return this.setStartBefore(first);
	        },
	
	        /**
	         * 闭合选区到当前选区的开始位置， 并且定位光标到闭合后的位置
	         * @method  setCursor
	         * @return { UE.dom.Range } 当前range对象
	         * @see UE.dom.Range:collapse()
	         */
	
	        /**
	         * 闭合选区，可以根据参数toEnd的值控制选区是向前闭合还是向后闭合， 并且定位光标到闭合后的位置。
	         * @method  setCursor
	         * @param { Boolean } toEnd 是否向后闭合， 如果为true， 则闭合选区时， 将向结束容器方向闭合，
	         *                      反之，则向开始容器方向闭合
	         * @return { UE.dom.Range } 当前range对象
	         * @see UE.dom.Range:collapse(Boolean)
	         */
	        setCursor:function (toEnd, noFillData) {
	            return this.collapse(!toEnd).select(noFillData);
	        },
	
	        /**
	         * 创建当前range的一个书签，记录下当前range的位置，方便当dom树改变时，还能找回原来的选区位置
	         * @method createBookmark
	         * @param { Boolean } serialize 控制返回的标记位置是对当前位置的引用还是ID，如果该值为true，则
	         *                              返回标记位置的ID， 反之则返回标记位置节点的引用
	         * @return { Object } 返回一个书签记录键值对， 其包含的key有： start => 开始标记的ID或者引用，
	         *                          end => 结束标记的ID或引用， id => 当前标记的类型， 如果为true，则表示
	         *                          返回的记录的类型为ID， 反之则为引用
	         */
	        createBookmark:function (serialize, same) {
	            var endNode,
	                startNode = this.document.createElement('span');
	            startNode.style.cssText = 'display:none;line-height:0px;';
	            startNode.appendChild(this.document.createTextNode('\u200D'));
	            startNode.id = '_baidu_bookmark_start_' + (same ? '' : guid++);
	
	            if (!this.collapsed) {
	                endNode = startNode.cloneNode(true);
	                endNode.id = '_baidu_bookmark_end_' + (same ? '' : guid++);
	            }
	            this.insertNode(startNode);
	            if (endNode) {
	                this.collapse().insertNode(endNode).setEndBefore(endNode);
	            }
	            this.setStartAfter(startNode);
	            return {
	                start:serialize ? startNode.id : startNode,
	                end:endNode ? serialize ? endNode.id : endNode : null,
	                id:serialize
	            }
	        },
	
	        /**
	         *  调整当前range的边界到书签位置，并删除该书签对象所标记的位置内的节点
	         *  @method  moveToBookmark
	         *  @param { BookMark } bookmark createBookmark所创建的标签对象
	         *  @return { UE.dom.Range } 当前range对象
	         *  @see UE.dom.Range:createBookmark(Boolean)
	         */
	        moveToBookmark:function (bookmark) {
	            var start = bookmark.id ? this.document.getElementById(bookmark.start) : bookmark.start,
	                end = bookmark.end && bookmark.id ? this.document.getElementById(bookmark.end) : bookmark.end;
	            this.setStartBefore(start);
	            domUtils.remove(start);
	            if (end) {
	                this.setEndBefore(end);
	                domUtils.remove(end);
	            } else {
	                this.collapse(true);
	            }
	            return this;
	        },
	
	        /**
	         * 调整range的边界，使其"放大"到最近的父节点
	         * @method  enlarge
	         * @remind 会引起选区的变化
	         * @return { UE.dom.Range } 当前range对象
	         */
	
	        /**
	         * 调整range的边界，使其"放大"到最近的父节点，根据参数 toBlock 的取值， 可以
	         * 要求扩大之后的父节点是block节点
	         * @method  enlarge
	         * @param { Boolean } toBlock 是否要求扩大之后的父节点必须是block节点
	         * @return { UE.dom.Range } 当前range对象
	         */
	        enlarge:function (toBlock, stopFn) {
	            var isBody = domUtils.isBody,
	                pre, node, tmp = this.document.createTextNode('');
	            if (toBlock) {
	                node = this.startContainer;
	                if (node.nodeType == 1) {
	                    if (node.childNodes[this.startOffset]) {
	                        pre = node = node.childNodes[this.startOffset]
	                    } else {
	                        node.appendChild(tmp);
	                        pre = node = tmp;
	                    }
	                } else {
	                    pre = node;
	                }
	                while (1) {
	                    if (domUtils.isBlockElm(node)) {
	                        node = pre;
	                        while ((pre = node.previousSibling) && !domUtils.isBlockElm(pre)) {
	                            node = pre;
	                        }
	                        this.setStartBefore(node);
	                        break;
	                    }
	                    pre = node;
	                    node = node.parentNode;
	                }
	                node = this.endContainer;
	                if (node.nodeType == 1) {
	                    if (pre = node.childNodes[this.endOffset]) {
	                        node.insertBefore(tmp, pre);
	                    } else {
	                        node.appendChild(tmp);
	                    }
	                    pre = node = tmp;
	                } else {
	                    pre = node;
	                }
	                while (1) {
	                    if (domUtils.isBlockElm(node)) {
	                        node = pre;
	                        while ((pre = node.nextSibling) && !domUtils.isBlockElm(pre)) {
	                            node = pre;
	                        }
	                        this.setEndAfter(node);
	                        break;
	                    }
	                    pre = node;
	                    node = node.parentNode;
	                }
	                if (tmp.parentNode === this.endContainer) {
	                    this.endOffset--;
	                }
	                domUtils.remove(tmp);
	            }
	
	            // 扩展边界到最大
	            if (!this.collapsed) {
	                while (this.startOffset == 0) {
	                    if (stopFn && stopFn(this.startContainer)) {
	                        break;
	                    }
	                    if (isBody(this.startContainer)) {
	                        break;
	                    }
	                    this.setStartBefore(this.startContainer);
	                }
	                while (this.endOffset == (this.endContainer.nodeType == 1 ? this.endContainer.childNodes.length : this.endContainer.nodeValue.length)) {
	                    if (stopFn && stopFn(this.endContainer)) {
	                        break;
	                    }
	                    if (isBody(this.endContainer)) {
	                        break;
	                    }
	                    this.setEndAfter(this.endContainer);
	                }
	            }
	            return this;
	        },
	        enlargeToBlockElm:function(ignoreEnd){
	            while(!domUtils.isBlockElm(this.startContainer)){
	                this.setStartBefore(this.startContainer);
	            }
	            if(!ignoreEnd){
	                while(!domUtils.isBlockElm(this.endContainer)){
	                    this.setEndAfter(this.endContainer);
	                }
	            }
	            return this;
	        },
	        /**
	         * 调整Range的边界，使其"缩小"到最合适的位置
	         * @method adjustmentBoundary
	         * @return { UE.dom.Range } 当前range对象
	         * @see UE.dom.Range:shrinkBoundary()
	         */
	        adjustmentBoundary:function () {
	            if (!this.collapsed) {
	                while (!domUtils.isBody(this.startContainer) &&
	                    this.startOffset == this.startContainer[this.startContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length &&
	                    this.startContainer[this.startContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length
	                    ) {
	
	                    this.setStartAfter(this.startContainer);
	                }
	                while (!domUtils.isBody(this.endContainer) && !this.endOffset &&
	                    this.endContainer[this.endContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length
	                    ) {
	                    this.setEndBefore(this.endContainer);
	                }
	            }
	            return this;
	        },
	
	        /**
	         * 给range选区中的内容添加给定的inline标签
	         * @method applyInlineStyle
	         * @param { String } tagName 需要添加的标签名
	         * @example
	         * ```html
	         * <p>xxxx[xxxx]x</p>  ==>  range.applyInlineStyle("strong")  ==>  <p>xxxx[<strong>xxxx</strong>]x</p>
	         * ```
	         */
	
	        /**
	         * 给range选区中的内容添加给定的inline标签， 并且为标签附加上一些初始化属性。
	         * @method applyInlineStyle
	         * @param { String } tagName 需要添加的标签名
	         * @param { Object } attrs 跟随新添加的标签的属性
	         * @return { UE.dom.Range } 当前选区
	         * @example
	         * ```html
	         * <p>xxxx[xxxx]x</p>
	         *
	         * ==>
	         *
	         * <!-- 执行操作 -->
	         * range.applyInlineStyle("strong",{"style":"font-size:12px"})
	         *
	         * ==>
	         *
	         * <p>xxxx[<strong style="font-size:12px">xxxx</strong>]x</p>
	         * ```
	         */
	        applyInlineStyle:function (tagName, attrs, list) {
	            if (this.collapsed)return this;
	            this.trimBoundary().enlarge(false,
	                function (node) {
	                    return node.nodeType == 1 && domUtils.isBlockElm(node)
	                }).adjustmentBoundary();
	            var bookmark = this.createBookmark(),
	                end = bookmark.end,
	                filterFn = function (node) {
	                    return node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' : !domUtils.isWhitespace(node);
	                },
	                current = domUtils.getNextDomNode(bookmark.start, false, filterFn),
	                node,
	                pre,
	                range = this.cloneRange();
	            while (current && (domUtils.getPosition(current, end) & domUtils.POSITION_PRECEDING)) {
	                if (current.nodeType == 3 || dtd[tagName][current.tagName]) {
	                    range.setStartBefore(current);
	                    node = current;
	                    while (node && (node.nodeType == 3 || dtd[tagName][node.tagName]) && node !== end) {
	                        pre = node;
	                        node = domUtils.getNextDomNode(node, node.nodeType == 1, null, function (parent) {
	                            return dtd[tagName][parent.tagName];
	                        });
	                    }
	                    var frag = range.setEndAfter(pre).extractContents(), elm;
	                    if (list && list.length > 0) {
	                        var level, top;
	                        top = level = list[0].cloneNode(false);
	                        for (var i = 1, ci; ci = list[i++];) {
	                            level.appendChild(ci.cloneNode(false));
	                            level = level.firstChild;
	                        }
	                        elm = level;
	                    } else {
	                        elm = range.document.createElement(tagName);
	                    }
	                    if (attrs) {
	                        domUtils.setAttributes(elm, attrs);
	                    }
	                    elm.appendChild(frag);
	                    range.insertNode(list ? top : elm);
	                    //处理下滑线在a上的情况
	                    var aNode;
	                    if (tagName == 'span' && attrs.style && /text\-decoration/.test(attrs.style) && (aNode = domUtils.findParentByTagName(elm, 'a', true))) {
	                        domUtils.setAttributes(aNode, attrs);
	                        domUtils.remove(elm, true);
	                        elm = aNode;
	                    } else {
	                        domUtils.mergeSibling(elm);
	                        domUtils.clearEmptySibling(elm);
	                    }
	                    //去除子节点相同的
	                    domUtils.mergeChild(elm, attrs);
	                    current = domUtils.getNextDomNode(elm, false, filterFn);
	                    domUtils.mergeToParent(elm);
	                    if (node === end) {
	                        break;
	                    }
	                } else {
	                    current = domUtils.getNextDomNode(current, true, filterFn);
	                }
	            }
	            return this.moveToBookmark(bookmark);
	        },
	
	        /**
	         * 移除当前选区内指定的inline标签，但保留其中的内容
	         * @method removeInlineStyle
	         * @param { String } tagName 需要移除的标签名
	         * @return { UE.dom.Range } 当前的range对象
	         * @example
	         * ```html
	         * xx[x<span>xxx<em>yyy</em>zz]z</span>  => range.removeInlineStyle(["em"])  => xx[x<span>xxxyyyzz]z</span>
	         * ```
	         */
	
	        /**
	         * 移除当前选区内指定的一组inline标签，但保留其中的内容
	         * @method removeInlineStyle
	         * @param { Array } tagNameArr 需要移除的标签名的数组
	         * @return { UE.dom.Range } 当前的range对象
	         * @see UE.dom.Range:removeInlineStyle(String)
	         */
	        removeInlineStyle:function (tagNames) {
	            if (this.collapsed)return this;
	            tagNames = utils.isArray(tagNames) ? tagNames : [tagNames];
	            this.shrinkBoundary().adjustmentBoundary();
	            var start = this.startContainer, end = this.endContainer;
	            while (1) {
	                if (start.nodeType == 1) {
	                    if (utils.indexOf(tagNames, start.tagName.toLowerCase()) > -1) {
	                        break;
	                    }
	                    if (start.tagName.toLowerCase() == 'body') {
	                        start = null;
	                        break;
	                    }
	                }
	                start = start.parentNode;
	            }
	            while (1) {
	                if (end.nodeType == 1) {
	                    if (utils.indexOf(tagNames, end.tagName.toLowerCase()) > -1) {
	                        break;
	                    }
	                    if (end.tagName.toLowerCase() == 'body') {
	                        end = null;
	                        break;
	                    }
	                }
	                end = end.parentNode;
	            }
	            var bookmark = this.createBookmark(),
	                frag,
	                tmpRange;
	            if (start) {
	                tmpRange = this.cloneRange().setEndBefore(bookmark.start).setStartBefore(start);
	                frag = tmpRange.extractContents();
	                tmpRange.insertNode(frag);
	                domUtils.clearEmptySibling(start, true);
	                start.parentNode.insertBefore(bookmark.start, start);
	            }
	            if (end) {
	                tmpRange = this.cloneRange().setStartAfter(bookmark.end).setEndAfter(end);
	                frag = tmpRange.extractContents();
	                tmpRange.insertNode(frag);
	                domUtils.clearEmptySibling(end, false, true);
	                end.parentNode.insertBefore(bookmark.end, end.nextSibling);
	            }
	            var current = domUtils.getNextDomNode(bookmark.start, false, function (node) {
	                return node.nodeType == 1;
	            }), next;
	            while (current && current !== bookmark.end) {
	                next = domUtils.getNextDomNode(current, true, function (node) {
	                    return node.nodeType == 1;
	                });
	                if (utils.indexOf(tagNames, current.tagName.toLowerCase()) > -1) {
	                    domUtils.remove(current, true);
	                }
	                current = next;
	            }
	            return this.moveToBookmark(bookmark);
	        },
	
	        /**
	         * 获取当前选中的自闭合的节点
	         * @method  getClosedNode
	         * @return { Node | NULL } 如果当前选中的是自闭合节点， 则返回该节点， 否则返回NULL
	         */
	        getClosedNode:function () {
	            var node;
	            if (!this.collapsed) {
	                var range = this.cloneRange().adjustmentBoundary().shrinkBoundary();
	                if (selectOneNode(range)) {
	                    var child = range.startContainer.childNodes[range.startOffset];
	                    if (child && child.nodeType == 1 && (dtd.$empty[child.tagName] || dtd.$nonChild[child.tagName])) {
	                        node = child;
	                    }
	                }
	            }
	            return node;
	        },
	
	        /**
	         * 在页面上高亮range所表示的选区
	         * @method select
	         * @return { UE.dom.Range } 返回当前Range对象
	         */
	            //这里不区分ie9以上，trace:3824
	        select:browser.ie ? function (noFillData, textRange) {
	            var nativeRange;
	            if (!this.collapsed)
	                this.shrinkBoundary();
	            var node = this.getClosedNode();
	            if (node && !textRange) {
	                try {
	                    nativeRange = this.document.body.createControlRange();
	                    nativeRange.addElement(node);
	                    nativeRange.select();
	                } catch (e) {}
	                return this;
	            }
	            var bookmark = this.createBookmark(),
	                start = bookmark.start,
	                end;
	            nativeRange = this.document.body.createTextRange();
	            nativeRange.moveToElementText(start);
	            nativeRange.moveStart('character', 1);
	            if (!this.collapsed) {
	                var nativeRangeEnd = this.document.body.createTextRange();
	                end = bookmark.end;
	                nativeRangeEnd.moveToElementText(end);
	                nativeRange.setEndPoint('EndToEnd', nativeRangeEnd);
	            } else {
	                if (!noFillData && this.startContainer.nodeType != 3) {
	                    //使用<span>|x<span>固定住光标
	                    var tmpText = this.document.createTextNode(fillChar),
	                        tmp = this.document.createElement('span');
	                    tmp.appendChild(this.document.createTextNode(fillChar));
	                    start.parentNode.insertBefore(tmp, start);
	                    start.parentNode.insertBefore(tmpText, start);
	                    //当点b,i,u时，不能清除i上边的b
	                    removeFillData(this.document, tmpText);
	                    fillData = tmpText;
	                    mergeSibling(tmp, 'previousSibling');
	                    mergeSibling(start, 'nextSibling');
	                    nativeRange.moveStart('character', -1);
	                    nativeRange.collapse(true);
	                }
	            }
	            this.moveToBookmark(bookmark);
	            tmp && domUtils.remove(tmp);
	            //IE在隐藏状态下不支持range操作，catch一下
	            try {
	                nativeRange.select();
	            } catch (e) {
	            }
	            return this;
	        } : function (notInsertFillData) {
	            function checkOffset(rng){
	
	                function check(node,offset,dir){
	                    if(node.nodeType == 3 && node.nodeValue.length < offset){
	                        rng[dir + 'Offset'] = node.nodeValue.length
	                    }
	                }
	                check(rng.startContainer,rng.startOffset,'start');
	                check(rng.endContainer,rng.endOffset,'end');
	            }
	            var win = domUtils.getWindow(this.document),
	                sel = win.getSelection(),
	                txtNode;
	            //FF下关闭自动长高时滚动条在关闭dialog时会跳
	            //ff下如果不body.focus将不能定位闭合光标到编辑器内
	            browser.gecko ? this.document.body.focus() : win.focus();
	            if (sel) {
	                sel.removeAllRanges();
	                // trace:870 chrome/safari后边是br对于闭合得range不能定位 所以去掉了判断
	                // this.startContainer.nodeType != 3 &&! ((child = this.startContainer.childNodes[this.startOffset]) && child.nodeType == 1 && child.tagName == 'BR'
	                if (this.collapsed && !notInsertFillData) {
	//                    //opear如果没有节点接着，原生的不能够定位,不能在body的第一级插入空白节点
	//                    if (notInsertFillData && browser.opera && !domUtils.isBody(this.startContainer) && this.startContainer.nodeType == 1) {
	//                        var tmp = this.document.createTextNode('');
	//                        this.insertNode(tmp).setStart(tmp, 0).collapse(true);
	//                    }
	//
	                    //处理光标落在文本节点的情况
	                    //处理以下的情况
	                    //<b>|xxxx</b>
	                    //<b>xxxx</b>|xxxx
	                    //xxxx<b>|</b>
	                    var start = this.startContainer,child = start;
	                    if(start.nodeType == 1){
	                        child = start.childNodes[this.startOffset];
	
	                    }
	                    if( !(start.nodeType == 3 && this.startOffset)  &&
	                        (child ?
	                            (!child.previousSibling || child.previousSibling.nodeType != 3)
	                            :
	                            (!start.lastChild || start.lastChild.nodeType != 3)
	                        )
	                    ){
	                        txtNode = this.document.createTextNode(fillChar);
	                        //跟着前边走
	                        this.insertNode(txtNode);
	                        removeFillData(this.document, txtNode);
	                        mergeSibling(txtNode, 'previousSibling');
	                        mergeSibling(txtNode, 'nextSibling');
	                        fillData = txtNode;
	                        this.setStart(txtNode, browser.webkit ? 1 : 0).collapse(true);
	                    }
	                }
	                var nativeRange = this.document.createRange();
	                if(this.collapsed && browser.opera && this.startContainer.nodeType == 1){
	                    var child = this.startContainer.childNodes[this.startOffset];
	                    if(!child){
	                        //往前靠拢
	                        child = this.startContainer.lastChild;
	                        if( child && domUtils.isBr(child)){
	                            this.setStartBefore(child).collapse(true);
	                        }
	                    }else{
	                        //向后靠拢
	                        while(child && domUtils.isBlockElm(child)){
	                            if(child.nodeType == 1 && child.childNodes[0]){
	                                child = child.childNodes[0]
	                            }else{
	                                break;
	                            }
	                        }
	                        child && this.setStartBefore(child).collapse(true)
	                    }
	
	                }
	                //是createAddress最后一位算的不准，现在这里进行微调
	                checkOffset(this);
	                nativeRange.setStart(this.startContainer, this.startOffset);
	                nativeRange.setEnd(this.endContainer, this.endOffset);
	                sel.addRange(nativeRange);
	            }
	            return this;
	        },
	
	        /**
	         * 滚动到当前range开始的位置
	         * @method scrollToView
	         * @param { Window } win 当前range对象所属的window对象
	         * @return { UE.dom.Range } 当前Range对象
	         */
	
	        /**
	         * 滚动到距离当前range开始位置 offset 的位置处
	         * @method scrollToView
	         * @param { Window } win 当前range对象所属的window对象
	         * @param { Number } offset 距离range开始位置处的偏移量， 如果为正数， 则向下偏移， 反之， 则向上偏移
	         * @return { UE.dom.Range } 当前Range对象
	         */
	        scrollToView:function (win, offset) {
	            win = win ? window : domUtils.getWindow(this.document);
	            var me = this,
	                span = me.document.createElement('span');
	            //trace:717
	            span.innerHTML = '&nbsp;';
	            me.cloneRange().insertNode(span);
	            domUtils.scrollToView(span, win, offset);
	            domUtils.remove(span);
	            return me;
	        },
	
	        /**
	         * 判断当前选区内容是否占位符
	         * @private
	         * @method inFillChar
	         * @return { Boolean } 如果是占位符返回true，否则返回false
	         */
	        inFillChar : function(){
	            var start = this.startContainer;
	            if(this.collapsed && start.nodeType == 3
	                && start.nodeValue.replace(new RegExp('^' + domUtils.fillChar),'').length + 1 == start.nodeValue.length
	                ){
	                return true;
	            }
	            return false;
	        },
	
	        /**
	         * 保存
	         * @method createAddress
	         * @private
	         * @return { Boolean } 返回开始和结束的位置
	         * @example
	         * ```html
	         * <body>
	         *     <p>
	         *         aaaa
	         *         <em>
	         *             <!-- 选区开始 -->
	         *             bbbb
	         *             <!-- 选区结束 -->
	         *         </em>
	         *     </p>
	         *
	         *     <script>
	         *         //output: {startAddress:[0,1,0,0],endAddress:[0,1,0,4]}
	         *         console.log( range.createAddress() );
	         *     </script>
	         * </body>
	         * ```
	         */
	        createAddress : function(ignoreEnd,ignoreTxt){
	            var addr = {},me = this;
	
	            function getAddress(isStart){
	                var node = isStart ? me.startContainer : me.endContainer;
	                var parents = domUtils.findParents(node,true,function(node){return !domUtils.isBody(node)}),
	                    addrs = [];
	                for(var i = 0,ci;ci = parents[i++];){
	                    addrs.push(domUtils.getNodeIndex(ci,ignoreTxt));
	                }
	                var firstIndex = 0;
	
	                if(ignoreTxt){
	                    if(node.nodeType == 3){
	                        var tmpNode = node.previousSibling;
	                        while(tmpNode && tmpNode.nodeType == 3){
	                            firstIndex += tmpNode.nodeValue.replace(fillCharReg,'').length;
	                            tmpNode = tmpNode.previousSibling;
	                        }
	                        firstIndex +=  (isStart ? me.startOffset : me.endOffset)// - (fillCharReg.test(node.nodeValue) ? 1 : 0 )
	                    }else{
	                        node =  node.childNodes[ isStart ? me.startOffset : me.endOffset];
	                        if(node){
	                            firstIndex = domUtils.getNodeIndex(node,ignoreTxt);
	                        }else{
	                            node = isStart ? me.startContainer : me.endContainer;
	                            var first = node.firstChild;
	                            while(first){
	                                if(domUtils.isFillChar(first)){
	                                    first = first.nextSibling;
	                                    continue;
	                                }
	                                firstIndex++;
	                                if(first.nodeType == 3){
	                                    while( first && first.nodeType == 3){
	                                        first = first.nextSibling;
	                                    }
	                                }else{
	                                    first = first.nextSibling;
	                                }
	                            }
	                        }
	                    }
	
	                }else{
	                    firstIndex = isStart ? domUtils.isFillChar(node) ? 0 : me.startOffset  : me.endOffset
	                }
	                if(firstIndex < 0){
	                    firstIndex = 0;
	                }
	                addrs.push(firstIndex);
	                return addrs;
	            }
	            addr.startAddress = getAddress(true);
	            if(!ignoreEnd){
	                addr.endAddress = me.collapsed ? [].concat(addr.startAddress) : getAddress();
	            }
	            return addr;
	        },
	
	        /**
	         * 保存
	         * @method createAddress
	         * @private
	         * @return { Boolean } 返回开始和结束的位置
	         * @example
	         * ```html
	         * <body>
	         *     <p>
	         *         aaaa
	         *         <em>
	         *             <!-- 选区开始 -->
	         *             bbbb
	         *             <!-- 选区结束 -->
	         *         </em>
	         *     </p>
	         *
	         *     <script>
	         *         var range = editor.selection.getRange();
	         *         range.moveToAddress({startAddress:[0,1,0,0],endAddress:[0,1,0,4]});
	         *         range.select();
	         *         //output: 'bbbb'
	         *         console.log(editor.selection.getText());
	         *     </script>
	         * </body>
	         * ```
	         */
	        moveToAddress : function(addr,ignoreEnd){
	            var me = this;
	            function getNode(address,isStart){
	                var tmpNode = me.document.body,
	                    parentNode,offset;
	                for(var i= 0,ci,l=address.length;i<l;i++){
	                    ci = address[i];
	                    parentNode = tmpNode;
	                    tmpNode = tmpNode.childNodes[ci];
	                    if(!tmpNode){
	                        offset = ci;
	                        break;
	                    }
	                }
	                if(isStart){
	                    if(tmpNode){
	                        me.setStartBefore(tmpNode)
	                    }else{
	                        me.setStart(parentNode,offset)
	                    }
	                }else{
	                    if(tmpNode){
	                        me.setEndBefore(tmpNode)
	                    }else{
	                        me.setEnd(parentNode,offset)
	                    }
	                }
	            }
	            getNode(addr.startAddress,true);
	            !ignoreEnd && addr.endAddress &&  getNode(addr.endAddress);
	            return me;
	        },
	
	        /**
	         * 判断给定的Range对象是否和当前Range对象表示的是同一个选区
	         * @method equals
	         * @param { UE.dom.Range } 需要判断的Range对象
	         * @return { Boolean } 如果给定的Range对象与当前Range对象表示的是同一个选区， 则返回true， 否则返回false
	         */
	        equals : function(rng){
	            for(var p in this){
	                if(this.hasOwnProperty(p)){
	                    if(this[p] !== rng[p])
	                        return false
	                }
	            }
	            return true;
	
	        },
	
	        /**
	         * 遍历range内的节点。每当遍历一个节点时， 都会执行参数项 doFn 指定的函数， 该函数的接受当前遍历的节点
	         * 作为其参数。
	         * @method traversal
	         * @param { Function }  doFn 对每个遍历的节点要执行的方法， 该方法接受当前遍历的节点作为其参数
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         *
	         * <body>
	         *
	         *     <!-- 选区开始 -->
	         *     <span></span>
	         *     <a></a>
	         *     <!-- 选区结束 -->
	         * </body>
	         *
	         * <script>
	         *
	         *     //output: <span></span><a></a>
	         *     console.log( range.cloneContents() );
	         *
	         *     range.traversal( function ( node ) {
	         *
	         *         if ( node.nodeType === 1 ) {
	         *             node.className = "test";
	         *         }
	         *
	         *     } );
	         *
	         *     //output: <span class="test"></span><a class="test"></a>
	         *     console.log( range.cloneContents() );
	         *
	         * </script>
	         * ```
	         */
	
	        /**
	         * 遍历range内的节点。
	         * 每当遍历一个节点时， 都会执行参数项 doFn 指定的函数， 该函数的接受当前遍历的节点
	         * 作为其参数。
	         * 可以通过参数项 filterFn 来指定一个过滤器， 只有符合该过滤器过滤规则的节点才会触
	         * 发doFn函数的执行
	         * @method traversal
	         * @param { Function } doFn 对每个遍历的节点要执行的方法， 该方法接受当前遍历的节点作为其参数
	         * @param { Function } filterFn 过滤器， 该函数接受当前遍历的节点作为参数， 如果该节点满足过滤
	         *                      规则， 请返回true， 该节点会触发doFn， 否则， 请返回false， 则该节点不
	         *                      会触发doFn。
	         * @return { UE.dom.Range } 当前range对象
	         * @see UE.dom.Range:traversal(Function)
	         * @example
	         * ```html
	         *
	         * <body>
	         *
	         *     <!-- 选区开始 -->
	         *     <span></span>
	         *     <a></a>
	         *     <!-- 选区结束 -->
	         * </body>
	         *
	         * <script>
	         *
	         *     //output: <span></span><a></a>
	         *     console.log( range.cloneContents() );
	         *
	         *     range.traversal( function ( node ) {
	         *
	         *         node.className = "test";
	         *
	         *     }, function ( node ) {
	         *          return node.nodeType === 1;
	         *     } );
	         *
	         *     //output: <span class="test"></span><a class="test"></a>
	         *     console.log( range.cloneContents() );
	         *
	         * </script>
	         * ```
	         */
	        traversal:function(doFn,filterFn){
	            if (this.collapsed)
	                return this;
	            var bookmark = this.createBookmark(),
	                end = bookmark.end,
	                current = domUtils.getNextDomNode(bookmark.start, false, filterFn);
	            while (current && current !== end && (domUtils.getPosition(current, end) & domUtils.POSITION_PRECEDING)) {
	                var tmpNode = domUtils.getNextDomNode(current,false,filterFn);
	                doFn(current);
	                current = tmpNode;
	            }
	            return this.moveToBookmark(bookmark);
	        }
	    };
	})();
	
	// core/Selection.js
	/**
	 * 选集
	 * @file
	 * @module UE.dom
	 * @class Selection
	 * @since 1.2.6.1
	 */
	
	/**
	 * 选区集合
	 * @unfile
	 * @module UE.dom
	 * @class Selection
	 */
	(function () {
	
	    function getBoundaryInformation( range, start ) {
	        var getIndex = domUtils.getNodeIndex;
	        range = range.duplicate();
	        range.collapse( start );
	        var parent = range.parentElement();
	        //如果节点里没有子节点，直接退出
	        if ( !parent.hasChildNodes() ) {
	            return  {container:parent, offset:0};
	        }
	        var siblings = parent.children,
	            child,
	            testRange = range.duplicate(),
	            startIndex = 0, endIndex = siblings.length - 1, index = -1,
	            distance;
	        while ( startIndex <= endIndex ) {
	            index = Math.floor( (startIndex + endIndex) / 2 );
	            child = siblings[index];
	            testRange.moveToElementText( child );
	            var position = testRange.compareEndPoints( 'StartToStart', range );
	            if ( position > 0 ) {
	                endIndex = index - 1;
	            } else if ( position < 0 ) {
	                startIndex = index + 1;
	            } else {
	                //trace:1043
	                return  {container:parent, offset:getIndex( child )};
	            }
	        }
	        if ( index == -1 ) {
	            testRange.moveToElementText( parent );
	            testRange.setEndPoint( 'StartToStart', range );
	            distance = testRange.text.replace( /(\r\n|\r)/g, '\n' ).length;
	            siblings = parent.childNodes;
	            if ( !distance ) {
	                child = siblings[siblings.length - 1];
	                return  {container:child, offset:child.nodeValue.length};
	            }
	
	            var i = siblings.length;
	            while ( distance > 0 ){
	                distance -= siblings[ --i ].nodeValue.length;
	            }
	            return {container:siblings[i], offset:-distance};
	        }
	        testRange.collapse( position > 0 );
	        testRange.setEndPoint( position > 0 ? 'StartToStart' : 'EndToStart', range );
	        distance = testRange.text.replace( /(\r\n|\r)/g, '\n' ).length;
	        if ( !distance ) {
	            return  dtd.$empty[child.tagName] || dtd.$nonChild[child.tagName] ?
	            {container:parent, offset:getIndex( child ) + (position > 0 ? 0 : 1)} :
	            {container:child, offset:position > 0 ? 0 : child.childNodes.length}
	        }
	        while ( distance > 0 ) {
	            try {
	                var pre = child;
	                child = child[position > 0 ? 'previousSibling' : 'nextSibling'];
	                distance -= child.nodeValue.length;
	            } catch ( e ) {
	                return {container:parent, offset:getIndex( pre )};
	            }
	        }
	        return  {container:child, offset:position > 0 ? -distance : child.nodeValue.length + distance}
	    }
	
	    /**
	     * 将ieRange转换为Range对象
	     * @param {Range}   ieRange    ieRange对象
	     * @param {Range}   range      Range对象
	     * @return  {Range}  range       返回转换后的Range对象
	     */
	    function transformIERangeToRange( ieRange, range ) {
	        if ( ieRange.item ) {
	            range.selectNode( ieRange.item( 0 ) );
	        } else {
	            var bi = getBoundaryInformation( ieRange, true );
	            range.setStart( bi.container, bi.offset );
	            if ( ieRange.compareEndPoints( 'StartToEnd', ieRange ) != 0 ) {
	                bi = getBoundaryInformation( ieRange, false );
	                range.setEnd( bi.container, bi.offset );
	            }
	        }
	        return range;
	    }
	
	    /**
	     * 获得ieRange
	     * @param {Selection} sel    Selection对象
	     * @return {ieRange}    得到ieRange
	     */
	    function _getIERange( sel ) {
	        var ieRange;
	        //ie下有可能报错
	        try {
	            ieRange = sel.getNative().createRange();
	        } catch ( e ) {
	            return null;
	        }
	        var el = ieRange.item ? ieRange.item( 0 ) : ieRange.parentElement();
	        if ( ( el.ownerDocument || el ) === sel.document ) {
	            return ieRange;
	        }
	        return null;
	    }
	
	    var Selection = dom.Selection = function ( doc ) {
	        var me = this, iframe;
	        me.document = doc;
	        if ( browser.ie9below ) {
	            iframe = domUtils.getWindow( doc ).frameElement;
	            domUtils.on( iframe, 'beforedeactivate', function () {
	                me._bakIERange = me.getIERange();
	            } );
	            domUtils.on( iframe, 'activate', function () {
	                try {
	                    if ( !_getIERange( me ) && me._bakIERange ) {
	                        me._bakIERange.select();
	                    }
	                } catch ( ex ) {
	                }
	                me._bakIERange = null;
	            } );
	        }
	        iframe = doc = null;
	    };
	
	    Selection.prototype = {
	
	        rangeInBody : function(rng,txtRange){
	            var node = browser.ie9below || txtRange ? rng.item ? rng.item() : rng.parentElement() : rng.startContainer;
	
	            return node === this.document.body || domUtils.inDoc(node,this.document);
	        },
	
	        /**
	         * 获取原生seleciton对象
	         * @method getNative
	         * @return { Object } 获得selection对象
	         * @example
	         * ```javascript
	         * editor.selection.getNative();
	         * ```
	         */
	        getNative:function () {
	            var doc = this.document;
	            try {
	                return !doc ? null : browser.ie9below ? doc.selection : domUtils.getWindow( doc ).getSelection();
	            } catch ( e ) {
	                return null;
	            }
	        },
	
	        /**
	         * 获得ieRange
	         * @method getIERange
	         * @return { Object } 返回ie原生的Range
	         * @example
	         * ```javascript
	         * editor.selection.getIERange();
	         * ```
	         */
	        getIERange:function () {
	            var ieRange = _getIERange( this );
	            if ( !ieRange ) {
	                if ( this._bakIERange ) {
	                    return this._bakIERange;
	                }
	            }
	            return ieRange;
	        },
	
	        /**
	         * 缓存当前选区的range和选区的开始节点
	         * @method cache
	         */
	        cache:function () {
	            this.clear();
	            this._cachedRange = this.getRange();
	            this._cachedStartElement = this.getStart();
	            this._cachedStartElementPath = this.getStartElementPath();
	        },
	
	        /**
	         * 获取选区开始位置的父节点到body
	         * @method getStartElementPath
	         * @return { Array } 返回父节点集合
	         * @example
	         * ```javascript
	         * editor.selection.getStartElementPath();
	         * ```
	         */
	        getStartElementPath:function () {
	            if ( this._cachedStartElementPath ) {
	                return this._cachedStartElementPath;
	            }
	            var start = this.getStart();
	            if ( start ) {
	                return domUtils.findParents( start, true, null, true )
	            }
	            return [];
	        },
	
	        /**
	         * 清空缓存
	         * @method clear
	         */
	        clear:function () {
	            this._cachedStartElementPath = this._cachedRange = this._cachedStartElement = null;
	        },
	
	        /**
	         * 编辑器是否得到了选区
	         * @method isFocus
	         */
	        isFocus:function () {
	            try {
	                if(browser.ie9below){
	
	                    var nativeRange = _getIERange(this);
	                    return !!(nativeRange && this.rangeInBody(nativeRange));
	                }else{
	                    return !!this.getNative().rangeCount;
	                }
	            } catch ( e ) {
	                return false;
	            }
	
	        },
	
	        /**
	         * 获取选区对应的Range
	         * @method getRange
	         * @return { Object } 得到Range对象
	         * @example
	         * ```javascript
	         * editor.selection.getRange();
	         * ```
	         */
	        getRange:function () {
	            var me = this;
	            function optimze( range ) {
	                var child = me.document.body.firstChild,
	                    collapsed = range.collapsed;
	                while ( child && child.firstChild ) {
	                    range.setStart( child, 0 );
	                    child = child.firstChild;
	                }
	                if ( !range.startContainer ) {
	                    range.setStart( me.document.body, 0 )
	                }
	                if ( collapsed ) {
	                    range.collapse( true );
	                }
	            }
	
	            if ( me._cachedRange != null ) {
	                return this._cachedRange;
	            }
	            var range = new baidu.editor.dom.Range( me.document );
	
	            if ( browser.ie9below ) {
	                var nativeRange = me.getIERange();
	                if ( nativeRange ) {
	                    //备份的_bakIERange可能已经实效了，dom树发生了变化比如从源码模式切回来，所以try一下，实效就放到body开始位置
	                    try{
	                        transformIERangeToRange( nativeRange, range );
	                    }catch(e){
	                        optimze( range );
	                    }
	
	                } else {
	                    optimze( range );
	                }
	            } else {
	                var sel = me.getNative();
	                if ( sel && sel.rangeCount ) {
	                    var firstRange = sel.getRangeAt( 0 );
	                    var lastRange = sel.getRangeAt( sel.rangeCount - 1 );
	                    range.setStart( firstRange.startContainer, firstRange.startOffset ).setEnd( lastRange.endContainer, lastRange.endOffset );
	                    if ( range.collapsed && domUtils.isBody( range.startContainer ) && !range.startOffset ) {
	                        optimze( range );
	                    }
	                } else {
	                    //trace:1734 有可能已经不在dom树上了，标识的节点
	                    if ( this._bakRange && domUtils.inDoc( this._bakRange.startContainer, this.document ) ){
	                        return this._bakRange;
	                    }
	                    optimze( range );
	                }
	            }
	            return this._bakRange = range;
	        },
	
	        /**
	         * 获取开始元素，用于状态反射
	         * @method getStart
	         * @return { Element } 获得开始元素
	         * @example
	         * ```javascript
	         * editor.selection.getStart();
	         * ```
	         */
	        getStart:function () {
	            if ( this._cachedStartElement ) {
	                return this._cachedStartElement;
	            }
	            var range = browser.ie9below ? this.getIERange() : this.getRange(),
	                tmpRange,
	                start, tmp, parent;
	            if ( browser.ie9below ) {
	                if ( !range ) {
	                    //todo 给第一个值可能会有问题
	                    return this.document.body.firstChild;
	                }
	                //control元素
	                if ( range.item ){
	                    return range.item( 0 );
	                }
	                tmpRange = range.duplicate();
	                //修正ie下<b>x</b>[xx] 闭合后 <b>x|</b>xx
	                tmpRange.text.length > 0 && tmpRange.moveStart( 'character', 1 );
	                tmpRange.collapse( 1 );
	                start = tmpRange.parentElement();
	                parent = tmp = range.parentElement();
	                while ( tmp = tmp.parentNode ) {
	                    if ( tmp == start ) {
	                        start = parent;
	                        break;
	                    }
	                }
	            } else {
	                range.shrinkBoundary();
	                start = range.startContainer;
	                if ( start.nodeType == 1 && start.hasChildNodes() ){
	                    start = start.childNodes[Math.min( start.childNodes.length - 1, range.startOffset )];
	                }
	                if ( start.nodeType == 3 ){
	                    return start.parentNode;
	                }
	            }
	            return start;
	        },
	
	        /**
	         * 得到选区中的文本
	         * @method getText
	         * @return { String } 选区中包含的文本
	         * @example
	         * ```javascript
	         * editor.selection.getText();
	         * ```
	         */
	        getText:function () {
	            var nativeSel, nativeRange;
	            if ( this.isFocus() && (nativeSel = this.getNative()) ) {
	                nativeRange = browser.ie9below ? nativeSel.createRange() : nativeSel.getRangeAt( 0 );
	                return browser.ie9below ? nativeRange.text : nativeRange.toString();
	            }
	            return '';
	        },
	
	        /**
	         * 清除选区
	         * @method clearRange
	         * @example
	         * ```javascript
	         * editor.selection.clearRange();
	         * ```
	         */
	        clearRange : function(){
	            this.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();
	        }
	    };
	})();
	
	// core/Editor.js
	/**
	 * 编辑器主类，包含编辑器提供的大部分公用接口
	 * @file
	 * @module UE
	 * @class Editor
	 * @since 1.2.6.1
	 */
	
	/**
	 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
	 * @unfile
	 * @module UE
	 */
	
	/**
	 * UEditor的核心类，为用户提供与编辑器交互的接口。
	 * @unfile
	 * @module UE
	 * @class Editor
	 */
	
	(function () {
	    var uid = 0, _selectionChangeTimer;
	
	    /**
	     * 获取编辑器的html内容，赋值到编辑器所在表单的textarea文本域里面
	     * @private
	     * @method setValue
	     * @param { UE.Editor } editor 编辑器事例
	     */
	    function setValue(form, editor) {
	        var textarea;
	        if (editor.textarea) {
	            if (utils.isString(editor.textarea)) {
	                for (var i = 0, ti, tis = domUtils.getElementsByTagName(form, 'textarea'); ti = tis[i++];) {
	                    if (ti.id == 'ueditor_textarea_' + editor.options.textarea) {
	                        textarea = ti;
	                        break;
	                    }
	                }
	            } else {
	                textarea = editor.textarea;
	            }
	        }
	        if (!textarea) {
	            form.appendChild(textarea = domUtils.createElement(document, 'textarea', {
	                'name': editor.options.textarea,
	                'id': 'ueditor_textarea_' + editor.options.textarea,
	                'style': "display:none"
	            }));
	            //不要产生多个textarea
	            editor.textarea = textarea;
	        }
	        !textarea.getAttribute('name') && textarea.setAttribute('name', editor.options.textarea );
	        textarea.value = editor.hasContents() ?
	            (editor.options.allHtmlEnabled ? editor.getAllHtml() : editor.getContent(null, null, true)) :
	            ''
	    }
	    function loadPlugins(me){
	        //初始化插件
	        for (var pi in UE.plugins) {
	            UE.plugins[pi].call(me);
	        }
	
	    }
	    function checkCurLang(I18N){
	        for(var lang in I18N){
	            return lang
	        }
	    }
	
	    function langReadied(me){
	        me.langIsReady = true;
	
	        me.fireEvent("langReady");
	    }
	
	    /**
	     * 编辑器准备就绪后会触发该事件
	     * @module UE
	     * @class Editor
	     * @event ready
	     * @remind render方法执行完成之后,会触发该事件
	     * @remind
	     * @example
	     * ```javascript
	     * editor.addListener( 'ready', function( editor ) {
	     *     editor.execCommand( 'focus' ); //编辑器家在完成后，让编辑器拿到焦点
	     * } );
	     * ```
	     */
	    /**
	     * 执行destroy方法,会触发该事件
	     * @module UE
	     * @class Editor
	     * @event destroy
	     * @see UE.Editor:destroy()
	     */
	    /**
	     * 执行reset方法,会触发该事件
	     * @module UE
	     * @class Editor
	     * @event reset
	     * @see UE.Editor:reset()
	     */
	    /**
	     * 执行focus方法,会触发该事件
	     * @module UE
	     * @class Editor
	     * @event focus
	     * @see UE.Editor:focus(Boolean)
	     */
	    /**
	     * 语言加载完成会触发该事件
	     * @module UE
	     * @class Editor
	     * @event langReady
	     */
	    /**
	     * 运行命令之后会触发该命令
	     * @module UE
	     * @class Editor
	     * @event beforeExecCommand
	     */
	    /**
	     * 运行命令之后会触发该命令
	     * @module UE
	     * @class Editor
	     * @event afterExecCommand
	     */
	    /**
	     * 运行命令之前会触发该命令
	     * @module UE
	     * @class Editor
	     * @event firstBeforeExecCommand
	     */
	    /**
	     * 在getContent方法执行之前会触发该事件
	     * @module UE
	     * @class Editor
	     * @event beforeGetContent
	     * @see UE.Editor:getContent()
	     */
	    /**
	     * 在getContent方法执行之后会触发该事件
	     * @module UE
	     * @class Editor
	     * @event afterGetContent
	     * @see UE.Editor:getContent()
	     */
	    /**
	     * 在getAllHtml方法执行时会触发该事件
	     * @module UE
	     * @class Editor
	     * @event getAllHtml
	     * @see UE.Editor:getAllHtml()
	     */
	    /**
	     * 在setContent方法执行之前会触发该事件
	     * @module UE
	     * @class Editor
	     * @event beforeSetContent
	     * @see UE.Editor:setContent(String)
	     */
	    /**
	     * 在setContent方法执行之后会触发该事件
	     * @module UE
	     * @class Editor
	     * @event afterSetContent
	     * @see UE.Editor:setContent(String)
	     */
	    /**
	     * 每当编辑器内部选区发生改变时，将触发该事件
	     * @event selectionchange
	     * @warning 该事件的触发非常频繁，不建议在该事件的处理过程中做重量级的处理
	     * @example
	     * ```javascript
	     * editor.addListener( 'selectionchange', function( editor ) {
	     *     console.log('选区发生改变');
	     * }
	     */
	    /**
	     * 在所有selectionchange的监听函数执行之前，会触发该事件
	     * @module UE
	     * @class Editor
	     * @event beforeSelectionChange
	     * @see UE.Editor:selectionchange
	     */
	    /**
	     * 在所有selectionchange的监听函数执行完之后，会触发该事件
	     * @module UE
	     * @class Editor
	     * @event afterSelectionChange
	     * @see UE.Editor:selectionchange
	     */
	    /**
	     * 编辑器内容发生改变时会触发该事件
	     * @module UE
	     * @class Editor
	     * @event contentChange
	     */
	
	
	    /**
	     * 以默认参数构建一个编辑器实例
	     * @constructor
	     * @remind 通过 改构造方法实例化的编辑器,不带ui层.需要render到一个容器,编辑器实例才能正常渲染到页面
	     * @example
	     * ```javascript
	     * var editor = new UE.Editor();
	     * editor.execCommand('blod');
	     * ```
	     * @see UE.Config
	     */
	
	    /**
	     * 以给定的参数集合创建一个编辑器实例，对于未指定的参数，将应用默认参数。
	     * @constructor
	     * @remind 通过 改构造方法实例化的编辑器,不带ui层.需要render到一个容器,编辑器实例才能正常渲染到页面
	     * @param { Object } setting 创建编辑器的参数
	     * @example
	     * ```javascript
	     * var editor = new UE.Editor();
	     * editor.execCommand('blod');
	     * ```
	     * @see UE.Config
	     */
	    var Editor = UE.Editor = function (options) {
	        var me = this;
	        me.uid = uid++;
	        EventBase.call(me);
	        me.commands = {};
	        me.options = utils.extend(utils.clone(options || {}), UEDITOR_CONFIG, true);
	        me.shortcutkeys = {};
	        me.inputRules = [];
	        me.outputRules = [];
	        //设置默认的常用属性
	        me.setOpt(Editor.defaultOptions(me));
	
	        /* 尝试异步加载后台配置 */
	        me.loadServerConfig();
	
	        if(!utils.isEmptyObject(UE.I18N)){
	            //修改默认的语言类型
	            me.options.lang = checkCurLang(UE.I18N);
	            UE.plugin.load(me);
	            langReadied(me);
	
	        }else{
	            utils.loadFile(document, {
	                src: me.options.langPath + me.options.lang + "/" + me.options.lang + ".js",
	                tag: "script",
	                type: "text/javascript",
	                defer: "defer"
	            }, function () {
	                UE.plugin.load(me);
	                langReadied(me);
	            });
	        }
	
	        UE.instants['ueditorInstant' + me.uid] = me;
	    };
	    Editor.prototype = {
	         registerCommand : function(name,obj){
	            this.commands[name] = obj;
	         },
	        /**
	         * 编辑器对外提供的监听ready事件的接口， 通过调用该方法，达到的效果与监听ready事件是一致的
	         * @method ready
	         * @param { Function } fn 编辑器ready之后所执行的回调, 如果在注册事件之前编辑器已经ready，将会
	         * 立即触发该回调。
	         * @remind 需要等待编辑器加载完成后才能执行的代码,可以使用该方法传入
	         * @example
	         * ```javascript
	         * editor.ready( function( editor ) {
	         *     editor.setContent('初始化完毕');
	         * } );
	         * ```
	         * @see UE.Editor.event:ready
	         */
	        ready: function (fn) {
	            var me = this;
	            if (fn) {
	                me.isReady ? fn.apply(me) : me.addListener('ready', fn);
	            }
	        },
	
	        /**
	         * 该方法是提供给插件里面使用，设置配置项默认值
	         * @method setOpt
	         * @warning 三处设置配置项的优先级: 实例化时传入参数 > setOpt()设置 > config文件里设置
	         * @warning 该方法仅供编辑器插件内部和编辑器初始化时调用，其他地方不能调用。
	         * @param { String } key 编辑器的可接受的选项名称
	         * @param { * } val  该选项可接受的值
	         * @example
	         * ```javascript
	         * editor.setOpt( 'initContent', '欢迎使用编辑器' );
	         * ```
	         */
	
	        /**
	         * 该方法是提供给插件里面使用，以{key:value}集合的方式设置插件内用到的配置项默认值
	         * @method setOpt
	         * @warning 三处设置配置项的优先级: 实例化时传入参数 > setOpt()设置 > config文件里设置
	         * @warning 该方法仅供编辑器插件内部和编辑器初始化时调用，其他地方不能调用。
	         * @param { Object } options 将要设置的选项的键值对对象
	         * @example
	         * ```javascript
	         * editor.setOpt( {
	         *     'initContent': '欢迎使用编辑器'
	         * } );
	         * ```
	         */
	        setOpt: function (key, val) {
	            var obj = {};
	            if (utils.isString(key)) {
	                obj[key] = val
	            } else {
	                obj = key;
	            }
	            utils.extend(this.options, obj, true);
	        },
	        getOpt:function(key){
	            return this.options[key]
	        },
	        /**
	         * 销毁编辑器实例，使用textarea代替
	         * @method destroy
	         * @example
	         * ```javascript
	         * editor.destroy();
	         * ```
	         */
	        destroy: function () {
	
	            var me = this;
	            me.fireEvent('destroy');
	            var container = me.container.parentNode;
	            var textarea = me.textarea;
	            if (!textarea) {
	                textarea = document.createElement('textarea');
	                container.parentNode.insertBefore(textarea, container);
	            } else {
	                textarea.style.display = ''
	            }
	
	            textarea.style.width = me.iframe.offsetWidth + 'px';
	            textarea.style.height = me.iframe.offsetHeight + 'px';
	            textarea.value = me.getContent();
	            textarea.id = me.key;
	            container.innerHTML = '';
	            domUtils.remove(container);
	            var key = me.key;
	            //trace:2004
	            for (var p in me) {
	                if (me.hasOwnProperty(p)) {
	                    delete this[p];
	                }
	            }
	            UE.delEditor(key);
	        },
	
	        /**
	         * 渲染编辑器的DOM到指定容器
	         * @method render
	         * @param { String } containerId 指定一个容器ID
	         * @remind 执行该方法,会触发ready事件
	         * @warning 必须且只能调用一次
	         */
	
	        /**
	         * 渲染编辑器的DOM到指定容器
	         * @method render
	         * @param { Element } containerDom 直接指定容器对象
	         * @remind 执行该方法,会触发ready事件
	         * @warning 必须且只能调用一次
	         */
	        render: function (container) {
	            var me = this,
	                options = me.options,
	                getStyleValue=function(attr){
	                    return parseInt(domUtils.getComputedStyle(container,attr));
	                };
	            if (utils.isString(container)) {
	                container = document.getElementById(container);
	            }
	            if (container) {
	                if(options.initialFrameWidth){
	                    options.minFrameWidth = options.initialFrameWidth
	                }else{
	                    options.minFrameWidth = options.initialFrameWidth = container.offsetWidth;
	                }
	                if(options.initialFrameHeight){
	                    options.minFrameHeight = options.initialFrameHeight
	                }else{
	                    options.initialFrameHeight = options.minFrameHeight = container.offsetHeight;
	                }
	
	                container.style.width = /%$/.test(options.initialFrameWidth) ?  '100%' : options.initialFrameWidth-
	                    getStyleValue("padding-left")- getStyleValue("padding-right") +'px';
	                container.style.height = /%$/.test(options.initialFrameHeight) ?  '100%' : options.initialFrameHeight -
	                    getStyleValue("padding-top")- getStyleValue("padding-bottom") +'px';
	
	                container.style.zIndex = options.zIndex;
	
	                var html = ( ie && browser.version < 9  ? '' : '<!DOCTYPE html>') +
	                    '<html xmlns=\'http://www.w3.org/1999/xhtml\' class=\'view\' ><head>' +
	                    '<style type=\'text/css\'>' +
	                    //设置四周的留边
	                    '.view{padding:0;word-wrap:break-word;cursor:text;height:90%;}\n' +
	                    //设置默认字体和字号
	                    //font-family不能呢随便改，在safari下fillchar会有解析问题
	                    'body{margin:8px;font-family:sans-serif;font-size:16px;}' +
	                    //设置段落间距
	                    'p{margin:5px 0;}</style>' +
	                    ( options.iframeCssUrl ? '<link rel=\'stylesheet\' type=\'text/css\' href=\'' + utils.unhtml(options.iframeCssUrl) + '\'/>' : '' ) +
	                    (options.initialStyle ? '<style>' + options.initialStyle + '</style>' : '') +
	                    '</head><body class=\'view\' ></body>' +
	                    '<script type=\'text/javascript\' ' + (ie ? 'defer=\'defer\'' : '' ) +' id=\'_initialScript\'>' +
	                    'setTimeout(function(){editor = window.parent.UE.instants[\'ueditorInstant' + me.uid + '\'];editor._setup(document);},0);' +
	                    'var _tmpScript = document.getElementById(\'_initialScript\');_tmpScript.parentNode.removeChild(_tmpScript);</script></html>';
	                container.appendChild(domUtils.createElement(document, 'iframe', {
	                    id: 'ueditor_' + me.uid,
	                    width: "100%",
	                    height: "100%",
	                    frameborder: "0",
	                    //先注释掉了，加的原因忘记了，但开启会直接导致全屏模式下内容多时不会出现滚动条
	//                    scrolling :'no',
	                    src: 'javascript:void(function(){document.open();' + (options.customDomain && document.domain != location.hostname ?  'document.domain="' + document.domain + '";' : '') +
	                        'document.write("' + html + '");document.close();}())'
	                }));
	                container.style.overflow = 'hidden';
	                //解决如果是给定的百分比，会导致高度算不对的问题
	                setTimeout(function(){
	                    if( /%$/.test(options.initialFrameWidth)){
	                        options.minFrameWidth = options.initialFrameWidth = container.offsetWidth;
	                        //如果这里给定宽度，会导致ie在拖动窗口大小时，编辑区域不随着变化
	//                        container.style.width = options.initialFrameWidth + 'px';
	                    }
	                    if(/%$/.test(options.initialFrameHeight)){
	                        options.minFrameHeight = options.initialFrameHeight = container.offsetHeight;
	                        container.style.height = options.initialFrameHeight + 'px';
	                    }
	                })
	            }
	        },
	
	        /**
	         * 编辑器初始化
	         * @method _setup
	         * @private
	         * @param { Element } doc 编辑器Iframe中的文档对象
	         */
	        _setup: function (doc) {
	
	            var me = this,
	                options = me.options;
	            if (ie) {
	                doc.body.disabled = true;
	                doc.body.contentEditable = true;
	                doc.body.disabled = false;
	            } else {
	                doc.body.contentEditable = true;
	            }
	            doc.body.spellcheck = false;
	            me.document = doc;
	            me.window = doc.defaultView || doc.parentWindow;
	            me.iframe = me.window.frameElement;
	            me.body = doc.body;
	            me.selection = new dom.Selection(doc);
	            //gecko初始化就能得到range,无法判断isFocus了
	            var geckoSel;
	            if (browser.gecko && (geckoSel = this.selection.getNative())) {
	                geckoSel.removeAllRanges();
	            }
	            this._initEvents();
	            //为form提交提供一个隐藏的textarea
	            for (var form = this.iframe.parentNode; !domUtils.isBody(form); form = form.parentNode) {
	                if (form.tagName == 'FORM') {
	                    me.form = form;
	                    if(me.options.autoSyncData){
	                        domUtils.on(me.window,'blur',function(){
	                            setValue(form,me);
	                        });
	                    }else{
	                        domUtils.on(form, 'submit', function () {
	                            setValue(this, me);
	                        });
	                    }
	                    break;
	                }
	            }
	            if (options.initialContent) {
	                if (options.autoClearinitialContent) {
	                    var oldExecCommand = me.execCommand;
	                    me.execCommand = function () {
	                        me.fireEvent('firstBeforeExecCommand');
	                        return oldExecCommand.apply(me, arguments);
	                    };
	                    this._setDefaultContent(options.initialContent);
	                } else
	                    this.setContent(options.initialContent, false, true);
	            }
	
	            //编辑器不能为空内容
	
	            if (domUtils.isEmptyNode(me.body)) {
	                me.body.innerHTML = '<p>' + (browser.ie ? '' : '<br/>') + '</p>';
	            }
	            //如果要求focus, 就把光标定位到内容开始
	            if (options.focus) {
	                setTimeout(function () {
	                    me.focus(me.options.focusInEnd);
	                    //如果自动清除开着，就不需要做selectionchange;
	                    !me.options.autoClearinitialContent && me._selectionChange();
	                }, 0);
	            }
	            if (!me.container) {
	                me.container = this.iframe.parentNode;
	            }
	            if (options.fullscreen && me.ui) {
	                me.ui.setFullScreen(true);
	            }
	
	            try {
	                me.document.execCommand('2D-position', false, false);
	            } catch (e) {
	            }
	            try {
	                me.document.execCommand('enableInlineTableEditing', false, false);
	            } catch (e) {
	            }
	            try {
	                me.document.execCommand('enableObjectResizing', false, false);
	            } catch (e) {
	            }
	
	            //挂接快捷键
	            me._bindshortcutKeys();
	            me.isReady = 1;
	            me.fireEvent('ready');
	            options.onready && options.onready.call(me);
	            if (!browser.ie9below) {
	                domUtils.on(me.window, ['blur', 'focus'], function (e) {
	                    //chrome下会出现alt+tab切换时，导致选区位置不对
	                    if (e.type == 'blur') {
	                        me._bakRange = me.selection.getRange();
	                        try {
	                            me._bakNativeRange = me.selection.getNative().getRangeAt(0);
	                            me.selection.getNative().removeAllRanges();
	                        } catch (e) {
	                            me._bakNativeRange = null;
	                        }
	
	                    } else {
	                        try {
	                            me._bakRange && me._bakRange.select();
	                        } catch (e) {
	                        }
	                    }
	                });
	            }
	            //trace:1518 ff3.6body不够寛，会导致点击空白处无法获得焦点
	            if (browser.gecko && browser.version <= 10902) {
	                //修复ff3.6初始化进来，不能点击获得焦点
	                me.body.contentEditable = false;
	                setTimeout(function () {
	                    me.body.contentEditable = true;
	                }, 100);
	                setInterval(function () {
	                    me.body.style.height = me.iframe.offsetHeight - 20 + 'px'
	                }, 100)
	            }
	
	            !options.isShow && me.setHide();
	            options.readonly && me.setDisabled();
	        },
	
	        /**
	         * 同步数据到编辑器所在的form
	         * 从编辑器的容器节点向上查找form元素，若找到，就同步编辑内容到找到的form里，为提交数据做准备，主要用于是手动提交的情况
	         * 后台取得数据的键值，使用你容器上的name属性，如果没有就使用参数里的textarea项
	         * @method sync
	         * @example
	         * ```javascript
	         * editor.sync();
	         * form.sumbit(); //form变量已经指向了form元素
	         * ```
	         */
	
	        /**
	         * 根据传入的formId，在页面上查找要同步数据的表单，若找到，就同步编辑内容到找到的form里，为提交数据做准备
	         * 后台取得数据的键值，该键值默认使用给定的编辑器容器的name属性，如果没有name属性则使用参数项里给定的“textarea”项
	         * @method sync
	         * @param { String } formID 指定一个要同步数据的form的id,编辑器的数据会同步到你指定form下
	         */
	        sync: function (formId) {
	            var me = this,
	                form = formId ? document.getElementById(formId) :
	                    domUtils.findParent(me.iframe.parentNode, function (node) {
	                        return node.tagName == 'FORM'
	                    }, true);
	            form && setValue(form, me);
	        },
	
	        /**
	         * 设置编辑器高度
	         * @method setHeight
	         * @remind 当配置项autoHeightEnabled为真时,该方法无效
	         * @param { Number } number 设置的高度值，纯数值，不带单位
	         * @example
	         * ```javascript
	         * editor.setHeight(number);
	         * ```
	         */
	        setHeight: function (height,notSetHeight) {
	            if (height !== parseInt(this.iframe.parentNode.style.height)) {
	                this.iframe.parentNode.style.height = height + 'px';
	            }
	            !notSetHeight && (this.options.minFrameHeight = this.options.initialFrameHeight = height);
	            this.body.style.height = height + 'px';
	            !notSetHeight && this.trigger('setHeight')
	        },
	
	        /**
	         * 为编辑器的编辑命令提供快捷键
	         * 这个接口是为插件扩展提供的接口,主要是为新添加的插件，如果需要添加快捷键，所提供的接口
	         * @method addshortcutkey
	         * @param { Object } keyset 命令名和快捷键键值对对象，多个按钮的快捷键用“＋”分隔
	         * @example
	         * ```javascript
	         * editor.addshortcutkey({
	         *     "Bold" : "ctrl+66",//^B
	         *     "Italic" : "ctrl+73", //^I
	         * });
	         * ```
	         */
	        /**
	         * 这个接口是为插件扩展提供的接口,主要是为新添加的插件，如果需要添加快捷键，所提供的接口
	         * @method addshortcutkey
	         * @param { String } cmd 触发快捷键时，响应的命令
	         * @param { String } keys 快捷键的字符串，多个按钮用“＋”分隔
	         * @example
	         * ```javascript
	         * editor.addshortcutkey("Underline", "ctrl+85"); //^U
	         * ```
	         */
	        addshortcutkey: function (cmd, keys) {
	            var obj = {};
	            if (keys) {
	                obj[cmd] = keys
	            } else {
	                obj = cmd;
	            }
	            utils.extend(this.shortcutkeys, obj)
	        },
	
	        /**
	         * 对编辑器设置keydown事件监听，绑定快捷键和命令，当快捷键组合触发成功，会响应对应的命令
	         * @method _bindshortcutKeys
	         * @private
	         */
	        _bindshortcutKeys: function () {
	            var me = this, shortcutkeys = this.shortcutkeys;
	            me.addListener('keydown', function (type, e) {
	                var keyCode = e.keyCode || e.which;
	                for (var i in shortcutkeys) {
	                    var tmp = shortcutkeys[i].split(',');
	                    for (var t = 0, ti; ti = tmp[t++];) {
	                        ti = ti.split(':');
	                        var key = ti[0], param = ti[1];
	                        if (/^(ctrl)(\+shift)?\+(\d+)$/.test(key.toLowerCase()) || /^(\d+)$/.test(key)) {
	                            if (( (RegExp.$1 == 'ctrl' ? (e.ctrlKey || e.metaKey) : 0)
	                                && (RegExp.$2 != "" ? e[RegExp.$2.slice(1) + "Key"] : 1)
	                                && keyCode == RegExp.$3
	                                ) ||
	                                keyCode == RegExp.$1
	                                ) {
	                                if (me.queryCommandState(i,param) != -1)
	                                    me.execCommand(i, param);
	                                domUtils.preventDefault(e);
	                            }
	                        }
	                    }
	
	                }
	            });
	        },
	
	        /**
	         * 获取编辑器的内容
	         * @method getContent
	         * @warning 该方法获取到的是经过编辑器内置的过滤规则进行过滤后得到的内容
	         * @return { String } 编辑器的内容字符串, 如果编辑器的内容为空，或者是空的标签内容（如:”&lt;p&gt;&lt;br/&gt;&lt;/p&gt;“）， 则返回空字符串
	         * @example
	         * ```javascript
	         * //编辑器html内容:<p>1<strong>2<em>34</em>5</strong>6</p>
	         * var content = editor.getContent(); //返回值:<p>1<strong>2<em>34</em>5</strong>6</p>
	         * ```
	         */
	
	        /**
	         * 获取编辑器的内容。 可以通过参数定义编辑器内置的判空规则
	         * @method getContent
	         * @param { Function } fn 自定的判空规则， 要求该方法返回一个boolean类型的值，
	         *                      代表当前编辑器的内容是否空，
	         *                      如果返回true， 则该方法将直接返回空字符串；如果返回false，则编辑器将返回
	         *                      经过内置过滤规则处理后的内容。
	         * @remind 该方法在处理包含有初始化内容的时候能起到很好的作用。
	         * @warning 该方法获取到的是经过编辑器内置的过滤规则进行过滤后得到的内容
	         * @return { String } 编辑器的内容字符串
	         * @example
	         * ```javascript
	         * // editor 是一个编辑器的实例
	         * var content = editor.getContent( function ( editor ) {
	         *      return editor.body.innerHTML === '欢迎使用UEditor'; //返回空字符串
	         * } );
	         * ```
	         */
	        getContent: function (cmd, fn,notSetCursor,ignoreBlank,formatter) {
	            var me = this;
	            if (cmd && utils.isFunction(cmd)) {
	                fn = cmd;
	                cmd = '';
	            }
	            if (fn ? !fn() : !this.hasContents()) {
	                return '';
	            }
	            me.fireEvent('beforegetcontent');
	            var root = UE.htmlparser(me.body.innerHTML,ignoreBlank);
	            me.filterOutputRule(root);
	            me.fireEvent('aftergetcontent', cmd,root);
	            return  root.toHtml(formatter);
	        },
	
	        /**
	         * 取得完整的html代码，可以直接显示成完整的html文档
	         * @method getAllHtml
	         * @return { String } 编辑器的内容html文档字符串
	         * @eaxmple
	         * ```javascript
	         * editor.getAllHtml(); //返回格式大致是: <html><head>...</head><body>...</body></html>
	         * ```
	         */
	        getAllHtml: function () {
	            var me = this,
	                headHtml = [],
	                html = '';
	            me.fireEvent('getAllHtml', headHtml);
	            if (browser.ie && browser.version > 8) {
	                var headHtmlForIE9 = '';
	                utils.each(me.document.styleSheets, function (si) {
	                    headHtmlForIE9 += ( si.href ? '<link rel="stylesheet" type="text/css" href="' + si.href + '" />' : '<style>' + si.cssText + '</style>');
	                });
	                utils.each(me.document.getElementsByTagName('script'), function (si) {
	                    headHtmlForIE9 += si.outerHTML;
	                });
	
	            }
	            return '<html><head>' + (me.options.charset ? '<meta http-equiv="Content-Type" content="text/html; charset=' + me.options.charset + '"/>' : '')
	                + (headHtmlForIE9 || me.document.getElementsByTagName('head')[0].innerHTML) + headHtml.join('\n') + '</head>'
	                + '<body ' + (ie && browser.version < 9 ? 'class="view"' : '') + '>' + me.getContent(null, null, true) + '</body></html>';
	        },
	
	        /**
	         * 得到编辑器的纯文本内容，但会保留段落格式
	         * @method getPlainTxt
	         * @return { String } 编辑器带段落格式的纯文本内容字符串
	         * @example
	         * ```javascript
	         * //编辑器html内容:<p><strong>1</strong></p><p><strong>2</strong></p>
	         * console.log(editor.getPlainTxt()); //输出:"1\n2\n
	         * ```
	         */
	        getPlainTxt: function () {
	            var reg = new RegExp(domUtils.fillChar, 'g'),
	                html = this.body.innerHTML.replace(/[\n\r]/g, '');//ie要先去了\n在处理
	            html = html.replace(/<(p|div)[^>]*>(<br\/?>|&nbsp;)<\/\1>/gi, '\n')
	                .replace(/<br\/?>/gi, '\n')
	                .replace(/<[^>/]+>/g, '')
	                .replace(/(\n)?<\/([^>]+)>/g, function (a, b, c) {
	                    return dtd.$block[c] ? '\n' : b ? b : '';
	                });
	            //取出来的空格会有c2a0会变成乱码，处理这种情况\u00a0
	            return html.replace(reg, '').replace(/\u00a0/g, ' ').replace(/&nbsp;/g, ' ');
	        },
	
	        /**
	         * 获取编辑器中的纯文本内容,没有段落格式
	         * @method getContentTxt
	         * @return { String } 编辑器不带段落格式的纯文本内容字符串
	         * @example
	         * ```javascript
	         * //编辑器html内容:<p><strong>1</strong></p><p><strong>2</strong></p>
	         * console.log(editor.getPlainTxt()); //输出:"12
	         * ```
	         */
	        getContentTxt: function () {
	            var reg = new RegExp(domUtils.fillChar, 'g');
	            //取出来的空格会有c2a0会变成乱码，处理这种情况\u00a0
	            return this.body[browser.ie ? 'innerText' : 'textContent'].replace(reg, '').replace(/\u00a0/g, ' ');
	        },
	
	        /**
	         * 设置编辑器的内容，可修改编辑器当前的html内容
	         * @method setContent
	         * @warning 通过该方法插入的内容，是经过编辑器内置的过滤规则进行过滤后得到的内容
	         * @warning 该方法会触发selectionchange事件
	         * @param { String } html 要插入的html内容
	         * @example
	         * ```javascript
	         * editor.getContent('<p>test</p>');
	         * ```
	         */
	
	        /**
	         * 设置编辑器的内容，可修改编辑器当前的html内容
	         * @method setContent
	         * @warning 通过该方法插入的内容，是经过编辑器内置的过滤规则进行过滤后得到的内容
	         * @warning 该方法会触发selectionchange事件
	         * @param { String } html 要插入的html内容
	         * @param { Boolean } isAppendTo 若传入true，不清空原来的内容，在最后插入内容，否则，清空内容再插入
	         * @example
	         * ```javascript
	         * //假设设置前的编辑器内容是 <p>old text</p>
	         * editor.setContent('<p>new text</p>', true); //插入的结果是<p>old text</p><p>new text</p>
	         * ```
	         */
	        setContent: function (html, isAppendTo, notFireSelectionchange) {
	            var me = this;
	
	            me.fireEvent('beforesetcontent', html);
	            var root = UE.htmlparser(html);
	            me.filterInputRule(root);
	            html = root.toHtml();
	
	            me.body.innerHTML = (isAppendTo ? me.body.innerHTML : '') + html;
	
	
	            function isCdataDiv(node){
	                return  node.tagName == 'DIV' && node.getAttribute('cdata_tag');
	            }
	            //给文本或者inline节点套p标签
	            if (me.options.enterTag == 'p') {
	
	                var child = this.body.firstChild, tmpNode;
	                if (!child || child.nodeType == 1 &&
	                    (dtd.$cdata[child.tagName] || isCdataDiv(child) ||
	                        domUtils.isCustomeNode(child)
	                        )
	                    && child === this.body.lastChild) {
	                    this.body.innerHTML = '<p>' + (browser.ie ? '&nbsp;' : '<br/>') + '</p>' + this.body.innerHTML;
	
	                } else {
	                    var p = me.document.createElement('p');
	                    while (child) {
	                        while (child && (child.nodeType == 3 || child.nodeType == 1 && dtd.p[child.tagName] && !dtd.$cdata[child.tagName])) {
	                            tmpNode = child.nextSibling;
	                            p.appendChild(child);
	                            child = tmpNode;
	                        }
	                        if (p.firstChild) {
	                            if (!child) {
	                                me.body.appendChild(p);
	                                break;
	                            } else {
	                                child.parentNode.insertBefore(p, child);
	                                p = me.document.createElement('p');
	                            }
	                        }
	                        child = child.nextSibling;
	                    }
	                }
	            }
	            me.fireEvent('aftersetcontent');
	            me.fireEvent('contentchange');
	
	            !notFireSelectionchange && me._selectionChange();
	            //清除保存的选区
	            me._bakRange = me._bakIERange = me._bakNativeRange = null;
	            //trace:1742 setContent后gecko能得到焦点问题
	            var geckoSel;
	            if (browser.gecko && (geckoSel = this.selection.getNative())) {
	                geckoSel.removeAllRanges();
	            }
	            if(me.options.autoSyncData){
	                me.form && setValue(me.form,me);
	            }
	        },
	
	        /**
	         * 让编辑器获得焦点，默认focus到编辑器头部
	         * @method focus
	         * @example
	         * ```javascript
	         * editor.focus()
	         * ```
	         */
	
	        /**
	         * 让编辑器获得焦点，toEnd确定focus位置
	         * @method focus
	         * @param { Boolean } toEnd 默认focus到编辑器头部，toEnd为true时focus到内容尾部
	         * @example
	         * ```javascript
	         * editor.focus(true)
	         * ```
	         */
	        focus: function (toEnd) {
	            try {
	                var me = this,
	                    rng = me.selection.getRange();
	                if (toEnd) {
	                    var node = me.body.lastChild;
	                    if(node && node.nodeType == 1 && !dtd.$empty[node.tagName]){
	                        if(domUtils.isEmptyBlock(node)){
	                            rng.setStartAtFirst(node)
	                        }else{
	                            rng.setStartAtLast(node)
	                        }
	                        rng.collapse(true);
	                    }
	                    rng.setCursor(true);
	                } else {
	                    if(!rng.collapsed && domUtils.isBody(rng.startContainer) && rng.startOffset == 0){
	
	                        var node = me.body.firstChild;
	                        if(node && node.nodeType == 1 && !dtd.$empty[node.tagName]){
	                            rng.setStartAtFirst(node).collapse(true);
	                        }
	                    }
	
	                    rng.select(true);
	
	                }
	                this.fireEvent('focus selectionchange');
	            } catch (e) {
	            }
	
	        },
	        isFocus:function(){
	            return this.selection.isFocus();
	        },
	        blur:function(){
	            var sel = this.selection.getNative();
	            if(sel.empty && browser.ie){
	                var nativeRng = document.body.createTextRange();
	                nativeRng.moveToElementText(document.body);
	                nativeRng.collapse(true);
	                nativeRng.select();
	                sel.empty()
	            }else{
	                sel.removeAllRanges()
	            }
	
	            //this.fireEvent('blur selectionchange');
	        },
	        /**
	         * 初始化UE事件及部分事件代理
	         * @method _initEvents
	         * @private
	         */
	        _initEvents: function () {
	            var me = this,
	                doc = me.document,
	                win = me.window;
	            me._proxyDomEvent = utils.bind(me._proxyDomEvent, me);
	            domUtils.on(doc, ['click', 'contextmenu', 'mousedown', 'keydown', 'keyup', 'keypress', 'mouseup', 'mouseover', 'mouseout', 'selectstart'], me._proxyDomEvent);
	            domUtils.on(win, ['focus', 'blur'], me._proxyDomEvent);
	            domUtils.on(me.body,'drop',function(e){
	                //阻止ff下默认的弹出新页面打开图片
	                if(browser.gecko && e.stopPropagation) { e.stopPropagation(); }
	                me.fireEvent('contentchange')
	            });
	            domUtils.on(doc, ['mouseup', 'keydown'], function (evt) {
	                //特殊键不触发selectionchange
	                if (evt.type == 'keydown' && (evt.ctrlKey || evt.metaKey || evt.shiftKey || evt.altKey)) {
	                    return;
	                }
	                if (evt.button == 2)return;
	                me._selectionChange(250, evt);
	            });
	        },
	        /**
	         * 触发事件代理
	         * @method _proxyDomEvent
	         * @private
	         * @return { * } fireEvent的返回值
	         * @see UE.EventBase:fireEvent(String)
	         */
	        _proxyDomEvent: function (evt) {
	            if(this.fireEvent('before' + evt.type.replace(/^on/, '').toLowerCase()) === false){
	                return false;
	            }
	            if(this.fireEvent(evt.type.replace(/^on/, ''), evt) === false){
	                return false;
	            }
	            return this.fireEvent('after' + evt.type.replace(/^on/, '').toLowerCase())
	        },
	        /**
	         * 变化选区
	         * @method _selectionChange
	         * @private
	         */
	        _selectionChange: function (delay, evt) {
	            var me = this;
	            //有光标才做selectionchange 为了解决未focus时点击source不能触发更改工具栏状态的问题（source命令notNeedUndo=1）
	//            if ( !me.selection.isFocus() ){
	//                return;
	//            }
	
	
	            var hackForMouseUp = false;
	            var mouseX, mouseY;
	            if (browser.ie && browser.version < 9 && evt && evt.type == 'mouseup') {
	                var range = this.selection.getRange();
	                if (!range.collapsed) {
	                    hackForMouseUp = true;
	                    mouseX = evt.clientX;
	                    mouseY = evt.clientY;
	                }
	            }
	            clearTimeout(_selectionChangeTimer);
	            _selectionChangeTimer = setTimeout(function () {
	                if (!me.selection || !me.selection.getNative()) {
	                    return;
	                }
	                //修复一个IE下的bug: 鼠标点击一段已选择的文本中间时，可能在mouseup后的一段时间内取到的range是在selection的type为None下的错误值.
	                //IE下如果用户是拖拽一段已选择文本，则不会触发mouseup事件，所以这里的特殊处理不会对其有影响
	                var ieRange;
	                if (hackForMouseUp && me.selection.getNative().type == 'None') {
	                    ieRange = me.document.body.createTextRange();
	                    try {
	                        ieRange.moveToPoint(mouseX, mouseY);
	                    } catch (ex) {
	                        ieRange = null;
	                    }
	                }
	                var bakGetIERange;
	                if (ieRange) {
	                    bakGetIERange = me.selection.getIERange;
	                    me.selection.getIERange = function () {
	                        return ieRange;
	                    };
	                }
	                me.selection.cache();
	                if (bakGetIERange) {
	                    me.selection.getIERange = bakGetIERange;
	                }
	                if (me.selection._cachedRange && me.selection._cachedStartElement) {
	                    me.fireEvent('beforeselectionchange');
	                    // 第二个参数causeByUi为true代表由用户交互造成的selectionchange.
	                    me.fireEvent('selectionchange', !!evt);
	                    me.fireEvent('afterselectionchange');
	                    me.selection.clear();
	                }
	            }, delay || 50);
	        },
	
	        /**
	         * 执行编辑命令
	         * @method _callCmdFn
	         * @private
	         * @param { String } fnName 函数名称
	         * @param { * } args 传给命令函数的参数
	         * @return { * } 返回命令函数运行的返回值
	         */
	        _callCmdFn: function (fnName, args) {
	            var cmdName = args[0].toLowerCase(),
	                cmd, cmdFn;
	            cmd = this.commands[cmdName] || UE.commands[cmdName];
	            cmdFn = cmd && cmd[fnName];
	            //没有querycommandstate或者没有command的都默认返回0
	            if ((!cmd || !cmdFn) && fnName == 'queryCommandState') {
	                return 0;
	            } else if (cmdFn) {
	                return cmdFn.apply(this, args);
	            }
	        },
	
	        /**
	         * 执行编辑命令cmdName，完成富文本编辑效果
	         * @method execCommand
	         * @param { String } cmdName 需要执行的命令
	         * @remind 具体命令的使用请参考<a href="#COMMAND.LIST">命令列表</a>
	         * @return { * } 返回命令函数运行的返回值
	         * @example
	         * ```javascript
	         * editor.execCommand(cmdName);
	         * ```
	         */
	        execCommand: function (cmdName) {
	            cmdName = cmdName.toLowerCase();
	            var me = this,
	                result,
	                cmd = me.commands[cmdName] || UE.commands[cmdName];
	            if (!cmd || !cmd.execCommand) {
	                return null;
	            }
	            if (!cmd.notNeedUndo && !me.__hasEnterExecCommand) {
	                me.__hasEnterExecCommand = true;
	                if (me.queryCommandState.apply(me,arguments) != -1) {
	                    me.fireEvent('saveScene');
	                    me.fireEvent.apply(me, ['beforeexeccommand', cmdName].concat(arguments));
	                    result = this._callCmdFn('execCommand', arguments);
	                    //保存场景时，做了内容对比，再看是否进行contentchange触发，这里多触发了一次，去掉
	//                    (!cmd.ignoreContentChange && !me._ignoreContentChange) && me.fireEvent('contentchange');
	                    me.fireEvent.apply(me, ['afterexeccommand', cmdName].concat(arguments));
	                    me.fireEvent('saveScene');
	                }
	                me.__hasEnterExecCommand = false;
	            } else {
	                result = this._callCmdFn('execCommand', arguments);
	                (!me.__hasEnterExecCommand && !cmd.ignoreContentChange && !me._ignoreContentChange) && me.fireEvent('contentchange')
	            }
	            (!me.__hasEnterExecCommand && !cmd.ignoreContentChange && !me._ignoreContentChange) && me._selectionChange();
	            return result;
	        },
	
	        /**
	         * 根据传入的command命令，查选编辑器当前的选区，返回命令的状态
	         * @method  queryCommandState
	         * @param { String } cmdName 需要查询的命令名称
	         * @remind 具体命令的使用请参考<a href="#COMMAND.LIST">命令列表</a>
	         * @return { Number } number 返回放前命令的状态，返回值三种情况：(-1|0|1)
	         * @example
	         * ```javascript
	         * editor.queryCommandState(cmdName)  => (-1|0|1)
	         * ```
	         * @see COMMAND.LIST
	         */
	        queryCommandState: function (cmdName) {
	            return this._callCmdFn('queryCommandState', arguments);
	        },
	
	        /**
	         * 根据传入的command命令，查选编辑器当前的选区，根据命令返回相关的值
	         * @method queryCommandValue
	         * @param { String } cmdName 需要查询的命令名称
	         * @remind 具体命令的使用请参考<a href="#COMMAND.LIST">命令列表</a>
	         * @remind 只有部分插件有此方法
	         * @return { * } 返回每个命令特定的当前状态值
	         * @grammar editor.queryCommandValue(cmdName)  =>  {*}
	         * @see COMMAND.LIST
	         */
	        queryCommandValue: function (cmdName) {
	            return this._callCmdFn('queryCommandValue', arguments);
	        },
	
	        /**
	         * 检查编辑区域中是否有内容
	         * @method  hasContents
	         * @remind 默认有文本内容，或者有以下节点都不认为是空
	         * table,ul,ol,dl,iframe,area,base,col,hr,img,embed,input,link,meta,param
	         * @return { Boolean } 检查有内容返回true，否则返回false
	         * @example
	         * ```javascript
	         * editor.hasContents()
	         * ```
	         */
	
	        /**
	         * 检查编辑区域中是否有内容，若包含参数tags中的节点类型，直接返回true
	         * @method  hasContents
	         * @param { Array } tags 传入数组判断时用到的节点类型
	         * @return { Boolean } 若文档中包含tags数组里对应的tag，返回true，否则返回false
	         * @example
	         * ```javascript
	         * editor.hasContents(['span']);
	         * ```
	         */
	        hasContents: function (tags) {
	            if (tags) {
	                for (var i = 0, ci; ci = tags[i++];) {
	                    if (this.document.getElementsByTagName(ci).length > 0) {
	                        return true;
	                    }
	                }
	            }
	            if (!domUtils.isEmptyBlock(this.body)) {
	                return true
	            }
	            //随时添加,定义的特殊标签如果存在，不能认为是空
	            tags = ['div'];
	            for (i = 0; ci = tags[i++];) {
	                var nodes = domUtils.getElementsByTagName(this.document, ci);
	                for (var n = 0, cn; cn = nodes[n++];) {
	                    if (domUtils.isCustomeNode(cn)) {
	                        return true;
	                    }
	                }
	            }
	            return false;
	        },
	
	        /**
	         * 重置编辑器，可用来做多个tab使用同一个编辑器实例
	         * @method  reset
	         * @remind 此方法会清空编辑器内容，清空回退列表，会触发reset事件
	         * @example
	         * ```javascript
	         * editor.reset()
	         * ```
	         */
	        reset: function () {
	            this.fireEvent('reset');
	        },
	
	        /**
	         * 设置当前编辑区域可以编辑
	         * @method setEnabled
	         * @example
	         * ```javascript
	         * editor.setEnabled()
	         * ```
	         */
	        setEnabled: function () {
	            var me = this, range;
	            if (me.body.contentEditable == 'false') {
	                me.body.contentEditable = true;
	                range = me.selection.getRange();
	                //有可能内容丢失了
	                try {
	                    range.moveToBookmark(me.lastBk);
	                    delete me.lastBk
	                } catch (e) {
	                    range.setStartAtFirst(me.body).collapse(true)
	                }
	                range.select(true);
	                if (me.bkqueryCommandState) {
	                    me.queryCommandState = me.bkqueryCommandState;
	                    delete me.bkqueryCommandState;
	                }
	                if (me.bkqueryCommandValue) {
	                    me.queryCommandValue = me.bkqueryCommandValue;
	                    delete me.bkqueryCommandValue;
	                }
	                me.fireEvent('selectionchange');
	            }
	        },
	        enable: function () {
	            return this.setEnabled();
	        },
	
	        /** 设置当前编辑区域不可编辑
	         * @method setDisabled
	         */
	
	        /** 设置当前编辑区域不可编辑,except中的命令除外
	         * @method setDisabled
	         * @param { String } except 例外命令的字符串
	         * @remind 即使设置了disable，此处配置的例外命令仍然可以执行
	         * @example
	         * ```javascript
	         * editor.setDisabled('bold'); //禁用工具栏中除加粗之外的所有功能
	         * ```
	         */
	
	        /** 设置当前编辑区域不可编辑,except中的命令除外
	         * @method setDisabled
	         * @param { Array } except 例外命令的字符串数组，数组中的命令仍然可以执行
	         * @remind 即使设置了disable，此处配置的例外命令仍然可以执行
	         * @example
	         * ```javascript
	         * editor.setDisabled(['bold','insertimage']); //禁用工具栏中除加粗和插入图片之外的所有功能
	         * ```
	         */
	        setDisabled: function (except) {
	            var me = this;
	            except = except ? utils.isArray(except) ? except : [except] : [];
	            if (me.body.contentEditable == 'true') {
	                if (!me.lastBk) {
	                    me.lastBk = me.selection.getRange().createBookmark(true);
	                }
	                me.body.contentEditable = false;
	                me.bkqueryCommandState = me.queryCommandState;
	                me.bkqueryCommandValue = me.queryCommandValue;
	                me.queryCommandState = function (type) {
	                    if (utils.indexOf(except, type) != -1) {
	                        return me.bkqueryCommandState.apply(me, arguments);
	                    }
	                    return -1;
	                };
	                me.queryCommandValue = function (type) {
	                    if (utils.indexOf(except, type) != -1) {
	                        return me.bkqueryCommandValue.apply(me, arguments);
	                    }
	                    return null;
	                };
	                me.fireEvent('selectionchange');
	            }
	        },
	        disable: function (except) {
	            return this.setDisabled(except);
	        },
	
	        /**
	         * 设置默认内容
	         * @method _setDefaultContent
	         * @private
	         * @param  { String } cont 要存入的内容
	         */
	        _setDefaultContent: function () {
	            function clear() {
	                var me = this;
	                if (me.document.getElementById('initContent')) {
	                    me.body.innerHTML = '<p>' + (ie ? '' : '<br/>') + '</p>';
	                    me.removeListener('firstBeforeExecCommand focus', clear);
	                    setTimeout(function () {
	                        me.focus();
	                        me._selectionChange();
	                    }, 0)
	                }
	            }
	
	            return function (cont) {
	                var me = this;
	                me.body.innerHTML = '<p id="initContent">' + cont + '</p>';
	
	                me.addListener('firstBeforeExecCommand focus', clear);
	            }
	        }(),
	
	        /**
	         * 显示编辑器
	         * @method setShow
	         * @example
	         * ```javascript
	         * editor.setShow()
	         * ```
	         */
	        setShow: function () {
	            var me = this, range = me.selection.getRange();
	            if (me.container.style.display == 'none') {
	                //有可能内容丢失了
	                try {
	                    range.moveToBookmark(me.lastBk);
	                    delete me.lastBk
	                } catch (e) {
	                    range.setStartAtFirst(me.body).collapse(true)
	                }
	                //ie下focus实效，所以做了个延迟
	                setTimeout(function () {
	                    range.select(true);
	                }, 100);
	                me.container.style.display = '';
	            }
	
	        },
	        show: function () {
	            return this.setShow();
	        },
	        /**
	         * 隐藏编辑器
	         * @method setHide
	         * @example
	         * ```javascript
	         * editor.setHide()
	         * ```
	         */
	        setHide: function () {
	            var me = this;
	            if (!me.lastBk) {
	                me.lastBk = me.selection.getRange().createBookmark(true);
	            }
	            me.container.style.display = 'none'
	        },
	        hide: function () {
	            return this.setHide();
	        },
	
	        /**
	         * 根据指定的路径，获取对应的语言资源
	         * @method getLang
	         * @param { String } path 路径根据的是lang目录下的语言文件的路径结构
	         * @return { Object | String } 根据路径返回语言资源的Json格式对象或者语言字符串
	         * @example
	         * ```javascript
	         * editor.getLang('contextMenu.delete'); //如果当前是中文，那返回是的是'删除'
	         * ```
	         */
	        getLang: function (path) {
	            var lang = UE.I18N[this.options.lang];
	            if (!lang) {
	                throw Error("not import language file");
	            }
	            path = (path || "").split(".");
	            for (var i = 0, ci; ci = path[i++];) {
	                lang = lang[ci];
	                if (!lang)break;
	            }
	            return lang;
	        },
	
	        /**
	         * 计算编辑器html内容字符串的长度
	         * @method  getContentLength
	         * @return { Number } 返回计算的长度
	         * @example
	         * ```javascript
	         * //编辑器html内容<p><strong>132</strong></p>
	         * editor.getContentLength() //返回27
	         * ```
	         */
	        /**
	         * 计算编辑器当前纯文本内容的长度
	         * @method  getContentLength
	         * @param { Boolean } ingoneHtml 传入true时，只按照纯文本来计算
	         * @return { Number } 返回计算的长度，内容中有hr/img/iframe标签，长度加1
	         * @example
	         * ```javascript
	         * //编辑器html内容<p><strong>132</strong></p>
	         * editor.getContentLength() //返回3
	         * ```
	         */
	        getContentLength: function (ingoneHtml, tagNames) {
	            var count = this.getContent(false,false,true).length;
	            if (ingoneHtml) {
	                tagNames = (tagNames || []).concat([ 'hr', 'img', 'iframe']);
	                count = this.getContentTxt().replace(/[\t\r\n]+/g, '').length;
	                for (var i = 0, ci; ci = tagNames[i++];) {
	                    count += this.document.getElementsByTagName(ci).length;
	                }
	            }
	            return count;
	        },
	
	        /**
	         * 注册输入过滤规则
	         * @method  addInputRule
	         * @param { Function } rule 要添加的过滤规则
	         * @example
	         * ```javascript
	         * editor.addInputRule(function(root){
	         *   $.each(root.getNodesByTagName('div'),function(i,node){
	         *       node.tagName="p";
	         *   });
	         * });
	         * ```
	         */
	        addInputRule: function (rule) {
	            this.inputRules.push(rule);
	        },
	
	        /**
	         * 执行注册的过滤规则
	         * @method  filterInputRule
	         * @param { UE.uNode } root 要过滤的uNode节点
	         * @remind 执行editor.setContent方法和执行'inserthtml'命令后，会运行该过滤函数
	         * @example
	         * ```javascript
	         * editor.filterInputRule(editor.body);
	         * ```
	         * @see UE.Editor:addInputRule
	         */
	        filterInputRule: function (root) {
	            for (var i = 0, ci; ci = this.inputRules[i++];) {
	                ci.call(this, root)
	            }
	        },
	
	        /**
	         * 注册输出过滤规则
	         * @method  addOutputRule
	         * @param { Function } rule 要添加的过滤规则
	         * @example
	         * ```javascript
	         * editor.addOutputRule(function(root){
	         *   $.each(root.getNodesByTagName('p'),function(i,node){
	         *       node.tagName="div";
	         *   });
	         * });
	         * ```
	         */
	        addOutputRule: function (rule) {
	            this.outputRules.push(rule)
	        },
	
	        /**
	         * 根据输出过滤规则，过滤编辑器内容
	         * @method  filterOutputRule
	         * @remind 执行editor.getContent方法的时候，会先运行该过滤函数
	         * @param { UE.uNode } root 要过滤的uNode节点
	         * @example
	         * ```javascript
	         * editor.filterOutputRule(editor.body);
	         * ```
	         * @see UE.Editor:addOutputRule
	         */
	        filterOutputRule: function (root) {
	            for (var i = 0, ci; ci = this.outputRules[i++];) {
	                ci.call(this, root)
	            }
	        },
	
	        /**
	         * 根据action名称获取请求的路径
	         * @method  getActionUrl
	         * @remind 假如没有设置serverUrl,会根据imageUrl设置默认的controller路径
	         * @param { String } action action名称
	         * @example
	         * ```javascript
	         * editor.getActionUrl('config'); //返回 "/ueditor/php/controller.php?action=config"
	         * editor.getActionUrl('image'); //返回 "/ueditor/php/controller.php?action=uplaodimage"
	         * editor.getActionUrl('scrawl'); //返回 "/ueditor/php/controller.php?action=uplaodscrawl"
	         * editor.getActionUrl('imageManager'); //返回 "/ueditor/php/controller.php?action=listimage"
	         * ```
	         */
	        getActionUrl: function(action){
	            var actionName = this.getOpt(action) || action,
	                imageUrl = this.getOpt('imageUrl'),
	                serverUrl = this.getOpt('serverUrl');
	
	            if(!serverUrl && imageUrl) {
	                serverUrl = imageUrl.replace(/^(.*[\/]).+([\.].+)$/, '$1controller$2');
	            }
	
	            if(serverUrl) {
	                serverUrl = serverUrl + (serverUrl.indexOf('?') == -1 ? '?':'&') + 'action=' + (actionName || '');
	                return utils.formatUrl(serverUrl);
	            } else {
	                return '';
	            }
	        }
	    };
	    utils.inherits(Editor, EventBase);
	})();
	
	
	// core/Editor.defaultoptions.js
	//维护编辑器一下默认的不在插件中的配置项
	UE.Editor.defaultOptions = function(editor){
	
	    var _url = editor.options.UEDITOR_HOME_URL;
	    return {
	        isShow: true,
	        initialContent: '',
	        initialStyle:'',
	        autoClearinitialContent: false,
	        iframeCssUrl: _url + 'themes/iframe.css',
	        textarea: 'editorValue',
	        focus: false,
	        focusInEnd: true,
	        autoClearEmptyNode: true,
	        fullscreen: false,
	        readonly: false,
	        zIndex: 999,
	        imagePopup: true,
	        enterTag: 'p',
	        customDomain: false,
	        lang: 'zh-cn',
	        langPath: _url + 'lang/',
	        theme: 'default',
	        themePath: _url + 'themes/',
	        allHtmlEnabled: false,
	        scaleEnabled: false,
	        tableNativeEditInFF: false,
	        autoSyncData : true,
	        fileNameFormat: '{time}{rand:6}'
	    }
	};
	
	// core/loadconfig.js
	(function(){
	
	    UE.Editor.prototype.loadServerConfig = function(){
	        var me = this;
	        setTimeout(function(){
	            try{
	                me.options.imageUrl && me.setOpt('serverUrl', me.options.imageUrl.replace(/^(.*[\/]).+([\.].+)$/, '$1controller$2'));
	
	                var configUrl = me.getActionUrl('config'),
	                    isJsonp = utils.isCrossDomainUrl(configUrl);
	
	                /* 发出ajax请求 */
	                me._serverConfigLoaded = false;
	
	                configUrl && UE.ajax.request(configUrl,{
	                    'method': 'GET',
	                    'dataType': isJsonp ? 'jsonp':'',
	                    'onsuccess':function(r){
	                        try {
	                            var config = isJsonp ? r:eval("("+r.responseText+")");
	                            utils.extend(me.options, config);
	                            me.fireEvent('serverConfigLoaded');
	                            me._serverConfigLoaded = true;
	                        } catch (e) {
	                            showErrorMsg(me.getLang('loadconfigFormatError'));
	                        }
	                    },
	                    'onerror':function(){
	                        showErrorMsg(me.getLang('loadconfigHttpError'));
	                    }
	                });
	            } catch(e){
	                showErrorMsg(me.getLang('loadconfigError'));
	            }
	        });
	
	        function showErrorMsg(msg) {
	            console && console.error(msg);
	            //me.fireEvent('showMessage', {
	            //    'title': msg,
	            //    'type': 'error'
	            //});
	        }
	    };
	
	    UE.Editor.prototype.isServerConfigLoaded = function(){
	        var me = this;
	        return me._serverConfigLoaded || false;
	    };
	
	    UE.Editor.prototype.afterConfigReady = function(handler){
	        if (!handler || !utils.isFunction(handler)) return;
	        var me = this;
	        var readyHandler = function(){
	            handler.apply(me, arguments);
	            me.removeListener('serverConfigLoaded', readyHandler);
	        };
	
	        if (me.isServerConfigLoaded()) {
	            handler.call(me, 'serverConfigLoaded');
	        } else {
	            me.addListener('serverConfigLoaded', readyHandler);
	        }
	    };
	
	})();
	
	
	// core/ajax.js
	/**
	 * @file
	 * @module UE.ajax
	 * @since 1.2.6.1
	 */
	
	/**
	 * 提供对ajax请求的支持
	 * @module UE.ajax
	 */
	UE.ajax = function() {
	
	    //创建一个ajaxRequest对象
	    var fnStr = 'XMLHttpRequest()';
	    try {
	        new ActiveXObject("Msxml2.XMLHTTP");
	        fnStr = 'ActiveXObject(\'Msxml2.XMLHTTP\')';
	    } catch (e) {
	        try {
	            new ActiveXObject("Microsoft.XMLHTTP");
	            fnStr = 'ActiveXObject(\'Microsoft.XMLHTTP\')'
	        } catch (e) {
	        }
	    }
	    var creatAjaxRequest = new Function('return new ' + fnStr);
	
	
	    /**
	     * 将json参数转化成适合ajax提交的参数列表
	     * @param json
	     */
	    function json2str(json) {
	        var strArr = [];
	        for (var i in json) {
	            //忽略默认的几个参数
	            if(i=="method" || i=="timeout" || i=="async" || i=="dataType" || i=="callback") continue;
	            //忽略控制
	            if(json[i] == undefined || json[i] == null) continue;
	            //传递过来的对象和函数不在提交之列
	            if (!((typeof json[i]).toLowerCase() == "function" || (typeof json[i]).toLowerCase() == "object")) {
	                strArr.push( encodeURIComponent(i) + "="+encodeURIComponent(json[i]) );
	            } else if (utils.isArray(json[i])) {
	            //支持传数组内容
	                for(var j = 0; j < json[i].length; j++) {
	                    strArr.push( encodeURIComponent(i) + "[]="+encodeURIComponent(json[i][j]) );
	                }
	            }
	        }
	        return strArr.join("&");
	    }
	
	    function doAjax(url, ajaxOptions) {
	        var xhr = creatAjaxRequest(),
	        //是否超时
	            timeIsOut = false,
	        //默认参数
	            defaultAjaxOptions = {
	                method:"POST",
	                timeout:5000,
	                async:true,
	                data:{},//需要传递对象的话只能覆盖
	                onsuccess:function() {
	                },
	                onerror:function() {
	                }
	            };
	
	        if (typeof url === "object") {
	            ajaxOptions = url;
	            url = ajaxOptions.url;
	        }
	        if (!xhr || !url) return;
	        var ajaxOpts = ajaxOptions ? utils.extend(defaultAjaxOptions,ajaxOptions) : defaultAjaxOptions;
	
	        var submitStr = json2str(ajaxOpts);  // { name:"Jim",city:"Beijing" } --> "name=Jim&city=Beijing"
	        //如果用户直接通过data参数传递json对象过来，则也要将此json对象转化为字符串
	        if (!utils.isEmptyObject(ajaxOpts.data)){
	            submitStr += (submitStr? "&":"") + json2str(ajaxOpts.data);
	        }
	        //超时检测
	        var timerID = setTimeout(function() {
	            if (xhr.readyState != 4) {
	                timeIsOut = true;
	                xhr.abort();
	                clearTimeout(timerID);
	            }
	        }, ajaxOpts.timeout);
	
	        var method = ajaxOpts.method.toUpperCase();
	        var str = url + (url.indexOf("?")==-1?"?":"&") + (method=="POST"?"":submitStr+ "&noCache=" + +new Date);
	        xhr.open(method, str, ajaxOpts.async);
	        xhr.onreadystatechange = function() {
	            if (xhr.readyState == 4) {
	                if (!timeIsOut && xhr.status == 200) {
	                    ajaxOpts.onsuccess(xhr);
	                } else {
	                    ajaxOpts.onerror(xhr);
	                }
	            }
	        };
	        if (method == "POST") {
	            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
	            xhr.send(submitStr);
	        } else {
	            xhr.send(null);
	        }
	    }
	
	    function doJsonp(url, opts) {
	
	        var successhandler = opts.onsuccess || function(){},
	            scr = document.createElement('SCRIPT'),
	            options = opts || {},
	            charset = options['charset'],
	            callbackField = options['jsonp'] || 'callback',
	            callbackFnName,
	            timeOut = options['timeOut'] || 0,
	            timer,
	            reg = new RegExp('(\\?|&)' + callbackField + '=([^&]*)'),
	            matches;
	
	        if (utils.isFunction(successhandler)) {
	            callbackFnName = 'bd__editor__' + Math.floor(Math.random() * 2147483648).toString(36);
	            window[callbackFnName] = getCallBack(0);
	        } else if(utils.isString(successhandler)){
	            callbackFnName = successhandler;
	        } else {
	            if (matches = reg.exec(url)) {
	                callbackFnName = matches[2];
	            }
	        }
	
	        url = url.replace(reg, '\x241' + callbackField + '=' + callbackFnName);
	
	        if (url.search(reg) < 0) {
	            url += (url.indexOf('?') < 0 ? '?' : '&') + callbackField + '=' + callbackFnName;
	        }
	
	        var queryStr = json2str(opts);  // { name:"Jim",city:"Beijing" } --> "name=Jim&city=Beijing"
	        //如果用户直接通过data参数传递json对象过来，则也要将此json对象转化为字符串
	        if (!utils.isEmptyObject(opts.data)){
	            queryStr += (queryStr? "&":"") + json2str(opts.data);
	        }
	        if (queryStr) {
	            url = url.replace(/\?/, '?' + queryStr + '&');
	        }
	
	        scr.onerror = getCallBack(1);
	        if( timeOut ){
	            timer = setTimeout(getCallBack(1), timeOut);
	        }
	        createScriptTag(scr, url, charset);
	
	        function createScriptTag(scr, url, charset) {
	            scr.setAttribute('type', 'text/javascript');
	            scr.setAttribute('defer', 'defer');
	            charset && scr.setAttribute('charset', charset);
	            scr.setAttribute('src', url);
	            document.getElementsByTagName('head')[0].appendChild(scr);
	        }
	
	        function getCallBack(onTimeOut){
	            return function(){
	                try {
	                    if(onTimeOut){
	                        options.onerror && options.onerror();
	                    }else{
	                        try{
	                            clearTimeout(timer);
	                            successhandler.apply(window, arguments);
	                        } catch (e){}
	                    }
	                } catch (exception) {
	                    options.onerror && options.onerror.call(window, exception);
	                } finally {
	                    options.oncomplete && options.oncomplete.apply(window, arguments);
	                    scr.parentNode && scr.parentNode.removeChild(scr);
	                    window[callbackFnName] = null;
	                    try {
	                        delete window[callbackFnName];
	                    }catch(e){}
	                }
	            }
	        }
	    }
	
	    return {
	        /**
	         * 根据给定的参数项，向指定的url发起一个ajax请求。 ajax请求完成后，会根据请求结果调用相应回调： 如果请求
	         * 成功， 则调用onsuccess回调， 失败则调用 onerror 回调
	         * @method request
	         * @param { URLString } url ajax请求的url地址
	         * @param { Object } ajaxOptions ajax请求选项的键值对，支持的选项如下：
	         * @example
	         * ```javascript
	         * //向sayhello.php发起一个异步的Ajax GET请求, 请求超时时间为10s， 请求完成后执行相应的回调。
	         * UE.ajax.requeset( 'sayhello.php', {
	         *
	         *     //请求方法。可选值： 'GET', 'POST'，默认值是'POST'
	         *     method: 'GET',
	         *
	         *     //超时时间。 默认为5000， 单位是ms
	         *     timeout: 10000,
	         *
	         *     //是否是异步请求。 true为异步请求， false为同步请求
	         *     async: true,
	         *
	         *     //请求携带的数据。如果请求为GET请求， data会经过stringify后附加到请求url之后。
	         *     data: {
	         *         name: 'ueditor'
	         *     },
	         *
	         *     //请求成功后的回调， 该回调接受当前的XMLHttpRequest对象作为参数。
	         *     onsuccess: function ( xhr ) {
	         *         console.log( xhr.responseText );
	         *     },
	         *
	         *     //请求失败或者超时后的回调。
	         *     onerror: function ( xhr ) {
	         *          alert( 'Ajax请求失败' );
	         *     }
	         *
	         * } );
	         * ```
	         */
	
	        /**
	         * 根据给定的参数项发起一个ajax请求， 参数项里必须包含一个url地址。 ajax请求完成后，会根据请求结果调用相应回调： 如果请求
	         * 成功， 则调用onsuccess回调， 失败则调用 onerror 回调。
	         * @method request
	         * @warning 如果在参数项里未提供一个key为“url”的地址值，则该请求将直接退出。
	         * @param { Object } ajaxOptions ajax请求选项的键值对，支持的选项如下：
	         * @example
	         * ```javascript
	         *
	         * //向sayhello.php发起一个异步的Ajax POST请求, 请求超时时间为5s， 请求完成后不执行任何回调。
	         * UE.ajax.requeset( 'sayhello.php', {
	         *
	         *     //请求的地址， 该项是必须的。
	         *     url: 'sayhello.php'
	         *
	         * } );
	         * ```
	         */
			request:function(url, opts) {
	            if (opts && opts.dataType == 'jsonp') {
	                doJsonp(url, opts);
	            } else {
	                doAjax(url, opts);
	            }
			},
	        getJSONP:function(url, data, fn) {
	            var opts = {
	                'data': data,
	                'oncomplete': fn
	            };
	            doJsonp(url, opts);
			}
		};
	
	
	}();
	
	
	// core/filterword.js
	/**
	 * UE过滤word的静态方法
	 * @file
	 */
	
	/**
	 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
	 * @module UE
	 */
	
	
	/**
	 * 根据传入html字符串过滤word
	 * @module UE
	 * @since 1.2.6.1
	 * @method filterWord
	 * @param { String } html html字符串
	 * @return { String } 已过滤后的结果字符串
	 * @example
	 * ```javascript
	 * UE.filterWord(html);
	 * ```
	 */
	var filterWord = UE.filterWord = function () {
	
	    //是否是word过来的内容
	    function isWordDocument( str ) {
	        return /(class="?Mso|style="[^"]*\bmso\-|w:WordDocument|<(v|o):|lang=)/ig.test( str );
	    }
	    //去掉小数
	    function transUnit( v ) {
	        v = v.replace( /[\d.]+\w+/g, function ( m ) {
	            return utils.transUnitToPx(m);
	        } );
	        return v;
	    }
	
	    function filterPasteWord( str ) {
	        return str.replace(/[\t\r\n]+/g,' ')
	                .replace( /<!--[\s\S]*?-->/ig, "" )
	                //转换图片
	                .replace(/<v:shape [^>]*>[\s\S]*?.<\/v:shape>/gi,function(str){
	                    //opera能自己解析出image所这里直接返回空
	                    if(browser.opera){
	                        return '';
	                    }
	                    try{
	                        //有可能是bitmap占为图，无用，直接过滤掉，主要体现在粘贴excel表格中
	                        if(/Bitmap/i.test(str)){
	                            return '';
	                        }
	                        var width = str.match(/width:([ \d.]*p[tx])/i)[1],
	                            height = str.match(/height:([ \d.]*p[tx])/i)[1],
	                            src =  str.match(/src=\s*"([^"]*)"/i)[1];
	                        return '<img width="'+ transUnit(width) +'" height="'+transUnit(height) +'" src="' + src + '" />';
	                    } catch(e){
	                        return '';
	                    }
	                })
	                //针对wps添加的多余标签处理
	                .replace(/<\/?div[^>]*>/g,'')
	                //去掉多余的属性
	                .replace( /v:\w+=(["']?)[^'"]+\1/g, '' )
	                .replace( /<(!|script[^>]*>.*?<\/script(?=[>\s])|\/?(\?xml(:\w+)?|xml|meta|link|style|\w+:\w+)(?=[\s\/>]))[^>]*>/gi, "" )
	                .replace( /<p [^>]*class="?MsoHeading"?[^>]*>(.*?)<\/p>/gi, "<p><strong>$1</strong></p>" )
	                //去掉多余的属性
	                .replace( /\s+(class|lang|align)\s*=\s*(['"]?)([\w-]+)\2/ig, function(str,name,marks,val){
	                    //保留list的标示
	                    return name == 'class' && val == 'MsoListParagraph' ? str : ''
	                })
	                //清除多余的font/span不能匹配&nbsp;有可能是空格
	                .replace( /<(font|span)[^>]*>(\s*)<\/\1>/gi, function(a,b,c){
	                    return c.replace(/[\t\r\n ]+/g,' ')
	                })
	                //处理style的问题
	                .replace( /(<[a-z][^>]*)\sstyle=(["'])([^\2]*?)\2/gi, function( str, tag, tmp, style ) {
	                    var n = [],
	                        s = style.replace( /^\s+|\s+$/, '' )
	                            .replace(/&#39;/g,'\'')
	                            .replace( /&quot;/gi, "'" )
	                            .replace(/[\d.]+(cm|pt)/g,function(str){
	                                return utils.transUnitToPx(str)
	                            })
	                            .split( /;\s*/g );
	
	                    for ( var i = 0,v; v = s[i];i++ ) {
	
	                        var name, value,
	                            parts = v.split( ":" );
	
	                        if ( parts.length == 2 ) {
	                            name = parts[0].toLowerCase();
	                            value = parts[1].toLowerCase();
	                            if(/^(background)\w*/.test(name) && value.replace(/(initial|\s)/g,'').length == 0
	                                ||
	                                /^(margin)\w*/.test(name) && /^0\w+$/.test(value)
	                            ){
	                                continue;
	                            }
	
	                            switch ( name ) {
	                                case "mso-padding-alt":
	                                case "mso-padding-top-alt":
	                                case "mso-padding-right-alt":
	                                case "mso-padding-bottom-alt":
	                                case "mso-padding-left-alt":
	                                case "mso-margin-alt":
	                                case "mso-margin-top-alt":
	                                case "mso-margin-right-alt":
	                                case "mso-margin-bottom-alt":
	                                case "mso-margin-left-alt":
	                                //ie下会出现挤到一起的情况
	                               //case "mso-table-layout-alt":
	                                case "mso-height":
	                                case "mso-width":
	                                case "mso-vertical-align-alt":
	                                    //trace:1819 ff下会解析出padding在table上
	                                    if(!/<table/.test(tag))
	                                        n[i] = name.replace( /^mso-|-alt$/g, "" ) + ":" + transUnit( value );
	                                    continue;
	                                case "horiz-align":
	                                    n[i] = "text-align:" + value;
	                                    continue;
	
	                                case "vert-align":
	                                    n[i] = "vertical-align:" + value;
	                                    continue;
	
	                                case "font-color":
	                                case "mso-foreground":
	                                    n[i] = "color:" + value;
	                                    continue;
	
	                                case "mso-background":
	                                case "mso-highlight":
	                                    n[i] = "background:" + value;
	                                    continue;
	
	                                case "mso-default-height":
	                                    n[i] = "min-height:" + transUnit( value );
	                                    continue;
	
	                                case "mso-default-width":
	                                    n[i] = "min-width:" + transUnit( value );
	                                    continue;
	
	                                case "mso-padding-between-alt":
	                                    n[i] = "border-collapse:separate;border-spacing:" + transUnit( value );
	                                    continue;
	
	                                case "text-line-through":
	                                    if ( (value == "single") || (value == "double") ) {
	                                        n[i] = "text-decoration:line-through";
	                                    }
	                                    continue;
	                                case "mso-zero-height":
	                                    if ( value == "yes" ) {
	                                        n[i] = "display:none";
	                                    }
	                                    continue;
	//                                case 'background':
	//                                    break;
	                                case 'margin':
	                                    if ( !/[1-9]/.test( value ) ) {
	                                        continue;
	                                    }
	
	                            }
	
	                            if ( /^(mso|column|font-emph|lang|layout|line-break|list-image|nav|panose|punct|row|ruby|sep|size|src|tab-|table-border|text-(?:decor|trans)|top-bar|version|vnd|word-break)/.test( name )
	                                ||
	                                /text\-indent|padding|margin/.test(name) && /\-[\d.]+/.test(value)
	                            ) {
	                                continue;
	                            }
	
	                            n[i] = name + ":" + parts[1];
	                        }
	                    }
	                    return tag + (n.length ? ' style="' + n.join( ';').replace(/;{2,}/g,';') + '"' : '');
	                })
	
	
	    }
	
	    return function ( html ) {
	        return (isWordDocument( html ) ? filterPasteWord( html ) : html);
	    };
	}();
	
	// core/node.js
	/**
	 * 编辑器模拟的节点类
	 * @file
	 * @module UE
	 * @class uNode
	 * @since 1.2.6.1
	 */
	
	/**
	 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
	 * @unfile
	 * @module UE
	 */
	
	(function () {
	
	    /**
	     * 编辑器模拟的节点类
	     * @unfile
	     * @module UE
	     * @class uNode
	     */
	
	    /**
	     * 通过一个键值对，创建一个uNode对象
	     * @constructor
	     * @param { Object } attr 传入要创建的uNode的初始属性
	     * @example
	     * ```javascript
	     * var node = new uNode({
	     *     type:'element',
	     *     tagName:'span',
	     *     attrs:{style:'font-size:14px;'}
	     * }
	     * ```
	     */
	    var uNode = UE.uNode = function (obj) {
	        this.type = obj.type;
	        this.data = obj.data;
	        this.tagName = obj.tagName;
	        this.parentNode = obj.parentNode;
	        this.attrs = obj.attrs || {};
	        this.children = obj.children;
	    };
	
	    var notTransAttrs = {
	        'href':1,
	        'src':1,
	        '_src':1,
	        '_href':1,
	        'cdata_data':1
	    };
	
	    var notTransTagName = {
	        style:1,
	        script:1
	    };
	
	    var indentChar = '    ',
	        breakChar = '\n';
	
	    function insertLine(arr, current, begin) {
	        arr.push(breakChar);
	        return current + (begin ? 1 : -1);
	    }
	
	    function insertIndent(arr, current) {
	        //插入缩进
	        for (var i = 0; i < current; i++) {
	            arr.push(indentChar);
	        }
	    }
	
	    //创建uNode的静态方法
	    //支持标签和html
	    uNode.createElement = function (html) {
	        if (/[<>]/.test(html)) {
	            return UE.htmlparser(html).children[0]
	        } else {
	            return new uNode({
	                type:'element',
	                children:[],
	                tagName:html
	            })
	        }
	    };
	    uNode.createText = function (data,noTrans) {
	        return new UE.uNode({
	            type:'text',
	            'data':noTrans ? data : utils.unhtml(data || '')
	        })
	    };
	    function nodeToHtml(node, arr, formatter, current) {
	        switch (node.type) {
	            case 'root':
	                for (var i = 0, ci; ci = node.children[i++];) {
	                    //插入新行
	                    if (formatter && ci.type == 'element' && !dtd.$inlineWithA[ci.tagName] && i > 1) {
	                        insertLine(arr, current, true);
	                        insertIndent(arr, current)
	                    }
	                    nodeToHtml(ci, arr, formatter, current)
	                }
	                break;
	            case 'text':
	                isText(node, arr);
	                break;
	            case 'element':
	                isElement(node, arr, formatter, current);
	                break;
	            case 'comment':
	                isComment(node, arr, formatter);
	        }
	        return arr;
	    }
	
	    function isText(node, arr) {
	        if(node.parentNode.tagName == 'pre'){
	            //源码模式下输入html标签，不能做转换处理，直接输出
	            arr.push(node.data)
	        }else{
	            arr.push(notTransTagName[node.parentNode.tagName] ? utils.html(node.data) : node.data.replace(/[ ]{2}/g,' &nbsp;'))
	        }
	
	    }
	
	    function isElement(node, arr, formatter, current) {
	        var attrhtml = '';
	        if (node.attrs) {
	            attrhtml = [];
	            var attrs = node.attrs;
	            for (var a in attrs) {
	                //这里就针对
	                //<p>'<img src='http://nsclick.baidu.com/u.gif?&asdf=\"sdf&asdfasdfs;asdf'></p>
	                //这里边的\"做转换，要不用innerHTML直接被截断了，属性src
	                //有可能做的不够
	                attrhtml.push(a + (attrs[a] !== undefined ? '="' + (notTransAttrs[a] ? utils.html(attrs[a]).replace(/["]/g, function (a) {
	                   return '&quot;'
	                }) : utils.unhtml(attrs[a])) + '"' : ''))
	            }
	            attrhtml = attrhtml.join(' ');
	        }
	        arr.push('<' + node.tagName +
	            (attrhtml ? ' ' + attrhtml  : '') +
	            (dtd.$empty[node.tagName] ? '\/' : '' ) + '>'
	        );
	        //插入新行
	        if (formatter  &&  !dtd.$inlineWithA[node.tagName] && node.tagName != 'pre') {
	            if(node.children && node.children.length){
	                current = insertLine(arr, current, true);
	                insertIndent(arr, current)
	            }
	
	        }
	        if (node.children && node.children.length) {
	            for (var i = 0, ci; ci = node.children[i++];) {
	                if (formatter && ci.type == 'element' &&  !dtd.$inlineWithA[ci.tagName] && i > 1) {
	                    insertLine(arr, current);
	                    insertIndent(arr, current)
	                }
	                nodeToHtml(ci, arr, formatter, current)
	            }
	        }
	        if (!dtd.$empty[node.tagName]) {
	            if (formatter && !dtd.$inlineWithA[node.tagName]  && node.tagName != 'pre') {
	
	                if(node.children && node.children.length){
	                    current = insertLine(arr, current);
	                    insertIndent(arr, current)
	                }
	            }
	            arr.push('<\/' + node.tagName + '>');
	        }
	
	    }
	
	    function isComment(node, arr) {
	        arr.push('<!--' + node.data + '-->');
	    }
	
	    function getNodeById(root, id) {
	        var node;
	        if (root.type == 'element' && root.getAttr('id') == id) {
	            return root;
	        }
	        if (root.children && root.children.length) {
	            for (var i = 0, ci; ci = root.children[i++];) {
	                if (node = getNodeById(ci, id)) {
	                    return node;
	                }
	            }
	        }
	    }
	
	    function getNodesByTagName(node, tagName, arr) {
	        if (node.type == 'element' && node.tagName == tagName) {
	            arr.push(node);
	        }
	        if (node.children && node.children.length) {
	            for (var i = 0, ci; ci = node.children[i++];) {
	                getNodesByTagName(ci, tagName, arr)
	            }
	        }
	    }
	    function nodeTraversal(root,fn){
	        if(root.children && root.children.length){
	            for(var i= 0,ci;ci=root.children[i];){
	                nodeTraversal(ci,fn);
	                //ci被替换的情况，这里就不再走 fn了
	                if(ci.parentNode ){
	                    if(ci.children && ci.children.length){
	                        fn(ci)
	                    }
	                    if(ci.parentNode) i++
	                }
	            }
	        }else{
	            fn(root)
	        }
	
	    }
	    uNode.prototype = {
	
	        /**
	         * 当前节点对象，转换成html文本
	         * @method toHtml
	         * @return { String } 返回转换后的html字符串
	         * @example
	         * ```javascript
	         * node.toHtml();
	         * ```
	         */
	
	        /**
	         * 当前节点对象，转换成html文本
	         * @method toHtml
	         * @param { Boolean } formatter 是否格式化返回值
	         * @return { String } 返回转换后的html字符串
	         * @example
	         * ```javascript
	         * node.toHtml( true );
	         * ```
	         */
	        toHtml:function (formatter) {
	            var arr = [];
	            nodeToHtml(this, arr, formatter, 0);
	            return arr.join('')
	        },
	
	        /**
	         * 获取节点的html内容
	         * @method innerHTML
	         * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
	         * @return { String } 返回节点的html内容
	         * @example
	         * ```javascript
	         * var htmlstr = node.innerHTML();
	         * ```
	         */
	
	        /**
	         * 设置节点的html内容
	         * @method innerHTML
	         * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
	         * @param { String } htmlstr 传入要设置的html内容
	         * @return { UE.uNode } 返回节点本身
	         * @example
	         * ```javascript
	         * node.innerHTML('<span>text</span>');
	         * ```
	         */
	        innerHTML:function (htmlstr) {
	            if (this.type != 'element' || dtd.$empty[this.tagName]) {
	                return this;
	            }
	            if (utils.isString(htmlstr)) {
	                if(this.children){
	                    for (var i = 0, ci; ci = this.children[i++];) {
	                        ci.parentNode = null;
	                    }
	                }
	                this.children = [];
	                var tmpRoot = UE.htmlparser(htmlstr);
	                for (var i = 0, ci; ci = tmpRoot.children[i++];) {
	                    this.children.push(ci);
	                    ci.parentNode = this;
	                }
	                return this;
	            } else {
	                var tmpRoot = new UE.uNode({
	                    type:'root',
	                    children:this.children
	                });
	                return tmpRoot.toHtml();
	            }
	        },
	
	        /**
	         * 获取节点的纯文本内容
	         * @method innerText
	         * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
	         * @return { String } 返回节点的存文本内容
	         * @example
	         * ```javascript
	         * var textStr = node.innerText();
	         * ```
	         */
	
	        /**
	         * 设置节点的纯文本内容
	         * @method innerText
	         * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
	         * @param { String } textStr 传入要设置的文本内容
	         * @return { UE.uNode } 返回节点本身
	         * @example
	         * ```javascript
	         * node.innerText('<span>text</span>');
	         * ```
	         */
	        innerText:function (textStr,noTrans) {
	            if (this.type != 'element' || dtd.$empty[this.tagName]) {
	                return this;
	            }
	            if (textStr) {
	                if(this.children){
	                    for (var i = 0, ci; ci = this.children[i++];) {
	                        ci.parentNode = null;
	                    }
	                }
	                this.children = [];
	                this.appendChild(uNode.createText(textStr,noTrans));
	                return this;
	            } else {
	                return this.toHtml().replace(/<[^>]+>/g, '');
	            }
	        },
	
	        /**
	         * 获取当前对象的data属性
	         * @method getData
	         * @return { Object } 若节点的type值是elemenet，返回空字符串，否则返回节点的data属性
	         * @example
	         * ```javascript
	         * node.getData();
	         * ```
	         */
	        getData:function () {
	            if (this.type == 'element')
	                return '';
	            return this.data
	        },
	
	        /**
	         * 获取当前节点下的第一个子节点
	         * @method firstChild
	         * @return { UE.uNode } 返回第一个子节点
	         * @example
	         * ```javascript
	         * node.firstChild(); //返回第一个子节点
	         * ```
	         */
	        firstChild:function () {
	//            if (this.type != 'element' || dtd.$empty[this.tagName]) {
	//                return this;
	//            }
	            return this.children ? this.children[0] : null;
	        },
	
	        /**
	         * 获取当前节点下的最后一个子节点
	         * @method lastChild
	         * @return { UE.uNode } 返回最后一个子节点
	         * @example
	         * ```javascript
	         * node.lastChild(); //返回最后一个子节点
	         * ```
	         */
	        lastChild:function () {
	//            if (this.type != 'element' || dtd.$empty[this.tagName] ) {
	//                return this;
	//            }
	            return this.children ? this.children[this.children.length - 1] : null;
	        },
	
	        /**
	         * 获取和当前节点有相同父亲节点的前一个节点
	         * @method previousSibling
	         * @return { UE.uNode } 返回前一个节点
	         * @example
	         * ```javascript
	         * node.children[2].previousSibling(); //返回子节点node.children[1]
	         * ```
	         */
	        previousSibling : function(){
	            var parent = this.parentNode;
	            for (var i = 0, ci; ci = parent.children[i]; i++) {
	                if (ci === this) {
	                   return i == 0 ? null : parent.children[i-1];
	                }
	            }
	
	        },
	
	        /**
	         * 获取和当前节点有相同父亲节点的后一个节点
	         * @method nextSibling
	         * @return { UE.uNode } 返回后一个节点,找不到返回null
	         * @example
	         * ```javascript
	         * node.children[2].nextSibling(); //如果有，返回子节点node.children[3]
	         * ```
	         */
	        nextSibling : function(){
	            var parent = this.parentNode;
	            for (var i = 0, ci; ci = parent.children[i++];) {
	                if (ci === this) {
	                    return parent.children[i];
	                }
	            }
	        },
	
	        /**
	         * 用新的节点替换当前节点
	         * @method replaceChild
	         * @param { UE.uNode } target 要替换成该节点参数
	         * @param { UE.uNode } source 要被替换掉的节点
	         * @return { UE.uNode } 返回替换之后的节点对象
	         * @example
	         * ```javascript
	         * node.replaceChild(newNode, childNode); //用newNode替换childNode,childNode是node的子节点
	         * ```
	         */
	        replaceChild:function (target, source) {
	            if (this.children) {
	                if(target.parentNode){
	                    target.parentNode.removeChild(target);
	                }
	                for (var i = 0, ci; ci = this.children[i]; i++) {
	                    if (ci === source) {
	                        this.children.splice(i, 1, target);
	                        source.parentNode = null;
	                        target.parentNode = this;
	                        return target;
	                    }
	                }
	            }
	        },
	
	        /**
	         * 在节点的子节点列表最后位置插入一个节点
	         * @method appendChild
	         * @param { UE.uNode } node 要插入的节点
	         * @return { UE.uNode } 返回刚插入的子节点
	         * @example
	         * ```javascript
	         * node.appendChild( newNode ); //在node内插入子节点newNode
	         * ```
	         */
	        appendChild:function (node) {
	            if (this.type == 'root' || (this.type == 'element' && !dtd.$empty[this.tagName])) {
	                if (!this.children) {
	                    this.children = []
	                }
	                if(node.parentNode){
	                    node.parentNode.removeChild(node);
	                }
	                for (var i = 0, ci; ci = this.children[i]; i++) {
	                    if (ci === node) {
	                        this.children.splice(i, 1);
	                        break;
	                    }
	                }
	                this.children.push(node);
	                node.parentNode = this;
	                return node;
	            }
	
	
	        },
	
	        /**
	         * 在传入节点的前面插入一个节点
	         * @method insertBefore
	         * @param { UE.uNode } target 要插入的节点
	         * @param { UE.uNode } source 在该参数节点前面插入
	         * @return { UE.uNode } 返回刚插入的子节点
	         * @example
	         * ```javascript
	         * node.parentNode.insertBefore(newNode, node); //在node节点后面插入newNode
	         * ```
	         */
	        insertBefore:function (target, source) {
	            if (this.children) {
	                if(target.parentNode){
	                    target.parentNode.removeChild(target);
	                }
	                for (var i = 0, ci; ci = this.children[i]; i++) {
	                    if (ci === source) {
	                        this.children.splice(i, 0, target);
	                        target.parentNode = this;
	                        return target;
	                    }
	                }
	
	            }
	        },
	
	        /**
	         * 在传入节点的后面插入一个节点
	         * @method insertAfter
	         * @param { UE.uNode } target 要插入的节点
	         * @param { UE.uNode } source 在该参数节点后面插入
	         * @return { UE.uNode } 返回刚插入的子节点
	         * @example
	         * ```javascript
	         * node.parentNode.insertAfter(newNode, node); //在node节点后面插入newNode
	         * ```
	         */
	        insertAfter:function (target, source) {
	            if (this.children) {
	                if(target.parentNode){
	                    target.parentNode.removeChild(target);
	                }
	                for (var i = 0, ci; ci = this.children[i]; i++) {
	                    if (ci === source) {
	                        this.children.splice(i + 1, 0, target);
	                        target.parentNode = this;
	                        return target;
	                    }
	
	                }
	            }
	        },
	
	        /**
	         * 从当前节点的子节点列表中，移除节点
	         * @method removeChild
	         * @param { UE.uNode } node 要移除的节点引用
	         * @param { Boolean } keepChildren 是否保留移除节点的子节点，若传入true，自动把移除节点的子节点插入到移除的位置
	         * @return { * } 返回刚移除的子节点
	         * @example
	         * ```javascript
	         * node.removeChild(childNode,true); //在node的子节点列表中移除child节点，并且吧child的子节点插入到移除的位置
	         * ```
	         */
	        removeChild:function (node,keepChildren) {
	            if (this.children) {
	                for (var i = 0, ci; ci = this.children[i]; i++) {
	                    if (ci === node) {
	                        this.children.splice(i, 1);
	                        ci.parentNode = null;
	                        if(keepChildren && ci.children && ci.children.length){
	                            for(var j= 0,cj;cj=ci.children[j];j++){
	                                this.children.splice(i+j,0,cj);
	                                cj.parentNode = this;
	
	                            }
	                        }
	                        return ci;
	                    }
	                }
	            }
	        },
	
	        /**
	         * 获取当前节点所代表的元素属性，即获取attrs对象下的属性值
	         * @method getAttr
	         * @param { String } attrName 要获取的属性名称
	         * @return { * } 返回attrs对象下的属性值
	         * @example
	         * ```javascript
	         * node.getAttr('title');
	         * ```
	         */
	        getAttr:function (attrName) {
	            return this.attrs && this.attrs[attrName.toLowerCase()]
	        },
	
	        /**
	         * 设置当前节点所代表的元素属性，即设置attrs对象下的属性值
	         * @method setAttr
	         * @param { String } attrName 要设置的属性名称
	         * @param { * } attrVal 要设置的属性值，类型视设置的属性而定
	         * @return { * } 返回attrs对象下的属性值
	         * @example
	         * ```javascript
	         * node.setAttr('title','标题');
	         * ```
	         */
	        setAttr:function (attrName, attrVal) {
	            if (!attrName) {
	                delete this.attrs;
	                return;
	            }
	            if(!this.attrs){
	                this.attrs = {};
	            }
	            if (utils.isObject(attrName)) {
	                for (var a in attrName) {
	                    if (!attrName[a]) {
	                        delete this.attrs[a]
	                    } else {
	                        this.attrs[a.toLowerCase()] = attrName[a];
	                    }
	                }
	            } else {
	                if (!attrVal) {
	                    delete this.attrs[attrName]
	                } else {
	                    this.attrs[attrName.toLowerCase()] = attrVal;
	                }
	
	            }
	        },
	
	        /**
	         * 获取当前节点在父节点下的位置索引
	         * @method getIndex
	         * @return { Number } 返回索引数值，如果没有父节点，返回-1
	         * @example
	         * ```javascript
	         * node.getIndex();
	         * ```
	         */
	        getIndex:function(){
	            var parent = this.parentNode;
	            for(var i= 0,ci;ci=parent.children[i];i++){
	                if(ci === this){
	                    return i;
	                }
	            }
	            return -1;
	        },
	
	        /**
	         * 在当前节点下，根据id查找节点
	         * @method getNodeById
	         * @param { String } id 要查找的id
	         * @return { UE.uNode } 返回找到的节点
	         * @example
	         * ```javascript
	         * node.getNodeById('textId');
	         * ```
	         */
	        getNodeById:function (id) {
	            var node;
	            if (this.children && this.children.length) {
	                for (var i = 0, ci; ci = this.children[i++];) {
	                    if (node = getNodeById(ci, id)) {
	                        return node;
	                    }
	                }
	            }
	        },
	
	        /**
	         * 在当前节点下，根据元素名称查找节点列表
	         * @method getNodesByTagName
	         * @param { String } tagNames 要查找的元素名称
	         * @return { Array } 返回找到的节点列表
	         * @example
	         * ```javascript
	         * node.getNodesByTagName('span');
	         * ```
	         */
	        getNodesByTagName:function (tagNames) {
	            tagNames = utils.trim(tagNames).replace(/[ ]{2,}/g, ' ').split(' ');
	            var arr = [], me = this;
	            utils.each(tagNames, function (tagName) {
	                if (me.children && me.children.length) {
	                    for (var i = 0, ci; ci = me.children[i++];) {
	                        getNodesByTagName(ci, tagName, arr)
	                    }
	                }
	            });
	            return arr;
	        },
	
	        /**
	         * 根据样式名称，获取节点的样式值
	         * @method getStyle
	         * @param { String } name 要获取的样式名称
	         * @return { String } 返回样式值
	         * @example
	         * ```javascript
	         * node.getStyle('font-size');
	         * ```
	         */
	        getStyle:function (name) {
	            var cssStyle = this.getAttr('style');
	            if (!cssStyle) {
	                return ''
	            }
	            var reg = new RegExp('(^|;)\\s*' + name + ':([^;]+)','i');
	            var match = cssStyle.match(reg);
	            if (match && match[0]) {
	                return match[2]
	            }
	            return '';
	        },
	
	        /**
	         * 给节点设置样式
	         * @method setStyle
	         * @param { String } name 要设置的的样式名称
	         * @param { String } val 要设置的的样值
	         * @example
	         * ```javascript
	         * node.setStyle('font-size', '12px');
	         * ```
	         */
	        setStyle:function (name, val) {
	            function exec(name, val) {
	                var reg = new RegExp('(^|;)\\s*' + name + ':([^;]+;?)', 'gi');
	                cssStyle = cssStyle.replace(reg, '$1');
	                if (val) {
	                    cssStyle = name + ':' + utils.unhtml(val) + ';' + cssStyle
	                }
	
	            }
	
	            var cssStyle = this.getAttr('style');
	            if (!cssStyle) {
	                cssStyle = '';
	            }
	            if (utils.isObject(name)) {
	                for (var a in name) {
	                    exec(a, name[a])
	                }
	            } else {
	                exec(name, val)
	            }
	            this.setAttr('style', utils.trim(cssStyle))
	        },
	
	        /**
	         * 传入一个函数，递归遍历当前节点下的所有节点
	         * @method traversal
	         * @param { Function } fn 遍历到节点的时，传入节点作为参数，运行此函数
	         * @example
	         * ```javascript
	         * traversal(node, function(){
	         *     console.log(node.type);
	         * });
	         * ```
	         */
	        traversal:function(fn){
	            if(this.children && this.children.length){
	                nodeTraversal(this,fn);
	            }
	            return this;
	        }
	    }
	})();
	
	
	// core/htmlparser.js
	/**
	 * html字符串转换成uNode节点
	 * @file
	 * @module UE
	 * @since 1.2.6.1
	 */
	
	/**
	 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
	 * @unfile
	 * @module UE
	 */
	
	/**
	 * html字符串转换成uNode节点的静态方法
	 * @method htmlparser
	 * @param { String } htmlstr 要转换的html代码
	 * @param { Boolean } ignoreBlank 若设置为true，转换的时候忽略\n\r\t等空白字符
	 * @return { uNode } 给定的html片段转换形成的uNode对象
	 * @example
	 * ```javascript
	 * var root = UE.htmlparser('<p><b>htmlparser</b></p>', true);
	 * ```
	 */
	
	var htmlparser = UE.htmlparser = function (htmlstr,ignoreBlank) {
	    //todo 原来的方式  [^"'<>\/] 有\/就不能配对上 <TD vAlign=top background=../AAA.JPG> 这样的标签了
	    //先去掉了，加上的原因忘了，这里先记录
	    var re_tag = /<(?:(?:\/([^>]+)>)|(?:!--([\S|\s]*?)-->)|(?:([^\s\/<>]+)\s*((?:(?:"[^"]*")|(?:'[^']*')|[^"'<>])*)\/?>))/g,
	        re_attr = /([\w\-:.]+)(?:(?:\s*=\s*(?:(?:"([^"]*)")|(?:'([^']*)')|([^\s>]+)))|(?=\s|$))/g;
	
	    //ie下取得的html可能会有\n存在，要去掉，在处理replace(/[\t\r\n]*/g,'');代码高量的\n不能去除
	    var allowEmptyTags = {
	        b:1,code:1,i:1,u:1,strike:1,s:1,tt:1,strong:1,q:1,samp:1,em:1,span:1,
	        sub:1,img:1,sup:1,font:1,big:1,small:1,iframe:1,a:1,br:1,pre:1
	    };
	    htmlstr = htmlstr.replace(new RegExp(domUtils.fillChar, 'g'), '');
	    if(!ignoreBlank){
	        htmlstr = htmlstr.replace(new RegExp('[\\r\\t\\n'+(ignoreBlank?'':' ')+']*<\/?(\\w+)\\s*(?:[^>]*)>[\\r\\t\\n'+(ignoreBlank?'':' ')+']*','g'), function(a,b){
	            //br暂时单独处理
	            if(b && allowEmptyTags[b.toLowerCase()]){
	                return a.replace(/(^[\n\r]+)|([\n\r]+$)/g,'');
	            }
	            return a.replace(new RegExp('^[\\r\\n'+(ignoreBlank?'':' ')+']+'),'').replace(new RegExp('[\\r\\n'+(ignoreBlank?'':' ')+']+$'),'');
	        });
	    }
	
	    var notTransAttrs = {
	        'href':1,
	        'src':1
	    };
	
	    var uNode = UE.uNode,
	        needParentNode = {
	            'td':'tr',
	            'tr':['tbody','thead','tfoot'],
	            'tbody':'table',
	            'th':'tr',
	            'thead':'table',
	            'tfoot':'table',
	            'caption':'table',
	            'li':['ul', 'ol'],
	            'dt':'dl',
	            'dd':'dl',
	            'option':'select'
	        },
	        needChild = {
	            'ol':'li',
	            'ul':'li'
	        };
	
	    function text(parent, data) {
	
	        if(needChild[parent.tagName]){
	            var tmpNode = uNode.createElement(needChild[parent.tagName]);
	            parent.appendChild(tmpNode);
	            tmpNode.appendChild(uNode.createText(data));
	            parent = tmpNode;
	        }else{
	
	            parent.appendChild(uNode.createText(data));
	        }
	    }
	
	    function element(parent, tagName, htmlattr) {
	        var needParentTag;
	        if (needParentTag = needParentNode[tagName]) {
	            var tmpParent = parent,hasParent;
	            while(tmpParent.type != 'root'){
	                if(utils.isArray(needParentTag) ? utils.indexOf(needParentTag, tmpParent.tagName) != -1 : needParentTag == tmpParent.tagName){
	                    parent = tmpParent;
	                    hasParent = true;
	                    break;
	                }
	                tmpParent = tmpParent.parentNode;
	            }
	            if(!hasParent){
	                parent = element(parent, utils.isArray(needParentTag) ? needParentTag[0] : needParentTag)
	            }
	        }
	        //按dtd处理嵌套
	//        if(parent.type != 'root' && !dtd[parent.tagName][tagName])
	//            parent = parent.parentNode;
	        var elm = new uNode({
	            parentNode:parent,
	            type:'element',
	            tagName:tagName.toLowerCase(),
	            //是自闭合的处理一下
	            children:dtd.$empty[tagName] ? null : []
	        });
	        //如果属性存在，处理属性
	        if (htmlattr) {
	            var attrs = {}, match;
	            while (match = re_attr.exec(htmlattr)) {
	                attrs[match[1].toLowerCase()] = notTransAttrs[match[1].toLowerCase()] ? (match[2] || match[3] || match[4]) : utils.unhtml(match[2] || match[3] || match[4])
	            }
	            elm.attrs = attrs;
	        }
	        //trace:3970
	//        //如果parent下不能放elm
	//        if(dtd.$inline[parent.tagName] && dtd.$block[elm.tagName] && !dtd[parent.tagName][elm.tagName]){
	//            parent = parent.parentNode;
	//            elm.parentNode = parent;
	//        }
	        parent.children.push(elm);
	        //如果是自闭合节点返回父亲节点
	        return  dtd.$empty[tagName] ? parent : elm
	    }
	
	    function comment(parent, data) {
	        parent.children.push(new uNode({
	            type:'comment',
	            data:data,
	            parentNode:parent
	        }));
	    }
	
	    var match, currentIndex = 0, nextIndex = 0;
	    //设置根节点
	    var root = new uNode({
	        type:'root',
	        children:[]
	    });
	    var currentParent = root;
	
	    while (match = re_tag.exec(htmlstr)) {
	        currentIndex = match.index;
	        try{
	            if (currentIndex > nextIndex) {
	                //text node
	                text(currentParent, htmlstr.slice(nextIndex, currentIndex));
	            }
	            if (match[3]) {
	
	                if(dtd.$cdata[currentParent.tagName]){
	                    text(currentParent, match[0]);
	                }else{
	                    //start tag
	                    currentParent = element(currentParent, match[3].toLowerCase(), match[4]);
	                }
	
	
	            } else if (match[1]) {
	                if(currentParent.type != 'root'){
	                    if(dtd.$cdata[currentParent.tagName] && !dtd.$cdata[match[1]]){
	                        text(currentParent, match[0]);
	                    }else{
	                        var tmpParent = currentParent;
	                        while(currentParent.type == 'element' && currentParent.tagName != match[1].toLowerCase()){
	                            currentParent = currentParent.parentNode;
	                            if(currentParent.type == 'root'){
	                                currentParent = tmpParent;
	                                throw 'break'
	                            }
	                        }
	                        //end tag
	                        currentParent = currentParent.parentNode;
	                    }
	
	                }
	
	            } else if (match[2]) {
	                //comment
	                comment(currentParent, match[2])
	            }
	        }catch(e){}
	
	        nextIndex = re_tag.lastIndex;
	
	    }
	    //如果结束是文本，就有可能丢掉，所以这里手动判断一下
	    //例如 <li>sdfsdfsdf<li>sdfsdfsdfsdf
	    if (nextIndex < htmlstr.length) {
	        text(currentParent, htmlstr.slice(nextIndex));
	    }
	    return root;
	};
	
	
	// core/filternode.js
	/**
	 * UE过滤节点的静态方法
	 * @file
	 */
	
	/**
	 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
	 * @module UE
	 */
	
	
	/**
	 * 根据传入节点和过滤规则过滤相应节点
	 * @module UE
	 * @since 1.2.6.1
	 * @method filterNode
	 * @param { Object } root 指定root节点
	 * @param { Object } rules 过滤规则json对象
	 * @example
	 * ```javascript
	 * UE.filterNode(root,editor.options.filterRules);
	 * ```
	 */
	var filterNode = UE.filterNode = function () {
	    function filterNode(node,rules){
	        switch (node.type) {
	            case 'text':
	                break;
	            case 'element':
	                var val;
	                if(val = rules[node.tagName]){
	                   if(val === '-'){
	                       node.parentNode.removeChild(node)
	                   }else if(utils.isFunction(val)){
	                       var parentNode = node.parentNode,
	                           index = node.getIndex();
	                       val(node);
	                       if(node.parentNode){
	                           if(node.children){
	                               for(var i = 0,ci;ci=node.children[i];){
	                                   filterNode(ci,rules);
	                                   if(ci.parentNode){
	                                       i++;
	                                   }
	                               }
	                           }
	                       }else{
	                           for(var i = index,ci;ci=parentNode.children[i];){
	                               filterNode(ci,rules);
	                               if(ci.parentNode){
	                                   i++;
	                               }
	                           }
	                       }
	
	
	                   }else{
	                       var attrs = val['$'];
	                       if(attrs && node.attrs){
	                           var tmpAttrs = {},tmpVal;
	                           for(var a in attrs){
	                               tmpVal = node.getAttr(a);
	                               //todo 只先对style单独处理
	                               if(a == 'style' && utils.isArray(attrs[a])){
	                                   var tmpCssStyle = [];
	                                   utils.each(attrs[a],function(v){
	                                       var tmp;
	                                       if(tmp = node.getStyle(v)){
	                                           tmpCssStyle.push(v + ':' + tmp);
	                                       }
	                                   });
	                                   tmpVal = tmpCssStyle.join(';')
	                               }
	                               if(tmpVal){
	                                   tmpAttrs[a] = tmpVal;
	                               }
	
	                           }
	                           node.attrs = tmpAttrs;
	                       }
	                       if(node.children){
	                           for(var i = 0,ci;ci=node.children[i];){
	                               filterNode(ci,rules);
	                               if(ci.parentNode){
	                                   i++;
	                               }
	                           }
	                       }
	                   }
	                }else{
	                    //如果不在名单里扣出子节点并删除该节点,cdata除外
	                    if(dtd.$cdata[node.tagName]){
	                        node.parentNode.removeChild(node)
	                    }else{
	                        var parentNode = node.parentNode,
	                            index = node.getIndex();
	                        node.parentNode.removeChild(node,true);
	                        for(var i = index,ci;ci=parentNode.children[i];){
	                            filterNode(ci,rules);
	                            if(ci.parentNode){
	                                i++;
	                            }
	                        }
	                    }
	                }
	                break;
	            case 'comment':
	                node.parentNode.removeChild(node)
	        }
	
	    }
	    return function(root,rules){
	        if(utils.isEmptyObject(rules)){
	            return root;
	        }
	        var val;
	        if(val = rules['-']){
	            utils.each(val.split(' '),function(k){
	                rules[k] = '-'
	            })
	        }
	        for(var i= 0,ci;ci=root.children[i];){
	            filterNode(ci,rules);
	            if(ci.parentNode){
	               i++;
	            }
	        }
	        return root;
	    }
	}();
	
	// core/plugin.js
	/**
	 * Created with JetBrains PhpStorm.
	 * User: campaign
	 * Date: 10/8/13
	 * Time: 6:15 PM
	 * To change this template use File | Settings | File Templates.
	 */
	UE.plugin = function(){
	    var _plugins = {};
	    return {
	        register : function(pluginName,fn,oldOptionName,afterDisabled){
	            if(oldOptionName && utils.isFunction(oldOptionName)){
	                afterDisabled = oldOptionName;
	                oldOptionName = null
	            }
	            _plugins[pluginName] = {
	                optionName : oldOptionName || pluginName,
	                execFn : fn,
	                //当插件被禁用时执行
	                afterDisabled : afterDisabled
	            }
	        },
	        load : function(editor){
	            utils.each(_plugins,function(plugin){
	                var _export = plugin.execFn.call(editor);
	                if(editor.options[plugin.optionName] !== false){
	                    if(_export){
	                        //后边需要再做扩展
	                        utils.each(_export,function(v,k){
	                            switch(k.toLowerCase()){
	                                case 'shortcutkey':
	                                    editor.addshortcutkey(v);
	                                    break;
	                                case 'bindevents':
	                                    utils.each(v,function(fn,eventName){
	                                        editor.addListener(eventName,fn);
	                                    });
	                                    break;
	                                case 'bindmultievents':
	                                    utils.each(utils.isArray(v) ? v:[v],function(event){
	                                        var types = utils.trim(event.type).split(/\s+/);
	                                        utils.each(types,function(eventName){
	                                            editor.addListener(eventName, event.handler);
	                                        });
	                                    });
	                                    break;
	                                case 'commands':
	                                    utils.each(v,function(execFn,execName){
	                                        editor.commands[execName] = execFn
	                                    });
	                                    break;
	                                case 'outputrule':
	                                    editor.addOutputRule(v);
	                                    break;
	                                case 'inputrule':
	                                    editor.addInputRule(v);
	                                    break;
	                                case 'defaultoptions':
	                                    editor.setOpt(v)
	                            }
	                        })
	                    }
	
	                }else if(plugin.afterDisabled){
	                    plugin.afterDisabled.call(editor)
	                }
	
	            });
	            //向下兼容
	            utils.each(UE.plugins,function(plugin){
	                plugin.call(editor);
	            });
	        },
	        run : function(pluginName,editor){
	            var plugin = _plugins[pluginName];
	            if(plugin){
	                plugin.exeFn.call(editor)
	            }
	        }
	    }
	}();
	
	// core/keymap.js
	var keymap = UE.keymap  = {
	    'Backspace' : 8,
	    'Tab' : 9,
	    'Enter' : 13,
	
	    'Shift':16,
	    'Control':17,
	    'Alt':18,
	    'CapsLock':20,
	
	    'Esc':27,
	
	    'Spacebar':32,
	
	    'PageUp':33,
	    'PageDown':34,
	    'End':35,
	    'Home':36,
	
	    'Left':37,
	    'Up':38,
	    'Right':39,
	    'Down':40,
	
	    'Insert':45,
	
	    'Del':46,
	
	    'NumLock':144,
	
	    'Cmd':91,
	
	    '=':187,
	    '-':189,
	
	    "b":66,
	    'i':73,
	    //回退
	    'z':90,
	    'y':89,
	    //粘贴
	    'v' : 86,
	    'x' : 88,
	
	    's' : 83,
	
	    'n' : 78
	};
	
	// core/localstorage.js
	//存储媒介封装
	var LocalStorage = UE.LocalStorage = (function () {
	
	    var storage = window.localStorage || getUserData() || null,
	        LOCAL_FILE = 'localStorage';
	
	    return {
	
	        saveLocalData: function (key, data) {
	
	            if (storage && data) {
	                storage.setItem(key, data);
	                return true;
	            }
	
	            return false;
	
	        },
	
	        getLocalData: function (key) {
	
	            if (storage) {
	                return storage.getItem(key);
	            }
	
	            return null;
	
	        },
	
	        removeItem: function (key) {
	
	            storage && storage.removeItem(key);
	
	        }
	
	    };
	
	    function getUserData() {
	
	        var container = document.createElement("div");
	        container.style.display = "none";
	
	        if (!container.addBehavior) {
	            return null;
	        }
	
	        container.addBehavior("#default#userdata");
	
	        return {
	
	            getItem: function (key) {
	
	                var result = null;
	
	                try {
	                    document.body.appendChild(container);
	                    container.load(LOCAL_FILE);
	                    result = container.getAttribute(key);
	                    document.body.removeChild(container);
	                } catch (e) {
	                }
	
	                return result;
	
	            },
	
	            setItem: function (key, value) {
	
	                document.body.appendChild(container);
	                container.setAttribute(key, value);
	                container.save(LOCAL_FILE);
	                document.body.removeChild(container);
	
	            },
	
	            //// 暂时没有用到
	            //clear: function () {
	            //
	            //    var expiresTime = new Date();
	            //    expiresTime.setFullYear(expiresTime.getFullYear() - 1);
	            //    document.body.appendChild(container);
	            //    container.expires = expiresTime.toUTCString();
	            //    container.save(LOCAL_FILE);
	            //    document.body.removeChild(container);
	            //
	            //},
	
	            removeItem: function (key) {
	
	                document.body.appendChild(container);
	                container.removeAttribute(key);
	                container.save(LOCAL_FILE);
	                document.body.removeChild(container);
	
	            }
	
	        };
	
	    }
	
	})();
	
	(function () {
	
	    var ROOTKEY = 'ueditor_preference';
	
	    UE.Editor.prototype.setPreferences = function(key,value){
	        var obj = {};
	        if (utils.isString(key)) {
	            obj[ key ] = value;
	        } else {
	            obj = key;
	        }
	        var data = LocalStorage.getLocalData(ROOTKEY);
	        if (data && (data = utils.str2json(data))) {
	            utils.extend(data, obj);
	        } else {
	            data = obj;
	        }
	        data && LocalStorage.saveLocalData(ROOTKEY, utils.json2str(data));
	    };
	
	    UE.Editor.prototype.getPreferences = function(key){
	        var data = LocalStorage.getLocalData(ROOTKEY);
	        if (data && (data = utils.str2json(data))) {
	            return key ? data[key] : data
	        }
	        return null;
	    };
	
	    UE.Editor.prototype.removePreferences = function (key) {
	        var data = LocalStorage.getLocalData(ROOTKEY);
	        if (data && (data = utils.str2json(data))) {
	            data[key] = undefined;
	            delete data[key]
	        }
	        data && LocalStorage.saveLocalData(ROOTKEY, utils.json2str(data));
	    };
	
	})();
	
	
	// plugins/defaultfilter.js
	///import core
	///plugin 编辑器默认的过滤转换机制
	
	UE.plugins['defaultfilter'] = function () {
	    var me = this;
	    me.setOpt({
	        'allowDivTransToP':true,
	        'disabledTableInTable':true
	    });
	    //默认的过滤处理
	    //进入编辑器的内容处理
	    me.addInputRule(function (root) {
	        var allowDivTransToP = this.options.allowDivTransToP;
	        var val;
	        function tdParent(node){
	            while(node && node.type == 'element'){
	                if(node.tagName == 'td'){
	                    return true;
	                }
	                node = node.parentNode;
	            }
	            return false;
	        }
	        //进行默认的处理
	        root.traversal(function (node) {
	            if (node.type == 'element') {
	                if (!dtd.$cdata[node.tagName] && me.options.autoClearEmptyNode && dtd.$inline[node.tagName] && !dtd.$empty[node.tagName] && (!node.attrs || utils.isEmptyObject(node.attrs))) {
	                    if (!node.firstChild()) node.parentNode.removeChild(node);
	                    else if (node.tagName == 'span' && (!node.attrs || utils.isEmptyObject(node.attrs))) {
	                        node.parentNode.removeChild(node, true)
	                    }
	                    return;
	                }
	                switch (node.tagName) {
	                    case 'style':
	                    case 'script':
	                        node.setAttr({
	                            cdata_tag: node.tagName,
	                            cdata_data: (node.innerHTML() || ''),
	                            '_ue_custom_node_':'true'
	                        });
	                        node.tagName = 'div';
	                        node.innerHTML('');
	                        break;
	                    case 'a':
	                        if (val = node.getAttr('href')) {
	                            node.setAttr('_href', val)
	                        }
	                        break;
	                    case 'img':
	                        //todo base64暂时去掉，后边做远程图片上传后，干掉这个
	                        if (val = node.getAttr('src')) {
	                            if (/^data:/.test(val)) {
	                                node.parentNode.removeChild(node);
	                                break;
	                            }
	                        }
	                        node.setAttr('_src', node.getAttr('src'));
	                        break;
	                    case 'span':
	                        if (browser.webkit && (val = node.getStyle('white-space'))) {
	                            if (/nowrap|normal/.test(val)) {
	                                node.setStyle('white-space', '');
	                                if (me.options.autoClearEmptyNode && utils.isEmptyObject(node.attrs)) {
	                                    node.parentNode.removeChild(node, true)
	                                }
	                            }
	                        }
	                        val = node.getAttr('id');
	                        if(val && /^_baidu_bookmark_/i.test(val)){
	                            node.parentNode.removeChild(node)
	                        }
	                        break;
	                    case 'p':
	                        if (val = node.getAttr('align')) {
	                            node.setAttr('align');
	                            node.setStyle('text-align', val)
	                        }
	                        //trace:3431
	//                        var cssStyle = node.getAttr('style');
	//                        if (cssStyle) {
	//                            cssStyle = cssStyle.replace(/(margin|padding)[^;]+/g, '');
	//                            node.setAttr('style', cssStyle)
	//
	//                        }
	                        //p标签不允许嵌套
	                        utils.each(node.children,function(n){
	                            if(n.type == 'element' && n.tagName == 'p'){
	                                var next = n.nextSibling();
	                                node.parentNode.insertAfter(n,node);
	                                var last = n;
	                                while(next){
	                                    var tmp = next.nextSibling();
	                                    node.parentNode.insertAfter(next,last);
	                                    last = next;
	                                    next = tmp;
	                                }
	                                return false;
	                            }
	                        });
	                        if (!node.firstChild()) {
	                            node.innerHTML(browser.ie ? '&nbsp;' : '<br/>')
	                        }
	                        break;
	                    case 'div':
	                        if(node.getAttr('cdata_tag')){
	                            break;
	                        }
	                        //针对代码这里不处理插入代码的div
	                        val = node.getAttr('class');
	                        if(val && /^line number\d+/.test(val)){
	                            break;
	                        }
	                        if(!allowDivTransToP){
	                            break;
	                        }
	                        var tmpNode, p = UE.uNode.createElement('p');
	                        while (tmpNode = node.firstChild()) {
	                            if (tmpNode.type == 'text' || !UE.dom.dtd.$block[tmpNode.tagName]) {
	                                p.appendChild(tmpNode);
	                            } else {
	                                if (p.firstChild()) {
	                                    node.parentNode.insertBefore(p, node);
	                                    p = UE.uNode.createElement('p');
	                                } else {
	                                    node.parentNode.insertBefore(tmpNode, node);
	                                }
	                            }
	                        }
	                        if (p.firstChild()) {
	                            node.parentNode.insertBefore(p, node);
	                        }
	                        node.parentNode.removeChild(node);
	                        break;
	                    case 'dl':
	                        node.tagName = 'ul';
	                        break;
	                    case 'dt':
	                    case 'dd':
	                        node.tagName = 'li';
	                        break;
	                    case 'li':
	                        var className = node.getAttr('class');
	                        if (!className || !/list\-/.test(className)) {
	                            node.setAttr()
	                        }
	                        var tmpNodes = node.getNodesByTagName('ol ul');
	                        UE.utils.each(tmpNodes, function (n) {
	                            node.parentNode.insertAfter(n, node);
	                        });
	                        break;
	                    case 'td':
	                    case 'th':
	                    case 'caption':
	                        if(!node.children || !node.children.length){
	                            node.appendChild(browser.ie11below ? UE.uNode.createText(' ') : UE.uNode.createElement('br'))
	                        }
	                        break;
	                    case 'table':
	                        if(me.options.disabledTableInTable && tdParent(node)){
	                            node.parentNode.insertBefore(UE.uNode.createText(node.innerText()),node);
	                            node.parentNode.removeChild(node)
	                        }
	                }
	
	            }
	//            if(node.type == 'comment'){
	//                node.parentNode.removeChild(node);
	//            }
	        })
	
	    });
	
	    //从编辑器出去的内容处理
	    me.addOutputRule(function (root) {
	
	        var val;
	        root.traversal(function (node) {
	            if (node.type == 'element') {
	
	                if (me.options.autoClearEmptyNode && dtd.$inline[node.tagName] && !dtd.$empty[node.tagName] && (!node.attrs || utils.isEmptyObject(node.attrs))) {
	
	                    if (!node.firstChild()) node.parentNode.removeChild(node);
	                    else if (node.tagName == 'span' && (!node.attrs || utils.isEmptyObject(node.attrs))) {
	                        node.parentNode.removeChild(node, true)
	                    }
	                    return;
	                }
	                switch (node.tagName) {
	                    case 'div':
	                        if (val = node.getAttr('cdata_tag')) {
	                            node.tagName = val;
	                            node.appendChild(UE.uNode.createText(node.getAttr('cdata_data')));
	                            node.setAttr({cdata_tag: '', cdata_data: '','_ue_custom_node_':''});
	                        }
	                        break;
	                    case 'a':
	                        if (val = node.getAttr('_href')) {
	                            node.setAttr({
	                                'href': utils.html(val),
	                                '_href': ''
	                            })
	                        }
	                        break;
	                        break;
	                    case 'span':
	                        val = node.getAttr('id');
	                        if(val && /^_baidu_bookmark_/i.test(val)){
	                            node.parentNode.removeChild(node)
	                        }
	                        break;
	                    case 'img':
	                        if (val = node.getAttr('_src')) {
	                            node.setAttr({
	                                'src': node.getAttr('_src'),
	                                '_src': ''
	                            })
	                        }
	
	
	                }
	            }
	
	        })
	
	
	    });
	};
	
	
	// plugins/inserthtml.js
	/**
	 * 插入html字符串插件
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 插入html代码
	 * @command inserthtml
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { String } html 插入的html字符串
	 * @remaind 插入的标签内容是在当前的选区位置上插入，如果当前是闭合状态，那直接插入内容， 如果当前是选中状态，将先清除当前选中内容后，再做插入
	 * @warning 注意:该命令会对当前选区的位置，对插入的内容进行过滤转换处理。 过滤的规则遵循html语意化的原则。
	 * @example
	 * ```javascript
	 * //xxx[BB]xxx 当前选区为非闭合选区，选中BB这两个文本
	 * //执行命令，插入<b>CC</b>
	 * //插入后的效果 xxx<b>CC</b>xxx
	 * //<p>xx|xxx</p> 当前选区为闭合状态
	 * //插入<p>CC</p>
	 * //结果 <p>xx</p><p>CC</p><p>xxx</p>
	 * //<p>xxxx</p>|</p>xxx</p> 当前选区在两个p标签之间
	 * //插入 xxxx
	 * //结果 <p>xxxx</p><p>xxxx</p></p>xxx</p>
	 * ```
	 */
	
	UE.commands['inserthtml'] = {
	    execCommand: function (command,html,notNeedFilter){
	        var me = this,
	            range,
	            div;
	        if(!html){
	            return;
	        }
	        if(me.fireEvent('beforeinserthtml',html) === true){
	            return;
	        }
	        range = me.selection.getRange();
	        div = range.document.createElement( 'div' );
	        div.style.display = 'inline';
	
	        if (!notNeedFilter) {
	            var root = UE.htmlparser(html);
	            //如果给了过滤规则就先进行过滤
	            if(me.options.filterRules){
	                UE.filterNode(root,me.options.filterRules);
	            }
	            //执行默认的处理
	            me.filterInputRule(root);
	            html = root.toHtml()
	        }
	        div.innerHTML = utils.trim( html );
	
	        if ( !range.collapsed ) {
	            var tmpNode = range.startContainer;
	            if(domUtils.isFillChar(tmpNode)){
	                range.setStartBefore(tmpNode)
	            }
	            tmpNode = range.endContainer;
	            if(domUtils.isFillChar(tmpNode)){
	                range.setEndAfter(tmpNode)
	            }
	            range.txtToElmBoundary();
	            //结束边界可能放到了br的前边，要把br包含进来
	            // x[xxx]<br/>
	            if(range.endContainer && range.endContainer.nodeType == 1){
	                tmpNode = range.endContainer.childNodes[range.endOffset];
	                if(tmpNode && domUtils.isBr(tmpNode)){
	                    range.setEndAfter(tmpNode);
	                }
	            }
	            if(range.startOffset == 0){
	                tmpNode = range.startContainer;
	                if(domUtils.isBoundaryNode(tmpNode,'firstChild') ){
	                    tmpNode = range.endContainer;
	                    if(range.endOffset == (tmpNode.nodeType == 3 ? tmpNode.nodeValue.length : tmpNode.childNodes.length) && domUtils.isBoundaryNode(tmpNode,'lastChild')){
	                        me.body.innerHTML = '<p>'+(browser.ie ? '' : '<br/>')+'</p>';
	                        range.setStart(me.body.firstChild,0).collapse(true)
	
	                    }
	                }
	            }
	            !range.collapsed && range.deleteContents();
	            if(range.startContainer.nodeType == 1){
	                var child = range.startContainer.childNodes[range.startOffset],pre;
	                if(child && domUtils.isBlockElm(child) && (pre = child.previousSibling) && domUtils.isBlockElm(pre)){
	                    range.setEnd(pre,pre.childNodes.length).collapse();
	                    while(child.firstChild){
	                        pre.appendChild(child.firstChild);
	                    }
	                    domUtils.remove(child);
	                }
	            }
	
	        }
	
	
	        var child,parent,pre,tmp,hadBreak = 0, nextNode;
	        //如果当前位置选中了fillchar要干掉，要不会产生空行
	        if(range.inFillChar()){
	            child = range.startContainer;
	            if(domUtils.isFillChar(child)){
	                range.setStartBefore(child).collapse(true);
	                domUtils.remove(child);
	            }else if(domUtils.isFillChar(child,true)){
	                child.nodeValue = child.nodeValue.replace(fillCharReg,'');
	                range.startOffset--;
	                range.collapsed && range.collapse(true)
	            }
	        }
	        //列表单独处理
	        var li = domUtils.findParentByTagName(range.startContainer,'li',true);
	        if(li){
	            var next,last;
	            while(child = div.firstChild){
	                //针对hr单独处理一下先
	                while(child && (child.nodeType == 3 || !domUtils.isBlockElm(child) || child.tagName=='HR' )){
	                    next = child.nextSibling;
	                    range.insertNode( child).collapse();
	                    last = child;
	                    child = next;
	
	                }
	                if(child){
	                    if(/^(ol|ul)$/i.test(child.tagName)){
	                        while(child.firstChild){
	                            last = child.firstChild;
	                            domUtils.insertAfter(li,child.firstChild);
	                            li = li.nextSibling;
	                        }
	                        domUtils.remove(child)
	                    }else{
	                        var tmpLi;
	                        next = child.nextSibling;
	                        tmpLi = me.document.createElement('li');
	                        domUtils.insertAfter(li,tmpLi);
	                        tmpLi.appendChild(child);
	                        last = child;
	                        child = next;
	                        li = tmpLi;
	                    }
	                }
	            }
	            li = domUtils.findParentByTagName(range.startContainer,'li',true);
	            if(domUtils.isEmptyBlock(li)){
	                domUtils.remove(li)
	            }
	            if(last){
	
	                range.setStartAfter(last).collapse(true).select(true)
	            }
	        }else{
	            while ( child = div.firstChild ) {
	                if(hadBreak){
	                    var p = me.document.createElement('p');
	                    while(child && (child.nodeType == 3 || !dtd.$block[child.tagName])){
	                        nextNode = child.nextSibling;
	                        p.appendChild(child);
	                        child = nextNode;
	                    }
	                    if(p.firstChild){
	
	                        child = p
	                    }
	                }
	                range.insertNode( child );
	                nextNode = child.nextSibling;
	                if ( !hadBreak && child.nodeType == domUtils.NODE_ELEMENT && domUtils.isBlockElm( child ) ){
	
	                    parent = domUtils.findParent( child,function ( node ){ return domUtils.isBlockElm( node ); } );
	                    if ( parent && parent.tagName.toLowerCase() != 'body' && !(dtd[parent.tagName][child.nodeName] && child.parentNode === parent)){
	                        if(!dtd[parent.tagName][child.nodeName]){
	                            pre = parent;
	                        }else{
	                            tmp = child.parentNode;
	                            while (tmp !== parent){
	                                pre = tmp;
	                                tmp = tmp.parentNode;
	
	                            }
	                        }
	
	
	                        domUtils.breakParent( child, pre || tmp );
	                        //去掉break后前一个多余的节点  <p>|<[p> ==> <p></p><div></div><p>|</p>
	                        var pre = child.previousSibling;
	                        domUtils.trimWhiteTextNode(pre);
	                        if(!pre.childNodes.length){
	                            domUtils.remove(pre);
	                        }
	                        //trace:2012,在非ie的情况，切开后剩下的节点有可能不能点入光标添加br占位
	
	                        if(!browser.ie &&
	                            (next = child.nextSibling) &&
	                            domUtils.isBlockElm(next) &&
	                            next.lastChild &&
	                            !domUtils.isBr(next.lastChild)){
	                            next.appendChild(me.document.createElement('br'));
	                        }
	                        hadBreak = 1;
	                    }
	                }
	                var next = child.nextSibling;
	                if(!div.firstChild && next && domUtils.isBlockElm(next)){
	
	                    range.setStart(next,0).collapse(true);
	                    break;
	                }
	                range.setEndAfter( child ).collapse();
	
	            }
	
	            child = range.startContainer;
	
	            if(nextNode && domUtils.isBr(nextNode)){
	                domUtils.remove(nextNode)
	            }
	            //用chrome可能有空白展位符
	            if(domUtils.isBlockElm(child) && domUtils.isEmptyNode(child)){
	                if(nextNode = child.nextSibling){
	                    domUtils.remove(child);
	                    if(nextNode.nodeType == 1 && dtd.$block[nextNode.tagName]){
	
	                        range.setStart(nextNode,0).collapse(true).shrinkBoundary()
	                    }
	                }else{
	
	                    try{
	                        child.innerHTML = browser.ie ? domUtils.fillChar : '<br/>';
	                    }catch(e){
	                        range.setStartBefore(child);
	                        domUtils.remove(child)
	                    }
	
	                }
	
	            }
	            //加上true因为在删除表情等时会删两次，第一次是删的fillData
	            try{
	                range.select(true);
	            }catch(e){}
	
	        }
	
	
	
	        setTimeout(function(){
	            range = me.selection.getRange();
	            range.scrollToView(me.autoHeightEnabled,me.autoHeightEnabled ? domUtils.getXY(me.iframe).y:0);
	            me.fireEvent('afterinserthtml', html);
	        },200);
	    }
	};
	
	
	// plugins/autotypeset.js
	/**
	 * 自动排版
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 对当前编辑器的内容执行自动排版， 排版的行为根据config配置文件里的“autotypeset”选项进行控制。
	 * @command autotypeset
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'autotypeset' );
	 * ```
	 */
	
	UE.plugins['autotypeset'] = function(){
	
	    this.setOpt({'autotypeset': {
	        mergeEmptyline: true,           //合并空行
	        removeClass: true,              //去掉冗余的class
	        removeEmptyline: false,         //去掉空行
	        textAlign:"left",               //段落的排版方式，可以是 left,right,center,justify 去掉这个属性表示不执行排版
	        imageBlockLine: 'center',       //图片的浮动方式，独占一行剧中,左右浮动，默认: center,left,right,none 去掉这个属性表示不执行排版
	        pasteFilter: false,             //根据规则过滤没事粘贴进来的内容
	        clearFontSize: false,           //去掉所有的内嵌字号，使用编辑器默认的字号
	        clearFontFamily: false,         //去掉所有的内嵌字体，使用编辑器默认的字体
	        removeEmptyNode: false,         // 去掉空节点
	        //可以去掉的标签
	        removeTagNames: utils.extend({div:1},dtd.$removeEmpty),
	        indent: false,                  // 行首缩进
	        indentValue : '2em',            //行首缩进的大小
	        bdc2sb: false,
	        tobdc: false
	    }});
	
	    var me = this,
	        opt = me.options.autotypeset,
	        remainClass = {
	            'selectTdClass':1,
	            'pagebreak':1,
	            'anchorclass':1
	        },
	        remainTag = {
	            'li':1
	        },
	        tags = {
	            div:1,
	            p:1,
	            //trace:2183 这些也认为是行
	            blockquote:1,center:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1,
	            span:1
	        },
	        highlightCont;
	    //升级了版本，但配置项目里没有autotypeset
	    if(!opt){
	        return;
	    }
	
	    readLocalOpts();
	
	    function isLine(node,notEmpty){
	        if(!node || node.nodeType == 3)
	            return 0;
	        if(domUtils.isBr(node))
	            return 1;
	        if(node && node.parentNode && tags[node.tagName.toLowerCase()]){
	            if(highlightCont && highlightCont.contains(node)
	                ||
	                node.getAttribute('pagebreak')
	            ){
	                return 0;
	            }
	
	            return notEmpty ? !domUtils.isEmptyBlock(node) : domUtils.isEmptyBlock(node,new RegExp('[\\s'+domUtils.fillChar
	                +']','g'));
	        }
	    }
	
	    function removeNotAttributeSpan(node){
	        if(!node.style.cssText){
	            domUtils.removeAttributes(node,['style']);
	            if(node.tagName.toLowerCase() == 'span' && domUtils.hasNoAttributes(node)){
	                domUtils.remove(node,true);
	            }
	        }
	    }
	    function autotype(type,html){
	
	        var me = this,cont;
	        if(html){
	            if(!opt.pasteFilter){
	                return;
	            }
	            cont = me.document.createElement('div');
	            cont.innerHTML = html.html;
	        }else{
	            cont = me.document.body;
	        }
	        var nodes = domUtils.getElementsByTagName(cont,'*');
	
	        // 行首缩进，段落方向，段间距，段内间距
	        for(var i=0,ci;ci=nodes[i++];){
	
	            if(me.fireEvent('excludeNodeinautotype',ci) === true){
	                continue;
	            }
	             //font-size
	            if(opt.clearFontSize && ci.style.fontSize){
	                domUtils.removeStyle(ci,'font-size');
	
	                removeNotAttributeSpan(ci);
	
	            }
	            //font-family
	            if(opt.clearFontFamily && ci.style.fontFamily){
	                domUtils.removeStyle(ci,'font-family');
	                removeNotAttributeSpan(ci);
	            }
	
	            if(isLine(ci)){
	                //合并空行
	                if(opt.mergeEmptyline ){
	                    var next = ci.nextSibling,tmpNode,isBr = domUtils.isBr(ci);
	                    while(isLine(next)){
	                        tmpNode = next;
	                        next = tmpNode.nextSibling;
	                        if(isBr && (!next || next && !domUtils.isBr(next))){
	                            break;
	                        }
	                        domUtils.remove(tmpNode);
	                    }
	
	                }
	                 //去掉空行，保留占位的空行
	                if(opt.removeEmptyline && domUtils.inDoc(ci,cont) && !remainTag[ci.parentNode.tagName.toLowerCase()] ){
	                    if(domUtils.isBr(ci)){
	                        next = ci.nextSibling;
	                        if(next && !domUtils.isBr(next)){
	                            continue;
	                        }
	                    }
	                    domUtils.remove(ci);
	                    continue;
	
	                }
	
	            }
	            if(isLine(ci,true) && ci.tagName != 'SPAN'){
	                if(opt.indent){
	                    ci.style.textIndent = opt.indentValue;
	                }
	                if(opt.textAlign){
	                    ci.style.textAlign = opt.textAlign;
	                }
	                // if(opt.lineHeight)
	                //     ci.style.lineHeight = opt.lineHeight + 'cm';
	
	            }
	
	            //去掉class,保留的class不去掉
	            if(opt.removeClass && ci.className && !remainClass[ci.className.toLowerCase()]){
	
	                if(highlightCont && highlightCont.contains(ci)){
	                     continue;
	                }
	                domUtils.removeAttributes(ci,['class']);
	            }
	
	            //表情不处理
	            if(opt.imageBlockLine && ci.tagName.toLowerCase() == 'img' && !ci.getAttribute('emotion')){
	                if(html){
	                    var img = ci;
	                    switch (opt.imageBlockLine){
	                        case 'left':
	                        case 'right':
	                        case 'none':
	                            var pN = img.parentNode,tmpNode,pre,next;
	                            while(dtd.$inline[pN.tagName] || pN.tagName == 'A'){
	                                pN = pN.parentNode;
	                            }
	                            tmpNode = pN;
	                            if(tmpNode.tagName == 'P' && domUtils.getStyle(tmpNode,'text-align') == 'center'){
	                                if(!domUtils.isBody(tmpNode) && domUtils.getChildCount(tmpNode,function(node){return !domUtils.isBr(node) && !domUtils.isWhitespace(node)}) == 1){
	                                    pre = tmpNode.previousSibling;
	                                    next = tmpNode.nextSibling;
	                                    if(pre && next && pre.nodeType == 1 &&  next.nodeType == 1 && pre.tagName == next.tagName && domUtils.isBlockElm(pre)){
	                                        pre.appendChild(tmpNode.firstChild);
	                                        while(next.firstChild){
	                                            pre.appendChild(next.firstChild);
	                                        }
	                                        domUtils.remove(tmpNode);
	                                        domUtils.remove(next);
	                                    }else{
	                                        domUtils.setStyle(tmpNode,'text-align','');
	                                    }
	
	
	                                }
	
	
	                            }
	                            domUtils.setStyle(img,'float', opt.imageBlockLine);
	                            break;
	                        case 'center':
	                            if(me.queryCommandValue('imagefloat') != 'center'){
	                                pN = img.parentNode;
	                                domUtils.setStyle(img,'float','none');
	                                tmpNode = img;
	                                while(pN && domUtils.getChildCount(pN,function(node){return !domUtils.isBr(node) && !domUtils.isWhitespace(node)}) == 1
	                                    && (dtd.$inline[pN.tagName] || pN.tagName == 'A')){
	                                    tmpNode = pN;
	                                    pN = pN.parentNode;
	                                }
	                                var pNode = me.document.createElement('p');
	                                domUtils.setAttributes(pNode,{
	
	                                    style:'text-align:center'
	                                });
	                                tmpNode.parentNode.insertBefore(pNode,tmpNode);
	                                pNode.appendChild(tmpNode);
	                                domUtils.setStyle(tmpNode,'float','');
	
	                            }
	
	
	                    }
	                } else {
	                    var range = me.selection.getRange();
	                    range.selectNode(ci).select();
	                    me.execCommand('imagefloat', opt.imageBlockLine);
	                }
	
	            }
	
	            //去掉冗余的标签
	            if(opt.removeEmptyNode){
	                if(opt.removeTagNames[ci.tagName.toLowerCase()] && domUtils.hasNoAttributes(ci) && domUtils.isEmptyBlock(ci)){
	                    domUtils.remove(ci);
	                }
	            }
	        }
	        if(opt.tobdc){
	            var root = UE.htmlparser(cont.innerHTML);
	            root.traversal(function(node){
	                if(node.type == 'text'){
	                    node.data = ToDBC(node.data)
	                }
	            });
	            cont.innerHTML = root.toHtml()
	        }
	        if(opt.bdc2sb){
	            var root = UE.htmlparser(cont.innerHTML);
	            root.traversal(function(node){
	                if(node.type == 'text'){
	                    node.data = DBC2SB(node.data)
	                }
	            });
	            cont.innerHTML = root.toHtml()
	        }
	        if(html){
	            html.html = cont.innerHTML;
	        }
	    }
	    if(opt.pasteFilter){
	        me.addListener('beforepaste',autotype);
	    }
	
	    function DBC2SB(str) {
	        var result = '';
	        for (var i = 0; i < str.length; i++) {
	            var code = str.charCodeAt(i); //获取当前字符的unicode编码
	            if (code >= 65281 && code <= 65373)//在这个unicode编码范围中的是所有的英文字母已经各种字符
	            {
	                result += String.fromCharCode(str.charCodeAt(i) - 65248); //把全角字符的unicode编码转换为对应半角字符的unicode码
	            } else if (code == 12288)//空格
	            {
	                result += String.fromCharCode(str.charCodeAt(i) - 12288 + 32);
	            } else {
	                result += str.charAt(i);
	            }
	        }
	        return result;
	    }
	    function ToDBC(txtstring) {
	        txtstring = utils.html(txtstring);
	        var tmp = "";
	        var mark = "";/*用于判断,如果是html尖括里的标记,则不进行全角的转换*/
	        for (var i = 0; i < txtstring.length; i++) {
	            if (txtstring.charCodeAt(i) == 32) {
	                tmp = tmp + String.fromCharCode(12288);
	            }
	            else if (txtstring.charCodeAt(i) < 127) {
	                tmp = tmp + String.fromCharCode(txtstring.charCodeAt(i) + 65248);
	            }
	            else {
	                tmp += txtstring.charAt(i);
	            }
	        }
	        return tmp;
	    }
	
	    function readLocalOpts() {
	        var cookieOpt = me.getPreferences('autotypeset');
	        utils.extend(me.options.autotypeset, cookieOpt);
	    }
	
	    me.commands['autotypeset'] = {
	        execCommand:function () {
	            me.removeListener('beforepaste',autotype);
	            if(opt.pasteFilter){
	                me.addListener('beforepaste',autotype);
	            }
	            autotype.call(me)
	        }
	
	    };
	
	};
	
	
	
	// plugins/autosubmit.js
	/**
	 * 快捷键提交
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 提交表单
	 * @command autosubmit
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'autosubmit' );
	 * ```
	 */
	
	UE.plugin.register('autosubmit',function(){
	    return {
	        shortcutkey:{
	            "autosubmit":"ctrl+13" //手动提交
	        },
	        commands:{
	            'autosubmit':{
	                execCommand:function () {
	                    var me=this,
	                        form = domUtils.findParentByTagName(me.iframe,"form", false);
	                    if (form){
	                        if(me.fireEvent("beforesubmit")===false){
	                            return;
	                        }
	                        me.sync();
	                        form.submit();
	                    }
	                }
	            }
	        }
	    }
	});
	
	// plugins/background.js
	/**
	 * 背景插件，为UEditor提供设置背景功能
	 * @file
	 * @since 1.2.6.1
	 */
	UE.plugin.register('background', function () {
	    var me = this,
	        cssRuleId = 'editor_background',
	        isSetColored,
	        reg = new RegExp('body[\\s]*\\{(.+)\\}', 'i');
	
	    function stringToObj(str) {
	        var obj = {}, styles = str.split(';');
	        utils.each(styles, function (v) {
	            var index = v.indexOf(':'),
	                key = utils.trim(v.substr(0, index)).toLowerCase();
	            key && (obj[key] = utils.trim(v.substr(index + 1) || ''));
	        });
	        return obj;
	    }
	
	    function setBackground(obj) {
	        if (obj) {
	            var styles = [];
	            for (var name in obj) {
	                if (obj.hasOwnProperty(name)) {
	                    styles.push(name + ":" + obj[name] + '; ');
	                }
	            }
	            utils.cssRule(cssRuleId, styles.length ? ('body{' + styles.join("") + '}') : '', me.document);
	        } else {
	            utils.cssRule(cssRuleId, '', me.document)
	        }
	    }
	    //重写editor.hasContent方法
	
	    var orgFn = me.hasContents;
	    me.hasContents = function(){
	        if(me.queryCommandValue('background')){
	            return true
	        }
	        return orgFn.apply(me,arguments);
	    };
	    return {
	        bindEvents: {
	            'getAllHtml': function (type, headHtml) {
	                var body = this.body,
	                    su = domUtils.getComputedStyle(body, "background-image"),
	                    url = "";
	                if (su.indexOf(me.options.imagePath) > 0) {
	                    url = su.substring(su.indexOf(me.options.imagePath), su.length - 1).replace(/"|\(|\)/ig, "");
	                } else {
	                    url = su != "none" ? su.replace(/url\("?|"?\)/ig, "") : "";
	                }
	                var html = '<style type="text/css">body{';
	                var bgObj = {
	                    "background-color": domUtils.getComputedStyle(body, "background-color") || "#ffffff",
	                    'background-image': url ? 'url(' + url + ')' : '',
	                    'background-repeat': domUtils.getComputedStyle(body, "background-repeat") || "",
	                    'background-position': browser.ie ? (domUtils.getComputedStyle(body, "background-position-x") + " " + domUtils.getComputedStyle(body, "background-position-y")) : domUtils.getComputedStyle(body, "background-position"),
	                    'height': domUtils.getComputedStyle(body, "height")
	                };
	                for (var name in bgObj) {
	                    if (bgObj.hasOwnProperty(name)) {
	                        html += name + ":" + bgObj[name] + "; ";
	                    }
	                }
	                html += '}</style> ';
	                headHtml.push(html);
	            },
	            'aftersetcontent': function () {
	                if(isSetColored == false) setBackground();
	            }
	        },
	        inputRule: function (root) {
	            isSetColored = false;
	            utils.each(root.getNodesByTagName('p'), function (p) {
	                var styles = p.getAttr('data-background');
	                if (styles) {
	                    isSetColored = true;
	                    setBackground(stringToObj(styles));
	                    p.parentNode.removeChild(p);
	                }
	            })
	        },
	        outputRule: function (root) {
	            var me = this,
	                styles = (utils.cssRule(cssRuleId, me.document) || '').replace(/[\n\r]+/g, '').match(reg);
	            if (styles) {
	                root.appendChild(UE.uNode.createElement('<p style="display:none;" data-background="' + utils.trim(styles[1].replace(/"/g, '').replace(/[\s]+/g, ' ')) + '"><br/></p>'));
	            }
	        },
	        commands: {
	            'background': {
	                execCommand: function (cmd, obj) {
	                    setBackground(obj);
	                },
	                queryCommandValue: function () {
	                    var me = this,
	                        styles = (utils.cssRule(cssRuleId, me.document) || '').replace(/[\n\r]+/g, '').match(reg);
	                    return styles ? stringToObj(styles[1]) : null;
	                },
	                notNeedUndo: true
	            }
	        }
	    }
	});
	
	// plugins/image.js
	/**
	 * 图片插入、排版插件
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 图片对齐方式
	 * @command imagefloat
	 * @method execCommand
	 * @remind 值center为独占一行居中
	 * @param { String } cmd 命令字符串
	 * @param { String } align 对齐方式，可传left、right、none、center
	 * @remaind center表示图片独占一行
	 * @example
	 * ```javascript
	 * editor.execCommand( 'imagefloat', 'center' );
	 * ```
	 */
	
	/**
	 * 如果选区所在位置是图片区域
	 * @command imagefloat
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { String } 返回图片对齐方式
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'imagefloat' );
	 * ```
	 */
	
	UE.commands['imagefloat'] = {
	    execCommand:function (cmd, align) {
	        var me = this,
	            range = me.selection.getRange();
	        if (!range.collapsed) {
	            var img = range.getClosedNode();
	            if (img && img.tagName == 'IMG') {
	                switch (align) {
	                    case 'left':
	                    case 'right':
	                    case 'none':
	                        var pN = img.parentNode, tmpNode, pre, next;
	                        while (dtd.$inline[pN.tagName] || pN.tagName == 'A') {
	                            pN = pN.parentNode;
	                        }
	                        tmpNode = pN;
	                        if (tmpNode.tagName == 'P' && domUtils.getStyle(tmpNode, 'text-align') == 'center') {
	                            if (!domUtils.isBody(tmpNode) && domUtils.getChildCount(tmpNode, function (node) {
	                                return !domUtils.isBr(node) && !domUtils.isWhitespace(node);
	                            }) == 1) {
	                                pre = tmpNode.previousSibling;
	                                next = tmpNode.nextSibling;
	                                if (pre && next && pre.nodeType == 1 && next.nodeType == 1 && pre.tagName == next.tagName && domUtils.isBlockElm(pre)) {
	                                    pre.appendChild(tmpNode.firstChild);
	                                    while (next.firstChild) {
	                                        pre.appendChild(next.firstChild);
	                                    }
	                                    domUtils.remove(tmpNode);
	                                    domUtils.remove(next);
	                                } else {
	                                    domUtils.setStyle(tmpNode, 'text-align', '');
	                                }
	
	
	                            }
	
	                            range.selectNode(img).select();
	                        }
	                        domUtils.setStyle(img, 'float', align == 'none' ? '' : align);
	                        if(align == 'none'){
	                            domUtils.removeAttributes(img,'align');
	                        }
	
	                        break;
	                    case 'center':
	                        if (me.queryCommandValue('imagefloat') != 'center') {
	                            pN = img.parentNode;
	                            domUtils.setStyle(img, 'float', '');
	                            domUtils.removeAttributes(img,'align');
	                            tmpNode = img;
	                            while (pN && domUtils.getChildCount(pN, function (node) {
	                                return !domUtils.isBr(node) && !domUtils.isWhitespace(node);
	                            }) == 1
	                                && (dtd.$inline[pN.tagName] || pN.tagName == 'A')) {
	                                tmpNode = pN;
	                                pN = pN.parentNode;
	                            }
	                            range.setStartBefore(tmpNode).setCursor(false);
	                            pN = me.document.createElement('div');
	                            pN.appendChild(tmpNode);
	                            domUtils.setStyle(tmpNode, 'float', '');
	
	                            me.execCommand('insertHtml', '<p id="_img_parent_tmp" style="text-align:center">' + pN.innerHTML + '</p>');
	
	                            tmpNode = me.document.getElementById('_img_parent_tmp');
	                            tmpNode.removeAttribute('id');
	                            tmpNode = tmpNode.firstChild;
	                            range.selectNode(tmpNode).select();
	                            //去掉后边多余的元素
	                            next = tmpNode.parentNode.nextSibling;
	                            if (next && domUtils.isEmptyNode(next)) {
	                                domUtils.remove(next);
	                            }
	
	                        }
	
	                        break;
	                }
	
	            }
	        }
	    },
	    queryCommandValue:function () {
	        var range = this.selection.getRange(),
	            startNode, floatStyle;
	        if (range.collapsed) {
	            return 'none';
	        }
	        startNode = range.getClosedNode();
	        if (startNode && startNode.nodeType == 1 && startNode.tagName == 'IMG') {
	            floatStyle = domUtils.getComputedStyle(startNode, 'float') || startNode.getAttribute('align');
	
	            if (floatStyle == 'none') {
	                floatStyle = domUtils.getComputedStyle(startNode.parentNode, 'text-align') == 'center' ? 'center' : floatStyle;
	            }
	            return {
	                left:1,
	                right:1,
	                center:1
	            }[floatStyle] ? floatStyle : 'none';
	        }
	        return 'none';
	
	
	    },
	    queryCommandState:function () {
	        var range = this.selection.getRange(),
	            startNode;
	
	        if (range.collapsed)  return -1;
	
	        startNode = range.getClosedNode();
	        if (startNode && startNode.nodeType == 1 && startNode.tagName == 'IMG') {
	            return 0;
	        }
	        return -1;
	    }
	};
	
	
	/**
	 * 插入图片
	 * @command insertimage
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { Object } opt 属性键值对，这些属性都将被复制到当前插入图片
	 * @remind 该命令第二个参数可接受一个图片配置项对象的数组，可以插入多张图片，
	 * 此时数组的每一个元素都是一个Object类型的图片属性集合。
	 * @example
	 * ```javascript
	 * editor.execCommand( 'insertimage', {
	 *     src:'a/b/c.jpg',
	 *     width:'100',
	 *     height:'100'
	 * } );
	 * ```
	 * @example
	 * ```javascript
	 * editor.execCommand( 'insertimage', [{
	 *     src:'a/b/c.jpg',
	 *     width:'100',
	 *     height:'100'
	 * },{
	 *     src:'a/b/d.jpg',
	 *     width:'100',
	 *     height:'100'
	 * }] );
	 * ```
	 */
	
	UE.commands['insertimage'] = {
	    execCommand:function (cmd, opt) {
	
	        opt = utils.isArray(opt) ? opt : [opt];
	        if (!opt.length) {
	            return;
	        }
	        var me = this,
	            range = me.selection.getRange(),
	            img = range.getClosedNode();
	
	        if(me.fireEvent('beforeinsertimage', opt) === true){
	            return;
	        }
	
	        function unhtmlData(imgCi) {
	
	            utils.each('width,height,border,hspace,vspace'.split(','), function (item) {
	
	                if (imgCi[item]) {
	                    imgCi[item] = parseInt(imgCi[item], 10) || 0;
	                }
	            });
	
	            utils.each('src,_src'.split(','), function (item) {
	
	                if (imgCi[item]) {
	                    imgCi[item] = utils.unhtmlForUrl(imgCi[item]);
	                }
	            });
	            utils.each('title,alt'.split(','), function (item) {
	
	                if (imgCi[item]) {
	                    imgCi[item] = utils.unhtml(imgCi[item]);
	                }
	            });
	        }
	
	        if (img && /img/i.test(img.tagName) && (img.className != "edui-faked-video" || img.className.indexOf("edui-upload-video")!=-1) && !img.getAttribute("word_img")) {
	            var first = opt.shift();
	            var floatStyle = first['floatStyle'];
	            delete first['floatStyle'];
	////                img.style.border = (first.border||0) +"px solid #000";
	////                img.style.margin = (first.margin||0) +"px";
	//                img.style.cssText += ';margin:' + (first.margin||0) +"px;" + 'border:' + (first.border||0) +"px solid #000";
	            domUtils.setAttributes(img, first);
	            me.execCommand('imagefloat', floatStyle);
	            if (opt.length > 0) {
	                range.setStartAfter(img).setCursor(false, true);
	                me.execCommand('insertimage', opt);
	            }
	
	        } else {
	            var html = [], str = '', ci;
	            ci = opt[0];
	            if (opt.length == 1) {
	                unhtmlData(ci);
	
	                str = '<img src="' + ci.src + '" ' + (ci._src ? ' _src="' + ci._src + '" ' : '') +
	                    (ci.width ? 'width="' + ci.width + '" ' : '') +
	                    (ci.height ? ' height="' + ci.height + '" ' : '') +
	                    (ci['floatStyle'] == 'left' || ci['floatStyle'] == 'right' ? ' style="float:' + ci['floatStyle'] + ';"' : '') +
	                    (ci.title && ci.title != "" ? ' title="' + ci.title + '"' : '') +
	                    (ci.border && ci.border != "0" ? ' border="' + ci.border + '"' : '') +
	                    (ci.alt && ci.alt != "" ? ' alt="' + ci.alt + '"' : '') +
	                    (ci.hspace && ci.hspace != "0" ? ' hspace = "' + ci.hspace + '"' : '') +
	                    (ci.vspace && ci.vspace != "0" ? ' vspace = "' + ci.vspace + '"' : '') + '/>';
	                if (ci['floatStyle'] == 'center') {
	                    str = '<p style="text-align: center">' + str + '</p>';
	                }
	                html.push(str);
	
	            } else {
	                for (var i = 0; ci = opt[i++];) {
	                    unhtmlData(ci);
	                    str = '<p ' + (ci['floatStyle'] == 'center' ? 'style="text-align: center" ' : '') + '><img src="' + ci.src + '" ' +
	                        (ci.width ? 'width="' + ci.width + '" ' : '') + (ci._src ? ' _src="' + ci._src + '" ' : '') +
	                        (ci.height ? ' height="' + ci.height + '" ' : '') +
	                        ' style="' + (ci['floatStyle'] && ci['floatStyle'] != 'center' ? 'float:' + ci['floatStyle'] + ';' : '') +
	                        (ci.border || '') + '" ' +
	                        (ci.title ? ' title="' + ci.title + '"' : '') + ' /></p>';
	                    html.push(str);
	                }
	            }
	
	            me.execCommand('insertHtml', html.join(''));
	        }
	
	        me.fireEvent('afterinsertimage', opt)
	    }
	};
	
	
	// plugins/justify.js
	/**
	 * 段落格式
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 段落对齐方式
	 * @command justify
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { String } align 对齐方式：left => 居左，right => 居右，center => 居中，justify => 两端对齐
	 * @example
	 * ```javascript
	 * editor.execCommand( 'justify', 'center' );
	 * ```
	 */
	/**
	 * 如果选区所在位置是段落区域，返回当前段落对齐方式
	 * @command justify
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { String } 返回段落对齐方式
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'justify' );
	 * ```
	 */
	
	UE.plugins['justify']=function(){
	    var me=this,
	        block = domUtils.isBlockElm,
	        defaultValue = {
	            left:1,
	            right:1,
	            center:1,
	            justify:1
	        },
	        doJustify = function (range, style) {
	            var bookmark = range.createBookmark(),
	                filterFn = function (node) {
	                    return node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' && !domUtils.isBookmarkNode(node) : !domUtils.isWhitespace(node);
	                };
	
	            range.enlarge(true);
	            var bookmark2 = range.createBookmark(),
	                current = domUtils.getNextDomNode(bookmark2.start, false, filterFn),
	                tmpRange = range.cloneRange(),
	                tmpNode;
	            while (current && !(domUtils.getPosition(current, bookmark2.end) & domUtils.POSITION_FOLLOWING)) {
	                if (current.nodeType == 3 || !block(current)) {
	                    tmpRange.setStartBefore(current);
	                    while (current && current !== bookmark2.end && !block(current)) {
	                        tmpNode = current;
	                        current = domUtils.getNextDomNode(current, false, null, function (node) {
	                            return !block(node);
	                        });
	                    }
	                    tmpRange.setEndAfter(tmpNode);
	                    var common = tmpRange.getCommonAncestor();
	                    if (!domUtils.isBody(common) && block(common)) {
	                        domUtils.setStyles(common, utils.isString(style) ? {'text-align':style} : style);
	                        current = common;
	                    } else {
	                        var p = range.document.createElement('p');
	                        domUtils.setStyles(p, utils.isString(style) ? {'text-align':style} : style);
	                        var frag = tmpRange.extractContents();
	                        p.appendChild(frag);
	                        tmpRange.insertNode(p);
	                        current = p;
	                    }
	                    current = domUtils.getNextDomNode(current, false, filterFn);
	                } else {
	                    current = domUtils.getNextDomNode(current, true, filterFn);
	                }
	            }
	            return range.moveToBookmark(bookmark2).moveToBookmark(bookmark);
	        };
	
	    UE.commands['justify'] = {
	        execCommand:function (cmdName, align) {
	            var range = this.selection.getRange(),
	                txt;
	
	            //闭合时单独处理
	            if (range.collapsed) {
	                txt = this.document.createTextNode('p');
	                range.insertNode(txt);
	            }
	            doJustify(range, align);
	            if (txt) {
	                range.setStartBefore(txt).collapse(true);
	                domUtils.remove(txt);
	            }
	
	            range.select();
	
	
	            return true;
	        },
	        queryCommandValue:function () {
	            var startNode = this.selection.getStart(),
	                value = domUtils.getComputedStyle(startNode, 'text-align');
	            return defaultValue[value] ? value : 'left';
	        },
	        queryCommandState:function () {
	            var start = this.selection.getStart(),
	                cell = start && domUtils.findParentByTagName(start, ["td", "th","caption"], true);
	
	            return cell? -1:0;
	        }
	
	    };
	};
	
	
	// plugins/font.js
	/**
	 * 字体颜色,背景色,字号,字体,下划线,删除线
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 字体颜色
	 * @command forecolor
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { String } value 色值(必须十六进制)
	 * @example
	 * ```javascript
	 * editor.execCommand( 'forecolor', '#000' );
	 * ```
	 */
	/**
	 * 返回选区字体颜色
	 * @command forecolor
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { String } 返回字体颜色
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'forecolor' );
	 * ```
	 */
	
	/**
	 * 字体背景颜色
	 * @command backcolor
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { String } value 色值(必须十六进制)
	 * @example
	 * ```javascript
	 * editor.execCommand( 'backcolor', '#000' );
	 * ```
	 */
	/**
	 * 返回选区字体颜色
	 * @command backcolor
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { String } 返回字体背景颜色
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'backcolor' );
	 * ```
	 */
	
	/**
	 * 字体大小
	 * @command fontsize
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { String } value 字体大小
	 * @example
	 * ```javascript
	 * editor.execCommand( 'fontsize', '14px' );
	 * ```
	 */
	/**
	 * 返回选区字体大小
	 * @command fontsize
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { String } 返回字体大小
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'fontsize' );
	 * ```
	 */
	
	/**
	 * 字体样式
	 * @command fontfamily
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { String } value 字体样式
	 * @example
	 * ```javascript
	 * editor.execCommand( 'fontfamily', '微软雅黑' );
	 * ```
	 */
	/**
	 * 返回选区字体样式
	 * @command fontfamily
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { String } 返回字体样式
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'fontfamily' );
	 * ```
	 */
	
	/**
	 * 字体下划线,与删除线互斥
	 * @command underline
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'underline' );
	 * ```
	 */
	
	/**
	 * 字体删除线,与下划线互斥
	 * @command strikethrough
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'strikethrough' );
	 * ```
	 */
	
	/**
	 * 字体边框
	 * @command fontborder
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'fontborder' );
	 * ```
	 */
	
	UE.plugins['font'] = function () {
	    var me = this,
	        fonts = {
	            'forecolor': 'color',
	            'backcolor': 'background-color',
	            'fontsize': 'font-size',
	            'fontfamily': 'font-family',
	            'underline': 'text-decoration',
	            'strikethrough': 'text-decoration',
	            'fontborder': 'border'
	        },
	        needCmd = {'underline': 1, 'strikethrough': 1, 'fontborder': 1},
	        needSetChild = {
	            'forecolor': 'color',
	            'backcolor': 'background-color',
	            'fontsize': 'font-size',
	            'fontfamily': 'font-family'
	
	        };
	    me.setOpt({
	        'fontfamily': [
	            { name: 'songti', val: '宋体,SimSun'},
	            { name: 'yahei', val: '微软雅黑,Microsoft YaHei'},
	            { name: 'kaiti', val: '楷体,楷体_GB2312, SimKai'},
	            { name: 'heiti', val: '黑体, SimHei'},
	            { name: 'lishu', val: '隶书, SimLi'},
	            { name: 'andaleMono', val: 'andale mono'},
	            { name: 'arial', val: 'arial, helvetica,sans-serif'},
	            { name: 'arialBlack', val: 'arial black,avant garde'},
	            { name: 'comicSansMs', val: 'comic sans ms'},
	            { name: 'impact', val: 'impact,chicago'},
	            { name: 'timesNewRoman', val: 'times new roman'}
	        ],
	        'fontsize': [10, 11, 12, 14, 16, 18, 20, 24, 36]
	    });
	
	    function mergeWithParent(node){
	        var parent;
	        while(parent = node.parentNode){
	            if(parent.tagName == 'SPAN' && domUtils.getChildCount(parent,function(child){
	                return !domUtils.isBookmarkNode(child) && !domUtils.isBr(child)
	            }) == 1) {
	                parent.style.cssText += node.style.cssText;
	                domUtils.remove(node,true);
	                node = parent;
	
	            }else{
	                break;
	            }
	        }
	
	    }
	    function mergeChild(rng,cmdName,value){
	        if(needSetChild[cmdName]){
	            rng.adjustmentBoundary();
	            if(!rng.collapsed && rng.startContainer.nodeType == 1){
	                var start = rng.startContainer.childNodes[rng.startOffset];
	                if(start && domUtils.isTagNode(start,'span')){
	                    var bk = rng.createBookmark();
	                    utils.each(domUtils.getElementsByTagName(start, 'span'), function (span) {
	                        if (!span.parentNode || domUtils.isBookmarkNode(span))return;
	                        if(cmdName == 'backcolor' && domUtils.getComputedStyle(span,'background-color').toLowerCase() === value){
	                            return;
	                        }
	                        domUtils.removeStyle(span,needSetChild[cmdName]);
	                        if(span.style.cssText.replace(/^\s+$/,'').length == 0){
	                            domUtils.remove(span,true)
	                        }
	                    });
	                    rng.moveToBookmark(bk)
	                }
	            }
	        }
	
	    }
	    function mergesibling(rng,cmdName,value) {
	        var collapsed = rng.collapsed,
	            bk = rng.createBookmark(), common;
	        if (collapsed) {
	            common = bk.start.parentNode;
	            while (dtd.$inline[common.tagName]) {
	                common = common.parentNode;
	            }
	        } else {
	            common = domUtils.getCommonAncestor(bk.start, bk.end);
	        }
	        utils.each(domUtils.getElementsByTagName(common, 'span'), function (span) {
	            if (!span.parentNode || domUtils.isBookmarkNode(span))return;
	            if (/\s*border\s*:\s*none;?\s*/i.test(span.style.cssText)) {
	                if(/^\s*border\s*:\s*none;?\s*$/.test(span.style.cssText)){
	                    domUtils.remove(span, true);
	                }else{
	                    domUtils.removeStyle(span,'border');
	                }
	                return
	            }
	            if (/border/i.test(span.style.cssText) && span.parentNode.tagName == 'SPAN' && /border/i.test(span.parentNode.style.cssText)) {
	                span.style.cssText = span.style.cssText.replace(/border[^:]*:[^;]+;?/gi, '');
	            }
	            if(!(cmdName=='fontborder' && value=='none')){
	                var next = span.nextSibling;
	                while (next && next.nodeType == 1 && next.tagName == 'SPAN' ) {
	                    if(domUtils.isBookmarkNode(next) && cmdName == 'fontborder') {
	                        span.appendChild(next);
	                        next = span.nextSibling;
	                        continue;
	                    }
	                    if (next.style.cssText == span.style.cssText) {
	                        domUtils.moveChild(next, span);
	                        domUtils.remove(next);
	                    }
	                    if (span.nextSibling === next)
	                        break;
	                    next = span.nextSibling;
	                }
	            }
	
	
	            mergeWithParent(span);
	            if(browser.ie && browser.version > 8 ){
	                //拷贝父亲们的特别的属性,这里只做背景颜色的处理
	                var parent = domUtils.findParent(span,function(n){return n.tagName == 'SPAN' && /background-color/.test(n.style.cssText)});
	                if(parent && !/background-color/.test(span.style.cssText)){
	                    span.style.backgroundColor = parent.style.backgroundColor;
	                }
	            }
	
	        });
	        rng.moveToBookmark(bk);
	        mergeChild(rng,cmdName,value)
	    }
	
	    me.addInputRule(function (root) {
	        utils.each(root.getNodesByTagName('u s del font strike'), function (node) {
	            if (node.tagName == 'font') {
	                var cssStyle = [];
	                for (var p in node.attrs) {
	                    switch (p) {
	                        case 'size':
	                            cssStyle.push('font-size:' +
	                                ({
	                                '1':'10',
	                                '2':'12',
	                                '3':'16',
	                                '4':'18',
	                                '5':'24',
	                                '6':'32',
	                                '7':'48'
	                            }[node.attrs[p]] || node.attrs[p]) + 'px');
	                            break;
	                        case 'color':
	                            cssStyle.push('color:' + node.attrs[p]);
	                            break;
	                        case 'face':
	                            cssStyle.push('font-family:' + node.attrs[p]);
	                            break;
	                        case 'style':
	                            cssStyle.push(node.attrs[p]);
	                    }
	                }
	                node.attrs = {
	                    'style': cssStyle.join(';')
	                };
	            } else {
	                var val = node.tagName == 'u' ? 'underline' : 'line-through';
	                node.attrs = {
	                    'style': (node.getAttr('style') || '') + 'text-decoration:' + val + ';'
	                }
	            }
	            node.tagName = 'span';
	        });
	//        utils.each(root.getNodesByTagName('span'), function (node) {
	//            var val;
	//            if(val = node.getAttr('class')){
	//                if(/fontstrikethrough/.test(val)){
	//                    node.setStyle('text-decoration','line-through');
	//                    if(node.attrs['class']){
	//                        node.attrs['class'] = node.attrs['class'].replace(/fontstrikethrough/,'');
	//                    }else{
	//                        node.setAttr('class')
	//                    }
	//                }
	//                if(/fontborder/.test(val)){
	//                    node.setStyle('border','1px solid #000');
	//                    if(node.attrs['class']){
	//                        node.attrs['class'] = node.attrs['class'].replace(/fontborder/,'');
	//                    }else{
	//                        node.setAttr('class')
	//                    }
	//                }
	//            }
	//        });
	    });
	//    me.addOutputRule(function(root){
	//        utils.each(root.getNodesByTagName('span'), function (node) {
	//            var val;
	//            if(val = node.getStyle('text-decoration')){
	//                if(/line-through/.test(val)){
	//                    if(node.attrs['class']){
	//                        node.attrs['class'] += ' fontstrikethrough';
	//                    }else{
	//                        node.setAttr('class','fontstrikethrough')
	//                    }
	//                }
	//
	//                node.setStyle('text-decoration')
	//            }
	//            if(val = node.getStyle('border')){
	//                if(/1px/.test(val) && /solid/.test(val)){
	//                    if(node.attrs['class']){
	//                        node.attrs['class'] += ' fontborder';
	//
	//                    }else{
	//                        node.setAttr('class','fontborder')
	//                    }
	//                }
	//                node.setStyle('border')
	//
	//            }
	//        });
	//    });
	    for (var p in fonts) {
	        (function (cmd, style) {
	            UE.commands[cmd] = {
	                execCommand: function (cmdName, value) {
	                    value = value || (this.queryCommandState(cmdName) ? 'none' : cmdName == 'underline' ? 'underline' :
	                        cmdName == 'fontborder' ? '1px solid #000' :
	                            'line-through');
	                    var me = this,
	                        range = this.selection.getRange(),
	                        text;
	
	                    if (value == 'default') {
	
	                        if (range.collapsed) {
	                            text = me.document.createTextNode('font');
	                            range.insertNode(text).select();
	
	                        }
	                        me.execCommand('removeFormat', 'span,a', style);
	                        if (text) {
	                            range.setStartBefore(text).collapse(true);
	                            domUtils.remove(text);
	                        }
	                        mergesibling(range,cmdName,value);
	                        range.select()
	                    } else {
	                        if (!range.collapsed) {
	                            if (needCmd[cmd] && me.queryCommandValue(cmd)) {
	                                me.execCommand('removeFormat', 'span,a', style);
	                            }
	                            range = me.selection.getRange();
	
	                            range.applyInlineStyle('span', {'style': style + ':' + value});
	                            mergesibling(range, cmdName,value);
	                            range.select();
	                        } else {
	
	                            var span = domUtils.findParentByTagName(range.startContainer, 'span', true);
	                            text = me.document.createTextNode('font');
	                            if (span && !span.children.length && !span[browser.ie ? 'innerText' : 'textContent'].replace(fillCharReg, '').length) {
	                                //for ie hack when enter
	                                range.insertNode(text);
	                                if (needCmd[cmd]) {
	                                    range.selectNode(text).select();
	                                    me.execCommand('removeFormat', 'span,a', style, null);
	
	                                    span = domUtils.findParentByTagName(text, 'span', true);
	                                    range.setStartBefore(text);
	
	                                }
	                                span && (span.style.cssText += ';' + style + ':' + value);
	                                range.collapse(true).select();
	
	
	                            } else {
	                                range.insertNode(text);
	                                range.selectNode(text).select();
	                                span = range.document.createElement('span');
	
	                                if (needCmd[cmd]) {
	                                    //a标签内的不处理跳过
	                                    if (domUtils.findParentByTagName(text, 'a', true)) {
	                                        range.setStartBefore(text).setCursor();
	                                        domUtils.remove(text);
	                                        return;
	                                    }
	                                    me.execCommand('removeFormat', 'span,a', style);
	                                }
	
	                                span.style.cssText = style + ':' + value;
	
	
	                                text.parentNode.insertBefore(span, text);
	                                //修复，span套span 但样式不继承的问题
	                                if (!browser.ie || browser.ie && browser.version == 9) {
	                                    var spanParent = span.parentNode;
	                                    while (!domUtils.isBlockElm(spanParent)) {
	                                        if (spanParent.tagName == 'SPAN') {
	                                            //opera合并style不会加入";"
	                                            span.style.cssText = spanParent.style.cssText + ";" + span.style.cssText;
	                                        }
	                                        spanParent = spanParent.parentNode;
	                                    }
	                                }
	
	
	                                if (opera) {
	                                    setTimeout(function () {
	                                        range.setStart(span, 0).collapse(true);
	                                        mergesibling(range, cmdName,value);
	                                        range.select();
	                                    });
	                                } else {
	                                    range.setStart(span, 0).collapse(true);
	                                    mergesibling(range,cmdName,value);
	                                    range.select();
	                                }
	
	                                //trace:981
	                                //domUtils.mergeToParent(span)
	                            }
	                            domUtils.remove(text);
	                        }
	
	
	                    }
	                    return true;
	                },
	                queryCommandValue: function (cmdName) {
	                    var startNode = this.selection.getStart();
	
	                    //trace:946
	                    if (cmdName == 'underline' || cmdName == 'strikethrough') {
	                        var tmpNode = startNode, value;
	                        while (tmpNode && !domUtils.isBlockElm(tmpNode) && !domUtils.isBody(tmpNode)) {
	                            if (tmpNode.nodeType == 1) {
	                                value = domUtils.getComputedStyle(tmpNode, style);
	                                if (value != 'none') {
	                                    return value;
	                                }
	                            }
	
	                            tmpNode = tmpNode.parentNode;
	                        }
	                        return 'none';
	                    }
	                    if (cmdName == 'fontborder') {
	                        var tmp = startNode, val;
	                        while (tmp && dtd.$inline[tmp.tagName]) {
	                            if (val = domUtils.getComputedStyle(tmp, 'border')) {
	
	                                if (/1px/.test(val) && /solid/.test(val)) {
	                                    return val;
	                                }
	                            }
	                            tmp = tmp.parentNode;
	                        }
	                        return ''
	                    }
	
	                    if( cmdName == 'FontSize' ) {
	                        var styleVal = domUtils.getComputedStyle(startNode, style),
	                            tmp = /^([\d\.]+)(\w+)$/.exec( styleVal );
	
	                        if( tmp ) {
	
	                            return Math.floor( tmp[1] ) + tmp[2];
	
	                        }
	
	                        return styleVal;
	
	                    }
	
	                    return  domUtils.getComputedStyle(startNode, style);
	                },
	                queryCommandState: function (cmdName) {
	                    if (!needCmd[cmdName])
	                        return 0;
	                    var val = this.queryCommandValue(cmdName);
	                    if (cmdName == 'fontborder') {
	                        return /1px/.test(val) && /solid/.test(val)
	                    } else {
	                        return  cmdName == 'underline' ? /underline/.test(val) : /line\-through/.test(val);
	
	                    }
	
	                }
	            };
	        })(p, fonts[p]);
	    }
	};
	
	// plugins/link.js
	/**
	 * 超链接
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 插入超链接
	 * @command link
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { Object } options   设置自定义属性，例如：url、title、target
	 * @example
	 * ```javascript
	 * editor.execCommand( 'link', '{
	 *     url:'ueditor.baidu.com',
	 *     title:'ueditor',
	 *     target:'_blank'
	 * }' );
	 * ```
	 */
	/**
	 * 返回当前选中的第一个超链接节点
	 * @command link
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { Element } 超链接节点
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'link' );
	 * ```
	 */
	
	/**
	 * 取消超链接
	 * @command unlink
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'unlink');
	 * ```
	 */
	
	UE.plugins['link'] = function(){
	    function optimize( range ) {
	        var start = range.startContainer,end = range.endContainer;
	
	        if ( start = domUtils.findParentByTagName( start, 'a', true ) ) {
	            range.setStartBefore( start );
	        }
	        if ( end = domUtils.findParentByTagName( end, 'a', true ) ) {
	            range.setEndAfter( end );
	        }
	    }
	
	
	    UE.commands['unlink'] = {
	        execCommand : function() {
	            var range = this.selection.getRange(),
	                bookmark;
	            if(range.collapsed && !domUtils.findParentByTagName( range.startContainer, 'a', true )){
	                return;
	            }
	            bookmark = range.createBookmark();
	            optimize( range );
	            range.removeInlineStyle( 'a' ).moveToBookmark( bookmark ).select();
	        },
	        queryCommandState : function(){
	            return !this.highlight && this.queryCommandValue('link') ?  0 : -1;
	        }
	
	    };
	    function doLink(range,opt,me){
	        var rngClone = range.cloneRange(),
	            link = me.queryCommandValue('link');
	        optimize( range = range.adjustmentBoundary() );
	        var start = range.startContainer;
	        if(start.nodeType == 1 && link){
	            start = start.childNodes[range.startOffset];
	            if(start && start.nodeType == 1 && start.tagName == 'A' && /^(?:https?|ftp|file)\s*:\s*\/\//.test(start[browser.ie?'innerText':'textContent'])){
	                start[browser.ie ? 'innerText' : 'textContent'] =  utils.html(opt.textValue||opt.href);
	
	            }
	        }
	        if( !rngClone.collapsed || link){
	            range.removeInlineStyle( 'a' );
	            rngClone = range.cloneRange();
	        }
	
	        if ( rngClone.collapsed ) {
	            var a = range.document.createElement( 'a'),
	                text = '';
	            if(opt.textValue){
	
	                text =   utils.html(opt.textValue);
	                delete opt.textValue;
	            }else{
	                text =   utils.html(opt.href);
	
	            }
	            domUtils.setAttributes( a, opt );
	            start =  domUtils.findParentByTagName( rngClone.startContainer, 'a', true );
	            if(start && domUtils.isInNodeEndBoundary(rngClone,start)){
	                range.setStartAfter(start).collapse(true);
	
	            }
	            a[browser.ie ? 'innerText' : 'textContent'] = text;
	            range.insertNode(a).selectNode( a );
	        } else {
	            range.applyInlineStyle( 'a', opt );
	
	        }
	    }
	    UE.commands['link'] = {
	        execCommand : function( cmdName, opt ) {
	            var range;
	            opt._href && (opt._href = utils.unhtml(opt._href,/[<">]/g));
	            opt.href && (opt.href = utils.unhtml(opt.href,/[<">]/g));
	            opt.textValue && (opt.textValue = utils.unhtml(opt.textValue,/[<">]/g));
	            doLink(range=this.selection.getRange(),opt,this);
	            //闭合都不加占位符，如果加了会在a后边多个占位符节点，导致a是图片背景组成的列表，出现空白问题
	            range.collapse().select(true);
	
	        },
	        queryCommandValue : function() {
	            var range = this.selection.getRange(),
	                node;
	            if ( range.collapsed ) {
	//                    node = this.selection.getStart();
	                //在ie下getstart()取值偏上了
	                node = range.startContainer;
	                node = node.nodeType == 1 ? node : node.parentNode;
	
	                if ( node && (node = domUtils.findParentByTagName( node, 'a', true )) && ! domUtils.isInNodeEndBoundary(range,node)) {
	
	                    return node;
	                }
	            } else {
	                //trace:1111  如果是<p><a>xx</a></p> startContainer是p就会找不到a
	                range.shrinkBoundary();
	                var start = range.startContainer.nodeType  == 3 || !range.startContainer.childNodes[range.startOffset] ? range.startContainer : range.startContainer.childNodes[range.startOffset],
	                    end =  range.endContainer.nodeType == 3 || range.endOffset == 0 ? range.endContainer : range.endContainer.childNodes[range.endOffset-1],
	                    common = range.getCommonAncestor();
	                node = domUtils.findParentByTagName( common, 'a', true );
	                if ( !node && common.nodeType == 1){
	
	                    var as = common.getElementsByTagName( 'a' ),
	                        ps,pe;
	
	                    for ( var i = 0,ci; ci = as[i++]; ) {
	                        ps = domUtils.getPosition( ci, start ),pe = domUtils.getPosition( ci,end);
	                        if ( (ps & domUtils.POSITION_FOLLOWING || ps & domUtils.POSITION_CONTAINS)
	                            &&
	                            (pe & domUtils.POSITION_PRECEDING || pe & domUtils.POSITION_CONTAINS)
	                            ) {
	                            node = ci;
	                            break;
	                        }
	                    }
	                }
	                return node;
	            }
	
	        },
	        queryCommandState : function() {
	            //判断如果是视频的话连接不可用
	            //fix 853
	            var img = this.selection.getRange().getClosedNode(),
	                flag = img && (img.className == "edui-faked-video" || img.className.indexOf("edui-upload-video")!=-1);
	            return flag ? -1 : 0;
	        }
	    };
	};
	
	// plugins/iframe.js
	///import core
	///import plugins\inserthtml.js
	///commands 插入框架
	///commandsName  InsertFrame
	///commandsTitle  插入Iframe
	///commandsDialog  dialogs\insertframe
	
	UE.plugins['insertframe'] = function() {
	   var me =this;
	    function deleteIframe(){
	        me._iframe && delete me._iframe;
	    }
	
	    me.addListener("selectionchange",function(){
	        deleteIframe();
	    });
	
	};
	
	
	
	// plugins/scrawl.js
	///import core
	///commands 涂鸦
	///commandsName  Scrawl
	///commandsTitle  涂鸦
	///commandsDialog  dialogs\scrawl
	UE.commands['scrawl'] = {
	    queryCommandState : function(){
	        return ( browser.ie && browser.version  <= 8 ) ? -1 :0;
	    }
	};
	
	
	// plugins/removeformat.js
	/**
	 * 清除格式
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 清除文字样式
	 * @command removeformat
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param   {String}   tags     以逗号隔开的标签。如：strong
	 * @param   {String}   style    样式如：color
	 * @param   {String}   attrs    属性如:width
	 * @example
	 * ```javascript
	 * editor.execCommand( 'removeformat', 'strong','color','width' );
	 * ```
	 */
	
	UE.plugins['removeformat'] = function(){
	    var me = this;
	    me.setOpt({
	       'removeFormatTags': 'b,big,code,del,dfn,em,font,i,ins,kbd,q,samp,small,span,strike,strong,sub,sup,tt,u,var',
	       'removeFormatAttributes':'class,style,lang,width,height,align,hspace,valign'
	    });
	    me.commands['removeformat'] = {
	        execCommand : function( cmdName, tags, style, attrs,notIncludeA ) {
	
	            var tagReg = new RegExp( '^(?:' + (tags || this.options.removeFormatTags).replace( /,/g, '|' ) + ')$', 'i' ) ,
	                removeFormatAttributes = style ? [] : (attrs || this.options.removeFormatAttributes).split( ',' ),
	                range = new dom.Range( this.document ),
	                bookmark,node,parent,
	                filter = function( node ) {
	                    return node.nodeType == 1;
	                };
	
	            function isRedundantSpan (node) {
	                if (node.nodeType == 3 || node.tagName.toLowerCase() != 'span'){
	                    return 0;
	                }
	                if (browser.ie) {
	                    //ie 下判断实效，所以只能简单用style来判断
	                    //return node.style.cssText == '' ? 1 : 0;
	                    var attrs = node.attributes;
	                    if ( attrs.length ) {
	                        for ( var i = 0,l = attrs.length; i<l; i++ ) {
	                            if ( attrs[i].specified ) {
	                                return 0;
	                            }
	                        }
	                        return 1;
	                    }
	                }
	                return !node.attributes.length;
	            }
	            function doRemove( range ) {
	
	                var bookmark1 = range.createBookmark();
	                if ( range.collapsed ) {
	                    range.enlarge( true );
	                }
	
	                //不能把a标签切了
	                if(!notIncludeA){
	                    var aNode = domUtils.findParentByTagName(range.startContainer,'a',true);
	                    if(aNode){
	                        range.setStartBefore(aNode);
	                    }
	
	                    aNode = domUtils.findParentByTagName(range.endContainer,'a',true);
	                    if(aNode){
	                        range.setEndAfter(aNode);
	                    }
	
	                }
	
	
	                bookmark = range.createBookmark();
	
	                node = bookmark.start;
	
	                //切开始
	                while ( (parent = node.parentNode) && !domUtils.isBlockElm( parent ) ) {
	                    domUtils.breakParent( node, parent );
	
	                    domUtils.clearEmptySibling( node );
	                }
	                if ( bookmark.end ) {
	                    //切结束
	                    node = bookmark.end;
	                    while ( (parent = node.parentNode) && !domUtils.isBlockElm( parent ) ) {
	                        domUtils.breakParent( node, parent );
	                        domUtils.clearEmptySibling( node );
	                    }
	
	                    //开始去除样式
	                    var current = domUtils.getNextDomNode( bookmark.start, false, filter ),
	                        next;
	                    while ( current ) {
	                        if ( current == bookmark.end ) {
	                            break;
	                        }
	
	                        next = domUtils.getNextDomNode( current, true, filter );
	
	                        if ( !dtd.$empty[current.tagName.toLowerCase()] && !domUtils.isBookmarkNode( current ) ) {
	                            if ( tagReg.test( current.tagName ) ) {
	                                if ( style ) {
	                                    domUtils.removeStyle( current, style );
	                                    if ( isRedundantSpan( current ) && style != 'text-decoration'){
	                                        domUtils.remove( current, true );
	                                    }
	                                } else {
	                                    domUtils.remove( current, true );
	                                }
	                            } else {
	                                //trace:939  不能把list上的样式去掉
	                                if(!dtd.$tableContent[current.tagName] && !dtd.$list[current.tagName]){
	                                    domUtils.removeAttributes( current, removeFormatAttributes );
	                                    if ( isRedundantSpan( current ) ){
	                                        domUtils.remove( current, true );
	                                    }
	                                }
	
	                            }
	                        }
	                        current = next;
	                    }
	                }
	                //trace:1035
	                //trace:1096 不能把td上的样式去掉，比如边框
	                var pN = bookmark.start.parentNode;
	                if(domUtils.isBlockElm(pN) && !dtd.$tableContent[pN.tagName] && !dtd.$list[pN.tagName]){
	                    domUtils.removeAttributes(  pN,removeFormatAttributes );
	                }
	                pN = bookmark.end.parentNode;
	                if(bookmark.end && domUtils.isBlockElm(pN) && !dtd.$tableContent[pN.tagName]&& !dtd.$list[pN.tagName]){
	                    domUtils.removeAttributes(  pN,removeFormatAttributes );
	                }
	                range.moveToBookmark( bookmark ).moveToBookmark(bookmark1);
	                //清除冗余的代码 <b><bookmark></b>
	                var node = range.startContainer,
	                    tmp,
	                    collapsed = range.collapsed;
	                while(node.nodeType == 1 && domUtils.isEmptyNode(node) && dtd.$removeEmpty[node.tagName]){
	                    tmp = node.parentNode;
	                    range.setStartBefore(node);
	                    //trace:937
	                    //更新结束边界
	                    if(range.startContainer === range.endContainer){
	                        range.endOffset--;
	                    }
	                    domUtils.remove(node);
	                    node = tmp;
	                }
	
	                if(!collapsed){
	                    node = range.endContainer;
	                    while(node.nodeType == 1 && domUtils.isEmptyNode(node) && dtd.$removeEmpty[node.tagName]){
	                        tmp = node.parentNode;
	                        range.setEndBefore(node);
	                        domUtils.remove(node);
	
	                        node = tmp;
	                    }
	
	
	                }
	            }
	
	
	
	            range = this.selection.getRange();
	            doRemove( range );
	            range.select();
	
	        }
	
	    };
	
	};
	
	
	// plugins/blockquote.js
	/**
	 * 添加引用
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 添加引用
	 * @command blockquote
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'blockquote' );
	 * ```
	 */
	
	/**
	 * 添加引用
	 * @command blockquote
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { Object } attrs 节点属性
	 * @example
	 * ```javascript
	 * editor.execCommand( 'blockquote',{
	 *     style: "color: red;"
	 * } );
	 * ```
	 */
	
	
	UE.plugins['blockquote'] = function(){
	    var me = this;
	    function getObj(editor){
	        return domUtils.filterNodeList(editor.selection.getStartElementPath(),'blockquote');
	    }
	    me.commands['blockquote'] = {
	        execCommand : function( cmdName, attrs ) {
	            var range = this.selection.getRange(),
	                obj = getObj(this),
	                blockquote = dtd.blockquote,
	                bookmark = range.createBookmark();
	
	            if ( obj ) {
	
	                    var start = range.startContainer,
	                        startBlock = domUtils.isBlockElm(start) ? start : domUtils.findParent(start,function(node){return domUtils.isBlockElm(node)}),
	
	                        end = range.endContainer,
	                        endBlock = domUtils.isBlockElm(end) ? end :  domUtils.findParent(end,function(node){return domUtils.isBlockElm(node)});
	
	                    //处理一下li
	                    startBlock = domUtils.findParentByTagName(startBlock,'li',true) || startBlock;
	                    endBlock = domUtils.findParentByTagName(endBlock,'li',true) || endBlock;
	
	
	                    if(startBlock.tagName == 'LI' || startBlock.tagName == 'TD' || startBlock === obj || domUtils.isBody(startBlock)){
	                        domUtils.remove(obj,true);
	                    }else{
	                        domUtils.breakParent(startBlock,obj);
	                    }
	
	                    if(startBlock !== endBlock){
	                        obj = domUtils.findParentByTagName(endBlock,'blockquote');
	                        if(obj){
	                            if(endBlock.tagName == 'LI' || endBlock.tagName == 'TD'|| domUtils.isBody(endBlock)){
	                                obj.parentNode && domUtils.remove(obj,true);
	                            }else{
	                                domUtils.breakParent(endBlock,obj);
	                            }
	
	                        }
	                    }
	
	                    var blockquotes = domUtils.getElementsByTagName(this.document,'blockquote');
	                    for(var i=0,bi;bi=blockquotes[i++];){
	                        if(!bi.childNodes.length){
	                            domUtils.remove(bi);
	                        }else if(domUtils.getPosition(bi,startBlock)&domUtils.POSITION_FOLLOWING && domUtils.getPosition(bi,endBlock)&domUtils.POSITION_PRECEDING){
	                            domUtils.remove(bi,true);
	                        }
	                    }
	
	
	
	
	            } else {
	
	                var tmpRange = range.cloneRange(),
	                    node = tmpRange.startContainer.nodeType == 1 ? tmpRange.startContainer : tmpRange.startContainer.parentNode,
	                    preNode = node,
	                    doEnd = 1;
	
	                //调整开始
	                while ( 1 ) {
	                    if ( domUtils.isBody(node) ) {
	                        if ( preNode !== node ) {
	                            if ( range.collapsed ) {
	                                tmpRange.selectNode( preNode );
	                                doEnd = 0;
	                            } else {
	                                tmpRange.setStartBefore( preNode );
	                            }
	                        }else{
	                            tmpRange.setStart(node,0);
	                        }
	
	                        break;
	                    }
	                    if ( !blockquote[node.tagName] ) {
	                        if ( range.collapsed ) {
	                            tmpRange.selectNode( preNode );
	                        } else{
	                            tmpRange.setStartBefore( preNode);
	                        }
	                        break;
	                    }
	
	                    preNode = node;
	                    node = node.parentNode;
	                }
	
	                //调整结束
	                if ( doEnd ) {
	                    preNode = node =  node = tmpRange.endContainer.nodeType == 1 ? tmpRange.endContainer : tmpRange.endContainer.parentNode;
	                    while ( 1 ) {
	
	                        if ( domUtils.isBody( node ) ) {
	                            if ( preNode !== node ) {
	
	                                tmpRange.setEndAfter( preNode );
	
	                            } else {
	                                tmpRange.setEnd( node, node.childNodes.length );
	                            }
	
	                            break;
	                        }
	                        if ( !blockquote[node.tagName] ) {
	                            tmpRange.setEndAfter( preNode );
	                            break;
	                        }
	
	                        preNode = node;
	                        node = node.parentNode;
	                    }
	
	                }
	
	
	                node = range.document.createElement( 'blockquote' );
	                domUtils.setAttributes( node, attrs );
	                node.appendChild( tmpRange.extractContents() );
	                tmpRange.insertNode( node );
	                //去除重复的
	                var childs = domUtils.getElementsByTagName(node,'blockquote');
	                for(var i=0,ci;ci=childs[i++];){
	                    if(ci.parentNode){
	                        domUtils.remove(ci,true);
	                    }
	                }
	
	            }
	            range.moveToBookmark( bookmark ).select();
	        },
	        queryCommandState : function() {
	            return getObj(this) ? 1 : 0;
	        }
	    };
	};
	
	
	
	// plugins/convertcase.js
	/**
	 * 大小写转换
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 把选区内文本变大写，与“tolowercase”命令互斥
	 * @command touppercase
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'touppercase' );
	 * ```
	 */
	
	/**
	 * 把选区内文本变小写，与“touppercase”命令互斥
	 * @command tolowercase
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'tolowercase' );
	 * ```
	 */
	UE.commands['touppercase'] =
	UE.commands['tolowercase'] = {
	    execCommand:function (cmd) {
	        var me = this;
	        var rng = me.selection.getRange();
	        if(rng.collapsed){
	            return rng;
	        }
	        var bk = rng.createBookmark(),
	            bkEnd = bk.end,
	            filterFn = function( node ) {
	                return !domUtils.isBr(node) && !domUtils.isWhitespace( node );
	            },
	            curNode = domUtils.getNextDomNode( bk.start, false, filterFn );
	        while ( curNode && (domUtils.getPosition( curNode, bkEnd ) & domUtils.POSITION_PRECEDING) ) {
	
	            if ( curNode.nodeType == 3 ) {
	                curNode.nodeValue = curNode.nodeValue[cmd == 'touppercase' ? 'toUpperCase' : 'toLowerCase']();
	            }
	            curNode = domUtils.getNextDomNode( curNode, true, filterFn );
	            if(curNode === bkEnd){
	                break;
	            }
	
	        }
	        rng.moveToBookmark(bk).select();
	    }
	};
	
	
	
	// plugins/indent.js
	/**
	 * 首行缩进
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 缩进
	 * @command indent
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'indent' );
	 * ```
	 */
	UE.commands['indent'] = {
	    execCommand : function() {
	         var me = this,value = me.queryCommandState("indent") ? "0em" : (me.options.indentValue || '2em');
	         me.execCommand('Paragraph','p',{style:'text-indent:'+ value});
	    },
	    queryCommandState : function() {
	        var pN = domUtils.filterNodeList(this.selection.getStartElementPath(),'p h1 h2 h3 h4 h5 h6');
	        return pN && pN.style.textIndent && parseInt(pN.style.textIndent) ?  1 : 0;
	    }
	
	};
	
	
	// plugins/print.js
	/**
	 * 打印
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 打印
	 * @command print
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'print' );
	 * ```
	 */
	UE.commands['print'] = {
	    execCommand : function(){
	        this.window.print();
	    },
	    notNeedUndo : 1
	};
	
	
	
	// plugins/preview.js
	/**
	 * 预览
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 预览
	 * @command preview
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'preview' );
	 * ```
	 */
	UE.commands['preview'] = {
	    execCommand : function(){
	        var w = window.open('', '_blank', ''),
	            d = w.document;
	        d.open();
	        d.write('<!DOCTYPE html><html><head><meta charset="utf-8"/><script src="'+this.options.UEDITOR_HOME_URL+'ueditor.parse.js"></script><script>' +
	            "setTimeout(function(){uParse('div',{rootPath: '"+ this.options.UEDITOR_HOME_URL +"'})},300)" +
	            '</script></head><body><div>'+this.getContent(null,null,true)+'</div></body></html>');
	        d.close();
	    },
	    notNeedUndo : 1
	};
	
	
	// plugins/selectall.js
	/**
	 * 全选
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 选中所有内容
	 * @command selectall
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'selectall' );
	 * ```
	 */
	UE.plugins['selectall'] = function(){
	    var me = this;
	    me.commands['selectall'] = {
	        execCommand : function(){
	            //去掉了原生的selectAll,因为会出现报错和当内容为空时，不能出现闭合状态的光标
	            var me = this,body = me.body,
	                range = me.selection.getRange();
	            range.selectNodeContents(body);
	            if(domUtils.isEmptyBlock(body)){
	                //opera不能自动合并到元素的里边，要手动处理一下
	                if(browser.opera && body.firstChild && body.firstChild.nodeType == 1){
	                    range.setStartAtFirst(body.firstChild);
	                }
	                range.collapse(true);
	            }
	            range.select(true);
	        },
	        notNeedUndo : 1
	    };
	
	
	    //快捷键
	    me.addshortcutkey({
	         "selectAll" : "ctrl+65"
	    });
	};
	
	
	// plugins/paragraph.js
	/**
	 * 段落样式
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 段落格式
	 * @command paragraph
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param {String}   style               标签值为：'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'
	 * @param {Object}   attrs               标签的属性
	 * @example
	 * ```javascript
	 * editor.execCommand( 'Paragraph','h1','{
	 *     class:'test'
	 * }' );
	 * ```
	 */
	
	/**
	 * 返回选区内节点标签名
	 * @command paragraph
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { String } 节点标签名
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'Paragraph' );
	 * ```
	 */
	
	UE.plugins['paragraph'] = function() {
	    var me = this,
	        block = domUtils.isBlockElm,
	        notExchange = ['TD','LI','PRE'],
	
	        doParagraph = function(range,style,attrs,sourceCmdName){
	            var bookmark = range.createBookmark(),
	                filterFn = function( node ) {
	                    return   node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' &&  !domUtils.isBookmarkNode(node) : !domUtils.isWhitespace( node );
	                },
	                para;
	
	            range.enlarge( true );
	            var bookmark2 = range.createBookmark(),
	                current = domUtils.getNextDomNode( bookmark2.start, false, filterFn ),
	                tmpRange = range.cloneRange(),
	                tmpNode;
	            while ( current && !(domUtils.getPosition( current, bookmark2.end ) & domUtils.POSITION_FOLLOWING) ) {
	                if ( current.nodeType == 3 || !block( current ) ) {
	                    tmpRange.setStartBefore( current );
	                    while ( current && current !== bookmark2.end && !block( current ) ) {
	                        tmpNode = current;
	                        current = domUtils.getNextDomNode( current, false, null, function( node ) {
	                            return !block( node );
	                        } );
	                    }
	                    tmpRange.setEndAfter( tmpNode );
	                    
	                    para = range.document.createElement( style );
	                    if(attrs){
	                        domUtils.setAttributes(para,attrs);
	                        if(sourceCmdName && sourceCmdName == 'customstyle' && attrs.style){
	                            para.style.cssText = attrs.style;
	                        }
	                    }
	                    para.appendChild( tmpRange.extractContents() );
	                    //需要内容占位
	                    if(domUtils.isEmptyNode(para)){
	                        domUtils.fillChar(range.document,para);
	                        
	                    }
	
	                    tmpRange.insertNode( para );
	
	                    var parent = para.parentNode;
	                    //如果para上一级是一个block元素且不是body,td就删除它
	                    if ( block( parent ) && !domUtils.isBody( para.parentNode ) && utils.indexOf(notExchange,parent.tagName)==-1) {
	                        //存储dir,style
	                        if(!(sourceCmdName && sourceCmdName == 'customstyle')){
	                            parent.getAttribute('dir') && para.setAttribute('dir',parent.getAttribute('dir'));
	                            //trace:1070
	                            parent.style.cssText && (para.style.cssText = parent.style.cssText + ';' + para.style.cssText);
	                            //trace:1030
	                            parent.style.textAlign && !para.style.textAlign && (para.style.textAlign = parent.style.textAlign);
	                            parent.style.textIndent && !para.style.textIndent && (para.style.textIndent = parent.style.textIndent);
	                            parent.style.padding && !para.style.padding && (para.style.padding = parent.style.padding);
	                        }
	
	                        //trace:1706 选择的就是h1-6要删除
	                        if(attrs && /h\d/i.test(parent.tagName) && !/h\d/i.test(para.tagName) ){
	                            domUtils.setAttributes(parent,attrs);
	                            if(sourceCmdName && sourceCmdName == 'customstyle' && attrs.style){
	                                parent.style.cssText = attrs.style;
	                            }
	                            domUtils.remove(para,true);
	                            para = parent;
	                        }else{
	                            domUtils.remove( para.parentNode, true );
	                        }
	
	                    }
	                    if(  utils.indexOf(notExchange,parent.tagName)!=-1){
	                        current = parent;
	                    }else{
	                       current = para;
	                    }
	
	
	                    current = domUtils.getNextDomNode( current, false, filterFn );
	                } else {
	                    current = domUtils.getNextDomNode( current, true, filterFn );
	                }
	            }
	            return range.moveToBookmark( bookmark2 ).moveToBookmark( bookmark );
	        };
	    me.setOpt('paragraph',{'p':'', 'h1':'', 'h2':'', 'h3':'', 'h4':'', 'h5':'', 'h6':''});
	    me.commands['paragraph'] = {
	        execCommand : function( cmdName, style,attrs,sourceCmdName ) {
	            var range = this.selection.getRange();
	             //闭合时单独处理
	            if(range.collapsed){
	                var txt = this.document.createTextNode('p');
	                range.insertNode(txt);
	                //去掉冗余的fillchar
	                if(browser.ie){
	                    var node = txt.previousSibling;
	                    if(node && domUtils.isWhitespace(node)){
	                        domUtils.remove(node);
	                    }
	                    node = txt.nextSibling;
	                    if(node && domUtils.isWhitespace(node)){
	                        domUtils.remove(node);
	                    }
	                }
	
	            }
	            range = doParagraph(range,style,attrs,sourceCmdName);
	            if(txt){
	                range.setStartBefore(txt).collapse(true);
	                pN = txt.parentNode;
	
	                domUtils.remove(txt);
	
	                if(domUtils.isBlockElm(pN)&&domUtils.isEmptyNode(pN)){
	                    domUtils.fillNode(this.document,pN);
	                }
	
	            }
	
	            if(browser.gecko && range.collapsed && range.startContainer.nodeType == 1){
	                var child = range.startContainer.childNodes[range.startOffset];
	                if(child && child.nodeType == 1 && child.tagName.toLowerCase() == style){
	                    range.setStart(child,0).collapse(true);
	                }
	            }
	            //trace:1097 原来有true，原因忘了，但去了就不能清除多余的占位符了
	            range.select();
	
	
	            return true;
	        },
	        queryCommandValue : function() {
	            var node = domUtils.filterNodeList(this.selection.getStartElementPath(),'p h1 h2 h3 h4 h5 h6');
	            return node ? node.tagName.toLowerCase() : '';
	        }
	    };
	};
	
	
	// plugins/directionality.js
	/**
	 * 设置文字输入的方向的插件
	 * @file
	 * @since 1.2.6.1
	 */
	(function() {
	    var block = domUtils.isBlockElm ,
	        getObj = function(editor){
	//            var startNode = editor.selection.getStart(),
	//                parents;
	//            if ( startNode ) {
	//                //查找所有的是block的父亲节点
	//                parents = domUtils.findParents( startNode, true, block, true );
	//                for ( var i = 0,ci; ci = parents[i++]; ) {
	//                    if ( ci.getAttribute( 'dir' ) ) {
	//                        return ci;
	//                    }
	//                }
	//            }
	            return domUtils.filterNodeList(editor.selection.getStartElementPath(),function(n){return n && n.nodeType == 1 && n.getAttribute('dir')});
	
	        },
	        doDirectionality = function(range,editor,forward){
	            
	            var bookmark,
	                filterFn = function( node ) {
	                    return   node.nodeType == 1 ? !domUtils.isBookmarkNode(node) : !domUtils.isWhitespace(node);
	                },
	
	                obj = getObj( editor );
	
	            if ( obj && range.collapsed ) {
	                obj.setAttribute( 'dir', forward );
	                return range;
	            }
	            bookmark = range.createBookmark();
	            range.enlarge( true );
	            var bookmark2 = range.createBookmark(),
	                current = domUtils.getNextDomNode( bookmark2.start, false, filterFn ),
	                tmpRange = range.cloneRange(),
	                tmpNode;
	            while ( current &&  !(domUtils.getPosition( current, bookmark2.end ) & domUtils.POSITION_FOLLOWING) ) {
	                if ( current.nodeType == 3 || !block( current ) ) {
	                    tmpRange.setStartBefore( current );
	                    while ( current && current !== bookmark2.end && !block( current ) ) {
	                        tmpNode = current;
	                        current = domUtils.getNextDomNode( current, false, null, function( node ) {
	                            return !block( node );
	                        } );
	                    }
	                    tmpRange.setEndAfter( tmpNode );
	                    var common = tmpRange.getCommonAncestor();
	                    if ( !domUtils.isBody( common ) && block( common ) ) {
	                        //遍历到了block节点
	                        common.setAttribute( 'dir', forward );
	                        current = common;
	                    } else {
	                        //没有遍历到，添加一个block节点
	                        var p = range.document.createElement( 'p' );
	                        p.setAttribute( 'dir', forward );
	                        var frag = tmpRange.extractContents();
	                        p.appendChild( frag );
	                        tmpRange.insertNode( p );
	                        current = p;
	                    }
	
	                    current = domUtils.getNextDomNode( current, false, filterFn );
	                } else {
	                    current = domUtils.getNextDomNode( current, true, filterFn );
	                }
	            }
	            return range.moveToBookmark( bookmark2 ).moveToBookmark( bookmark );
	        };
	
	    /**
	     * 文字输入方向
	     * @command directionality
	     * @method execCommand
	     * @param { String } cmdName 命令字符串
	     * @param { String } forward 传入'ltr'表示从左向右输入，传入'rtl'表示从右向左输入
	     * @example
	     * ```javascript
	     * editor.execCommand( 'directionality', 'ltr');
	     * ```
	     */
	
	    /**
	     * 查询当前选区的文字输入方向
	     * @command directionality
	     * @method queryCommandValue
	     * @param { String } cmdName 命令字符串
	     * @return { String } 返回'ltr'表示从左向右输入，返回'rtl'表示从右向左输入
	     * @example
	     * ```javascript
	     * editor.queryCommandValue( 'directionality');
	     * ```
	     */
	    UE.commands['directionality'] = {
	        execCommand : function( cmdName,forward ) {
	            var range = this.selection.getRange();
	            //闭合时单独处理
	            if(range.collapsed){
	                var txt = this.document.createTextNode('d');
	                range.insertNode(txt);
	            }
	            doDirectionality(range,this,forward);
	            if(txt){
	                range.setStartBefore(txt).collapse(true);
	                domUtils.remove(txt);
	            }
	
	            range.select();
	            return true;
	        },
	        queryCommandValue : function() {
	            var node = getObj(this);
	            return node ? node.getAttribute('dir') : 'ltr';
	        }
	    };
	})();
	
	
	
	// plugins/horizontal.js
	/**
	 * 插入分割线插件
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 插入分割线
	 * @command horizontal
	 * @method execCommand
	 * @param { String } cmdName 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'horizontal' );
	 * ```
	 */
	UE.plugins['horizontal'] = function(){
	    var me = this;
	    me.commands['horizontal'] = {
	        execCommand : function( cmdName ) {
	            var me = this;
	            if(me.queryCommandState(cmdName)!==-1){
	                me.execCommand('insertHtml','<hr>');
	                var range = me.selection.getRange(),
	                    start = range.startContainer;
	                if(start.nodeType == 1 && !start.childNodes[range.startOffset] ){
	
	                    var tmp;
	                    if(tmp = start.childNodes[range.startOffset - 1]){
	                        if(tmp.nodeType == 1 && tmp.tagName == 'HR'){
	                            if(me.options.enterTag == 'p'){
	                                tmp = me.document.createElement('p');
	                                range.insertNode(tmp);
	                                range.setStart(tmp,0).setCursor();
	
	                            }else{
	                                tmp = me.document.createElement('br');
	                                range.insertNode(tmp);
	                                range.setStartBefore(tmp).setCursor();
	                            }
	                        }
	                    }
	
	                }
	                return true;
	            }
	
	        },
	        //边界在table里不能加分隔线
	        queryCommandState : function() {
	            return domUtils.filterNodeList(this.selection.getStartElementPath(),'table') ? -1 : 0;
	        }
	    };
	//    me.addListener('delkeyup',function(){
	//        var rng = this.selection.getRange();
	//        if(browser.ie && browser.version > 8){
	//            rng.txtToElmBoundary(true);
	//            if(domUtils.isStartInblock(rng)){
	//                var tmpNode = rng.startContainer;
	//                var pre = tmpNode.previousSibling;
	//                if(pre && domUtils.isTagNode(pre,'hr')){
	//                    domUtils.remove(pre);
	//                    rng.select();
	//                    return;
	//                }
	//            }
	//        }
	//        if(domUtils.isBody(rng.startContainer)){
	//            var hr = rng.startContainer.childNodes[rng.startOffset -1];
	//            if(hr && hr.nodeName == 'HR'){
	//                var next = hr.nextSibling;
	//                if(next){
	//                    rng.setStart(next,0)
	//                }else if(hr.previousSibling){
	//                    rng.setStartAtLast(hr.previousSibling)
	//                }else{
	//                    var p = this.document.createElement('p');
	//                    hr.parentNode.insertBefore(p,hr);
	//                    domUtils.fillNode(this.document,p);
	//                    rng.setStart(p,0);
	//                }
	//                domUtils.remove(hr);
	//                rng.setCursor(false,true);
	//            }
	//        }
	//    })
	    me.addListener('delkeydown',function(name,evt){
	        var rng = this.selection.getRange();
	        rng.txtToElmBoundary(true);
	        if(domUtils.isStartInblock(rng)){
	            var tmpNode = rng.startContainer;
	            var pre = tmpNode.previousSibling;
	            if(pre && domUtils.isTagNode(pre,'hr')){
	                domUtils.remove(pre);
	                rng.select();
	                domUtils.preventDefault(evt);
	                return true;
	
	            }
	        }
	
	    })
	};
	
	
	
	// plugins/time.js
	/**
	 * 插入时间和日期
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 插入时间，默认格式：12:59:59
	 * @command time
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'time');
	 * ```
	 */
	
	/**
	 * 插入日期，默认格式：2013-08-30
	 * @command date
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'date');
	 * ```
	 */
	UE.commands['time'] = UE.commands["date"] = {
	    execCommand : function(cmd, format){
	        var date = new Date;
	
	        function formatTime(date, format) {
	            var hh = ('0' + date.getHours()).slice(-2),
	                ii = ('0' + date.getMinutes()).slice(-2),
	                ss = ('0' + date.getSeconds()).slice(-2);
	            format = format || 'hh:ii:ss';
	            return format.replace(/hh/ig, hh).replace(/ii/ig, ii).replace(/ss/ig, ss);
	        }
	        function formatDate(date, format) {
	            var yyyy = ('000' + date.getFullYear()).slice(-4),
	                yy = yyyy.slice(-2),
	                mm = ('0' + (date.getMonth()+1)).slice(-2),
	                dd = ('0' + date.getDate()).slice(-2);
	            format = format || 'yyyy-mm-dd';
	            return format.replace(/yyyy/ig, yyyy).replace(/yy/ig, yy).replace(/mm/ig, mm).replace(/dd/ig, dd);
	        }
	
	        this.execCommand('insertHtml',cmd == "time" ? formatTime(date, format):formatDate(date, format) );
	    }
	};
	
	
	// plugins/rowspacing.js
	/**
	 * 段前段后间距插件
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 设置段间距
	 * @command rowspacing
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { String } value 段间距的值，以px为单位
	 * @param { String } dir 间距位置，top或bottom，分别表示段前和段后
	 * @example
	 * ```javascript
	 * editor.execCommand( 'rowspacing', '10', 'top' );
	 * ```
	 */
	
	UE.plugins['rowspacing'] = function(){
	    var me = this;
	    me.setOpt({
	        'rowspacingtop':['5', '10', '15', '20', '25'],
	        'rowspacingbottom':['5', '10', '15', '20', '25']
	
	    });
	    me.commands['rowspacing'] =  {
	        execCommand : function( cmdName,value,dir ) {
	            this.execCommand('paragraph','p',{style:'margin-'+dir+':'+value + 'px'});
	            return true;
	        },
	        queryCommandValue : function(cmdName,dir) {
	            var pN = domUtils.filterNodeList(this.selection.getStartElementPath(),function(node){return domUtils.isBlockElm(node) }),
	                value;
	            //trace:1026
	            if(pN){
	                value = domUtils.getComputedStyle(pN,'margin-'+dir).replace(/[^\d]/g,'');
	                return !value ? 0 : value;
	            }
	            return 0;
	
	        }
	    };
	};
	
	
	
	
	// plugins/lineheight.js
	/**
	 * 设置行内间距
	 * @file
	 * @since 1.2.6.1
	 */
	UE.plugins['lineheight'] = function(){
	    var me = this;
	    me.setOpt({'lineheight':['1', '1.5','1.75','2', '3', '4', '5']});
	
	    /**
	     * 行距
	     * @command lineheight
	     * @method execCommand
	     * @param { String } cmdName 命令字符串
	     * @param { String } value 传入的行高值， 该值是当前字体的倍数， 例如： 1.5, 1.75
	     * @example
	     * ```javascript
	     * editor.execCommand( 'lineheight', 1.5);
	     * ```
	     */
	    /**
	     * 查询当前选区内容的行高大小
	     * @command lineheight
	     * @method queryCommandValue
	     * @param { String } cmd 命令字符串
	     * @return { String } 返回当前行高大小
	     * @example
	     * ```javascript
	     * editor.queryCommandValue( 'lineheight' );
	     * ```
	     */
	
	    me.commands['lineheight'] =  {
	        execCommand : function( cmdName,value ) {
	            this.execCommand('paragraph','p',{style:'line-height:'+ (value == "1" ? "normal" : value + 'em') });
	            return true;
	        },
	        queryCommandValue : function() {
	            var pN = domUtils.filterNodeList(this.selection.getStartElementPath(),function(node){return domUtils.isBlockElm(node)});
	            if(pN){
	                var value = domUtils.getComputedStyle(pN,'line-height');
	                return value == 'normal' ? 1 : value.replace(/[^\d.]*/ig,"");
	            }
	        }
	    };
	};
	
	
	
	
	// plugins/insertcode.js
	/**
	 * 插入代码插件
	 * @file
	 * @since 1.2.6.1
	 */
	
	UE.plugins['insertcode'] = function() {
	    var me = this;
	    me.ready(function(){
	        utils.cssRule('pre','pre{margin:.5em 0;padding:.4em .6em;border-radius:8px;background:#f8f8f8;}',
	            me.document)
	    });
	    me.setOpt('insertcode',{
	            'as3':'ActionScript3',
	            'bash':'Bash/Shell',
	            'cpp':'C/C++',
	            'css':'Css',
	            'cf':'CodeFunction',
	            'c#':'C#',
	            'delphi':'Delphi',
	            'diff':'Diff',
	            'erlang':'Erlang',
	            'groovy':'Groovy',
	            'html':'Html',
	            'java':'Java',
	            'jfx':'JavaFx',
	            'js':'Javascript',
	            'pl':'Perl',
	            'php':'Php',
	            'plain':'Plain Text',
	            'ps':'PowerShell',
	            'python':'Python',
	            'ruby':'Ruby',
	            'scala':'Scala',
	            'sql':'Sql',
	            'vb':'Vb',
	            'xml':'Xml'
	    });
	
	    /**
	     * 插入代码
	     * @command insertcode
	     * @method execCommand
	     * @param { String } cmd 命令字符串
	     * @param { String } lang 插入代码的语言
	     * @example
	     * ```javascript
	     * editor.execCommand( 'insertcode', 'javascript' );
	     * ```
	     */
	
	    /**
	     * 如果选区所在位置是插入插入代码区域，返回代码的语言
	     * @command insertcode
	     * @method queryCommandValue
	     * @param { String } cmd 命令字符串
	     * @return { String } 返回代码的语言
	     * @example
	     * ```javascript
	     * editor.queryCommandValue( 'insertcode' );
	     * ```
	     */
	
	    me.commands['insertcode'] = {
	        execCommand : function(cmd,lang){
	            var me = this,
	                rng = me.selection.getRange(),
	                pre = domUtils.findParentByTagName(rng.startContainer,'pre',true);
	            if(pre){
	                pre.className = 'brush:'+lang+';toolbar:false;';
	            }else{
	                var code = '';
	                if(rng.collapsed){
	                    code = browser.ie && browser.ie11below ? (browser.version <= 8 ? '&nbsp;':''):'<br/>';
	                }else{
	                    var frag = rng.extractContents();
	                    var div = me.document.createElement('div');
	                    div.appendChild(frag);
	
	                    utils.each(UE.filterNode(UE.htmlparser(div.innerHTML.replace(/[\r\t]/g,'')),me.options.filterTxtRules).children,function(node){
	                        if(browser.ie && browser.ie11below && browser.version > 8){
	
	                            if(node.type =='element'){
	                                if(node.tagName == 'br'){
	                                    code += '\n'
	                                }else if(!dtd.$empty[node.tagName]){
	                                    utils.each(node.children,function(cn){
	                                        if(cn.type =='element'){
	                                            if(cn.tagName == 'br'){
	                                                code += '\n'
	                                            }else if(!dtd.$empty[node.tagName]){
	                                                code += cn.innerText();
	                                            }
	                                        }else{
	                                            code += cn.data
	                                        }
	                                    })
	                                    if(!/\n$/.test(code)){
	                                        code += '\n';
	                                    }
	                                }
	                            }else{
	                                code += node.data + '\n'
	                            }
	                            if(!node.nextSibling() && /\n$/.test(code)){
	                                code = code.replace(/\n$/,'');
	                            }
	                        }else{
	                            if(browser.ie && browser.ie11below){
	
	                                if(node.type =='element'){
	                                    if(node.tagName == 'br'){
	                                        code += '<br>'
	                                    }else if(!dtd.$empty[node.tagName]){
	                                        utils.each(node.children,function(cn){
	                                            if(cn.type =='element'){
	                                                if(cn.tagName == 'br'){
	                                                    code += '<br>'
	                                                }else if(!dtd.$empty[node.tagName]){
	                                                    code += cn.innerText();
	                                                }
	                                            }else{
	                                                code += cn.data
	                                            }
	                                        });
	                                        if(!/br>$/.test(code)){
	                                            code += '<br>';
	                                        }
	                                    }
	                                }else{
	                                    code += node.data + '<br>'
	                                }
	                                if(!node.nextSibling() && /<br>$/.test(code)){
	                                    code = code.replace(/<br>$/,'');
	                                }
	
	                            }else{
	                                code += (node.type == 'element' ? (dtd.$empty[node.tagName] ?  '' : node.innerText()) : node.data);
	                                if(!/br\/?\s*>$/.test(code)){
	                                    if(!node.nextSibling())
	                                        return;
	                                    code += '<br>'
	                                }
	                            }
	
	                        }
	
	                    });
	                }
	                me.execCommand('inserthtml','<pre id="coder"class="brush:'+lang+';toolbar:false">'+code+'</pre>',true);
	
	                pre = me.document.getElementById('coder');
	                domUtils.removeAttributes(pre,'id');
	                var tmpNode = pre.previousSibling;
	
	                if(tmpNode && (tmpNode.nodeType == 3 && tmpNode.nodeValue.length == 1 && browser.ie && browser.version == 6 ||  domUtils.isEmptyBlock(tmpNode))){
	
	                    domUtils.remove(tmpNode)
	                }
	                var rng = me.selection.getRange();
	                if(domUtils.isEmptyBlock(pre)){
	                    rng.setStart(pre,0).setCursor(false,true)
	                }else{
	                    rng.selectNodeContents(pre).select()
	                }
	            }
	
	
	
	        },
	        queryCommandValue : function(){
	            var path = this.selection.getStartElementPath();
	            var lang = '';
	            utils.each(path,function(node){
	                if(node.nodeName =='PRE'){
	                    var match = node.className.match(/brush:([^;]+)/);
	                    lang = match && match[1] ? match[1] : '';
	                    return false;
	                }
	            });
	            return lang;
	        }
	    };
	
	    me.addInputRule(function(root){
	       utils.each(root.getNodesByTagName('pre'),function(pre){
	           var brs = pre.getNodesByTagName('br');
	           if(brs.length){
	               browser.ie && browser.ie11below && browser.version > 8 && utils.each(brs,function(br){
	                   var txt = UE.uNode.createText('\n');
	                   br.parentNode.insertBefore(txt,br);
	                   br.parentNode.removeChild(br);
	               });
	               return;
	            }
	           if(browser.ie && browser.ie11below && browser.version > 8)
	                return;
	            var code = pre.innerText().split(/\n/);
	            pre.innerHTML('');
	            utils.each(code,function(c){
	                if(c.length){
	                    pre.appendChild(UE.uNode.createText(c));
	                }
	                pre.appendChild(UE.uNode.createElement('br'))
	            })
	       })
	    });
	    me.addOutputRule(function(root){
	        utils.each(root.getNodesByTagName('pre'),function(pre){
	            var code = '';
	            utils.each(pre.children,function(n){
	               if(n.type == 'text'){
	                   //在ie下文本内容有可能末尾带有\n要去掉
	                   //trace:3396
	                   code += n.data.replace(/[ ]/g,'&nbsp;').replace(/\n$/,'');
	               }else{
	                   if(n.tagName == 'br'){
	                       code  += '\n'
	                   }else{
	                       code += (!dtd.$empty[n.tagName] ? '' : n.innerText());
	                   }
	
	               }
	
	            });
	
	            pre.innerText(code.replace(/(&nbsp;|\n)+$/,''))
	        })
	    });
	    //不需要判断highlight的command列表
	    me.notNeedCodeQuery ={
	        help:1,
	        undo:1,
	        redo:1,
	        source:1,
	        print:1,
	        searchreplace:1,
	        fullscreen:1,
	        preview:1,
	        insertparagraph:1,
	        elementpath:1,
	        insertcode:1,
	        inserthtml:1,
	        selectall:1
	    };
	    //将queyCommamndState重置
	    var orgQuery = me.queryCommandState;
	    me.queryCommandState = function(cmd){
	        var me = this;
	
	        if(!me.notNeedCodeQuery[cmd.toLowerCase()] && me.selection && me.queryCommandValue('insertcode')){
	            return -1;
	        }
	        return UE.Editor.prototype.queryCommandState.apply(this,arguments)
	    };
	    me.addListener('beforeenterkeydown',function(){
	        var rng = me.selection.getRange();
	        var pre = domUtils.findParentByTagName(rng.startContainer,'pre',true);
	        if(pre){
	            me.fireEvent('saveScene');
	            if(!rng.collapsed){
	               rng.deleteContents();
	            }
	            if(!browser.ie || browser.ie9above){
	                var tmpNode = me.document.createElement('br'),pre;
	                rng.insertNode(tmpNode).setStartAfter(tmpNode).collapse(true);
	                var next = tmpNode.nextSibling;
	                if(!next && (!browser.ie || browser.version > 10)){
	                    rng.insertNode(tmpNode.cloneNode(false));
	                }else{
	                    rng.setStartAfter(tmpNode);
	                }
	                pre = tmpNode.previousSibling;
	                var tmp;
	                while(pre ){
	                    tmp = pre;
	                    pre = pre.previousSibling;
	                    if(!pre || pre.nodeName == 'BR'){
	                        pre = tmp;
	                        break;
	                    }
	                }
	                if(pre){
	                    var str = '';
	                    while(pre && pre.nodeName != 'BR' &&  new RegExp('^[\\s'+domUtils.fillChar+']*$').test(pre.nodeValue)){
	                        str += pre.nodeValue;
	                        pre = pre.nextSibling;
	                    }
	                    if(pre.nodeName != 'BR'){
	                        var match = pre.nodeValue.match(new RegExp('^([\\s'+domUtils.fillChar+']+)'));
	                        if(match && match[1]){
	                            str += match[1]
	                        }
	
	                    }
	                    if(str){
	                        str = me.document.createTextNode(str);
	                        rng.insertNode(str).setStartAfter(str);
	                    }
	                }
	                rng.collapse(true).select(true);
	            }else{
	                if(browser.version > 8){
	
	                    var txt = me.document.createTextNode('\n');
	                    var start = rng.startContainer;
	                    if(rng.startOffset == 0){
	                        var preNode = start.previousSibling;
	                        if(preNode){
	                            rng.insertNode(txt);
	                            var fillchar = me.document.createTextNode(' ');
	                            rng.setStartAfter(txt).insertNode(fillchar).setStart(fillchar,0).collapse(true).select(true)
	                        }
	                    }else{
	                        rng.insertNode(txt).setStartAfter(txt);
	                        var fillchar = me.document.createTextNode(' ');
	                        start = rng.startContainer.childNodes[rng.startOffset];
	                        if(start && !/^\n/.test(start.nodeValue)){
	                            rng.setStartBefore(txt)
	                        }
	                        rng.insertNode(fillchar).setStart(fillchar,0).collapse(true).select(true)
	                    }
	
	                }else{
	                    var tmpNode = me.document.createElement('br');
	                    rng.insertNode(tmpNode);
	                    rng.insertNode(me.document.createTextNode(domUtils.fillChar));
	                    rng.setStartAfter(tmpNode);
	                    pre = tmpNode.previousSibling;
	                    var tmp;
	                    while(pre ){
	                        tmp = pre;
	                        pre = pre.previousSibling;
	                        if(!pre || pre.nodeName == 'BR'){
	                            pre = tmp;
	                            break;
	                        }
	                    }
	                    if(pre){
	                        var str = '';
	                        while(pre && pre.nodeName != 'BR' &&  new RegExp('^[ '+domUtils.fillChar+']*$').test(pre.nodeValue)){
	                            str += pre.nodeValue;
	                            pre = pre.nextSibling;
	                        }
	                        if(pre.nodeName != 'BR'){
	                            var match = pre.nodeValue.match(new RegExp('^([ '+domUtils.fillChar+']+)'));
	                            if(match && match[1]){
	                                str += match[1]
	                            }
	
	                        }
	
	                        str = me.document.createTextNode(str);
	                        rng.insertNode(str).setStartAfter(str);
	                    }
	                    rng.collapse(true).select();
	                }
	
	
	            }
	            me.fireEvent('saveScene');
	            return true;
	        }
	
	
	    });
	
	    me.addListener('tabkeydown',function(cmd,evt){
	        var rng = me.selection.getRange();
	        var pre = domUtils.findParentByTagName(rng.startContainer,'pre',true);
	        if(pre){
	            me.fireEvent('saveScene');
	            if(evt.shiftKey){
	
	            }else{
	                if(!rng.collapsed){
	                    var bk = rng.createBookmark();
	                    var start = bk.start.previousSibling;
	
	                    while(start){
	                        if(pre.firstChild === start && !domUtils.isBr(start)){
	                            pre.insertBefore(me.document.createTextNode('    '),start);
	
	                            break;
	                        }
	                        if(domUtils.isBr(start)){
	                            pre.insertBefore(me.document.createTextNode('    '),start.nextSibling);
	
	                            break;
	                        }
	                        start = start.previousSibling;
	                    }
	                    var end = bk.end;
	                    start = bk.start.nextSibling;
	                    if(pre.firstChild === bk.start){
	                        pre.insertBefore(me.document.createTextNode('    '),start.nextSibling)
	
	                    }
	                    while(start && start !== end){
	                        if(domUtils.isBr(start) && start.nextSibling){
	                            if(start.nextSibling === end){
	                                break;
	                            }
	                            pre.insertBefore(me.document.createTextNode('    '),start.nextSibling)
	                        }
	
	                        start = start.nextSibling;
	                    }
	                    rng.moveToBookmark(bk).select();
	                }else{
	                    var tmpNode = me.document.createTextNode('    ');
	                    rng.insertNode(tmpNode).setStartAfter(tmpNode).collapse(true).select(true);
	                }
	            }
	
	
	            me.fireEvent('saveScene');
	            return true;
	        }
	
	
	    });
	
	
	    me.addListener('beforeinserthtml',function(evtName,html){
	        var me = this,
	            rng = me.selection.getRange(),
	            pre = domUtils.findParentByTagName(rng.startContainer,'pre',true);
	        if(pre){
	            if(!rng.collapsed){
	                rng.deleteContents()
	            }
	            var htmlstr = '';
	            if(browser.ie && browser.version > 8){
	
	                utils.each(UE.filterNode(UE.htmlparser(html),me.options.filterTxtRules).children,function(node){
	                    if(node.type =='element'){
	                        if(node.tagName == 'br'){
	                            htmlstr += '\n'
	                        }else if(!dtd.$empty[node.tagName]){
	                            utils.each(node.children,function(cn){
	                                if(cn.type =='element'){
	                                    if(cn.tagName == 'br'){
	                                        htmlstr += '\n'
	                                    }else if(!dtd.$empty[node.tagName]){
	                                        htmlstr += cn.innerText();
	                                    }
	                                }else{
	                                    htmlstr += cn.data
	                                }
	                            })
	                            if(!/\n$/.test(htmlstr)){
	                                htmlstr += '\n';
	                            }
	                        }
	                    }else{
	                        htmlstr += node.data + '\n'
	                    }
	                    if(!node.nextSibling() && /\n$/.test(htmlstr)){
	                        htmlstr = htmlstr.replace(/\n$/,'');
	                    }
	                });
	                var tmpNode = me.document.createTextNode(utils.html(htmlstr.replace(/&nbsp;/g,' ')));
	                rng.insertNode(tmpNode).selectNode(tmpNode).select();
	            }else{
	                var frag = me.document.createDocumentFragment();
	
	                utils.each(UE.filterNode(UE.htmlparser(html),me.options.filterTxtRules).children,function(node){
	                    if(node.type =='element'){
	                        if(node.tagName == 'br'){
	                            frag.appendChild(me.document.createElement('br'))
	                        }else if(!dtd.$empty[node.tagName]){
	                            utils.each(node.children,function(cn){
	                                if(cn.type =='element'){
	                                    if(cn.tagName == 'br'){
	
	                                        frag.appendChild(me.document.createElement('br'))
	                                    }else if(!dtd.$empty[node.tagName]){
	                                        frag.appendChild(me.document.createTextNode(utils.html(cn.innerText().replace(/&nbsp;/g,' '))));
	
	                                    }
	                                }else{
	                                    frag.appendChild(me.document.createTextNode(utils.html( cn.data.replace(/&nbsp;/g,' '))));
	
	                                }
	                            })
	                            if(frag.lastChild.nodeName != 'BR'){
	                                frag.appendChild(me.document.createElement('br'))
	                            }
	                        }
	                    }else{
	                        frag.appendChild(me.document.createTextNode(utils.html( node.data.replace(/&nbsp;/g,' '))));
	                    }
	                    if(!node.nextSibling() && frag.lastChild.nodeName == 'BR'){
	                       frag.removeChild(frag.lastChild)
	                    }
	
	
	                });
	                rng.insertNode(frag).select();
	
	            }
	
	            return true;
	        }
	    });
	    //方向键的处理
	    me.addListener('keydown',function(cmd,evt){
	        var me = this,keyCode = evt.keyCode || evt.which;
	        if(keyCode == 40){
	            var rng = me.selection.getRange(),pre,start = rng.startContainer;
	            if(rng.collapsed && (pre = domUtils.findParentByTagName(rng.startContainer,'pre',true)) && !pre.nextSibling){
	                var last = pre.lastChild
	                while(last && last.nodeName == 'BR'){
	                    last = last.previousSibling;
	                }
	                if(last === start || rng.startContainer === pre && rng.startOffset == pre.childNodes.length){
	                    me.execCommand('insertparagraph');
	                    domUtils.preventDefault(evt)
	                }
	
	            }
	        }
	    });
	    //trace:3395
	    me.addListener('delkeydown',function(type,evt){
	        var rng = this.selection.getRange();
	        rng.txtToElmBoundary(true);
	        var start = rng.startContainer;
	        if(domUtils.isTagNode(start,'pre') && rng.collapsed && domUtils.isStartInblock(rng)){
	            var p = me.document.createElement('p');
	            domUtils.fillNode(me.document,p);
	            start.parentNode.insertBefore(p,start);
	            domUtils.remove(start);
	            rng.setStart(p,0).setCursor(false,true);
	            domUtils.preventDefault(evt);
	            return true;
	        }
	    })
	};
	
	
	// plugins/cleardoc.js
	/**
	 * 清空文档插件
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 清空文档
	 * @command cleardoc
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * //editor 是编辑器实例
	 * editor.execCommand('cleardoc');
	 * ```
	 */
	
	UE.commands['cleardoc'] = {
	    execCommand : function( cmdName) {
	        var me = this,
	            enterTag = me.options.enterTag,
	            range = me.selection.getRange();
	        if(enterTag == "br"){
	            me.body.innerHTML = "<br/>";
	            range.setStart(me.body,0).setCursor();
	        }else{
	            me.body.innerHTML = "<p>"+(ie ? "" : "<br/>")+"</p>";
	            range.setStart(me.body.firstChild,0).setCursor(false,true);
	        }
	        setTimeout(function(){
	            me.fireEvent("clearDoc");
	        },0);
	
	    }
	};
	
	
	
	// plugins/anchor.js
	/**
	 * 锚点插件，为UEditor提供插入锚点支持
	 * @file
	 * @since 1.2.6.1
	 */
	UE.plugin.register('anchor', function (){
	
	    return {
	        bindEvents:{
	            'ready':function(){
	                utils.cssRule('anchor',
	                    '.anchorclass{background: url(\''
	                        + this.options.themePath
	                        + this.options.theme +'/images/anchor.gif\') no-repeat scroll left center transparent;cursor: auto;display: inline-block;height: 16px;width: 15px;}',
	                    this.document);
	            }
	        },
	       outputRule: function(root){
	           utils.each(root.getNodesByTagName('img'),function(a){
	               var val;
	               if(val = a.getAttr('anchorname')){
	                   a.tagName = 'a';
	                   a.setAttr({
	                       anchorname : '',
	                       name : val,
	                       'class' : ''
	                   })
	               }
	           })
	       },
	       inputRule:function(root){
	           utils.each(root.getNodesByTagName('a'),function(a){
	               var val;
	               if((val = a.getAttr('name')) && !a.getAttr('href')){
	                   a.tagName = 'img';
	                   a.setAttr({
	                       anchorname :a.getAttr('name'),
	                       'class' : 'anchorclass'
	                   });
	                   a.setAttr('name')
	
	               }
	           })
	
	       },
	       commands:{
	           /**
	            * 插入锚点
	            * @command anchor
	            * @method execCommand
	            * @param { String } cmd 命令字符串
	            * @param { String } name 锚点名称字符串
	            * @example
	            * ```javascript
	            * //editor 是编辑器实例
	            * editor.execCommand('anchor', 'anchor1');
	            * ```
	            */
	           'anchor':{
	               execCommand:function (cmd, name) {
	                   var range = this.selection.getRange(),img = range.getClosedNode();
	                   if (img && img.getAttribute('anchorname')) {
	                       if (name) {
	                           img.setAttribute('anchorname', name);
	                       } else {
	                           range.setStartBefore(img).setCursor();
	                           domUtils.remove(img);
	                       }
	                   } else {
	                       if (name) {
	                           //只在选区的开始插入
	                           var anchor = this.document.createElement('img');
	                           range.collapse(true);
	                           domUtils.setAttributes(anchor,{
	                               'anchorname':name,
	                               'class':'anchorclass'
	                           });
	                           range.insertNode(anchor).setStartAfter(anchor).setCursor(false,true);
	                       }
	                   }
	               }
	           }
	       }
	    }
	});
	
	
	// plugins/wordcount.js
	///import core
	///commands 字数统计
	///commandsName  WordCount,wordCount
	///commandsTitle  字数统计
	/*
	 * Created by JetBrains WebStorm.
	 * User: taoqili
	 * Date: 11-9-7
	 * Time: 下午8:18
	 * To change this template use File | Settings | File Templates.
	 */
	
	UE.plugins['wordcount'] = function(){
	    var me = this;
	    me.setOpt('wordCount',true);
	    me.addListener('contentchange',function(){
	        me.fireEvent('wordcount');
	    });
	    var timer;
	    me.addListener('ready',function(){
	        var me = this;
	        domUtils.on(me.body,"keyup",function(evt){
	            var code = evt.keyCode||evt.which,
	                //忽略的按键,ctr,alt,shift,方向键
	                ignores = {"16":1,"18":1,"20":1,"37":1,"38":1,"39":1,"40":1};
	            if(code in ignores) return;
	            clearTimeout(timer);
	            timer = setTimeout(function(){
	                me.fireEvent('wordcount');
	            },200)
	        })
	    });
	};
	
	
	// plugins/pagebreak.js
	/**
	 * 分页功能插件
	 * @file
	 * @since 1.2.6.1
	 */
	UE.plugins['pagebreak'] = function () {
	    var me = this,
	        notBreakTags = ['td'];
	    me.setOpt('pageBreakTag','_ueditor_page_break_tag_');
	
	    function fillNode(node){
	        if(domUtils.isEmptyBlock(node)){
	            var firstChild = node.firstChild,tmpNode;
	
	            while(firstChild && firstChild.nodeType == 1 && domUtils.isEmptyBlock(firstChild)){
	                tmpNode = firstChild;
	                firstChild = firstChild.firstChild;
	            }
	            !tmpNode && (tmpNode = node);
	            domUtils.fillNode(me.document,tmpNode);
	        }
	    }
	    //分页符样式添加
	
	    me.ready(function(){
	        utils.cssRule('pagebreak','.pagebreak{display:block;clear:both !important;cursor:default !important;width: 100% !important;margin:0;}',me.document);
	    });
	    function isHr(node){
	        return node && node.nodeType == 1 && node.tagName == 'HR' && node.className == 'pagebreak';
	    }
	    me.addInputRule(function(root){
	        root.traversal(function(node){
	            if(node.type == 'text' && node.data == me.options.pageBreakTag){
	                var hr = UE.uNode.createElement('<hr class="pagebreak" noshade="noshade" size="5" style="-webkit-user-select: none;">');
	                node.parentNode.insertBefore(hr,node);
	                node.parentNode.removeChild(node)
	            }
	        })
	    });
	    me.addOutputRule(function(node){
	        utils.each(node.getNodesByTagName('hr'),function(n){
	            if(n.getAttr('class') == 'pagebreak'){
	                var txt = UE.uNode.createText(me.options.pageBreakTag);
	                n.parentNode.insertBefore(txt,n);
	                n.parentNode.removeChild(n);
	            }
	        })
	
	    });
	
	    /**
	     * 插入分页符
	     * @command pagebreak
	     * @method execCommand
	     * @param { String } cmd 命令字符串
	     * @remind 在表格中插入分页符会把表格切分成两部分
	     * @remind 获取编辑器内的数据时， 编辑器会把分页符转换成“_ueditor_page_break_tag_”字符串，
	     *          以便于提交数据到服务器端后处理分页。
	     * @example
	     * ```javascript
	     * editor.execCommand( 'pagebreak'); //插入一个hr标签，带有样式类名pagebreak
	     * ```
	     */
	
	    me.commands['pagebreak'] = {
	        execCommand:function () {
	            var range = me.selection.getRange(),hr = me.document.createElement('hr');
	            domUtils.setAttributes(hr,{
	                'class' : 'pagebreak',
	                noshade:"noshade",
	                size:"5"
	            });
	            domUtils.unSelectable(hr);
	            //table单独处理
	            var node = domUtils.findParentByTagName(range.startContainer, notBreakTags, true),
	
	                parents = [], pN;
	            if (node) {
	                switch (node.tagName) {
	                    case 'TD':
	                        pN = node.parentNode;
	                        if (!pN.previousSibling) {
	                            var table = domUtils.findParentByTagName(pN, 'table');
	//                            var tableWrapDiv = table.parentNode;
	//                            if(tableWrapDiv && tableWrapDiv.nodeType == 1
	//                                && tableWrapDiv.tagName == 'DIV'
	//                                && tableWrapDiv.getAttribute('dropdrag')
	//                                ){
	//                                domUtils.remove(tableWrapDiv,true);
	//                            }
	                            table.parentNode.insertBefore(hr, table);
	                            parents = domUtils.findParents(hr, true);
	
	                        } else {
	                            pN.parentNode.insertBefore(hr, pN);
	                            parents = domUtils.findParents(hr);
	
	                        }
	                        pN = parents[1];
	                        if (hr !== pN) {
	                            domUtils.breakParent(hr, pN);
	
	                        }
	                        //table要重写绑定一下拖拽
	                        me.fireEvent('afteradjusttable',me.document);
	                }
	
	            } else {
	
	                if (!range.collapsed) {
	                    range.deleteContents();
	                    var start = range.startContainer;
	                    while ( !domUtils.isBody(start) && domUtils.isBlockElm(start) && domUtils.isEmptyNode(start)) {
	                        range.setStartBefore(start).collapse(true);
	                        domUtils.remove(start);
	                        start = range.startContainer;
	                    }
	
	                }
	                range.insertNode(hr);
	
	                var pN = hr.parentNode, nextNode;
	                while (!domUtils.isBody(pN)) {
	                    domUtils.breakParent(hr, pN);
	                    nextNode = hr.nextSibling;
	                    if (nextNode && domUtils.isEmptyBlock(nextNode)) {
	                        domUtils.remove(nextNode);
	                    }
	                    pN = hr.parentNode;
	                }
	                nextNode = hr.nextSibling;
	                var pre = hr.previousSibling;
	                if(isHr(pre)){
	                    domUtils.remove(pre);
	                }else{
	                    pre && fillNode(pre);
	                }
	
	                if(!nextNode){
	                    var p = me.document.createElement('p');
	
	                    hr.parentNode.appendChild(p);
	                    domUtils.fillNode(me.document,p);
	                    range.setStart(p,0).collapse(true);
	                }else{
	                    if(isHr(nextNode)){
	                        domUtils.remove(nextNode);
	                    }else{
	                        fillNode(nextNode);
	                    }
	                    range.setEndAfter(hr).collapse(false);
	                }
	
	                range.select(true);
	
	            }
	
	        }
	    };
	};
	
	// plugins/wordimage.js
	///import core
	///commands 本地图片引导上传
	///commandsName  WordImage
	///commandsTitle  本地图片引导上传
	///commandsDialog  dialogs\wordimage
	
	UE.plugin.register('wordimage',function(){
	    var me = this,
	        images = [];
	    return {
	        commands : {
	            'wordimage':{
	                execCommand:function () {
	                    var images = domUtils.getElementsByTagName(me.body, "img");
	                    var urlList = [];
	                    for (var i = 0, ci; ci = images[i++];) {
	                        var url = ci.getAttribute("word_img");
	                        url && urlList.push(url);
	                    }
	                    return urlList;
	                },
	                queryCommandState:function () {
	                    images = domUtils.getElementsByTagName(me.body, "img");
	                    for (var i = 0, ci; ci = images[i++];) {
	                        if (ci.getAttribute("word_img")) {
	                            return 1;
	                        }
	                    }
	                    return -1;
	                },
	                notNeedUndo:true
	            }
	        },
	        inputRule : function (root) {
	            utils.each(root.getNodesByTagName('img'), function (img) {
	                var attrs = img.attrs,
	                    flag = parseInt(attrs.width) < 128 || parseInt(attrs.height) < 43,
	                    opt = me.options,
	                    src = opt.UEDITOR_HOME_URL + 'themes/default/images/spacer.gif';
	                if (attrs['src'] && /^(?:(file:\/+))/.test(attrs['src'])) {
	                    img.setAttr({
	                        width:attrs.width,
	                        height:attrs.height,
	                        alt:attrs.alt,
	                        word_img: attrs.src,
	                        src:src,
	                        'style':'background:url(' + ( flag ? opt.themePath + opt.theme + '/images/word.gif' : opt.langPath + opt.lang + '/images/localimage.png') + ') no-repeat center center;border:1px solid #ddd'
	                    })
	                }
	            })
	        }
	    }
	});
	
	// plugins/dragdrop.js
	UE.plugins['dragdrop'] = function (){
	
	    var me = this;
	    me.ready(function(){
	        domUtils.on(this.body,'dragend',function(){
	            var rng = me.selection.getRange();
	            var node = rng.getClosedNode()||me.selection.getStart();
	
	            if(node && node.tagName == 'IMG'){
	
	                var pre = node.previousSibling,next;
	                while(next = node.nextSibling){
	                    if(next.nodeType == 1 && next.tagName == 'SPAN' && !next.firstChild){
	                        domUtils.remove(next)
	                    }else{
	                        break;
	                    }
	                }
	
	
	                if((pre && pre.nodeType == 1 && !domUtils.isEmptyBlock(pre) || !pre) && (!next || next && !domUtils.isEmptyBlock(next))){
	                    if(pre && pre.tagName == 'P' && !domUtils.isEmptyBlock(pre)){
	                        pre.appendChild(node);
	                        domUtils.moveChild(next,pre);
	                        domUtils.remove(next);
	                    }else  if(next && next.tagName == 'P' && !domUtils.isEmptyBlock(next)){
	                        next.insertBefore(node,next.firstChild);
	                    }
	
	                    if(pre && pre.tagName == 'P' && domUtils.isEmptyBlock(pre)){
	                        domUtils.remove(pre)
	                    }
	                    if(next && next.tagName == 'P' && domUtils.isEmptyBlock(next)){
	                        domUtils.remove(next)
	                    }
	                    rng.selectNode(node).select();
	                    me.fireEvent('saveScene');
	
	                }
	
	            }
	
	        })
	    });
	    me.addListener('keyup', function(type, evt) {
	        var keyCode = evt.keyCode || evt.which;
	        if (keyCode == 13) {
	            var rng = me.selection.getRange(),node;
	            if(node = domUtils.findParentByTagName(rng.startContainer,'p',true)){
	                if(domUtils.getComputedStyle(node,'text-align') == 'center'){
	                    domUtils.removeStyle(node,'text-align')
	                }
	            }
	        }
	    })
	};
	
	
	// plugins/undo.js
	/**
	 * undo redo
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 撤销上一次执行的命令
	 * @command undo
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'undo' );
	 * ```
	 */
	
	/**
	 * 重做上一次执行的命令
	 * @command redo
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'redo' );
	 * ```
	 */
	
	UE.plugins['undo'] = function () {
	    var saveSceneTimer;
	    var me = this,
	        maxUndoCount = me.options.maxUndoCount || 20,
	        maxInputCount = me.options.maxInputCount || 20,
	        fillchar = new RegExp(domUtils.fillChar + '|<\/hr>', 'gi');// ie会产生多余的</hr>
	    var noNeedFillCharTags = {
	        ol:1,ul:1,table:1,tbody:1,tr:1,body:1
	    };
	    var orgState = me.options.autoClearEmptyNode;
	    function compareAddr(indexA, indexB) {
	        if (indexA.length != indexB.length)
	            return 0;
	        for (var i = 0, l = indexA.length; i < l; i++) {
	            if (indexA[i] != indexB[i])
	                return 0
	        }
	        return 1;
	    }
	
	    function compareRangeAddress(rngAddrA, rngAddrB) {
	        if (rngAddrA.collapsed != rngAddrB.collapsed) {
	            return 0;
	        }
	        if (!compareAddr(rngAddrA.startAddress, rngAddrB.startAddress) || !compareAddr(rngAddrA.endAddress, rngAddrB.endAddress)) {
	            return 0;
	        }
	        return 1;
	    }
	
	    function UndoManager() {
	        this.list = [];
	        this.index = 0;
	        this.hasUndo = false;
	        this.hasRedo = false;
	        this.undo = function () {
	            if (this.hasUndo) {
	                if (!this.list[this.index - 1] && this.list.length == 1) {
	                    this.reset();
	                    return;
	                }
	                while (this.list[this.index].content == this.list[this.index - 1].content) {
	                    this.index--;
	                    if (this.index == 0) {
	                        return this.restore(0);
	                    }
	                }
	                this.restore(--this.index);
	            }
	        };
	        this.redo = function () {
	            if (this.hasRedo) {
	                while (this.list[this.index].content == this.list[this.index + 1].content) {
	                    this.index++;
	                    if (this.index == this.list.length - 1) {
	                        return this.restore(this.index);
	                    }
	                }
	                this.restore(++this.index);
	            }
	        };
	
	        this.restore = function () {
	            var me = this.editor;
	            var scene = this.list[this.index];
	            var root = UE.htmlparser(scene.content.replace(fillchar, ''));
	            me.options.autoClearEmptyNode = false;
	            me.filterInputRule(root);
	            me.options.autoClearEmptyNode = orgState;
	            //trace:873
	            //去掉展位符
	            me.document.body.innerHTML = root.toHtml();
	            me.fireEvent('afterscencerestore');
	            //处理undo后空格不展位的问题
	            if (browser.ie) {
	                utils.each(domUtils.getElementsByTagName(me.document,'td th caption p'),function(node){
	                    if(domUtils.isEmptyNode(node)){
	                        domUtils.fillNode(me.document, node);
	                    }
	                })
	            }
	
	            try{
	                var rng = new dom.Range(me.document).moveToAddress(scene.address);
	                rng.select(noNeedFillCharTags[rng.startContainer.nodeName.toLowerCase()]);
	            }catch(e){}
	
	            this.update();
	            this.clearKey();
	            //不能把自己reset了
	            me.fireEvent('reset', true);
	        };
	
	        this.getScene = function () {
	            var me = this.editor;
	            var rng = me.selection.getRange(),
	                rngAddress = rng.createAddress(false,true);
	            me.fireEvent('beforegetscene');
	            var root = UE.htmlparser(me.body.innerHTML);
	            me.options.autoClearEmptyNode = false;
	            me.filterOutputRule(root);
	            me.options.autoClearEmptyNode = orgState;
	            var cont = root.toHtml();
	            //trace:3461
	            //这个会引起回退时导致空格丢失的情况
	//            browser.ie && (cont = cont.replace(/>&nbsp;</g, '><').replace(/\s*</g, '<').replace(/>\s*/g, '>'));
	            me.fireEvent('aftergetscene');
	
	            return {
	                address:rngAddress,
	                content:cont
	            }
	        };
	        this.save = function (notCompareRange,notSetCursor) {
	            clearTimeout(saveSceneTimer);
	            var currentScene = this.getScene(notSetCursor),
	                lastScene = this.list[this.index];
	
	            if(lastScene && lastScene.content != currentScene.content){
	                me.trigger('contentchange')
	            }
	            //内容相同位置相同不存
	            if (lastScene && lastScene.content == currentScene.content &&
	                ( notCompareRange ? 1 : compareRangeAddress(lastScene.address, currentScene.address) )
	                ) {
	                return;
	            }
	            this.list = this.list.slice(0, this.index + 1);
	            this.list.push(currentScene);
	            //如果大于最大数量了，就把最前的剔除
	            if (this.list.length > maxUndoCount) {
	                this.list.shift();
	            }
	            this.index = this.list.length - 1;
	            this.clearKey();
	            //跟新undo/redo状态
	            this.update();
	
	        };
	        this.update = function () {
	            this.hasRedo = !!this.list[this.index + 1];
	            this.hasUndo = !!this.list[this.index - 1];
	        };
	        this.reset = function () {
	            this.list = [];
	            this.index = 0;
	            this.hasUndo = false;
	            this.hasRedo = false;
	            this.clearKey();
	        };
	        this.clearKey = function () {
	            keycont = 0;
	            lastKeyCode = null;
	        };
	    }
	
	    me.undoManger = new UndoManager();
	    me.undoManger.editor = me;
	    function saveScene() {
	        this.undoManger.save();
	    }
	
	    me.addListener('saveScene', function () {
	        var args = Array.prototype.splice.call(arguments,1);
	        this.undoManger.save.apply(this.undoManger,args);
	    });
	
	//    me.addListener('beforeexeccommand', saveScene);
	//    me.addListener('afterexeccommand', saveScene);
	
	    me.addListener('reset', function (type, exclude) {
	        if (!exclude) {
	            this.undoManger.reset();
	        }
	    });
	    me.commands['redo'] = me.commands['undo'] = {
	        execCommand:function (cmdName) {
	            this.undoManger[cmdName]();
	        },
	        queryCommandState:function (cmdName) {
	            return this.undoManger['has' + (cmdName.toLowerCase() == 'undo' ? 'Undo' : 'Redo')] ? 0 : -1;
	        },
	        notNeedUndo:1
	    };
	
	    var keys = {
	            //  /*Backspace*/ 8:1, /*Delete*/ 46:1,
	            /*Shift*/ 16:1, /*Ctrl*/ 17:1, /*Alt*/ 18:1,
	            37:1, 38:1, 39:1, 40:1
	
	        },
	        keycont = 0,
	        lastKeyCode;
	    //输入法状态下不计算字符数
	    var inputType = false;
	    me.addListener('ready', function () {
	        domUtils.on(this.body, 'compositionstart', function () {
	            inputType = true;
	        });
	        domUtils.on(this.body, 'compositionend', function () {
	            inputType = false;
	        })
	    });
	    //快捷键
	    me.addshortcutkey({
	        "Undo":"ctrl+90", //undo
	        "Redo":"ctrl+89" //redo
	
	    });
	    var isCollapsed = true;
	    me.addListener('keydown', function (type, evt) {
	
	        var me = this;
	        var keyCode = evt.keyCode || evt.which;
	        if (!keys[keyCode] && !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey) {
	            if (inputType)
	                return;
	
	            if(!me.selection.getRange().collapsed){
	                me.undoManger.save(false,true);
	                isCollapsed = false;
	                return;
	            }
	            if (me.undoManger.list.length == 0) {
	                me.undoManger.save(true);
	            }
	            clearTimeout(saveSceneTimer);
	            function save(cont){
	                cont.undoManger.save(false,true);
	                cont.fireEvent('selectionchange');
	            }
	            saveSceneTimer = setTimeout(function(){
	                if(inputType){
	                    var interalTimer = setInterval(function(){
	                        if(!inputType){
	                            save(me);
	                            clearInterval(interalTimer)
	                        }
	                    },300)
	                    return;
	                }
	                save(me);
	            },200);
	
	            lastKeyCode = keyCode;
	            keycont++;
	            if (keycont >= maxInputCount ) {
	                save(me)
	            }
	        }
	    });
	    me.addListener('keyup', function (type, evt) {
	        var keyCode = evt.keyCode || evt.which;
	        if (!keys[keyCode] && !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey) {
	            if (inputType)
	                return;
	            if(!isCollapsed){
	                this.undoManger.save(false,true);
	                isCollapsed = true;
	            }
	        }
	    });
	    //扩展实例，添加关闭和开启命令undo
	    me.stopCmdUndo = function(){
	        me.__hasEnterExecCommand = true;
	    };
	    me.startCmdUndo = function(){
	        me.__hasEnterExecCommand = false;
	    }
	};
	
	
	// plugins/copy.js
	UE.plugin.register('copy', function () {
	
	    var me = this;
	
	    function initZeroClipboard() {
	
	        ZeroClipboard.config({
	            debug: false,
	            swfPath: me.options.UEDITOR_HOME_URL + 'third-party/zeroclipboard/ZeroClipboard.swf'
	        });
	
	        var client = me.zeroclipboard = new ZeroClipboard();
	
	        // 复制内容
	        client.on('copy', function (e) {
	            var client = e.client,
	                rng = me.selection.getRange(),
	                div = document.createElement('div');
	
	            div.appendChild(rng.cloneContents());
	            client.setText(div.innerText || div.textContent);
	            client.setHtml(div.innerHTML);
	            rng.select();
	        });
	        // hover事件传递到target
	        client.on('mouseover mouseout', function (e) {
	            var target = e.target;
	            if (e.type == 'mouseover') {
	                domUtils.addClass(target, 'edui-state-hover');
	            } else if (e.type == 'mouseout') {
	                domUtils.removeClasses(target, 'edui-state-hover');
	            }
	        });
	        // flash加载不成功
	        client.on('wrongflash noflash', function () {
	            ZeroClipboard.destroy();
	        });
	    }
	
	    return {
	        bindEvents: {
	            'ready': function () {
	                if (!browser.ie) {
	                    if (window.ZeroClipboard) {
	                        initZeroClipboard();
	                    } else {
	                        utils.loadFile(document, {
	                            src: me.options.UEDITOR_HOME_URL + "third-party/zeroclipboard/ZeroClipboard.js",
	                            tag: "script",
	                            type: "text/javascript",
	                            defer: "defer"
	                        }, function () {
	                            initZeroClipboard();
	                        });
	                    }
	                }
	            }
	        },
	        commands: {
	            'copy': {
	                execCommand: function (cmd) {
	                    if (!me.document.execCommand('copy')) {
	                        alert(me.getLang('copymsg'));
	                    }
	                }
	            }
	        }
	    }
	});
	
	
	// plugins/paste.js
	///import core
	///import plugins/inserthtml.js
	///import plugins/undo.js
	///import plugins/serialize.js
	///commands 粘贴
	///commandsName  PastePlain
	///commandsTitle  纯文本粘贴模式
	/**
	 * @description 粘贴
	 * @author zhanyi
	 */
	UE.plugins['paste'] = function () {
	    function getClipboardData(callback) {
	        var doc = this.document;
	        if (doc.getElementById('baidu_pastebin')) {
	            return;
	        }
	        var range = this.selection.getRange(),
	            bk = range.createBookmark(),
	        //创建剪贴的容器div
	            pastebin = doc.createElement('div');
	        pastebin.id = 'baidu_pastebin';
	        // Safari 要求div必须有内容，才能粘贴内容进来
	        browser.webkit && pastebin.appendChild(doc.createTextNode(domUtils.fillChar + domUtils.fillChar));
	        doc.body.appendChild(pastebin);
	        //trace:717 隐藏的span不能得到top
	        //bk.start.innerHTML = '&nbsp;';
	        bk.start.style.display = '';
	        pastebin.style.cssText = "position:absolute;width:1px;height:1px;overflow:hidden;left:-1000px;white-space:nowrap;top:" +
	            //要在现在光标平行的位置加入，否则会出现跳动的问题
	            domUtils.getXY(bk.start).y + 'px';
	
	        range.selectNodeContents(pastebin).select(true);
	
	        setTimeout(function () {
	            if (browser.webkit) {
	                for (var i = 0, pastebins = doc.querySelectorAll('#baidu_pastebin'), pi; pi = pastebins[i++];) {
	                    if (domUtils.isEmptyNode(pi)) {
	                        domUtils.remove(pi);
	                    } else {
	                        pastebin = pi;
	                        break;
	                    }
	                }
	            }
	            try {
	                pastebin.parentNode.removeChild(pastebin);
	            } catch (e) {
	            }
	            range.moveToBookmark(bk).select(true);
	            callback(pastebin);
	        }, 0);
	    }
	
	    var me = this;
	
	    me.setOpt({
	        retainOnlyLabelPasted : false
	    });
	
	    var txtContent, htmlContent, address;
	
	    function getPureHtml(html){
	        return html.replace(/<(\/?)([\w\-]+)([^>]*)>/gi, function (a, b, tagName, attrs) {
	            tagName = tagName.toLowerCase();
	            if ({img: 1}[tagName]) {
	                return a;
	            }
	            attrs = attrs.replace(/([\w\-]*?)\s*=\s*(("([^"]*)")|('([^']*)')|([^\s>]+))/gi, function (str, atr, val) {
	                if ({
	                    'src': 1,
	                    'href': 1,
	                    'name': 1
	                }[atr.toLowerCase()]) {
	                    return atr + '=' + val + ' '
	                }
	                return ''
	            });
	            if ({
	                'span': 1,
	                'div': 1
	            }[tagName]) {
	                return ''
	            } else {
	
	                return '<' + b + tagName + ' ' + utils.trim(attrs) + '>'
	            }
	
	        });
	    }
	    function filter(div) {
	        var html;
	        if (div.firstChild) {
	            //去掉cut中添加的边界值
	            var nodes = domUtils.getElementsByTagName(div, 'span');
	            for (var i = 0, ni; ni = nodes[i++];) {
	                if (ni.id == '_baidu_cut_start' || ni.id == '_baidu_cut_end') {
	                    domUtils.remove(ni);
	                }
	            }
	
	            if (browser.webkit) {
	
	                var brs = div.querySelectorAll('div br');
	                for (var i = 0, bi; bi = brs[i++];) {
	                    var pN = bi.parentNode;
	                    if (pN.tagName == 'DIV' && pN.childNodes.length == 1) {
	                        pN.innerHTML = '<p><br/></p>';
	                        domUtils.remove(pN);
	                    }
	                }
	                var divs = div.querySelectorAll('#baidu_pastebin');
	                for (var i = 0, di; di = divs[i++];) {
	                    var tmpP = me.document.createElement('p');
	                    di.parentNode.insertBefore(tmpP, di);
	                    while (di.firstChild) {
	                        tmpP.appendChild(di.firstChild);
	                    }
	                    domUtils.remove(di);
	                }
	
	                var metas = div.querySelectorAll('meta');
	                for (var i = 0, ci; ci = metas[i++];) {
	                    domUtils.remove(ci);
	                }
	
	                var brs = div.querySelectorAll('br');
	                for (i = 0; ci = brs[i++];) {
	                    if (/^apple-/i.test(ci.className)) {
	                        domUtils.remove(ci);
	                    }
	                }
	            }
	            if (browser.gecko) {
	                var dirtyNodes = div.querySelectorAll('[_moz_dirty]');
	                for (i = 0; ci = dirtyNodes[i++];) {
	                    ci.removeAttribute('_moz_dirty');
	                }
	            }
	            if (!browser.ie) {
	                var spans = div.querySelectorAll('span.Apple-style-span');
	                for (var i = 0, ci; ci = spans[i++];) {
	                    domUtils.remove(ci, true);
	                }
	            }
	
	            //ie下使用innerHTML会产生多余的\r\n字符，也会产生&nbsp;这里过滤掉
	            html = div.innerHTML;//.replace(/>(?:(\s|&nbsp;)*?)</g,'><');
	
	            //过滤word粘贴过来的冗余属性
	            html = UE.filterWord(html);
	            //取消了忽略空白的第二个参数，粘贴过来的有些是有空白的，会被套上相关的标签
	            var root = UE.htmlparser(html);
	            //如果给了过滤规则就先进行过滤
	            if (me.options.filterRules) {
	                UE.filterNode(root, me.options.filterRules);
	            }
	            //执行默认的处理
	            me.filterInputRule(root);
	            //针对chrome的处理
	            if (browser.webkit) {
	                var br = root.lastChild();
	                if (br && br.type == 'element' && br.tagName == 'br') {
	                    root.removeChild(br)
	                }
	                utils.each(me.body.querySelectorAll('div'), function (node) {
	                    if (domUtils.isEmptyBlock(node)) {
	                        domUtils.remove(node,true)
	                    }
	                })
	            }
	            html = {'html': root.toHtml()};
	            me.fireEvent('beforepaste', html, root);
	            //抢了默认的粘贴，那后边的内容就不执行了，比如表格粘贴
	            if(!html.html){
	                return;
	            }
	            root = UE.htmlparser(html.html,true);
	            //如果开启了纯文本模式
	            if (me.queryCommandState('pasteplain') === 1) {
	                me.execCommand('insertHtml', UE.filterNode(root, me.options.filterTxtRules).toHtml(), true);
	            } else {
	                //文本模式
	                UE.filterNode(root, me.options.filterTxtRules);
	                txtContent = root.toHtml();
	                //完全模式
	                htmlContent = html.html;
	
	                address = me.selection.getRange().createAddress(true);
	                me.execCommand('insertHtml', me.getOpt('retainOnlyLabelPasted') === true ?  getPureHtml(htmlContent) : htmlContent, true);
	            }
	            me.fireEvent("afterpaste", html);
	        }
	    }
	
	    me.addListener('pasteTransfer', function (cmd, plainType) {
	
	        if (address && txtContent && htmlContent && txtContent != htmlContent) {
	            var range = me.selection.getRange();
	            range.moveToAddress(address, true);
	
	            if (!range.collapsed) {
	
	                while (!domUtils.isBody(range.startContainer)
	                    ) {
	                    var start = range.startContainer;
	                    if(start.nodeType == 1){
	                        start = start.childNodes[range.startOffset];
	                        if(!start){
	                            range.setStartBefore(range.startContainer);
	                            continue;
	                        }
	                        var pre = start.previousSibling;
	
	                        if(pre && pre.nodeType == 3 && new RegExp('^[\n\r\t '+domUtils.fillChar+']*$').test(pre.nodeValue)){
	                            range.setStartBefore(pre)
	                        }
	                    }
	                    if(range.startOffset == 0){
	                        range.setStartBefore(range.startContainer);
	                    }else{
	                        break;
	                    }
	
	                }
	                while (!domUtils.isBody(range.endContainer)
	                    ) {
	                    var end = range.endContainer;
	                    if(end.nodeType == 1){
	                        end = end.childNodes[range.endOffset];
	                        if(!end){
	                            range.setEndAfter(range.endContainer);
	                            continue;
	                        }
	                        var next = end.nextSibling;
	                        if(next && next.nodeType == 3 && new RegExp('^[\n\r\t'+domUtils.fillChar+']*$').test(next.nodeValue)){
	                            range.setEndAfter(next)
	                        }
	                    }
	                    if(range.endOffset == range.endContainer[range.endContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length){
	                        range.setEndAfter(range.endContainer);
	                    }else{
	                        break;
	                    }
	
	                }
	
	            }
	
	            range.deleteContents();
	            range.select(true);
	            me.__hasEnterExecCommand = true;
	            var html = htmlContent;
	            if (plainType === 2 ) {
	                html = getPureHtml(html);
	            } else if (plainType) {
	                html = txtContent;
	            }
	            me.execCommand('inserthtml', html, true);
	            me.__hasEnterExecCommand = false;
	            var rng = me.selection.getRange();
	            while (!domUtils.isBody(rng.startContainer) && !rng.startOffset &&
	                rng.startContainer[rng.startContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length
	                ) {
	                rng.setStartBefore(rng.startContainer);
	            }
	            var tmpAddress = rng.createAddress(true);
	            address.endAddress = tmpAddress.startAddress;
	        }
	    });
	
	    me.addListener('ready', function () {
	        domUtils.on(me.body, 'cut', function () {
	            var range = me.selection.getRange();
	            if (!range.collapsed && me.undoManger) {
	                me.undoManger.save();
	            }
	        });
	
	        //ie下beforepaste在点击右键时也会触发，所以用监控键盘才处理
	        domUtils.on(me.body, browser.ie || browser.opera ? 'keydown' : 'paste', function (e) {
	            if ((browser.ie || browser.opera) && ((!e.ctrlKey && !e.metaKey) || e.keyCode != '86')) {
	                return;
	            }
	            getClipboardData.call(me, function (div) {
	                filter(div);
	            });
	        });
	
	    });
	
	    me.commands['paste'] = {
	        execCommand: function (cmd) {
	            if (browser.ie) {
	                getClipboardData.call(me, function (div) {
	                    filter(div);
	                });
	                me.document.execCommand('paste');
	            } else {
	                alert(me.getLang('pastemsg'));
	            }
	        }
	    }
	};
	
	
	
	// plugins/puretxtpaste.js
	/**
	 * 纯文本粘贴插件
	 * @file
	 * @since 1.2.6.1
	 */
	
	UE.plugins['pasteplain'] = function(){
	    var me = this;
	    me.setOpt({
	        'pasteplain':false,
	        'filterTxtRules' : function(){
	            function transP(node){
	                node.tagName = 'p';
	                node.setStyle();
	            }
	            function removeNode(node){
	                node.parentNode.removeChild(node,true)
	            }
	            return {
	                //直接删除及其字节点内容
	                '-' : 'script style object iframe embed input select',
	                'p': {$:{}},
	                'br':{$:{}},
	                div: function (node) {
	                    var tmpNode, p = UE.uNode.createElement('p');
	                    while (tmpNode = node.firstChild()) {
	                        if (tmpNode.type == 'text' || !UE.dom.dtd.$block[tmpNode.tagName]) {
	                            p.appendChild(tmpNode);
	                        } else {
	                            if (p.firstChild()) {
	                                node.parentNode.insertBefore(p, node);
	                                p = UE.uNode.createElement('p');
	                            } else {
	                                node.parentNode.insertBefore(tmpNode, node);
	                            }
	                        }
	                    }
	                    if (p.firstChild()) {
	                        node.parentNode.insertBefore(p, node);
	                    }
	                    node.parentNode.removeChild(node);
	                },
	                ol: removeNode,
	                ul: removeNode,
	                dl:removeNode,
	                dt:removeNode,
	                dd:removeNode,
	                'li':removeNode,
	                'caption':transP,
	                'th':transP,
	                'tr':transP,
	                'h1':transP,'h2':transP,'h3':transP,'h4':transP,'h5':transP,'h6':transP,
	                'td':function(node){
	                        //没有内容的td直接删掉
	                        var txt = !!node.innerText();
	                        if(txt){
	                         node.parentNode.insertAfter(UE.uNode.createText(' &nbsp; &nbsp;'),node);
	                    }
	                    node.parentNode.removeChild(node,node.innerText())
	                }
	            }
	        }()
	    });
	    //暂时这里支持一下老版本的属性
	    var pasteplain = me.options.pasteplain;
	
	    /**
	     * 启用或取消纯文本粘贴模式
	     * @command pasteplain
	     * @method execCommand
	     * @param { String } cmd 命令字符串
	     * @example
	     * ```javascript
	     * editor.queryCommandState( 'pasteplain' );
	     * ```
	     */
	
	    /**
	     * 查询当前是否处于纯文本粘贴模式
	     * @command pasteplain
	     * @method queryCommandState
	     * @param { String } cmd 命令字符串
	     * @return { int } 如果处于纯文本模式，返回1，否则，返回0
	     * @example
	     * ```javascript
	     * editor.queryCommandState( 'pasteplain' );
	     * ```
	     */
	    me.commands['pasteplain'] = {
	        queryCommandState: function (){
	            return pasteplain ? 1 : 0;
	        },
	        execCommand: function (){
	            pasteplain = !pasteplain|0;
	        },
	        notNeedUndo : 1
	    };
	};
	
	// plugins/list.js
	/**
	 * 有序列表,无序列表插件
	 * @file
	 * @since 1.2.6.1
	 */
	
	UE.plugins['list'] = function () {
	    var me = this,
	        notExchange = {
	            'TD':1,
	            'PRE':1,
	            'BLOCKQUOTE':1
	        };
	    var customStyle = {
	        'cn' : 'cn-1-',
	        'cn1' : 'cn-2-',
	        'cn2' : 'cn-3-',
	        'num':  'num-1-',
	        'num1' : 'num-2-',
	        'num2' : 'num-3-',
	        'dash'  : 'dash',
	        'dot':'dot'
	    };
	
	    me.setOpt( {
	        'autoTransWordToList':false,
	        'insertorderedlist':{
	            'num':'',
	            'num1':'',
	            'num2':'',
	            'cn':'',
	            'cn1':'',
	            'cn2':'',
	            'decimal':'',
	            'lower-alpha':'',
	            'lower-roman':'',
	            'upper-alpha':'',
	            'upper-roman':''
	        },
	        'insertunorderedlist':{
	            'circle':'',
	            'disc':'',
	            'square':'',
	            'dash' : '',
	            'dot':''
	        },
	        listDefaultPaddingLeft : '30',
	        listiconpath : 'http://bs.baidu.com/listicon/',
	        maxListLevel : -1,//-1不限制
	        disablePInList:false
	    } );
	    function listToArray(list){
	        var arr = [];
	        for(var p in list){
	            arr.push(p)
	        }
	        return arr;
	    }
	    var listStyle = {
	        'OL':listToArray(me.options.insertorderedlist),
	        'UL':listToArray(me.options.insertunorderedlist)
	    };
	    var liiconpath = me.options.listiconpath;
	
	    //根据用户配置，调整customStyle
	    for(var s in customStyle){
	        if(!me.options.insertorderedlist.hasOwnProperty(s) && !me.options.insertunorderedlist.hasOwnProperty(s)){
	            delete customStyle[s];
	        }
	    }
	
	    me.ready(function () {
	        var customCss = [];
	        for(var p in customStyle){
	            if(p == 'dash' || p == 'dot'){
	                customCss.push('li.list-' + customStyle[p] + '{background-image:url(' + liiconpath +customStyle[p]+'.gif)}');
	                customCss.push('ul.custom_'+p+'{list-style:none;}ul.custom_'+p+' li{background-position:0 3px;background-repeat:no-repeat}');
	            }else{
	                for(var i= 0;i<99;i++){
	                    customCss.push('li.list-' + customStyle[p] + i + '{background-image:url(' + liiconpath + 'list-'+customStyle[p] + i + '.gif)}')
	                }
	                customCss.push('ol.custom_'+p+'{list-style:none;}ol.custom_'+p+' li{background-position:0 3px;background-repeat:no-repeat}');
	            }
	            switch(p){
	                case 'cn':
	                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:25px}');
	                    customCss.push('li.list-'+p+'-paddingleft-2{padding-left:40px}');
	                    customCss.push('li.list-'+p+'-paddingleft-3{padding-left:55px}');
	                    break;
	                case 'cn1':
	                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:30px}');
	                    customCss.push('li.list-'+p+'-paddingleft-2{padding-left:40px}');
	                    customCss.push('li.list-'+p+'-paddingleft-3{padding-left:55px}');
	                    break;
	                case 'cn2':
	                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:40px}');
	                    customCss.push('li.list-'+p+'-paddingleft-2{padding-left:55px}');
	                    customCss.push('li.list-'+p+'-paddingleft-3{padding-left:68px}');
	                    break;
	                case 'num':
	                case 'num1':
	                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:25px}');
	                    break;
	                case 'num2':
	                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:35px}');
	                    customCss.push('li.list-'+p+'-paddingleft-2{padding-left:40px}');
	                    break;
	                case 'dash':
	                    customCss.push('li.list-'+p+'-paddingleft{padding-left:35px}');
	                    break;
	                case 'dot':
	                    customCss.push('li.list-'+p+'-paddingleft{padding-left:20px}');
	            }
	        }
	        customCss.push('.list-paddingleft-1{padding-left:0}');
	        customCss.push('.list-paddingleft-2{padding-left:'+me.options.listDefaultPaddingLeft+'px}');
	        customCss.push('.list-paddingleft-3{padding-left:'+me.options.listDefaultPaddingLeft*2+'px}');
	        //如果不给宽度会在自定应样式里出现滚动条
	        utils.cssRule('list', 'ol,ul{margin:0;pading:0;'+(browser.ie ? '' : 'width:95%')+'}li{clear:both;}'+customCss.join('\n'), me.document);
	    });
	    //单独处理剪切的问题
	    me.ready(function(){
	        domUtils.on(me.body,'cut',function(){
	            setTimeout(function(){
	                var rng = me.selection.getRange(),li;
	                //trace:3416
	                if(!rng.collapsed){
	                    if(li = domUtils.findParentByTagName(rng.startContainer,'li',true)){
	                        if(!li.nextSibling && domUtils.isEmptyBlock(li)){
	                            var pn = li.parentNode,node;
	                            if(node = pn.previousSibling){
	                                domUtils.remove(pn);
	                                rng.setStartAtLast(node).collapse(true);
	                                rng.select(true);
	                            }else if(node = pn.nextSibling){
	                                domUtils.remove(pn);
	                                rng.setStartAtFirst(node).collapse(true);
	                                rng.select(true);
	                            }else{
	                                var tmpNode = me.document.createElement('p');
	                                domUtils.fillNode(me.document,tmpNode);
	                                pn.parentNode.insertBefore(tmpNode,pn);
	                                domUtils.remove(pn);
	                                rng.setStart(tmpNode,0).collapse(true);
	                                rng.select(true);
	                            }
	                        }
	                    }
	                }
	
	            })
	        })
	    });
	
	    function getStyle(node){
	        var cls = node.className;
	        if(domUtils.hasClass(node,/custom_/)){
	            return cls.match(/custom_(\w+)/)[1]
	        }
	        return domUtils.getStyle(node, 'list-style-type')
	
	    }
	
	    me.addListener('beforepaste',function(type,html){
	        var me = this,
	            rng = me.selection.getRange(),li;
	        var root = UE.htmlparser(html.html,true);
	        if(li = domUtils.findParentByTagName(rng.startContainer,'li',true)){
	            var list = li.parentNode,tagName = list.tagName == 'OL' ? 'ul':'ol';
	            utils.each(root.getNodesByTagName(tagName),function(n){
	                n.tagName = list.tagName;
	                n.setAttr();
	                if(n.parentNode === root){
	                    type = getStyle(list) || (list.tagName == 'OL' ? 'decimal' : 'disc')
	                }else{
	                    var className = n.parentNode.getAttr('class');
	                    if(className && /custom_/.test(className)){
	                        type = className.match(/custom_(\w+)/)[1]
	                    }else{
	                        type = n.parentNode.getStyle('list-style-type');
	                    }
	                    if(!type){
	                        type = list.tagName == 'OL' ? 'decimal' : 'disc';
	                    }
	                }
	                var index = utils.indexOf(listStyle[list.tagName], type);
	                if(n.parentNode !== root)
	                    index = index + 1 == listStyle[list.tagName].length ? 0 : index + 1;
	                var currentStyle = listStyle[list.tagName][index];
	                if(customStyle[currentStyle]){
	                    n.setAttr('class', 'custom_' + currentStyle)
	
	                }else{
	                    n.setStyle('list-style-type',currentStyle)
	                }
	            })
	
	        }
	
	        html.html = root.toHtml();
	    });
	    //导出时，去掉p标签
	    me.getOpt('disablePInList') === true && me.addOutputRule(function(root){
	        utils.each(root.getNodesByTagName('li'),function(li){
	            var newChildrens = [],index=0;
	            utils.each(li.children,function(n){
	                if(n.tagName == 'p'){
	                    var tmpNode;
	                    while(tmpNode = n.children.pop()) {
	                        newChildrens.splice(index,0,tmpNode);
	                        tmpNode.parentNode = li;
	                        lastNode = tmpNode;
	                    }
	                    tmpNode = newChildrens[newChildrens.length-1];
	                    if(!tmpNode || tmpNode.type != 'element' || tmpNode.tagName != 'br'){
	                        var br = UE.uNode.createElement('br');
	                        br.parentNode = li;
	                        newChildrens.push(br);
	                    }
	
	                    index = newChildrens.length;
	                }
	            });
	            if(newChildrens.length){
	                li.children = newChildrens;
	            }
	        });
	    });
	    //进入编辑器的li要套p标签
	    me.addInputRule(function(root){
	        utils.each(root.getNodesByTagName('li'),function(li){
	            var tmpP = UE.uNode.createElement('p');
	            for(var i= 0,ci;ci=li.children[i];){
	                if(ci.type == 'text' || dtd.p[ci.tagName]){
	                    tmpP.appendChild(ci);
	                }else{
	                    if(tmpP.firstChild()){
	                        li.insertBefore(tmpP,ci);
	                        tmpP = UE.uNode.createElement('p');
	                        i = i + 2;
	                    }else{
	                        i++;
	                    }
	
	                }
	            }
	            if(tmpP.firstChild() && !tmpP.parentNode || !li.firstChild()){
	                li.appendChild(tmpP);
	            }
	            //trace:3357
	            //p不能为空
	            if (!tmpP.firstChild()) {
	                tmpP.innerHTML(browser.ie ? '&nbsp;' : '<br/>')
	            }
	            //去掉末尾的空白
	            var p = li.firstChild();
	            var lastChild = p.lastChild();
	            if(lastChild && lastChild.type == 'text' && /^\s*$/.test(lastChild.data)){
	                p.removeChild(lastChild)
	            }
	        });
	        if(me.options.autoTransWordToList){
	            var orderlisttype = {
	                    'num1':/^\d+\)/,
	                    'decimal':/^\d+\./,
	                    'lower-alpha':/^[a-z]+\)/,
	                    'upper-alpha':/^[A-Z]+\./,
	                    'cn':/^[\u4E00\u4E8C\u4E09\u56DB\u516d\u4e94\u4e03\u516b\u4e5d]+[\u3001]/,
	                    'cn2':/^\([\u4E00\u4E8C\u4E09\u56DB\u516d\u4e94\u4e03\u516b\u4e5d]+\)/
	                },
	                unorderlisttype = {
	                    'square':'n'
	                };
	            function checkListType(content,container){
	                var span = container.firstChild();
	                if(span &&  span.type == 'element' && span.tagName == 'span' && /Wingdings|Symbol/.test(span.getStyle('font-family'))){
	                    for(var p in unorderlisttype){
	                        if(unorderlisttype[p] == span.data){
	                            return p
	                        }
	                    }
	                    return 'disc'
	                }
	                for(var p in orderlisttype){
	                    if(orderlisttype[p].test(content)){
	                        return p;
	                    }
	                }
	
	            }
	            utils.each(root.getNodesByTagName('p'),function(node){
	                if(node.getAttr('class') != 'MsoListParagraph'){
	                    return
	                }
	
	                //word粘贴过来的会带有margin要去掉,但这样也可能会误命中一些央视
	                node.setStyle('margin','');
	                node.setStyle('margin-left','');
	                node.setAttr('class','');
	
	                function appendLi(list,p,type){
	                    if(list.tagName == 'ol'){
	                        if(browser.ie){
	                            var first = p.firstChild();
	                            if(first.type =='element' && first.tagName == 'span' && orderlisttype[type].test(first.innerText())){
	                                p.removeChild(first);
	                            }
	                        }else{
	                            p.innerHTML(p.innerHTML().replace(orderlisttype[type],''));
	                        }
	                    }else{
	                        p.removeChild(p.firstChild())
	                    }
	
	                    var li = UE.uNode.createElement('li');
	                    li.appendChild(p);
	                    list.appendChild(li);
	                }
	                var tmp = node,type,cacheNode = node;
	
	                if(node.parentNode.tagName != 'li' && (type = checkListType(node.innerText(),node))){
	
	                    var list = UE.uNode.createElement(me.options.insertorderedlist.hasOwnProperty(type) ? 'ol' : 'ul');
	                    if(customStyle[type]){
	                        list.setAttr('class','custom_'+type)
	                    }else{
	                        list.setStyle('list-style-type',type)
	                    }
	                    while(node && node.parentNode.tagName != 'li' && checkListType(node.innerText(),node)){
	                        tmp = node.nextSibling();
	                        if(!tmp){
	                            node.parentNode.insertBefore(list,node)
	                        }
	                        appendLi(list,node,type);
	                        node = tmp;
	                    }
	                    if(!list.parentNode && node && node.parentNode){
	                        node.parentNode.insertBefore(list,node)
	                    }
	                }
	                var span = cacheNode.firstChild();
	                if(span && span.type == 'element' && span.tagName == 'span' && /^\s*(&nbsp;)+\s*$/.test(span.innerText())){
	                    span.parentNode.removeChild(span)
	                }
	            })
	        }
	
	    });
	
	    //调整索引标签
	    me.addListener('contentchange',function(){
	        adjustListStyle(me.document)
	    });
	
	    function adjustListStyle(doc,ignore){
	        utils.each(domUtils.getElementsByTagName(doc,'ol ul'),function(node){
	
	            if(!domUtils.inDoc(node,doc))
	                return;
	
	            var parent = node.parentNode;
	            if(parent.tagName == node.tagName){
	                var nodeStyleType = getStyle(node) || (node.tagName == 'OL' ? 'decimal' : 'disc'),
	                    parentStyleType = getStyle(parent) || (parent.tagName == 'OL' ? 'decimal' : 'disc');
	                if(nodeStyleType == parentStyleType){
	                    var styleIndex = utils.indexOf(listStyle[node.tagName], nodeStyleType);
	                    styleIndex = styleIndex + 1 == listStyle[node.tagName].length ? 0 : styleIndex + 1;
	                    setListStyle(node,listStyle[node.tagName][styleIndex])
	                }
	
	            }
	            var index = 0,type = 2;
	            if( domUtils.hasClass(node,/custom_/)){
	                if(!(/[ou]l/i.test(parent.tagName) && domUtils.hasClass(parent,/custom_/))){
	                    type = 1;
	                }
	            }else{
	                if(/[ou]l/i.test(parent.tagName) && domUtils.hasClass(parent,/custom_/)){
	                    type = 3;
	                }
	            }
	
	            var style = domUtils.getStyle(node, 'list-style-type');
	            style && (node.style.cssText = 'list-style-type:' + style);
	            node.className = utils.trim(node.className.replace(/list-paddingleft-\w+/,'')) + ' list-paddingleft-' + type;
	            utils.each(domUtils.getElementsByTagName(node,'li'),function(li){
	                li.style.cssText && (li.style.cssText = '');
	                if(!li.firstChild){
	                    domUtils.remove(li);
	                    return;
	                }
	                if(li.parentNode !== node){
	                    return;
	                }
	                index++;
	                if(domUtils.hasClass(node,/custom_/) ){
	                    var paddingLeft = 1,currentStyle = getStyle(node);
	                    if(node.tagName == 'OL'){
	                        if(currentStyle){
	                            switch(currentStyle){
	                                case 'cn' :
	                                case 'cn1':
	                                case 'cn2':
	                                    if(index > 10 && (index % 10 == 0 || index > 10 && index < 20)){
	                                        paddingLeft = 2
	                                    }else if(index > 20){
	                                        paddingLeft = 3
	                                    }
	                                    break;
	                                case 'num2' :
	                                    if(index > 9){
	                                        paddingLeft = 2
	                                    }
	                            }
	                        }
	                        li.className = 'list-'+customStyle[currentStyle]+ index + ' ' + 'list-'+currentStyle+'-paddingleft-' + paddingLeft;
	                    }else{
	                        li.className = 'list-'+customStyle[currentStyle]  + ' ' + 'list-'+currentStyle+'-paddingleft';
	                    }
	                }else{
	                    li.className = li.className.replace(/list-[\w\-]+/gi,'');
	                }
	                var className = li.getAttribute('class');
	                if(className !== null && !className.replace(/\s/g,'')){
	                    domUtils.removeAttributes(li,'class')
	                }
	            });
	            !ignore && adjustList(node,node.tagName.toLowerCase(),getStyle(node)||domUtils.getStyle(node, 'list-style-type'),true);
	        })
	    }
	    function adjustList(list, tag, style,ignoreEmpty) {
	        var nextList = list.nextSibling;
	        if (nextList && nextList.nodeType == 1 && nextList.tagName.toLowerCase() == tag && (getStyle(nextList) || domUtils.getStyle(nextList, 'list-style-type') || (tag == 'ol' ? 'decimal' : 'disc')) == style) {
	            domUtils.moveChild(nextList, list);
	            if (nextList.childNodes.length == 0) {
	                domUtils.remove(nextList);
	            }
	        }
	        if(nextList && domUtils.isFillChar(nextList)){
	            domUtils.remove(nextList);
	        }
	        var preList = list.previousSibling;
	        if (preList && preList.nodeType == 1 && preList.tagName.toLowerCase() == tag && (getStyle(preList) || domUtils.getStyle(preList, 'list-style-type') || (tag == 'ol' ? 'decimal' : 'disc')) == style) {
	            domUtils.moveChild(list, preList);
	        }
	        if(preList && domUtils.isFillChar(preList)){
	            domUtils.remove(preList);
	        }
	        !ignoreEmpty && domUtils.isEmptyBlock(list) && domUtils.remove(list);
	        if(getStyle(list)){
	            adjustListStyle(list.ownerDocument,true)
	        }
	    }
	
	    function setListStyle(list,style){
	        if(customStyle[style]){
	            list.className = 'custom_' + style;
	        }
	        try{
	            domUtils.setStyle(list, 'list-style-type', style);
	        }catch(e){}
	    }
	    function clearEmptySibling(node) {
	        var tmpNode = node.previousSibling;
	        if (tmpNode && domUtils.isEmptyBlock(tmpNode)) {
	            domUtils.remove(tmpNode);
	        }
	        tmpNode = node.nextSibling;
	        if (tmpNode && domUtils.isEmptyBlock(tmpNode)) {
	            domUtils.remove(tmpNode);
	        }
	    }
	
	    me.addListener('keydown', function (type, evt) {
	        function preventAndSave() {
	            evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);
	            me.fireEvent('contentchange');
	            me.undoManger && me.undoManger.save();
	        }
	        function findList(node,filterFn){
	            while(node && !domUtils.isBody(node)){
	                if(filterFn(node)){
	                    return null
	                }
	                if(node.nodeType == 1 && /[ou]l/i.test(node.tagName)){
	                    return node;
	                }
	                node = node.parentNode;
	            }
	            return null;
	        }
	        var keyCode = evt.keyCode || evt.which;
	        if (keyCode == 13 && !evt.shiftKey) {//回车
	            var rng = me.selection.getRange(),
	                parent = domUtils.findParent(rng.startContainer,function(node){return domUtils.isBlockElm(node)},true),
	                li = domUtils.findParentByTagName(rng.startContainer,'li',true);
	            if(parent && parent.tagName != 'PRE' && !li){
	                var html = parent.innerHTML.replace(new RegExp(domUtils.fillChar, 'g'),'');
	                if(/^\s*1\s*\.[^\d]/.test(html)){
	                    parent.innerHTML = html.replace(/^\s*1\s*\./,'');
	                    rng.setStartAtLast(parent).collapse(true).select();
	                    me.__hasEnterExecCommand = true;
	                    me.execCommand('insertorderedlist');
	                    me.__hasEnterExecCommand = false;
	                }
	            }
	            var range = me.selection.getRange(),
	                start = findList(range.startContainer,function (node) {
	                    return node.tagName == 'TABLE';
	                }),
	                end = range.collapsed ? start : findList(range.endContainer,function (node) {
	                    return node.tagName == 'TABLE';
	                });
	
	            if (start && end && start === end) {
	
	                if (!range.collapsed) {
	                    start = domUtils.findParentByTagName(range.startContainer, 'li', true);
	                    end = domUtils.findParentByTagName(range.endContainer, 'li', true);
	                    if (start && end && start === end) {
	                        range.deleteContents();
	                        li = domUtils.findParentByTagName(range.startContainer, 'li', true);
	                        if (li && domUtils.isEmptyBlock(li)) {
	
	                            pre = li.previousSibling;
	                            next = li.nextSibling;
	                            p = me.document.createElement('p');
	
	                            domUtils.fillNode(me.document, p);
	                            parentList = li.parentNode;
	                            if (pre && next) {
	                                range.setStart(next, 0).collapse(true).select(true);
	                                domUtils.remove(li);
	
	                            } else {
	                                if (!pre && !next || !pre) {
	
	                                    parentList.parentNode.insertBefore(p, parentList);
	
	
	                                } else {
	                                    li.parentNode.parentNode.insertBefore(p, parentList.nextSibling);
	                                }
	                                domUtils.remove(li);
	                                if (!parentList.firstChild) {
	                                    domUtils.remove(parentList);
	                                }
	                                range.setStart(p, 0).setCursor();
	
	
	                            }
	                            preventAndSave();
	                            return;
	
	                        }
	                    } else {
	                        var tmpRange = range.cloneRange(),
	                            bk = tmpRange.collapse(false).createBookmark();
	
	                        range.deleteContents();
	                        tmpRange.moveToBookmark(bk);
	                        var li = domUtils.findParentByTagName(tmpRange.startContainer, 'li', true);
	
	                        clearEmptySibling(li);
	                        tmpRange.select();
	                        preventAndSave();
	                        return;
	                    }
	                }
	
	
	                li = domUtils.findParentByTagName(range.startContainer, 'li', true);
	
	                if (li) {
	                    if (domUtils.isEmptyBlock(li)) {
	                        bk = range.createBookmark();
	                        var parentList = li.parentNode;
	                        if (li !== parentList.lastChild) {
	                            domUtils.breakParent(li, parentList);
	                            clearEmptySibling(li);
	                        } else {
	
	                            parentList.parentNode.insertBefore(li, parentList.nextSibling);
	                            if (domUtils.isEmptyNode(parentList)) {
	                                domUtils.remove(parentList);
	                            }
	                        }
	                        //嵌套不处理
	                        if (!dtd.$list[li.parentNode.tagName]) {
	
	                            if (!domUtils.isBlockElm(li.firstChild)) {
	                                p = me.document.createElement('p');
	                                li.parentNode.insertBefore(p, li);
	                                while (li.firstChild) {
	                                    p.appendChild(li.firstChild);
	                                }
	                                domUtils.remove(li);
	                            } else {
	                                domUtils.remove(li, true);
	                            }
	                        }
	                        range.moveToBookmark(bk).select();
	
	
	                    } else {
	                        var first = li.firstChild;
	                        if (!first || !domUtils.isBlockElm(first)) {
	                            var p = me.document.createElement('p');
	
	                            !li.firstChild && domUtils.fillNode(me.document, p);
	                            while (li.firstChild) {
	
	                                p.appendChild(li.firstChild);
	                            }
	                            li.appendChild(p);
	                            first = p;
	                        }
	
	                        var span = me.document.createElement('span');
	
	                        range.insertNode(span);
	                        domUtils.breakParent(span, li);
	
	                        var nextLi = span.nextSibling;
	                        first = nextLi.firstChild;
	
	                        if (!first) {
	                            p = me.document.createElement('p');
	
	                            domUtils.fillNode(me.document, p);
	                            nextLi.appendChild(p);
	                            first = p;
	                        }
	                        if (domUtils.isEmptyNode(first)) {
	                            first.innerHTML = '';
	                            domUtils.fillNode(me.document, first);
	                        }
	
	                        range.setStart(first, 0).collapse(true).shrinkBoundary().select();
	                        domUtils.remove(span);
	                        var pre = nextLi.previousSibling;
	                        if (pre && domUtils.isEmptyBlock(pre)) {
	                            pre.innerHTML = '<p></p>';
	                            domUtils.fillNode(me.document, pre.firstChild);
	                        }
	
	                    }
	//                        }
	                    preventAndSave();
	                }
	
	
	            }
	
	
	        }
	        if (keyCode == 8) {
	            //修中ie中li下的问题
	            range = me.selection.getRange();
	            if (range.collapsed && domUtils.isStartInblock(range)) {
	                tmpRange = range.cloneRange().trimBoundary();
	                li = domUtils.findParentByTagName(range.startContainer, 'li', true);
	                //要在li的最左边，才能处理
	                if (li && domUtils.isStartInblock(tmpRange)) {
	                    start = domUtils.findParentByTagName(range.startContainer, 'p', true);
	                    if (start && start !== li.firstChild) {
	                        var parentList = domUtils.findParentByTagName(start,['ol','ul']);
	                        domUtils.breakParent(start,parentList);
	                        clearEmptySibling(start);
	                        me.fireEvent('contentchange');
	                        range.setStart(start,0).setCursor(false,true);
	                        me.fireEvent('saveScene');
	                        domUtils.preventDefault(evt);
	                        return;
	                    }
	
	                    if (li && (pre = li.previousSibling)) {
	                        if (keyCode == 46 && li.childNodes.length) {
	                            return;
	                        }
	                        //有可能上边的兄弟节点是个2级菜单，要追加到2级菜单的最后的li
	                        if (dtd.$list[pre.tagName]) {
	                            pre = pre.lastChild;
	                        }
	                        me.undoManger && me.undoManger.save();
	                        first = li.firstChild;
	                        if (domUtils.isBlockElm(first)) {
	                            if (domUtils.isEmptyNode(first)) {
	//                                    range.setEnd(pre, pre.childNodes.length).shrinkBoundary().collapse().select(true);
	                                pre.appendChild(first);
	                                range.setStart(first, 0).setCursor(false, true);
	                                //first不是唯一的节点
	                                while (li.firstChild) {
	                                    pre.appendChild(li.firstChild);
	                                }
	                            } else {
	
	                                span = me.document.createElement('span');
	                                range.insertNode(span);
	                                //判断pre是否是空的节点,如果是<p><br/></p>类型的空节点，干掉p标签防止它占位
	                                if (domUtils.isEmptyBlock(pre)) {
	                                    pre.innerHTML = '';
	                                }
	                                domUtils.moveChild(li, pre);
	                                range.setStartBefore(span).collapse(true).select(true);
	
	                                domUtils.remove(span);
	
	                            }
	                        } else {
	                            if (domUtils.isEmptyNode(li)) {
	                                var p = me.document.createElement('p');
	                                pre.appendChild(p);
	                                range.setStart(p, 0).setCursor();
	//                                    range.setEnd(pre, pre.childNodes.length).shrinkBoundary().collapse().select(true);
	                            } else {
	                                range.setEnd(pre, pre.childNodes.length).collapse().select(true);
	                                while (li.firstChild) {
	                                    pre.appendChild(li.firstChild);
	                                }
	                            }
	                        }
	                        domUtils.remove(li);
	                        me.fireEvent('contentchange');
	                        me.fireEvent('saveScene');
	                        domUtils.preventDefault(evt);
	                        return;
	
	                    }
	                    //trace:980
	
	                    if (li && !li.previousSibling) {
	                        var parentList = li.parentNode;
	                        var bk = range.createBookmark();
	                        if(domUtils.isTagNode(parentList.parentNode,'ol ul')){
	                            parentList.parentNode.insertBefore(li,parentList);
	                            if(domUtils.isEmptyNode(parentList)){
	                                domUtils.remove(parentList)
	                            }
	                        }else{
	
	                            while(li.firstChild){
	                                parentList.parentNode.insertBefore(li.firstChild,parentList);
	                            }
	
	                            domUtils.remove(li);
	                            if(domUtils.isEmptyNode(parentList)){
	                                domUtils.remove(parentList)
	                            }
	
	                        }
	                        range.moveToBookmark(bk).setCursor(false,true);
	                        me.fireEvent('contentchange');
	                        me.fireEvent('saveScene');
	                        domUtils.preventDefault(evt);
	                        return;
	
	                    }
	
	
	                }
	
	
	            }
	
	        }
	    });
	
	    me.addListener('keyup',function(type, evt){
	        var keyCode = evt.keyCode || evt.which;
	        if (keyCode == 8) {
	            var rng = me.selection.getRange(),list;
	            if(list = domUtils.findParentByTagName(rng.startContainer,['ol', 'ul'],true)){
	                adjustList(list,list.tagName.toLowerCase(),getStyle(list)||domUtils.getComputedStyle(list,'list-style-type'),true)
	            }
	        }
	    });
	    //处理tab键
	    me.addListener('tabkeydown',function(){
	
	        var range = me.selection.getRange();
	
	        //控制级数
	        function checkLevel(li){
	            if(me.options.maxListLevel != -1){
	                var level = li.parentNode,levelNum = 0;
	                while(/[ou]l/i.test(level.tagName)){
	                    levelNum++;
	                    level = level.parentNode;
	                }
	                if(levelNum >= me.options.maxListLevel){
	                    return true;
	                }
	            }
	        }
	        //只以开始为准
	        //todo 后续改进
	        var li = domUtils.findParentByTagName(range.startContainer, 'li', true);
	        if(li){
	
	            var bk;
	            if(range.collapsed){
	                if(checkLevel(li))
	                    return true;
	                var parentLi = li.parentNode,
	                    list = me.document.createElement(parentLi.tagName),
	                    index = utils.indexOf(listStyle[list.tagName], getStyle(parentLi)||domUtils.getComputedStyle(parentLi, 'list-style-type'));
	                index = index + 1 == listStyle[list.tagName].length ? 0 : index + 1;
	                var currentStyle = listStyle[list.tagName][index];
	                setListStyle(list,currentStyle);
	                if(domUtils.isStartInblock(range)){
	                    me.fireEvent('saveScene');
	                    bk = range.createBookmark();
	                    parentLi.insertBefore(list, li);
	                    list.appendChild(li);
	                    adjustList(list,list.tagName.toLowerCase(),currentStyle);
	                    me.fireEvent('contentchange');
	                    range.moveToBookmark(bk).select(true);
	                    return true;
	                }
	            }else{
	                me.fireEvent('saveScene');
	                bk = range.createBookmark();
	                for(var i= 0,closeList,parents = domUtils.findParents(li),ci;ci=parents[i++];){
	                    if(domUtils.isTagNode(ci,'ol ul')){
	                        closeList = ci;
	                        break;
	                    }
	                }
	                var current = li;
	                if(bk.end){
	                    while(current && !(domUtils.getPosition(current, bk.end) & domUtils.POSITION_FOLLOWING)){
	                        if(checkLevel(current)){
	                            current = domUtils.getNextDomNode(current,false,null,function(node){return node !== closeList});
	                            continue;
	                        }
	                        var parentLi = current.parentNode,
	                            list = me.document.createElement(parentLi.tagName),
	                            index = utils.indexOf(listStyle[list.tagName], getStyle(parentLi)||domUtils.getComputedStyle(parentLi, 'list-style-type'));
	                        var currentIndex = index + 1 == listStyle[list.tagName].length ? 0 : index + 1;
	                        var currentStyle = listStyle[list.tagName][currentIndex];
	                        setListStyle(list,currentStyle);
	                        parentLi.insertBefore(list, current);
	                        while(current && !(domUtils.getPosition(current, bk.end) & domUtils.POSITION_FOLLOWING)){
	                            li = current.nextSibling;
	                            list.appendChild(current);
	                            if(!li || domUtils.isTagNode(li,'ol ul')){
	                                if(li){
	                                    while(li = li.firstChild){
	                                        if(li.tagName == 'LI'){
	                                            break;
	                                        }
	                                    }
	                                }else{
	                                    li = domUtils.getNextDomNode(current,false,null,function(node){return node !== closeList});
	                                }
	                                break;
	                            }
	                            current = li;
	                        }
	                        adjustList(list,list.tagName.toLowerCase(),currentStyle);
	                        current = li;
	                    }
	                }
	                me.fireEvent('contentchange');
	                range.moveToBookmark(bk).select();
	                return true;
	            }
	        }
	
	    });
	    function getLi(start){
	        while(start && !domUtils.isBody(start)){
	            if(start.nodeName == 'TABLE'){
	                return null;
	            }
	            if(start.nodeName == 'LI'){
	                return start
	            }
	            start = start.parentNode;
	        }
	    }
	
	    /**
	     * 有序列表，与“insertunorderedlist”命令互斥
	     * @command insertorderedlist
	     * @method execCommand
	     * @param { String } command 命令字符串
	     * @param { String } style 插入的有序列表类型，值为：decimal,lower-alpha,lower-roman,upper-alpha,upper-roman,cn,cn1,cn2,num,num1,num2
	     * @example
	     * ```javascript
	     * editor.execCommand( 'insertorderedlist','decimal');
	     * ```
	     */
	    /**
	     * 查询当前选区内容是否有序列表
	     * @command insertorderedlist
	     * @method queryCommandState
	     * @param { String } cmd 命令字符串
	     * @return { int } 如果当前选区是有序列表返回1，否则返回0
	     * @example
	     * ```javascript
	     * editor.queryCommandState( 'insertorderedlist' );
	     * ```
	     */
	    /**
	     * 查询当前选区内容是否有序列表
	     * @command insertorderedlist
	     * @method queryCommandValue
	     * @param { String } cmd 命令字符串
	     * @return { String } 返回当前有序列表的类型，值为null或decimal,lower-alpha,lower-roman,upper-alpha,upper-roman,cn,cn1,cn2,num,num1,num2
	     * @example
	     * ```javascript
	     * editor.queryCommandValue( 'insertorderedlist' );
	     * ```
	     */
	
	    /**
	     * 无序列表，与“insertorderedlist”命令互斥
	     * @command insertunorderedlist
	     * @method execCommand
	     * @param { String } command 命令字符串
	     * @param { String } style 插入的无序列表类型，值为：circle,disc,square,dash,dot
	     * @example
	     * ```javascript
	     * editor.execCommand( 'insertunorderedlist','circle');
	     * ```
	     */
	    /**
	     * 查询当前是否有word文档粘贴进来的图片
	     * @command insertunorderedlist
	     * @method insertunorderedlist
	     * @param { String } command 命令字符串
	     * @return { int } 如果当前选区是无序列表返回1，否则返回0
	     * @example
	     * ```javascript
	     * editor.queryCommandState( 'insertunorderedlist' );
	     * ```
	     */
	    /**
	     * 查询当前选区内容是否有序列表
	     * @command insertunorderedlist
	     * @method queryCommandValue
	     * @param { String } command 命令字符串
	     * @return { String } 返回当前无序列表的类型，值为null或circle,disc,square,dash,dot
	     * @example
	     * ```javascript
	     * editor.queryCommandValue( 'insertunorderedlist' );
	     * ```
	     */
	
	    me.commands['insertorderedlist'] =
	    me.commands['insertunorderedlist'] = {
	            execCommand:function (command, style) {
	
	                if (!style) {
	                    style = command.toLowerCase() == 'insertorderedlist' ? 'decimal' : 'disc';
	                }
	                var me = this,
	                    range = this.selection.getRange(),
	                    filterFn = function (node) {
	                        return   node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' : !domUtils.isWhitespace(node);
	                    },
	                    tag = command.toLowerCase() == 'insertorderedlist' ? 'ol' : 'ul',
	                    frag = me.document.createDocumentFragment();
	                //去掉是因为会出现选到末尾，导致adjustmentBoundary缩到ol/ul的位置
	                //range.shrinkBoundary();//.adjustmentBoundary();
	                range.adjustmentBoundary().shrinkBoundary();
	                var bko = range.createBookmark(true),
	                    start = getLi(me.document.getElementById(bko.start)),
	                    modifyStart = 0,
	                    end =  getLi(me.document.getElementById(bko.end)),
	                    modifyEnd = 0,
	                    startParent, endParent,
	                    list, tmp;
	
	                if (start || end) {
	                    start && (startParent = start.parentNode);
	                    if (!bko.end) {
	                        end = start;
	                    }
	                    end && (endParent = end.parentNode);
	
	                    if (startParent === endParent) {
	                        while (start !== end) {
	                            tmp = start;
	                            start = start.nextSibling;
	                            if (!domUtils.isBlockElm(tmp.firstChild)) {
	                                var p = me.document.createElement('p');
	                                while (tmp.firstChild) {
	                                    p.appendChild(tmp.firstChild);
	                                }
	                                tmp.appendChild(p);
	                            }
	                            frag.appendChild(tmp);
	                        }
	                        tmp = me.document.createElement('span');
	                        startParent.insertBefore(tmp, end);
	                        if (!domUtils.isBlockElm(end.firstChild)) {
	                            p = me.document.createElement('p');
	                            while (end.firstChild) {
	                                p.appendChild(end.firstChild);
	                            }
	                            end.appendChild(p);
	                        }
	                        frag.appendChild(end);
	                        domUtils.breakParent(tmp, startParent);
	                        if (domUtils.isEmptyNode(tmp.previousSibling)) {
	                            domUtils.remove(tmp.previousSibling);
	                        }
	                        if (domUtils.isEmptyNode(tmp.nextSibling)) {
	                            domUtils.remove(tmp.nextSibling)
	                        }
	                        var nodeStyle = getStyle(startParent) || domUtils.getComputedStyle(startParent, 'list-style-type') || (command.toLowerCase() == 'insertorderedlist' ? 'decimal' : 'disc');
	                        if (startParent.tagName.toLowerCase() == tag && nodeStyle == style) {
	                            for (var i = 0, ci, tmpFrag = me.document.createDocumentFragment(); ci = frag.firstChild;) {
	                                if(domUtils.isTagNode(ci,'ol ul')){
	//                                  删除时，子列表不处理
	//                                  utils.each(domUtils.getElementsByTagName(ci,'li'),function(li){
	//                                        while(li.firstChild){
	//                                            tmpFrag.appendChild(li.firstChild);
	//                                        }
	//
	//                                    });
	                                    tmpFrag.appendChild(ci);
	                                }else{
	                                    while (ci.firstChild) {
	
	                                        tmpFrag.appendChild(ci.firstChild);
	                                        domUtils.remove(ci);
	                                    }
	                                }
	
	                            }
	                            tmp.parentNode.insertBefore(tmpFrag, tmp);
	                        } else {
	                            list = me.document.createElement(tag);
	                            setListStyle(list,style);
	                            list.appendChild(frag);
	                            tmp.parentNode.insertBefore(list, tmp);
	                        }
	
	                        domUtils.remove(tmp);
	                        list && adjustList(list, tag, style);
	                        range.moveToBookmark(bko).select();
	                        return;
	                    }
	                    //开始
	                    if (start) {
	                        while (start) {
	                            tmp = start.nextSibling;
	                            if (domUtils.isTagNode(start, 'ol ul')) {
	                                frag.appendChild(start);
	                            } else {
	                                var tmpfrag = me.document.createDocumentFragment(),
	                                    hasBlock = 0;
	                                while (start.firstChild) {
	                                    if (domUtils.isBlockElm(start.firstChild)) {
	                                        hasBlock = 1;
	                                    }
	                                    tmpfrag.appendChild(start.firstChild);
	                                }
	                                if (!hasBlock) {
	                                    var tmpP = me.document.createElement('p');
	                                    tmpP.appendChild(tmpfrag);
	                                    frag.appendChild(tmpP);
	                                } else {
	                                    frag.appendChild(tmpfrag);
	                                }
	                                domUtils.remove(start);
	                            }
	
	                            start = tmp;
	                        }
	                        startParent.parentNode.insertBefore(frag, startParent.nextSibling);
	                        if (domUtils.isEmptyNode(startParent)) {
	                            range.setStartBefore(startParent);
	                            domUtils.remove(startParent);
	                        } else {
	                            range.setStartAfter(startParent);
	                        }
	                        modifyStart = 1;
	                    }
	
	                    if (end && domUtils.inDoc(endParent, me.document)) {
	                        //结束
	                        start = endParent.firstChild;
	                        while (start && start !== end) {
	                            tmp = start.nextSibling;
	                            if (domUtils.isTagNode(start, 'ol ul')) {
	                                frag.appendChild(start);
	                            } else {
	                                tmpfrag = me.document.createDocumentFragment();
	                                hasBlock = 0;
	                                while (start.firstChild) {
	                                    if (domUtils.isBlockElm(start.firstChild)) {
	                                        hasBlock = 1;
	                                    }
	                                    tmpfrag.appendChild(start.firstChild);
	                                }
	                                if (!hasBlock) {
	                                    tmpP = me.document.createElement('p');
	                                    tmpP.appendChild(tmpfrag);
	                                    frag.appendChild(tmpP);
	                                } else {
	                                    frag.appendChild(tmpfrag);
	                                }
	                                domUtils.remove(start);
	                            }
	                            start = tmp;
	                        }
	                        var tmpDiv = domUtils.createElement(me.document, 'div', {
	                            'tmpDiv':1
	                        });
	                        domUtils.moveChild(end, tmpDiv);
	
	                        frag.appendChild(tmpDiv);
	                        domUtils.remove(end);
	                        endParent.parentNode.insertBefore(frag, endParent);
	                        range.setEndBefore(endParent);
	                        if (domUtils.isEmptyNode(endParent)) {
	                            domUtils.remove(endParent);
	                        }
	
	                        modifyEnd = 1;
	                    }
	
	
	                }
	
	                if (!modifyStart) {
	                    range.setStartBefore(me.document.getElementById(bko.start));
	                }
	                if (bko.end && !modifyEnd) {
	                    range.setEndAfter(me.document.getElementById(bko.end));
	                }
	                range.enlarge(true, function (node) {
	                    return notExchange[node.tagName];
	                });
	
	                frag = me.document.createDocumentFragment();
	
	                var bk = range.createBookmark(),
	                    current = domUtils.getNextDomNode(bk.start, false, filterFn),
	                    tmpRange = range.cloneRange(),
	                    tmpNode,
	                    block = domUtils.isBlockElm;
	
	                while (current && current !== bk.end && (domUtils.getPosition(current, bk.end) & domUtils.POSITION_PRECEDING)) {
	
	                    if (current.nodeType == 3 || dtd.li[current.tagName]) {
	                        if (current.nodeType == 1 && dtd.$list[current.tagName]) {
	                            while (current.firstChild) {
	                                frag.appendChild(current.firstChild);
	                            }
	                            tmpNode = domUtils.getNextDomNode(current, false, filterFn);
	                            domUtils.remove(current);
	                            current = tmpNode;
	                            continue;
	
	                        }
	                        tmpNode = current;
	                        tmpRange.setStartBefore(current);
	
	                        while (current && current !== bk.end && (!block(current) || domUtils.isBookmarkNode(current) )) {
	                            tmpNode = current;
	                            current = domUtils.getNextDomNode(current, false, null, function (node) {
	                                return !notExchange[node.tagName];
	                            });
	                        }
	
	                        if (current && block(current)) {
	                            tmp = domUtils.getNextDomNode(tmpNode, false, filterFn);
	                            if (tmp && domUtils.isBookmarkNode(tmp)) {
	                                current = domUtils.getNextDomNode(tmp, false, filterFn);
	                                tmpNode = tmp;
	                            }
	                        }
	                        tmpRange.setEndAfter(tmpNode);
	
	                        current = domUtils.getNextDomNode(tmpNode, false, filterFn);
	
	                        var li = range.document.createElement('li');
	
	                        li.appendChild(tmpRange.extractContents());
	                        if(domUtils.isEmptyNode(li)){
	                            var tmpNode = range.document.createElement('p');
	                            while(li.firstChild){
	                                tmpNode.appendChild(li.firstChild)
	                            }
	                            li.appendChild(tmpNode);
	                        }
	                        frag.appendChild(li);
	                    } else {
	                        current = domUtils.getNextDomNode(current, true, filterFn);
	                    }
	                }
	                range.moveToBookmark(bk).collapse(true);
	                list = me.document.createElement(tag);
	                setListStyle(list,style);
	                list.appendChild(frag);
	                range.insertNode(list);
	                //当前list上下看能否合并
	                adjustList(list, tag, style);
	                //去掉冗余的tmpDiv
	                for (var i = 0, ci, tmpDivs = domUtils.getElementsByTagName(list, 'div'); ci = tmpDivs[i++];) {
	                    if (ci.getAttribute('tmpDiv')) {
	                        domUtils.remove(ci, true)
	                    }
	                }
	                range.moveToBookmark(bko).select();
	
	            },
	            queryCommandState:function (command) {
	                var tag = command.toLowerCase() == 'insertorderedlist' ? 'ol' : 'ul';
	                var path = this.selection.getStartElementPath();
	                for(var i= 0,ci;ci = path[i++];){
	                    if(ci.nodeName == 'TABLE'){
	                        return 0
	                    }
	                    if(tag == ci.nodeName.toLowerCase()){
	                        return 1
	                    };
	                }
	                return 0;
	
	            },
	            queryCommandValue:function (command) {
	                var tag = command.toLowerCase() == 'insertorderedlist' ? 'ol' : 'ul';
	                var path = this.selection.getStartElementPath(),
	                    node;
	                for(var i= 0,ci;ci = path[i++];){
	                    if(ci.nodeName == 'TABLE'){
	                        node = null;
	                        break;
	                    }
	                    if(tag == ci.nodeName.toLowerCase()){
	                        node = ci;
	                        break;
	                    };
	                }
	                return node ? getStyle(node) || domUtils.getComputedStyle(node, 'list-style-type') : null;
	            }
	        };
	};
	
	
	
	// plugins/source.js
	/**
	 * 源码编辑插件
	 * @file
	 * @since 1.2.6.1
	 */
	
	(function (){
	    var sourceEditors = {
	        textarea: function (editor, holder){
	            var textarea = holder.ownerDocument.createElement('textarea');
	            textarea.style.cssText = 'position:absolute;resize:none;width:100%;height:100%;border:0;padding:0;margin:0;overflow-y:auto;';
	            // todo: IE下只有onresize属性可用... 很纠结
	            if (browser.ie && browser.version < 8) {
	                textarea.style.width = holder.offsetWidth + 'px';
	                textarea.style.height = holder.offsetHeight + 'px';
	                holder.onresize = function (){
	                    textarea.style.width = holder.offsetWidth + 'px';
	                    textarea.style.height = holder.offsetHeight + 'px';
	                };
	            }
	            holder.appendChild(textarea);
	            return {
	                setContent: function (content){
	                    textarea.value = content;
	                },
	                getContent: function (){
	                    return textarea.value;
	                },
	                select: function (){
	                    var range;
	                    if (browser.ie) {
	                        range = textarea.createTextRange();
	                        range.collapse(true);
	                        range.select();
	                    } else {
	                        //todo: chrome下无法设置焦点
	                        textarea.setSelectionRange(0, 0);
	                        textarea.focus();
	                    }
	                },
	                dispose: function (){
	                    holder.removeChild(textarea);
	                    // todo
	                    holder.onresize = null;
	                    textarea = null;
	                    holder = null;
	                }
	            };
	        },
	        codemirror: function (editor, holder){
	
	            var codeEditor = window.CodeMirror(holder, {
	                mode: "text/html",
	                tabMode: "indent",
	                lineNumbers: true,
	                lineWrapping:true
	            });
	            var dom = codeEditor.getWrapperElement();
	            dom.style.cssText = 'position:absolute;left:0;top:0;width:100%;height:100%;font-family:consolas,"Courier new",monospace;font-size:13px;';
	            codeEditor.getScrollerElement().style.cssText = 'position:absolute;left:0;top:0;width:100%;height:100%;';
	            codeEditor.refresh();
	            return {
	                getCodeMirror:function(){
	                    return codeEditor;
	                },
	                setContent: function (content){
	                    codeEditor.setValue(content);
	                },
	                getContent: function (){
	                    return codeEditor.getValue();
	                },
	                select: function (){
	                    codeEditor.focus();
	                },
	                dispose: function (){
	                    holder.removeChild(dom);
	                    dom = null;
	                    codeEditor = null;
	                }
	            };
	        }
	    };
	
	    UE.plugins['source'] = function (){
	        var me = this;
	        var opt = this.options;
	        var sourceMode = false;
	        var sourceEditor;
	        var orgSetContent;
	        opt.sourceEditor = browser.ie  ? 'textarea' : (opt.sourceEditor || 'codemirror');
	
	        me.setOpt({
	            sourceEditorFirst:false
	        });
	        function createSourceEditor(holder){
	            return sourceEditors[opt.sourceEditor == 'codemirror' && window.CodeMirror ? 'codemirror' : 'textarea'](me, holder);
	        }
	
	        var bakCssText;
	        //解决在源码模式下getContent不能得到最新的内容问题
	        var oldGetContent,
	            bakAddress;
	
	        /**
	         * 切换源码模式和编辑模式
	         * @command source
	         * @method execCommand
	         * @param { String } cmd 命令字符串
	         * @example
	         * ```javascript
	         * editor.execCommand( 'source');
	         * ```
	         */
	
	        /**
	         * 查询当前编辑区域的状态是源码模式还是可视化模式
	         * @command source
	         * @method queryCommandState
	         * @param { String } cmd 命令字符串
	         * @return { int } 如果当前是源码编辑模式，返回1，否则返回0
	         * @example
	         * ```javascript
	         * editor.queryCommandState( 'source' );
	         * ```
	         */
	
	        me.commands['source'] = {
	            execCommand: function (){
	
	                sourceMode = !sourceMode;
	                if (sourceMode) {
	                    bakAddress = me.selection.getRange().createAddress(false,true);
	                    me.undoManger && me.undoManger.save(true);
	                    if(browser.gecko){
	                        me.body.contentEditable = false;
	                    }
	
	                    bakCssText = me.iframe.style.cssText;
	                    me.iframe.style.cssText += 'position:absolute;left:-32768px;top:-32768px;';
	
	
	                    me.fireEvent('beforegetcontent');
	                    var root = UE.htmlparser(me.body.innerHTML);
	                    me.filterOutputRule(root);
	                    root.traversal(function (node) {
	                        if (node.type == 'element') {
	                            switch (node.tagName) {
	                                case 'td':
	                                case 'th':
	                                case 'caption':
	                                if(node.children && node.children.length == 1){
	                                    if(node.firstChild().tagName == 'br' ){
	                                        node.removeChild(node.firstChild())
	                                    }
	                                };
	                                break;
	                                case 'pre':
	                                    node.innerText(node.innerText().replace(/&nbsp;/g,' '))
	
	                            }
	                        }
	                    });
	
	                    me.fireEvent('aftergetcontent');
	
	                    var content = root.toHtml(true);
	
	                    sourceEditor = createSourceEditor(me.iframe.parentNode);
	
	                    sourceEditor.setContent(content);
	
	                    orgSetContent = me.setContent;
	
	                    me.setContent = function(html){
	                        //这里暂时不触发事件，防止报错
	                        var root = UE.htmlparser(html);
	                        me.filterInputRule(root);
	                        html = root.toHtml();
	                        sourceEditor.setContent(html);
	                    };
	
	                    setTimeout(function (){
	                        sourceEditor.select();
	                        me.addListener('fullscreenchanged', function(){
	                            try{
	                                sourceEditor.getCodeMirror().refresh()
	                            }catch(e){}
	                        });
	                    });
	
	                    //重置getContent，源码模式下取值也能是最新的数据
	                    oldGetContent = me.getContent;
	                    me.getContent = function (){
	                        return sourceEditor.getContent() || '<p>' + (browser.ie ? '' : '<br/>')+'</p>';
	                    };
	                } else {
	                    me.iframe.style.cssText = bakCssText;
	                    var cont = sourceEditor.getContent() || '<p>' + (browser.ie ? '' : '<br/>')+'</p>';
	                    //处理掉block节点前后的空格,有可能会误命中，暂时不考虑
	                    cont = cont.replace(new RegExp('[\\r\\t\\n ]*<\/?(\\w+)\\s*(?:[^>]*)>','g'), function(a,b){
	                        if(b && !dtd.$inlineWithA[b.toLowerCase()]){
	                            return a.replace(/(^[\n\r\t ]*)|([\n\r\t ]*$)/g,'');
	                        }
	                        return a.replace(/(^[\n\r\t]*)|([\n\r\t]*$)/g,'')
	                    });
	
	                    me.setContent = orgSetContent;
	
	                    me.setContent(cont);
	                    sourceEditor.dispose();
	                    sourceEditor = null;
	                    //还原getContent方法
	                    me.getContent = oldGetContent;
	                    var first = me.body.firstChild;
	                    //trace:1106 都删除空了，下边会报错，所以补充一个p占位
	                    if(!first){
	                        me.body.innerHTML = '<p>'+(browser.ie?'':'<br/>')+'</p>';
	                        first = me.body.firstChild;
	                    }
	
	
	                    //要在ifm为显示时ff才能取到selection,否则报错
	                    //这里不能比较位置了
	                    me.undoManger && me.undoManger.save(true);
	
	                    if(browser.gecko){
	
	                        var input = document.createElement('input');
	                        input.style.cssText = 'position:absolute;left:0;top:-32768px';
	
	                        document.body.appendChild(input);
	
	                        me.body.contentEditable = false;
	                        setTimeout(function(){
	                            domUtils.setViewportOffset(input, { left: -32768, top: 0 });
	                            input.focus();
	                            setTimeout(function(){
	                                me.body.contentEditable = true;
	                                me.selection.getRange().moveToAddress(bakAddress).select(true);
	                                domUtils.remove(input);
	                            });
	
	                        });
	                    }else{
	                        //ie下有可能报错，比如在代码顶头的情况
	                        try{
	                            me.selection.getRange().moveToAddress(bakAddress).select(true);
	                        }catch(e){}
	
	                    }
	                }
	                this.fireEvent('sourcemodechanged', sourceMode);
	            },
	            queryCommandState: function (){
	                return sourceMode|0;
	            },
	            notNeedUndo : 1
	        };
	        var oldQueryCommandState = me.queryCommandState;
	
	        me.queryCommandState = function (cmdName){
	            cmdName = cmdName.toLowerCase();
	            if (sourceMode) {
	                //源码模式下可以开启的命令
	                return cmdName in {
	                    'source' : 1,
	                    'fullscreen' : 1
	                } ? 1 : -1
	            }
	            return oldQueryCommandState.apply(this, arguments);
	        };
	
	        if(opt.sourceEditor == "codemirror"){
	
	            me.addListener("ready",function(){
	                utils.loadFile(document,{
	                    src : opt.codeMirrorJsUrl || opt.UEDITOR_HOME_URL + "third-party/codemirror/codemirror.js",
	                    tag : "script",
	                    type : "text/javascript",
	                    defer : "defer"
	                },function(){
	                    if(opt.sourceEditorFirst){
	                        setTimeout(function(){
	                            me.execCommand("source");
	                        },0);
	                    }
	                });
	                utils.loadFile(document,{
	                    tag : "link",
	                    rel : "stylesheet",
	                    type : "text/css",
	                    href : opt.codeMirrorCssUrl || opt.UEDITOR_HOME_URL + "third-party/codemirror/codemirror.css"
	                });
	
	            });
	        }
	
	    };
	
	})();
	
	// plugins/enterkey.js
	///import core
	///import plugins/undo.js
	///commands 设置回车标签p或br
	///commandsName  EnterKey
	///commandsTitle  设置回车标签p或br
	/**
	 * @description 处理回车
	 * @author zhanyi
	 */
	UE.plugins['enterkey'] = function() {
	    var hTag,
	        me = this,
	        tag = me.options.enterTag;
	    me.addListener('keyup', function(type, evt) {
	
	        var keyCode = evt.keyCode || evt.which;
	        if (keyCode == 13) {
	            var range = me.selection.getRange(),
	                start = range.startContainer,
	                doSave;
	
	            //修正在h1-h6里边回车后不能嵌套p的问题
	            if (!browser.ie) {
	
	                if (/h\d/i.test(hTag)) {
	                    if (browser.gecko) {
	                        var h = domUtils.findParentByTagName(start, [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6','blockquote','caption','table'], true);
	                        if (!h) {
	                            me.document.execCommand('formatBlock', false, '<p>');
	                            doSave = 1;
	                        }
	                    } else {
	                        //chrome remove div
	                        if (start.nodeType == 1) {
	                            var tmp = me.document.createTextNode(''),div;
	                            range.insertNode(tmp);
	                            div = domUtils.findParentByTagName(tmp, 'div', true);
	                            if (div) {
	                                var p = me.document.createElement('p');
	                                while (div.firstChild) {
	                                    p.appendChild(div.firstChild);
	                                }
	                                div.parentNode.insertBefore(p, div);
	                                domUtils.remove(div);
	                                range.setStartBefore(tmp).setCursor();
	                                doSave = 1;
	                            }
	                            domUtils.remove(tmp);
	
	                        }
	                    }
	
	                    if (me.undoManger && doSave) {
	                        me.undoManger.save();
	                    }
	                }
	                //没有站位符，会出现多行的问题
	                browser.opera &&  range.select();
	            }else{
	                me.fireEvent('saveScene',true,true)
	            }
	        }
	    });
	
	    me.addListener('keydown', function(type, evt) {
	        var keyCode = evt.keyCode || evt.which;
	        if (keyCode == 13) {//回车
	            if(me.fireEvent('beforeenterkeydown')){
	                domUtils.preventDefault(evt);
	                return;
	            }
	            me.fireEvent('saveScene',true,true);
	            hTag = '';
	
	
	            var range = me.selection.getRange();
	
	            if (!range.collapsed) {
	                //跨td不能删
	                var start = range.startContainer,
	                    end = range.endContainer,
	                    startTd = domUtils.findParentByTagName(start, 'td', true),
	                    endTd = domUtils.findParentByTagName(end, 'td', true);
	                if (startTd && endTd && startTd !== endTd || !startTd && endTd || startTd && !endTd) {
	                    evt.preventDefault ? evt.preventDefault() : ( evt.returnValue = false);
	                    return;
	                }
	            }
	            if (tag == 'p') {
	
	
	                if (!browser.ie) {
	
	                    start = domUtils.findParentByTagName(range.startContainer, ['ol','ul','p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6','blockquote','caption'], true);
	
	                    //opera下执行formatblock会在table的场景下有问题，回车在opera原生支持很好，所以暂时在opera去掉调用这个原生的command
	                    //trace:2431
	                    if (!start && !browser.opera) {
	
	                        me.document.execCommand('formatBlock', false, '<p>');
	
	                        if (browser.gecko) {
	                            range = me.selection.getRange();
	                            start = domUtils.findParentByTagName(range.startContainer, 'p', true);
	                            start && domUtils.removeDirtyAttr(start);
	                        }
	
	
	                    } else {
	                        hTag = start.tagName;
	                        start.tagName.toLowerCase() == 'p' && browser.gecko && domUtils.removeDirtyAttr(start);
	                    }
	
	                }
	
	            } else {
	                evt.preventDefault ? evt.preventDefault() : ( evt.returnValue = false);
	
	                if (!range.collapsed) {
	                    range.deleteContents();
	                    start = range.startContainer;
	                    if (start.nodeType == 1 && (start = start.childNodes[range.startOffset])) {
	                        while (start.nodeType == 1) {
	                            if (dtd.$empty[start.tagName]) {
	                                range.setStartBefore(start).setCursor();
	                                if (me.undoManger) {
	                                    me.undoManger.save();
	                                }
	                                return false;
	                            }
	                            if (!start.firstChild) {
	                                var br = range.document.createElement('br');
	                                start.appendChild(br);
	                                range.setStart(start, 0).setCursor();
	                                if (me.undoManger) {
	                                    me.undoManger.save();
	                                }
	                                return false;
	                            }
	                            start = start.firstChild;
	                        }
	                        if (start === range.startContainer.childNodes[range.startOffset]) {
	                            br = range.document.createElement('br');
	                            range.insertNode(br).setCursor();
	
	                        } else {
	                            range.setStart(start, 0).setCursor();
	                        }
	
	
	                    } else {
	                        br = range.document.createElement('br');
	                        range.insertNode(br).setStartAfter(br).setCursor();
	                    }
	
	
	                } else {
	                    br = range.document.createElement('br');
	                    range.insertNode(br);
	                    var parent = br.parentNode;
	                    if (parent.lastChild === br) {
	                        br.parentNode.insertBefore(br.cloneNode(true), br);
	                        range.setStartBefore(br);
	                    } else {
	                        range.setStartAfter(br);
	                    }
	                    range.setCursor();
	
	                }
	
	            }
	
	        }
	    });
	};
	
	
	// plugins/keystrokes.js
	/* 处理特殊键的兼容性问题 */
	UE.plugins['keystrokes'] = function() {
	    var me = this;
	    var collapsed = true;
	    me.addListener('keydown', function(type, evt) {
	        var keyCode = evt.keyCode || evt.which,
	            rng = me.selection.getRange();
	
	        //处理全选的情况
	        if(!rng.collapsed && !(evt.ctrlKey || evt.shiftKey || evt.altKey || evt.metaKey) && (keyCode >= 65 && keyCode <=90
	            || keyCode >= 48 && keyCode <= 57 ||
	            keyCode >= 96 && keyCode <= 111 || {
	                    13:1,
	                    8:1,
	                    46:1
	                }[keyCode])
	            ){
	
	            var tmpNode = rng.startContainer;
	            if(domUtils.isFillChar(tmpNode)){
	                rng.setStartBefore(tmpNode)
	            }
	            tmpNode = rng.endContainer;
	            if(domUtils.isFillChar(tmpNode)){
	                rng.setEndAfter(tmpNode)
	            }
	            rng.txtToElmBoundary();
	            //结束边界可能放到了br的前边，要把br包含进来
	            // x[xxx]<br/>
	            if(rng.endContainer && rng.endContainer.nodeType == 1){
	                tmpNode = rng.endContainer.childNodes[rng.endOffset];
	                if(tmpNode && domUtils.isBr(tmpNode)){
	                    rng.setEndAfter(tmpNode);
	                }
	            }
	            if(rng.startOffset == 0){
	                tmpNode = rng.startContainer;
	                if(domUtils.isBoundaryNode(tmpNode,'firstChild') ){
	                    tmpNode = rng.endContainer;
	                    if(rng.endOffset == (tmpNode.nodeType == 3 ? tmpNode.nodeValue.length : tmpNode.childNodes.length) && domUtils.isBoundaryNode(tmpNode,'lastChild')){
	                        me.fireEvent('saveScene');
	                        me.body.innerHTML = '<p>'+(browser.ie ? '' : '<br/>')+'</p>';
	                        rng.setStart(me.body.firstChild,0).setCursor(false,true);
	                        me._selectionChange();
	                        return;
	                    }
	                }
	            }
	        }
	
	        //处理backspace
	        if (keyCode == keymap.Backspace) {
	            rng = me.selection.getRange();
	            collapsed = rng.collapsed;
	            if(me.fireEvent('delkeydown',evt)){
	                return;
	            }
	            var start,end;
	            //避免按两次删除才能生效的问题
	            if(rng.collapsed && rng.inFillChar()){
	                start = rng.startContainer;
	
	                if(domUtils.isFillChar(start)){
	                    rng.setStartBefore(start).shrinkBoundary(true).collapse(true);
	                    domUtils.remove(start)
	                }else{
	                    start.nodeValue = start.nodeValue.replace(new RegExp('^' + domUtils.fillChar ),'');
	                    rng.startOffset--;
	                    rng.collapse(true).select(true)
	                }
	            }
	
	            //解决选中control元素不能删除的问题
	            if (start = rng.getClosedNode()) {
	                me.fireEvent('saveScene');
	                rng.setStartBefore(start);
	                domUtils.remove(start);
	                rng.setCursor();
	                me.fireEvent('saveScene');
	                domUtils.preventDefault(evt);
	                return;
	            }
	            //阻止在table上的删除
	            if (!browser.ie) {
	                start = domUtils.findParentByTagName(rng.startContainer, 'table', true);
	                end = domUtils.findParentByTagName(rng.endContainer, 'table', true);
	                if (start && !end || !start && end || start !== end) {
	                    evt.preventDefault();
	                    return;
	                }
	            }
	
	        }
	        //处理tab键的逻辑
	        if (keyCode == keymap.Tab) {
	            //不处理以下标签
	            var excludeTagNameForTabKey = {
	                'ol' : 1,
	                'ul' : 1,
	                'table':1
	            };
	            //处理组件里的tab按下事件
	            if(me.fireEvent('tabkeydown',evt)){
	                domUtils.preventDefault(evt);
	                return;
	            }
	            var range = me.selection.getRange();
	            me.fireEvent('saveScene');
	            for (var i = 0,txt = '',tabSize = me.options.tabSize|| 4,tabNode =  me.options.tabNode || '&nbsp;'; i < tabSize; i++) {
	                txt += tabNode;
	            }
	            var span = me.document.createElement('span');
	            span.innerHTML = txt + domUtils.fillChar;
	            if (range.collapsed) {
	                range.insertNode(span.cloneNode(true).firstChild).setCursor(true);
	            } else {
	                var filterFn = function(node) {
	                    return domUtils.isBlockElm(node) && !excludeTagNameForTabKey[node.tagName.toLowerCase()]
	
	                };
	                //普通的情况
	                start = domUtils.findParent(range.startContainer, filterFn,true);
	                end = domUtils.findParent(range.endContainer, filterFn,true);
	                if (start && end && start === end) {
	                    range.deleteContents();
	                    range.insertNode(span.cloneNode(true).firstChild).setCursor(true);
	                } else {
	                    var bookmark = range.createBookmark();
	                    range.enlarge(true);
	                    var bookmark2 = range.createBookmark(),
	                        current = domUtils.getNextDomNode(bookmark2.start, false, filterFn);
	                    while (current && !(domUtils.getPosition(current, bookmark2.end) & domUtils.POSITION_FOLLOWING)) {
	                        current.insertBefore(span.cloneNode(true).firstChild, current.firstChild);
	                        current = domUtils.getNextDomNode(current, false, filterFn);
	                    }
	                    range.moveToBookmark(bookmark2).moveToBookmark(bookmark).select();
	                }
	            }
	            domUtils.preventDefault(evt)
	        }
	        //trace:1634
	        //ff的del键在容器空的时候，也会删除
	        if(browser.gecko && keyCode == 46){
	            range = me.selection.getRange();
	            if(range.collapsed){
	                start = range.startContainer;
	                if(domUtils.isEmptyBlock(start)){
	                    var parent = start.parentNode;
	                    while(domUtils.getChildCount(parent) == 1 && !domUtils.isBody(parent)){
	                        start = parent;
	                        parent = parent.parentNode;
	                    }
	                    if(start === parent.lastChild)
	                        evt.preventDefault();
	                    return;
	                }
	            }
	        }
	    });
	    me.addListener('keyup', function(type, evt) {
	        var keyCode = evt.keyCode || evt.which,
	            rng,me = this;
	        if(keyCode == keymap.Backspace){
	            if(me.fireEvent('delkeyup')){
	                return;
	            }
	            rng = me.selection.getRange();
	            if(rng.collapsed){
	                var tmpNode,
	                    autoClearTagName = ['h1','h2','h3','h4','h5','h6'];
	                if(tmpNode = domUtils.findParentByTagName(rng.startContainer,autoClearTagName,true)){
	                    if(domUtils.isEmptyBlock(tmpNode)){
	                        var pre = tmpNode.previousSibling;
	                        if(pre && pre.nodeName != 'TABLE'){
	                            domUtils.remove(tmpNode);
	                            rng.setStartAtLast(pre).setCursor(false,true);
	                            return;
	                        }else{
	                            var next = tmpNode.nextSibling;
	                            if(next && next.nodeName != 'TABLE'){
	                                domUtils.remove(tmpNode);
	                                rng.setStartAtFirst(next).setCursor(false,true);
	                                return;
	                            }
	                        }
	                    }
	                }
	                //处理当删除到body时，要重新给p标签展位
	                if(domUtils.isBody(rng.startContainer)){
	                    var tmpNode = domUtils.createElement(me.document,'p',{
	                        'innerHTML' : browser.ie ? domUtils.fillChar : '<br/>'
	                    });
	                    rng.insertNode(tmpNode).setStart(tmpNode,0).setCursor(false,true);
	                }
	            }
	
	
	            //chrome下如果删除了inline标签，浏览器会有记忆，在输入文字还是会套上刚才删除的标签，所以这里再选一次就不会了
	            if( !collapsed && (rng.startContainer.nodeType == 3 || rng.startContainer.nodeType == 1 && domUtils.isEmptyBlock(rng.startContainer))){
	                if(browser.ie){
	                    var span = rng.document.createElement('span');
	                    rng.insertNode(span).setStartBefore(span).collapse(true);
	                    rng.select();
	                    domUtils.remove(span)
	                }else{
	                    rng.select()
	                }
	
	            }
	        }
	
	
	    })
	};
	
	// plugins/fiximgclick.js
	///import core
	///commands 修复chrome下图片不能点击的问题，出现八个角可改变大小
	///commandsName  FixImgClick
	///commandsTitle  修复chrome下图片不能点击的问题，出现八个角可改变大小
	//修复chrome下图片不能点击的问题，出现八个角可改变大小
	
	UE.plugins['fiximgclick'] = (function () {
	
	    var elementUpdated = false;
	    function Scale() {
	        this.editor = null;
	        this.resizer = null;
	        this.cover = null;
	        this.doc = document;
	        this.prePos = {x: 0, y: 0};
	        this.startPos = {x: 0, y: 0};
	    }
	
	    (function () {
	        var rect = [
	            //[left, top, width, height]
	            [0, 0, -1, -1],
	            [0, 0, 0, -1],
	            [0, 0, 1, -1],
	            [0, 0, -1, 0],
	            [0, 0, 1, 0],
	            [0, 0, -1, 1],
	            [0, 0, 0, 1],
	            [0, 0, 1, 1]
	        ];
	
	        Scale.prototype = {
	            init: function (editor) {
	                var me = this;
	                me.editor = editor;
	                me.startPos = this.prePos = {x: 0, y: 0};
	                me.dragId = -1;
	
	                var hands = [],
	                    cover = me.cover = document.createElement('div'),
	                    resizer = me.resizer = document.createElement('div');
	
	                cover.id = me.editor.ui.id + '_imagescale_cover';
	                cover.style.cssText = 'position:absolute;display:none;z-index:' + (me.editor.options.zIndex) + ';filter:alpha(opacity=0); opacity:0;background:#CCC;';
	                domUtils.on(cover, 'mousedown click', function () {
	                    me.hide();
	                });
	
	                for (i = 0; i < 8; i++) {
	                    hands.push('<span class="edui-editor-imagescale-hand' + i + '"></span>');
	                }
	                resizer.id = me.editor.ui.id + '_imagescale';
	                resizer.className = 'edui-editor-imagescale';
	                resizer.innerHTML = hands.join('');
	                resizer.style.cssText += ';display:none;border:1px solid #3b77ff;z-index:' + (me.editor.options.zIndex) + ';';
	
	                me.editor.ui.getDom().appendChild(cover);
	                me.editor.ui.getDom().appendChild(resizer);
	
	                me.initStyle();
	                me.initEvents();
	            },
	            initStyle: function () {
	                utils.cssRule('imagescale', '.edui-editor-imagescale{display:none;position:absolute;border:1px solid #38B2CE;cursor:hand;-webkit-box-sizing: content-box;-moz-box-sizing: content-box;box-sizing: content-box;}' +
	                    '.edui-editor-imagescale span{position:absolute;width:6px;height:6px;overflow:hidden;font-size:0px;display:block;background-color:#3C9DD0;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand0{cursor:nw-resize;top:0;margin-top:-4px;left:0;margin-left:-4px;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand1{cursor:n-resize;top:0;margin-top:-4px;left:50%;margin-left:-4px;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand2{cursor:ne-resize;top:0;margin-top:-4px;left:100%;margin-left:-3px;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand3{cursor:w-resize;top:50%;margin-top:-4px;left:0;margin-left:-4px;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand4{cursor:e-resize;top:50%;margin-top:-4px;left:100%;margin-left:-3px;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand5{cursor:sw-resize;top:100%;margin-top:-3px;left:0;margin-left:-4px;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand6{cursor:s-resize;top:100%;margin-top:-3px;left:50%;margin-left:-4px;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand7{cursor:se-resize;top:100%;margin-top:-3px;left:100%;margin-left:-3px;}');
	            },
	            initEvents: function () {
	                var me = this;
	
	                me.startPos.x = me.startPos.y = 0;
	                me.isDraging = false;
	            },
	            _eventHandler: function (e) {
	                var me = this;
	                switch (e.type) {
	                    case 'mousedown':
	                        var hand = e.target || e.srcElement, hand;
	                        if (hand.className.indexOf('edui-editor-imagescale-hand') != -1 && me.dragId == -1) {
	                            me.dragId = hand.className.slice(-1);
	                            me.startPos.x = me.prePos.x = e.clientX;
	                            me.startPos.y = me.prePos.y = e.clientY;
	                            domUtils.on(me.doc,'mousemove', me.proxy(me._eventHandler, me));
	                        }
	                        break;
	                    case 'mousemove':
	                        if (me.dragId != -1) {
	                            me.updateContainerStyle(me.dragId, {x: e.clientX - me.prePos.x, y: e.clientY - me.prePos.y});
	                            me.prePos.x = e.clientX;
	                            me.prePos.y = e.clientY;
	                            elementUpdated = true;
	                            me.updateTargetElement();
	
	                        }
	                        break;
	                    case 'mouseup':
	                        if (me.dragId != -1) {
	                            me.updateContainerStyle(me.dragId, {x: e.clientX - me.prePos.x, y: e.clientY - me.prePos.y});
	                            me.updateTargetElement();
	                            if (me.target.parentNode) me.attachTo(me.target);
	                            me.dragId = -1;
	                        }
	                        domUtils.un(me.doc,'mousemove', me.proxy(me._eventHandler, me));
	                        //修复只是点击挪动点，但没有改变大小，不应该触发contentchange
	                        if(elementUpdated){
	                            elementUpdated = false;
	                            me.editor.fireEvent('contentchange');
	                        }
	
	                        break;
	                    default:
	                        break;
	                }
	            },
	            updateTargetElement: function () {
	                var me = this;
	                domUtils.setStyles(me.target, {
	                    'width': me.resizer.style.width,
	                    'height': me.resizer.style.height
	                });
	                me.target.width = parseInt(me.resizer.style.width);
	                me.target.height = parseInt(me.resizer.style.height);
	                me.attachTo(me.target);
	            },
	            updateContainerStyle: function (dir, offset) {
	                var me = this,
	                    dom = me.resizer, tmp;
	
	                if (rect[dir][0] != 0) {
	                    tmp = parseInt(dom.style.left) + offset.x;
	                    dom.style.left = me._validScaledProp('left', tmp) + 'px';
	                }
	                if (rect[dir][1] != 0) {
	                    tmp = parseInt(dom.style.top) + offset.y;
	                    dom.style.top = me._validScaledProp('top', tmp) + 'px';
	                }
	                if (rect[dir][2] != 0) {
	                    tmp = dom.clientWidth + rect[dir][2] * offset.x;
	                    dom.style.width = me._validScaledProp('width', tmp) + 'px';
	                }
	                if (rect[dir][3] != 0) {
	                    tmp = dom.clientHeight + rect[dir][3] * offset.y;
	                    dom.style.height = me._validScaledProp('height', tmp) + 'px';
	                }
	            },
	            _validScaledProp: function (prop, value) {
	                var ele = this.resizer,
	                    wrap = document;
	
	                value = isNaN(value) ? 0 : value;
	                switch (prop) {
	                    case 'left':
	                        return value < 0 ? 0 : (value + ele.clientWidth) > wrap.clientWidth ? wrap.clientWidth - ele.clientWidth : value;
	                    case 'top':
	                        return value < 0 ? 0 : (value + ele.clientHeight) > wrap.clientHeight ? wrap.clientHeight - ele.clientHeight : value;
	                    case 'width':
	                        return value <= 0 ? 1 : (value + ele.offsetLeft) > wrap.clientWidth ? wrap.clientWidth - ele.offsetLeft : value;
	                    case 'height':
	                        return value <= 0 ? 1 : (value + ele.offsetTop) > wrap.clientHeight ? wrap.clientHeight - ele.offsetTop : value;
	                }
	            },
	            hideCover: function () {
	                this.cover.style.display = 'none';
	            },
	            showCover: function () {
	                var me = this,
	                    editorPos = domUtils.getXY(me.editor.ui.getDom()),
	                    iframePos = domUtils.getXY(me.editor.iframe);
	
	                domUtils.setStyles(me.cover, {
	                    'width': me.editor.iframe.offsetWidth + 'px',
	                    'height': me.editor.iframe.offsetHeight + 'px',
	                    'top': iframePos.y - editorPos.y + 'px',
	                    'left': iframePos.x - editorPos.x + 'px',
	                    'position': 'absolute',
	                    'display': ''
	                })
	            },
	            show: function (targetObj) {
	                var me = this;
	                me.resizer.style.display = 'block';
	                if(targetObj) me.attachTo(targetObj);
	
	                domUtils.on(this.resizer, 'mousedown', me.proxy(me._eventHandler, me));
	                domUtils.on(me.doc, 'mouseup', me.proxy(me._eventHandler, me));
	
	                me.showCover();
	                me.editor.fireEvent('afterscaleshow', me);
	                me.editor.fireEvent('saveScene');
	            },
	            hide: function () {
	                var me = this;
	                me.hideCover();
	                me.resizer.style.display = 'none';
	
	                domUtils.un(me.resizer, 'mousedown', me.proxy(me._eventHandler, me));
	                domUtils.un(me.doc, 'mouseup', me.proxy(me._eventHandler, me));
	                me.editor.fireEvent('afterscalehide', me);
	            },
	            proxy: function( fn, context ) {
	                return function(e) {
	                    return fn.apply( context || this, arguments);
	                };
	            },
	            attachTo: function (targetObj) {
	                var me = this,
	                    target = me.target = targetObj,
	                    resizer = this.resizer,
	                    imgPos = domUtils.getXY(target),
	                    iframePos = domUtils.getXY(me.editor.iframe),
	                    editorPos = domUtils.getXY(resizer.parentNode);
	
	                domUtils.setStyles(resizer, {
	                    'width': target.width + 'px',
	                    'height': target.height + 'px',
	                    'left': iframePos.x + imgPos.x - me.editor.document.body.scrollLeft - editorPos.x - parseInt(resizer.style.borderLeftWidth) + 'px',
	                    'top': iframePos.y + imgPos.y - me.editor.document.body.scrollTop - editorPos.y - parseInt(resizer.style.borderTopWidth) + 'px'
	                });
	            }
	        }
	    })();
	
	    return function () {
	        var me = this,
	            imageScale;
	
	        me.setOpt('imageScaleEnabled', true);
	
	        if ( !browser.ie && me.options.imageScaleEnabled) {
	            me.addListener('click', function (type, e) {
	
	                var range = me.selection.getRange(),
	                    img = range.getClosedNode();
	
	                if (img && img.tagName == 'IMG' && me.body.contentEditable!="false") {
	
	                    if (img.className.indexOf("edui-faked-music") != -1 ||
	                        img.getAttribute("anchorname") ||
	                        domUtils.hasClass(img, 'loadingclass') ||
	                        domUtils.hasClass(img, 'loaderrorclass')) { return }
	
	                    if (!imageScale) {
	                        imageScale = new Scale();
	                        imageScale.init(me);
	                        me.ui.getDom().appendChild(imageScale.resizer);
	
	                        var _keyDownHandler = function (e) {
	                            imageScale.hide();
	                            if(imageScale.target) me.selection.getRange().selectNode(imageScale.target).select();
	                        }, _mouseDownHandler = function (e) {
	                            var ele = e.target || e.srcElement;
	                            if (ele && (ele.className===undefined || ele.className.indexOf('edui-editor-imagescale') == -1)) {
	                                _keyDownHandler(e);
	                            }
	                        }, timer;
	
	                        me.addListener('afterscaleshow', function (e) {
	                            me.addListener('beforekeydown', _keyDownHandler);
	                            me.addListener('beforemousedown', _mouseDownHandler);
	                            domUtils.on(document, 'keydown', _keyDownHandler);
	                            domUtils.on(document,'mousedown', _mouseDownHandler);
	                            me.selection.getNative().removeAllRanges();
	                        });
	                        me.addListener('afterscalehide', function (e) {
	                            me.removeListener('beforekeydown', _keyDownHandler);
	                            me.removeListener('beforemousedown', _mouseDownHandler);
	                            domUtils.un(document, 'keydown', _keyDownHandler);
	                            domUtils.un(document,'mousedown', _mouseDownHandler);
	                            var target = imageScale.target;
	                            if (target.parentNode) {
	                                me.selection.getRange().selectNode(target).select();
	                            }
	                        });
	                        //TODO 有iframe的情况，mousedown不能往下传。。
	                        domUtils.on(imageScale.resizer, 'mousedown', function (e) {
	                            me.selection.getNative().removeAllRanges();
	                            var ele = e.target || e.srcElement;
	                            if (ele && ele.className.indexOf('edui-editor-imagescale-hand') == -1) {
	                                timer = setTimeout(function () {
	                                    imageScale.hide();
	                                    if(imageScale.target) me.selection.getRange().selectNode(ele).select();
	                                }, 200);
	                            }
	                        });
	                        domUtils.on(imageScale.resizer, 'mouseup', function (e) {
	                            var ele = e.target || e.srcElement;
	                            if (ele && ele.className.indexOf('edui-editor-imagescale-hand') == -1) {
	                                clearTimeout(timer);
	                            }
	                        });
	                    }
	                    imageScale.show(img);
	                } else {
	                    if (imageScale && imageScale.resizer.style.display != 'none') imageScale.hide();
	                }
	            });
	        }
	
	        if (browser.webkit) {
	            me.addListener('click', function (type, e) {
	                if (e.target.tagName == 'IMG' && me.body.contentEditable!="false") {
	                    var range = new dom.Range(me.document);
	                    range.selectNode(e.target).select();
	                }
	            });
	        }
	    }
	})();
	
	// plugins/autolink.js
	///import core
	///commands 为非ie浏览器自动添加a标签
	///commandsName  AutoLink
	///commandsTitle  自动增加链接
	/**
	 * @description 为非ie浏览器自动添加a标签
	 * @author zhanyi
	 */
	
	UE.plugin.register('autolink',function(){
	    var cont = 0;
	
	    return !browser.ie ? {
	
	            bindEvents:{
	                'reset' : function(){
	                    cont = 0;
	                },
	                'keydown':function(type, evt) {
	                    var me = this;
	                    var keyCode = evt.keyCode || evt.which;
	
	                    if (keyCode == 32 || keyCode == 13) {
	
	                        var sel = me.selection.getNative(),
	                            range = sel.getRangeAt(0).cloneRange(),
	                            offset,
	                            charCode;
	
	                        var start = range.startContainer;
	                        while (start.nodeType == 1 && range.startOffset > 0) {
	                            start = range.startContainer.childNodes[range.startOffset - 1];
	                            if (!start){
	                                break;
	                            }
	                            range.setStart(start, start.nodeType == 1 ? start.childNodes.length : start.nodeValue.length);
	                            range.collapse(true);
	                            start = range.startContainer;
	                        }
	
	                        do{
	                            if (range.startOffset == 0) {
	                                start = range.startContainer.previousSibling;
	
	                                while (start && start.nodeType == 1) {
	                                    start = start.lastChild;
	                                }
	                                if (!start || domUtils.isFillChar(start)){
	                                    break;
	                                }
	                                offset = start.nodeValue.length;
	                            } else {
	                                start = range.startContainer;
	                                offset = range.startOffset;
	                            }
	                            range.setStart(start, offset - 1);
	                            charCode = range.toString().charCodeAt(0);
	                        } while (charCode != 160 && charCode != 32);
	
	                        if (range.toString().replace(new RegExp(domUtils.fillChar, 'g'), '').match(/(?:https?:\/\/|ssh:\/\/|ftp:\/\/|file:\/|www\.)/i)) {
	                            while(range.toString().length){
	                                if(/^(?:https?:\/\/|ssh:\/\/|ftp:\/\/|file:\/|www\.)/i.test(range.toString())){
	                                    break;
	                                }
	                                try{
	                                    range.setStart(range.startContainer,range.startOffset+1);
	                                }catch(e){
	                                    //trace:2121
	                                    var start = range.startContainer;
	                                    while(!(next = start.nextSibling)){
	                                        if(domUtils.isBody(start)){
	                                            return;
	                                        }
	                                        start = start.parentNode;
	
	                                    }
	                                    range.setStart(next,0);
	
	                                }
	
	                            }
	                            //range的开始边界已经在a标签里的不再处理
	                            if(domUtils.findParentByTagName(range.startContainer,'a',true)){
	                                return;
	                            }
	                            var a = me.document.createElement('a'),text = me.document.createTextNode(' '),href;
	
	                            me.undoManger && me.undoManger.save();
	                            a.appendChild(range.extractContents());
	                            a.href = a.innerHTML = a.innerHTML.replace(/<[^>]+>/g,'');
	                            href = a.getAttribute("href").replace(new RegExp(domUtils.fillChar,'g'),'');
	                            href = /^(?:https?:\/\/)/ig.test(href) ? href : "http://"+ href;
	                            a.setAttribute('_src',utils.html(href));
	                            a.href = utils.html(href);
	
	                            range.insertNode(a);
	                            a.parentNode.insertBefore(text, a.nextSibling);
	                            range.setStart(text, 0);
	                            range.collapse(true);
	                            sel.removeAllRanges();
	                            sel.addRange(range);
	                            me.undoManger && me.undoManger.save();
	                        }
	                    }
	                }
	            }
	        }:{}
	    },function(){
	        var keyCodes = {
	            37:1, 38:1, 39:1, 40:1,
	            13:1,32:1
	        };
	        function checkIsCludeLink(node){
	            if(node.nodeType == 3){
	                return null
	            }
	            if(node.nodeName == 'A'){
	                return node;
	            }
	            var lastChild = node.lastChild;
	
	            while(lastChild){
	                if(lastChild.nodeName == 'A'){
	                    return lastChild;
	                }
	                if(lastChild.nodeType == 3){
	                    if(domUtils.isWhitespace(lastChild)){
	                        lastChild = lastChild.previousSibling;
	                        continue;
	                    }
	                    return null
	                }
	                lastChild = lastChild.lastChild;
	            }
	        }
	        browser.ie && this.addListener('keyup',function(cmd,evt){
	            var me = this,keyCode = evt.keyCode;
	            if(keyCodes[keyCode]){
	                var rng = me.selection.getRange();
	                var start = rng.startContainer;
	
	                if(keyCode == 13){
	                    while(start && !domUtils.isBody(start) && !domUtils.isBlockElm(start)){
	                        start = start.parentNode;
	                    }
	                    if(start && !domUtils.isBody(start) && start.nodeName == 'P'){
	                        var pre = start.previousSibling;
	                        if(pre && pre.nodeType == 1){
	                            var pre = checkIsCludeLink(pre);
	                            if(pre && !pre.getAttribute('_href')){
	                                domUtils.remove(pre,true);
	                            }
	                        }
	                    }
	                }else if(keyCode == 32 ){
	                    if(start.nodeType == 3 && /^\s$/.test(start.nodeValue)){
	                        start = start.previousSibling;
	                        if(start && start.nodeName == 'A' && !start.getAttribute('_href')){
	                            domUtils.remove(start,true);
	                        }
	                    }
	                }else {
	                    start = domUtils.findParentByTagName(start,'a',true);
	                    if(start && !start.getAttribute('_href')){
	                        var bk = rng.createBookmark();
	
	                        domUtils.remove(start,true);
	                        rng.moveToBookmark(bk).select(true)
	                    }
	                }
	
	            }
	
	
	        });
	    }
	);
	
	// plugins/autoheight.js
	///import core
	///commands 当输入内容超过编辑器高度时，编辑器自动增高
	///commandsName  AutoHeight,autoHeightEnabled
	///commandsTitle  自动增高
	/**
	 * @description 自动伸展
	 * @author zhanyi
	 */
	UE.plugins['autoheight'] = function () {
	    var me = this;
	    //提供开关，就算加载也可以关闭
	    me.autoHeightEnabled = me.options.autoHeightEnabled !== false;
	    if (!me.autoHeightEnabled) {
	        return;
	    }
	
	    var bakOverflow,
	        lastHeight = 0,
	        options = me.options,
	        currentHeight,
	        timer;
	
	    function adjustHeight() {
	        var me = this;
	        clearTimeout(timer);
	        if(isFullscreen)return;
	        if (!me.queryCommandState || me.queryCommandState && me.queryCommandState('source') != 1) {
	            timer = setTimeout(function(){
	
	                var node = me.body.lastChild;
	                while(node && node.nodeType != 1){
	                    node = node.previousSibling;
	                }
	                if(node && node.nodeType == 1){
	                    node.style.clear = 'both';
	                    currentHeight = Math.max(domUtils.getXY(node).y + node.offsetHeight + 25 ,Math.max(options.minFrameHeight, options.initialFrameHeight)) ;
	                    if (currentHeight != lastHeight) {
	                        if (currentHeight !== parseInt(me.iframe.parentNode.style.height)) {
	                            me.iframe.parentNode.style.height = currentHeight + 'px';
	                        }
	                        me.body.style.height = currentHeight + 'px';
	                        lastHeight = currentHeight;
	                    }
	                    domUtils.removeStyle(node,'clear');
	                }
	
	
	            },50)
	        }
	    }
	    var isFullscreen;
	    me.addListener('fullscreenchanged',function(cmd,f){
	        isFullscreen = f
	    });
	    me.addListener('destroy', function () {
	        me.removeListener('contentchange afterinserthtml keyup mouseup',adjustHeight)
	    });
	    me.enableAutoHeight = function () {
	        var me = this;
	        if (!me.autoHeightEnabled) {
	            return;
	        }
	        var doc = me.document;
	        me.autoHeightEnabled = true;
	        bakOverflow = doc.body.style.overflowY;
	        doc.body.style.overflowY = 'hidden';
	        me.addListener('contentchange afterinserthtml keyup mouseup',adjustHeight);
	        //ff不给事件算得不对
	
	        setTimeout(function () {
	            adjustHeight.call(me);
	        }, browser.gecko ? 100 : 0);
	        me.fireEvent('autoheightchanged', me.autoHeightEnabled);
	    };
	    me.disableAutoHeight = function () {
	
	        me.body.style.overflowY = bakOverflow || '';
	
	        me.removeListener('contentchange', adjustHeight);
	        me.removeListener('keyup', adjustHeight);
	        me.removeListener('mouseup', adjustHeight);
	        me.autoHeightEnabled = false;
	        me.fireEvent('autoheightchanged', me.autoHeightEnabled);
	    };
	
	    me.on('setHeight',function(){
	        me.disableAutoHeight()
	    });
	    me.addListener('ready', function () {
	        me.enableAutoHeight();
	        //trace:1764
	        var timer;
	        domUtils.on(browser.ie ? me.body : me.document, browser.webkit ? 'dragover' : 'drop', function () {
	            clearTimeout(timer);
	            timer = setTimeout(function () {
	                //trace:3681
	                adjustHeight.call(me);
	            }, 100);
	
	        });
	        //修复内容过多时，回到顶部，顶部内容被工具栏遮挡问题
	        var lastScrollY;
	        window.onscroll = function(){
	            if(lastScrollY === null){
	                lastScrollY = this.scrollY
	            }else if(this.scrollY == 0 && lastScrollY != 0){
	                me.window.scrollTo(0,0);
	                lastScrollY = null;
	            }
	        }
	    });
	
	
	};
	
	
	
	// plugins/autofloat.js
	///import core
	///commands 悬浮工具栏
	///commandsName  AutoFloat,autoFloatEnabled
	///commandsTitle  悬浮工具栏
	/**
	 *  modified by chengchao01
	 *  注意： 引入此功能后，在IE6下会将body的背景图片覆盖掉！
	 */
	UE.plugins['autofloat'] = function() {
	    var me = this,
	        lang = me.getLang();
	    me.setOpt({
	        topOffset:0
	    });
	    var optsAutoFloatEnabled = me.options.autoFloatEnabled !== false,
	        topOffset = me.options.topOffset;
	
	
	    //如果不固定toolbar的位置，则直接退出
	    if(!optsAutoFloatEnabled){
	        return;
	    }
	    var uiUtils = UE.ui.uiUtils,
	        LteIE6 = browser.ie && browser.version <= 6,
	        quirks = browser.quirks;
	
	    function checkHasUI(){
	        if(!UE.ui){
	            alert(lang.autofloatMsg);
	            return 0;
	        }
	        return 1;
	    }
	    function fixIE6FixedPos(){
	        var docStyle = document.body.style;
	        docStyle.backgroundImage = 'url("about:blank")';
	        docStyle.backgroundAttachment = 'fixed';
	    }
	    var	bakCssText,
	        placeHolder = document.createElement('div'),
	        toolbarBox,orgTop,
	        getPosition,
	        flag =true;   //ie7模式下需要偏移
	    function setFloating(){
	        var toobarBoxPos = domUtils.getXY(toolbarBox),
	            origalFloat = domUtils.getComputedStyle(toolbarBox,'position'),
	            origalLeft = domUtils.getComputedStyle(toolbarBox,'left');
	        toolbarBox.style.width = toolbarBox.offsetWidth + 'px';
	        toolbarBox.style.zIndex = me.options.zIndex * 1 + 1;
	        toolbarBox.parentNode.insertBefore(placeHolder, toolbarBox);
	        if (LteIE6 || (quirks && browser.ie)) {
	            if(toolbarBox.style.position != 'absolute'){
	                toolbarBox.style.position = 'absolute';
	            }
	            toolbarBox.style.top = (document.body.scrollTop||document.documentElement.scrollTop) - orgTop + topOffset  + 'px';
	        } else {
	            if (browser.ie7Compat && flag) {
	                flag = false;
	                toolbarBox.style.left =  domUtils.getXY(toolbarBox).x - document.documentElement.getBoundingClientRect().left+2  + 'px';
	            }
	            if(toolbarBox.style.position != 'fixed'){
	                toolbarBox.style.position = 'fixed';
	                toolbarBox.style.top = topOffset +"px";
	                ((origalFloat == 'absolute' || origalFloat == 'relative') && parseFloat(origalLeft)) && (toolbarBox.style.left = toobarBoxPos.x + 'px');
	            }
	        }
	    }
	    function unsetFloating(){
	        flag = true;
	        if(placeHolder.parentNode){
	            placeHolder.parentNode.removeChild(placeHolder);
	        }
	
	        toolbarBox.style.cssText = bakCssText;
	    }
	
	    function updateFloating(){
	        var rect3 = getPosition(me.container);
	        var offset=me.options.toolbarTopOffset||0;
	        if (rect3.top < 0 && rect3.bottom - toolbarBox.offsetHeight > offset) {
	            setFloating();
	        }else{
	            unsetFloating();
	        }
	    }
	    var defer_updateFloating = utils.defer(function(){
	        updateFloating();
	    },browser.ie ? 200 : 100,true);
	
	    me.addListener('destroy',function(){
	        domUtils.un(window, ['scroll','resize'], updateFloating);
	        me.removeListener('keydown', defer_updateFloating);
	    });
	
	    me.addListener('ready', function(){
	        if(checkHasUI(me)){
	            //加载了ui组件，但在new时，没有加载ui，导致编辑器实例上没有ui类，所以这里做判断
	            if(!me.ui){
	                return;
	            }
	            getPosition = uiUtils.getClientRect;
	            toolbarBox = me.ui.getDom('toolbarbox');
	            orgTop = getPosition(toolbarBox).top;
	            bakCssText = toolbarBox.style.cssText;
	            placeHolder.style.height = toolbarBox.offsetHeight + 'px';
	            if(LteIE6){
	                fixIE6FixedPos();
	            }
	            domUtils.on(window, ['scroll','resize'], updateFloating);
	            me.addListener('keydown', defer_updateFloating);
	
	            me.addListener('beforefullscreenchange', function (t, enabled){
	                if (enabled) {
	                    unsetFloating();
	                }
	            });
	            me.addListener('fullscreenchanged', function (t, enabled){
	                if (!enabled) {
	                    updateFloating();
	                }
	            });
	            me.addListener('sourcemodechanged', function (t, enabled){
	                setTimeout(function (){
	                    updateFloating();
	                },0);
	            });
	            me.addListener("clearDoc",function(){
	                setTimeout(function(){
	                    updateFloating();
	                },0);
	
	            })
	        }
	    });
	};
	
	
	// plugins/video.js
	/**
	 * video插件， 为UEditor提供视频插入支持
	 * @file
	 * @since 1.2.6.1
	 */
	
	UE.plugins['video'] = function (){
	    var me =this;
	
	    /**
	     * 创建插入视频字符窜
	     * @param url 视频地址
	     * @param width 视频宽度
	     * @param height 视频高度
	     * @param align 视频对齐
	     * @param toEmbed 是否以flash代替显示
	     * @param addParagraph  是否需要添加P 标签
	     */
	    function creatInsertStr(url,width,height,id,align,classname,type){
	
	        url = utils.unhtmlForUrl(url);
	        align = utils.unhtml(align);
	        classname = utils.unhtml(classname);
	
	        width = parseInt(width, 10) || 0;
	        height = parseInt(height, 10) || 0;
	
	        var str;
	        switch (type){
	            case 'image':
	                str = '<img ' + (id ? 'id="' + id+'"' : '') + ' width="'+ width +'" height="' + height + '" _url="'+url+'" class="' + classname.replace(/\bvideo-js\b/, '') + '"'  +
	                    ' src="' + me.options.UEDITOR_HOME_URL+'themes/default/images/spacer.gif" style="background:url('+me.options.UEDITOR_HOME_URL+'themes/default/images/videologo.gif) no-repeat center center; border:1px solid gray;'+(align ? 'float:' + align + ';': '')+'" />'
	                break;
	            case 'embed':
	                str = '<embed type="application/x-shockwave-flash" class="' + classname + '" pluginspage="http://www.macromedia.com/go/getflashplayer"' +
	                    ' src="' +  utils.html(url) + '" width="' + width  + '" height="' + height  + '"'  + (align ? ' style="float:' + align + '"': '') +
	                    ' wmode="transparent" play="true" loop="false" menu="false" allowscriptaccess="never" allowfullscreen="true" >';
	                break;
	            case 'video':
	                var ext = url.substr(url.lastIndexOf('.') + 1);
	                if(ext == 'ogv') ext = 'ogg';
	                str = '<video' + (id ? ' id="' + id + '"' : '') + ' class="' + classname + ' video-js" ' + (align ? ' style="float:' + align + '"': '') +
	                    ' controls preload="none" width="' + width + '" height="' + height + '" src="' + url + '" data-setup="{}">' +
	                    '<source src="' + url + '" type="video/' + ext + '" /></video>';
	                break;
	        }
	        return str;
	    }
	
	    function switchImgAndVideo(root,img2video){
	        utils.each(root.getNodesByTagName(img2video ? 'img' : 'embed video'),function(node){
	            var className = node.getAttr('class');
	            if(className && className.indexOf('edui-faked-video') != -1){
	                var html = creatInsertStr( img2video ? node.getAttr('_url') : node.getAttr('src'),node.getAttr('width'),node.getAttr('height'),null,node.getStyle('float') || '',className,img2video ? 'embed':'image');
	                node.parentNode.replaceChild(UE.uNode.createElement(html),node);
	            }
	            if(className && className.indexOf('edui-upload-video') != -1){
	                var html = creatInsertStr( img2video ? node.getAttr('_url') : node.getAttr('src'),node.getAttr('width'),node.getAttr('height'),null,node.getStyle('float') || '',className,img2video ? 'video':'image');
	                node.parentNode.replaceChild(UE.uNode.createElement(html),node);
	            }
	        })
	    }
	
	    me.addOutputRule(function(root){
	        switchImgAndVideo(root,true)
	    });
	    me.addInputRule(function(root){
	        switchImgAndVideo(root)
	    });
	
	    /**
	     * 插入视频
	     * @command insertvideo
	     * @method execCommand
	     * @param { String } cmd 命令字符串
	     * @param { Object } videoAttr 键值对对象， 描述一个视频的所有属性
	     * @example
	     * ```javascript
	     *
	     * var videoAttr = {
	     *      //视频地址
	     *      url: 'http://www.youku.com/xxx',
	     *      //视频宽高值， 单位px
	     *      width: 200,
	     *      height: 100
	     * };
	     *
	     * //editor 是编辑器实例
	     * //向编辑器插入单个视频
	     * editor.execCommand( 'insertvideo', videoAttr );
	     * ```
	     */
	
	    /**
	     * 插入视频
	     * @command insertvideo
	     * @method execCommand
	     * @param { String } cmd 命令字符串
	     * @param { Array } videoArr 需要插入的视频的数组， 其中的每一个元素都是一个键值对对象， 描述了一个视频的所有属性
	     * @example
	     * ```javascript
	     *
	     * var videoAttr1 = {
	     *      //视频地址
	     *      url: 'http://www.youku.com/xxx',
	     *      //视频宽高值， 单位px
	     *      width: 200,
	     *      height: 100
	     * },
	     * videoAttr2 = {
	     *      //视频地址
	     *      url: 'http://www.youku.com/xxx',
	     *      //视频宽高值， 单位px
	     *      width: 200,
	     *      height: 100
	     * }
	     *
	     * //editor 是编辑器实例
	     * //该方法将会向编辑器内插入两个视频
	     * editor.execCommand( 'insertvideo', [ videoAttr1, videoAttr2 ] );
	     * ```
	     */
	
	    /**
	     * 查询当前光标所在处是否是一个视频
	     * @command insertvideo
	     * @method queryCommandState
	     * @param { String } cmd 需要查询的命令字符串
	     * @return { int } 如果当前光标所在处的元素是一个视频对象， 则返回1，否则返回0
	     * @example
	     * ```javascript
	     *
	     * //editor 是编辑器实例
	     * editor.queryCommandState( 'insertvideo' );
	     * ```
	     */
	    me.commands["insertvideo"] = {
	        execCommand: function (cmd, videoObjs, type){
	            videoObjs = utils.isArray(videoObjs)?videoObjs:[videoObjs];
	            var html = [],id = 'tmpVedio', cl;
	            for(var i=0,vi,len = videoObjs.length;i<len;i++){
	                vi = videoObjs[i];
	                cl = (type == 'upload' ? 'edui-upload-video video-js vjs-default-skin':'edui-faked-video');
	                html.push(creatInsertStr( vi.url, vi.width || 420,  vi.height || 280, id + i, null, cl, 'image'));
	            }
	            me.execCommand("inserthtml",html.join(""),true);
	            var rng = this.selection.getRange();
	            for(var i= 0,len=videoObjs.length;i<len;i++){
	                var img = this.document.getElementById('tmpVedio'+i);
	                domUtils.removeAttributes(img,'id');
	                rng.selectNode(img).select();
	                me.execCommand('imagefloat',videoObjs[i].align)
	            }
	        },
	        queryCommandState : function(){
	            var img = me.selection.getRange().getClosedNode(),
	                flag = img && (img.className == "edui-faked-video" || img.className.indexOf("edui-upload-video")!=-1);
	            return flag ? 1 : 0;
	        }
	    };
	};
	
	
	// plugins/table.core.js
	/**
	 * Created with JetBrains WebStorm.
	 * User: taoqili
	 * Date: 13-1-18
	 * Time: 上午11:09
	 * To change this template use File | Settings | File Templates.
	 */
	/**
	 * UE表格操作类
	 * @param table
	 * @constructor
	 */
	(function () {
	    var UETable = UE.UETable = function (table) {
	        this.table = table;
	        this.indexTable = [];
	        this.selectedTds = [];
	        this.cellsRange = {};
	        this.update(table);
	    };
	
	    //===以下为静态工具方法===
	    UETable.removeSelectedClass = function (cells) {
	        utils.each(cells, function (cell) {
	            domUtils.removeClasses(cell, "selectTdClass");
	        })
	    };
	    UETable.addSelectedClass = function (cells) {
	        utils.each(cells, function (cell) {
	            domUtils.addClass(cell, "selectTdClass");
	        })
	    };
	    UETable.isEmptyBlock = function (node) {
	        var reg = new RegExp(domUtils.fillChar, 'g');
	        if (node[browser.ie ? 'innerText' : 'textContent'].replace(/^\s*$/, '').replace(reg, '').length > 0) {
	            return 0;
	        }
	        for (var i in dtd.$isNotEmpty) if (dtd.$isNotEmpty.hasOwnProperty(i)) {
	            if (node.getElementsByTagName(i).length) {
	                return 0;
	            }
	        }
	        return 1;
	    };
	    UETable.getWidth = function (cell) {
	        if (!cell)return 0;
	        return parseInt(domUtils.getComputedStyle(cell, "width"), 10);
	    };
	
	    /**
	     * 获取单元格或者单元格组的“对齐”状态。 如果当前的检测对象是一个单元格组， 只有在满足所有单元格的 水平和竖直 对齐属性都相同的
	     * 条件时才会返回其状态值，否则将返回null； 如果当前只检测了一个单元格， 则直接返回当前单元格的对齐状态；
	     * @param table cell or table cells , 支持单个单元格dom对象 或者 单元格dom对象数组
	     * @return { align: 'left' || 'right' || 'center', valign: 'top' || 'middle' || 'bottom' } 或者 null
	     */
	    UETable.getTableCellAlignState = function ( cells ) {
	
	        !utils.isArray( cells ) && ( cells = [cells] );
	
	        var result = {},
	            status = ['align', 'valign'],
	            tempStatus = null,
	            isSame = true;//状态是否相同
	
	        utils.each( cells, function( cellNode ){
	
	            utils.each( status, function( currentState ){
	
	                tempStatus = cellNode.getAttribute( currentState );
	
	                if( !result[ currentState ] && tempStatus ) {
	                    result[ currentState ] = tempStatus;
	                } else if( !result[ currentState ] || ( tempStatus !== result[ currentState ] ) ) {
	                    isSame = false;
	                    return false;
	                }
	
	            } );
	
	            return isSame;
	
	        });
	
	        return isSame ? result : null;
	
	    };
	
	    /**
	     * 根据当前选区获取相关的table信息
	     * @return {Object}
	     */
	    UETable.getTableItemsByRange = function (editor) {
	        var start = editor.selection.getStart();
	
	        //ff下会选中bookmark
	        if( start && start.id && start.id.indexOf('_baidu_bookmark_start_') === 0 && start.nextSibling) {
	            start = start.nextSibling;
	        }
	
	        //在table或者td边缘有可能存在选中tr的情况
	        var cell = start && domUtils.findParentByTagName(start, ["td", "th"], true),
	            tr = cell && cell.parentNode,
	            caption = start && domUtils.findParentByTagName(start, 'caption', true),
	            table = caption ? caption.parentNode : tr && tr.parentNode.parentNode;
	
	        return {
	            cell:cell,
	            tr:tr,
	            table:table,
	            caption:caption
	        }
	    };
	    UETable.getUETableBySelected = function (editor) {
	        var table = UETable.getTableItemsByRange(editor).table;
	        if (table && table.ueTable && table.ueTable.selectedTds.length) {
	            return table.ueTable;
	        }
	        return null;
	    };
	
	    UETable.getDefaultValue = function (editor, table) {
	        var borderMap = {
	                thin:'0px',
	                medium:'1px',
	                thick:'2px'
	            },
	            tableBorder, tdPadding, tdBorder, tmpValue;
	        if (!table) {
	            table = editor.document.createElement('table');
	            table.insertRow(0).insertCell(0).innerHTML = 'xxx';
	            editor.body.appendChild(table);
	            var td = table.getElementsByTagName('td')[0];
	            tmpValue = domUtils.getComputedStyle(table, 'border-left-width');
	            tableBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
	            tmpValue = domUtils.getComputedStyle(td, 'padding-left');
	            tdPadding = parseInt(borderMap[tmpValue] || tmpValue, 10);
	            tmpValue = domUtils.getComputedStyle(td, 'border-left-width');
	            tdBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
	            domUtils.remove(table);
	            return {
	                tableBorder:tableBorder,
	                tdPadding:tdPadding,
	                tdBorder:tdBorder
	            };
	        } else {
	            td = table.getElementsByTagName('td')[0];
	            tmpValue = domUtils.getComputedStyle(table, 'border-left-width');
	            tableBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
	            tmpValue = domUtils.getComputedStyle(td, 'padding-left');
	            tdPadding = parseInt(borderMap[tmpValue] || tmpValue, 10);
	            tmpValue = domUtils.getComputedStyle(td, 'border-left-width');
	            tdBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
	            return {
	                tableBorder:tableBorder,
	                tdPadding:tdPadding,
	                tdBorder:tdBorder
	            };
	        }
	    };
	    /**
	     * 根据当前点击的td或者table获取索引对象
	     * @param tdOrTable
	     */
	    UETable.getUETable = function (tdOrTable) {
	        var tag = tdOrTable.tagName.toLowerCase();
	        tdOrTable = (tag == "td" || tag == "th" || tag == 'caption') ? domUtils.findParentByTagName(tdOrTable, "table", true) : tdOrTable;
	        if (!tdOrTable.ueTable) {
	            tdOrTable.ueTable = new UETable(tdOrTable);
	        }
	        return tdOrTable.ueTable;
	    };
	
	    UETable.cloneCell = function(cell,ignoreMerge,keepPro){
	        if (!cell || utils.isString(cell)) {
	            return this.table.ownerDocument.createElement(cell || 'td');
	        }
	        var flag = domUtils.hasClass(cell, "selectTdClass");
	        flag && domUtils.removeClasses(cell, "selectTdClass");
	        var tmpCell = cell.cloneNode(true);
	        if (ignoreMerge) {
	            tmpCell.rowSpan = tmpCell.colSpan = 1;
	        }
	        //去掉宽高
	        !keepPro && domUtils.removeAttributes(tmpCell,'width height');
	        !keepPro && domUtils.removeAttributes(tmpCell,'style');
	
	        tmpCell.style.borderLeftStyle = "";
	        tmpCell.style.borderTopStyle = "";
	        tmpCell.style.borderLeftColor = cell.style.borderRightColor;
	        tmpCell.style.borderLeftWidth = cell.style.borderRightWidth;
	        tmpCell.style.borderTopColor = cell.style.borderBottomColor;
	        tmpCell.style.borderTopWidth = cell.style.borderBottomWidth;
	        flag && domUtils.addClass(cell, "selectTdClass");
	        return tmpCell;
	    }
	
	    UETable.prototype = {
	        getMaxRows:function () {
	            var rows = this.table.rows, maxLen = 1;
	            for (var i = 0, row; row = rows[i]; i++) {
	                var currentMax = 1;
	                for (var j = 0, cj; cj = row.cells[j++];) {
	                    currentMax = Math.max(cj.rowSpan || 1, currentMax);
	                }
	                maxLen = Math.max(currentMax + i, maxLen);
	            }
	            return maxLen;
	        },
	        /**
	         * 获取当前表格的最大列数
	         */
	        getMaxCols:function () {
	            var rows = this.table.rows, maxLen = 0, cellRows = {};
	            for (var i = 0, row; row = rows[i]; i++) {
	                var cellsNum = 0;
	                for (var j = 0, cj; cj = row.cells[j++];) {
	                    cellsNum += (cj.colSpan || 1);
	                    if (cj.rowSpan && cj.rowSpan > 1) {
	                        for (var k = 1; k < cj.rowSpan; k++) {
	                            if (!cellRows['row_' + (i + k)]) {
	                                cellRows['row_' + (i + k)] = (cj.colSpan || 1);
	                            } else {
	                                cellRows['row_' + (i + k)]++
	                            }
	                        }
	
	                    }
	                }
	                cellsNum += cellRows['row_' + i] || 0;
	                maxLen = Math.max(cellsNum, maxLen);
	            }
	            return maxLen;
	        },
	        getCellColIndex:function (cell) {
	
	        },
	        /**
	         * 获取当前cell旁边的单元格，
	         * @param cell
	         * @param right
	         */
	        getHSideCell:function (cell, right) {
	            try {
	                var cellInfo = this.getCellInfo(cell),
	                    previewRowIndex, previewColIndex;
	                var len = this.selectedTds.length,
	                    range = this.cellsRange;
	                //首行或者首列没有前置单元格
	                if ((!right && (!len ? !cellInfo.colIndex : !range.beginColIndex)) || (right && (!len ? (cellInfo.colIndex == (this.colsNum - 1)) : (range.endColIndex == this.colsNum - 1)))) return null;
	
	                previewRowIndex = !len ? cellInfo.rowIndex : range.beginRowIndex;
	                previewColIndex = !right ? ( !len ? (cellInfo.colIndex < 1 ? 0 : (cellInfo.colIndex - 1)) : range.beginColIndex - 1)
	                    : ( !len ? cellInfo.colIndex + 1 : range.endColIndex + 1);
	                return this.getCell(this.indexTable[previewRowIndex][previewColIndex].rowIndex, this.indexTable[previewRowIndex][previewColIndex].cellIndex);
	            } catch (e) {
	                showError(e);
	            }
	        },
	        getTabNextCell:function (cell, preRowIndex) {
	            var cellInfo = this.getCellInfo(cell),
	                rowIndex = preRowIndex || cellInfo.rowIndex,
	                colIndex = cellInfo.colIndex + 1 + (cellInfo.colSpan - 1),
	                nextCell;
	            try {
	                nextCell = this.getCell(this.indexTable[rowIndex][colIndex].rowIndex, this.indexTable[rowIndex][colIndex].cellIndex);
	            } catch (e) {
	                try {
	                    rowIndex = rowIndex * 1 + 1;
	                    colIndex = 0;
	                    nextCell = this.getCell(this.indexTable[rowIndex][colIndex].rowIndex, this.indexTable[rowIndex][colIndex].cellIndex);
	                } catch (e) {
	                }
	            }
	            return nextCell;
	
	        },
	        /**
	         * 获取视觉上的后置单元格
	         * @param cell
	         * @param bottom
	         */
	        getVSideCell:function (cell, bottom, ignoreRange) {
	            try {
	                var cellInfo = this.getCellInfo(cell),
	                    nextRowIndex, nextColIndex;
	                var len = this.selectedTds.length && !ignoreRange,
	                    range = this.cellsRange;
	                //末行或者末列没有后置单元格
	                if ((!bottom && (cellInfo.rowIndex == 0)) || (bottom && (!len ? (cellInfo.rowIndex + cellInfo.rowSpan > this.rowsNum - 1) : (range.endRowIndex == this.rowsNum - 1)))) return null;
	
	                nextRowIndex = !bottom ? ( !len ? cellInfo.rowIndex - 1 : range.beginRowIndex - 1)
	                    : ( !len ? (cellInfo.rowIndex + cellInfo.rowSpan) : range.endRowIndex + 1);
	                nextColIndex = !len ? cellInfo.colIndex : range.beginColIndex;
	                return this.getCell(this.indexTable[nextRowIndex][nextColIndex].rowIndex, this.indexTable[nextRowIndex][nextColIndex].cellIndex);
	            } catch (e) {
	                showError(e);
	            }
	        },
	        /**
	         * 获取相同结束位置的单元格，xOrY指代了是获取x轴相同还是y轴相同
	         */
	        getSameEndPosCells:function (cell, xOrY) {
	            try {
	                var flag = (xOrY.toLowerCase() === "x"),
	                    end = domUtils.getXY(cell)[flag ? 'x' : 'y'] + cell["offset" + (flag ? 'Width' : 'Height')],
	                    rows = this.table.rows,
	                    cells = null, returns = [];
	                for (var i = 0; i < this.rowsNum; i++) {
	                    cells = rows[i].cells;
	                    for (var j = 0, tmpCell; tmpCell = cells[j++];) {
	                        var tmpEnd = domUtils.getXY(tmpCell)[flag ? 'x' : 'y'] + tmpCell["offset" + (flag ? 'Width' : 'Height')];
	                        //对应行的td已经被上面行rowSpan了
	                        if (tmpEnd > end && flag) break;
	                        if (cell == tmpCell || end == tmpEnd) {
	                            //只获取单一的单元格
	                            //todo 仅获取单一单元格在特定情况下会造成returns为空，从而影响后续的拖拽实现，修正这个。需考虑性能
	                            if (tmpCell[flag ? "colSpan" : "rowSpan"] == 1) {
	                                returns.push(tmpCell);
	                            }
	                            if (flag) break;
	                        }
	                    }
	                }
	                return returns;
	            } catch (e) {
	                showError(e);
	            }
	        },
	        setCellContent:function (cell, content) {
	            cell.innerHTML = content || (browser.ie ? domUtils.fillChar : "<br />");
	        },
	        cloneCell:UETable.cloneCell,
	        /**
	         * 获取跟当前单元格的右边竖线为左边的所有未合并单元格
	         */
	        getSameStartPosXCells:function (cell) {
	            try {
	                var start = domUtils.getXY(cell).x + cell.offsetWidth,
	                    rows = this.table.rows, cells , returns = [];
	                for (var i = 0; i < this.rowsNum; i++) {
	                    cells = rows[i].cells;
	                    for (var j = 0, tmpCell; tmpCell = cells[j++];) {
	                        var tmpStart = domUtils.getXY(tmpCell).x;
	                        if (tmpStart > start) break;
	                        if (tmpStart == start && tmpCell.colSpan == 1) {
	                            returns.push(tmpCell);
	                            break;
	                        }
	                    }
	                }
	                return returns;
	            } catch (e) {
	                showError(e);
	            }
	        },
	        /**
	         * 更新table对应的索引表
	         */
	        update:function (table) {
	            this.table = table || this.table;
	            this.selectedTds = [];
	            this.cellsRange = {};
	            this.indexTable = [];
	            var rows = this.table.rows,
	                rowsNum = this.getMaxRows(),
	                dNum = rowsNum - rows.length,
	                colsNum = this.getMaxCols();
	            while (dNum--) {
	                this.table.insertRow(rows.length);
	            }
	            this.rowsNum = rowsNum;
	            this.colsNum = colsNum;
	            for (var i = 0, len = rows.length; i < len; i++) {
	                this.indexTable[i] = new Array(colsNum);
	            }
	            //填充索引表
	            for (var rowIndex = 0, row; row = rows[rowIndex]; rowIndex++) {
	                for (var cellIndex = 0, cell, cells = row.cells; cell = cells[cellIndex]; cellIndex++) {
	                    //修正整行被rowSpan时导致的行数计算错误
	                    if (cell.rowSpan > rowsNum) {
	                        cell.rowSpan = rowsNum;
	                    }
	                    var colIndex = cellIndex,
	                        rowSpan = cell.rowSpan || 1,
	                        colSpan = cell.colSpan || 1;
	                    //当已经被上一行rowSpan或者被前一列colSpan了，则跳到下一个单元格进行
	                    while (this.indexTable[rowIndex][colIndex]) colIndex++;
	                    for (var j = 0; j < rowSpan; j++) {
	                        for (var k = 0; k < colSpan; k++) {
	                            this.indexTable[rowIndex + j][colIndex + k] = {
	                                rowIndex:rowIndex,
	                                cellIndex:cellIndex,
	                                colIndex:colIndex,
	                                rowSpan:rowSpan,
	                                colSpan:colSpan
	                            }
	                        }
	                    }
	                }
	            }
	            //修复残缺td
	            for (j = 0; j < rowsNum; j++) {
	                for (k = 0; k < colsNum; k++) {
	                    if (this.indexTable[j][k] === undefined) {
	                        row = rows[j];
	                        cell = row.cells[row.cells.length - 1];
	                        cell = cell ? cell.cloneNode(true) : this.table.ownerDocument.createElement("td");
	                        this.setCellContent(cell);
	                        if (cell.colSpan !== 1)cell.colSpan = 1;
	                        if (cell.rowSpan !== 1)cell.rowSpan = 1;
	                        row.appendChild(cell);
	                        this.indexTable[j][k] = {
	                            rowIndex:j,
	                            cellIndex:cell.cellIndex,
	                            colIndex:k,
	                            rowSpan:1,
	                            colSpan:1
	                        }
	                    }
	                }
	            }
	            //当框选后删除行或者列后撤销，需要重建选区。
	            var tds = domUtils.getElementsByTagName(this.table, "td"),
	                selectTds = [];
	            utils.each(tds, function (td) {
	                if (domUtils.hasClass(td, "selectTdClass")) {
	                    selectTds.push(td);
	                }
	            });
	            if (selectTds.length) {
	                var start = selectTds[0],
	                    end = selectTds[selectTds.length - 1],
	                    startInfo = this.getCellInfo(start),
	                    endInfo = this.getCellInfo(end);
	                this.selectedTds = selectTds;
	                this.cellsRange = {
	                    beginRowIndex:startInfo.rowIndex,
	                    beginColIndex:startInfo.colIndex,
	                    endRowIndex:endInfo.rowIndex + endInfo.rowSpan - 1,
	                    endColIndex:endInfo.colIndex + endInfo.colSpan - 1
	                };
	            }
	            //给第一行设置firstRow的样式名称,在排序图标的样式上使用到
	            if(!domUtils.hasClass(this.table.rows[0], "firstRow")) {
	                domUtils.addClass(this.table.rows[0], "firstRow");
	                for(var i = 1; i< this.table.rows.length; i++) {
	                    domUtils.removeClasses(this.table.rows[i], "firstRow");
	                }
	            }
	        },
	        /**
	         * 获取单元格的索引信息
	         */
	        getCellInfo:function (cell) {
	            if (!cell) return;
	            var cellIndex = cell.cellIndex,
	                rowIndex = cell.parentNode.rowIndex,
	                rowInfo = this.indexTable[rowIndex],
	                numCols = this.colsNum;
	            for (var colIndex = cellIndex; colIndex < numCols; colIndex++) {
	                var cellInfo = rowInfo[colIndex];
	                if (cellInfo.rowIndex === rowIndex && cellInfo.cellIndex === cellIndex) {
	                    return cellInfo;
	                }
	            }
	        },
	        /**
	         * 根据行列号获取单元格
	         */
	        getCell:function (rowIndex, cellIndex) {
	            return rowIndex < this.rowsNum && this.table.rows[rowIndex].cells[cellIndex] || null;
	        },
	        /**
	         * 删除单元格
	         */
	        deleteCell:function (cell, rowIndex) {
	            rowIndex = typeof rowIndex == 'number' ? rowIndex : cell.parentNode.rowIndex;
	            var row = this.table.rows[rowIndex];
	            row.deleteCell(cell.cellIndex);
	        },
	        /**
	         * 根据始末两个单元格获取被框选的所有单元格范围
	         */
	        getCellsRange:function (cellA, cellB) {
	            function checkRange(beginRowIndex, beginColIndex, endRowIndex, endColIndex) {
	                var tmpBeginRowIndex = beginRowIndex,
	                    tmpBeginColIndex = beginColIndex,
	                    tmpEndRowIndex = endRowIndex,
	                    tmpEndColIndex = endColIndex,
	                    cellInfo, colIndex, rowIndex;
	                // 通过indexTable检查是否存在超出TableRange上边界的情况
	                if (beginRowIndex > 0) {
	                    for (colIndex = beginColIndex; colIndex < endColIndex; colIndex++) {
	                        cellInfo = me.indexTable[beginRowIndex][colIndex];
	                        rowIndex = cellInfo.rowIndex;
	                        if (rowIndex < beginRowIndex) {
	                            tmpBeginRowIndex = Math.min(rowIndex, tmpBeginRowIndex);
	                        }
	                    }
	                }
	                // 通过indexTable检查是否存在超出TableRange右边界的情况
	                if (endColIndex < me.colsNum) {
	                    for (rowIndex = beginRowIndex; rowIndex < endRowIndex; rowIndex++) {
	                        cellInfo = me.indexTable[rowIndex][endColIndex];
	                        colIndex = cellInfo.colIndex + cellInfo.colSpan - 1;
	                        if (colIndex > endColIndex) {
	                            tmpEndColIndex = Math.max(colIndex, tmpEndColIndex);
	                        }
	                    }
	                }
	                // 检查是否有超出TableRange下边界的情况
	                if (endRowIndex < me.rowsNum) {
	                    for (colIndex = beginColIndex; colIndex < endColIndex; colIndex++) {
	                        cellInfo = me.indexTable[endRowIndex][colIndex];
	                        rowIndex = cellInfo.rowIndex + cellInfo.rowSpan - 1;
	                        if (rowIndex > endRowIndex) {
	                            tmpEndRowIndex = Math.max(rowIndex, tmpEndRowIndex);
	                        }
	                    }
	                }
	                // 检查是否有超出TableRange左边界的情况
	                if (beginColIndex > 0) {
	                    for (rowIndex = beginRowIndex; rowIndex < endRowIndex; rowIndex++) {
	                        cellInfo = me.indexTable[rowIndex][beginColIndex];
	                        colIndex = cellInfo.colIndex;
	                        if (colIndex < beginColIndex) {
	                            tmpBeginColIndex = Math.min(cellInfo.colIndex, tmpBeginColIndex);
	                        }
	                    }
	                }
	                //递归调用直至所有完成所有框选单元格的扩展
	                if (tmpBeginRowIndex != beginRowIndex || tmpBeginColIndex != beginColIndex || tmpEndRowIndex != endRowIndex || tmpEndColIndex != endColIndex) {
	                    return checkRange(tmpBeginRowIndex, tmpBeginColIndex, tmpEndRowIndex, tmpEndColIndex);
	                } else {
	                    // 不需要扩展TableRange的情况
	                    return {
	                        beginRowIndex:beginRowIndex,
	                        beginColIndex:beginColIndex,
	                        endRowIndex:endRowIndex,
	                        endColIndex:endColIndex
	                    };
	                }
	            }
	
	            try {
	                var me = this,
	                    cellAInfo = me.getCellInfo(cellA);
	                if (cellA === cellB) {
	                    return {
	                        beginRowIndex:cellAInfo.rowIndex,
	                        beginColIndex:cellAInfo.colIndex,
	                        endRowIndex:cellAInfo.rowIndex + cellAInfo.rowSpan - 1,
	                        endColIndex:cellAInfo.colIndex + cellAInfo.colSpan - 1
	                    };
	                }
	                var cellBInfo = me.getCellInfo(cellB);
	                // 计算TableRange的四个边
	                var beginRowIndex = Math.min(cellAInfo.rowIndex, cellBInfo.rowIndex),
	                    beginColIndex = Math.min(cellAInfo.colIndex, cellBInfo.colIndex),
	                    endRowIndex = Math.max(cellAInfo.rowIndex + cellAInfo.rowSpan - 1, cellBInfo.rowIndex + cellBInfo.rowSpan - 1),
	                    endColIndex = Math.max(cellAInfo.colIndex + cellAInfo.colSpan - 1, cellBInfo.colIndex + cellBInfo.colSpan - 1);
	
	                return checkRange(beginRowIndex, beginColIndex, endRowIndex, endColIndex);
	            } catch (e) {
	                //throw e;
	            }
	        },
	        /**
	         * 依据cellsRange获取对应的单元格集合
	         */
	        getCells:function (range) {
	            //每次获取cells之前必须先清除上次的选择，否则会对后续获取操作造成影响
	            this.clearSelected();
	            var beginRowIndex = range.beginRowIndex,
	                beginColIndex = range.beginColIndex,
	                endRowIndex = range.endRowIndex,
	                endColIndex = range.endColIndex,
	                cellInfo, rowIndex, colIndex, tdHash = {}, returnTds = [];
	            for (var i = beginRowIndex; i <= endRowIndex; i++) {
	                for (var j = beginColIndex; j <= endColIndex; j++) {
	                    cellInfo = this.indexTable[i][j];
	                    rowIndex = cellInfo.rowIndex;
	                    colIndex = cellInfo.colIndex;
	                    // 如果Cells里已经包含了此Cell则跳过
	                    var key = rowIndex + '|' + colIndex;
	                    if (tdHash[key]) continue;
	                    tdHash[key] = 1;
	                    if (rowIndex < i || colIndex < j || rowIndex + cellInfo.rowSpan - 1 > endRowIndex || colIndex + cellInfo.colSpan - 1 > endColIndex) {
	                        return null;
	                    }
	                    returnTds.push(this.getCell(rowIndex, cellInfo.cellIndex));
	                }
	            }
	            return returnTds;
	        },
	        /**
	         * 清理已经选中的单元格
	         */
	        clearSelected:function () {
	            UETable.removeSelectedClass(this.selectedTds);
	            this.selectedTds = [];
	            this.cellsRange = {};
	        },
	        /**
	         * 根据range设置已经选中的单元格
	         */
	        setSelected:function (range) {
	            var cells = this.getCells(range);
	            UETable.addSelectedClass(cells);
	            this.selectedTds = cells;
	            this.cellsRange = range;
	        },
	        isFullRow:function () {
	            var range = this.cellsRange;
	            return (range.endColIndex - range.beginColIndex + 1) == this.colsNum;
	        },
	        isFullCol:function () {
	            var range = this.cellsRange,
	                table = this.table,
	                ths = table.getElementsByTagName("th"),
	                rows = range.endRowIndex - range.beginRowIndex + 1;
	            return  !ths.length ? rows == this.rowsNum : rows == this.rowsNum || (rows == this.rowsNum - 1);
	
	        },
	        /**
	         * 获取视觉上的前置单元格，默认是左边，top传入时
	         * @param cell
	         * @param top
	         */
	        getNextCell:function (cell, bottom, ignoreRange) {
	            try {
	                var cellInfo = this.getCellInfo(cell),
	                    nextRowIndex, nextColIndex;
	                var len = this.selectedTds.length && !ignoreRange,
	                    range = this.cellsRange;
	                //末行或者末列没有后置单元格
	                if ((!bottom && (cellInfo.rowIndex == 0)) || (bottom && (!len ? (cellInfo.rowIndex + cellInfo.rowSpan > this.rowsNum - 1) : (range.endRowIndex == this.rowsNum - 1)))) return null;
	
	                nextRowIndex = !bottom ? ( !len ? cellInfo.rowIndex - 1 : range.beginRowIndex - 1)
	                    : ( !len ? (cellInfo.rowIndex + cellInfo.rowSpan) : range.endRowIndex + 1);
	                nextColIndex = !len ? cellInfo.colIndex : range.beginColIndex;
	                return this.getCell(this.indexTable[nextRowIndex][nextColIndex].rowIndex, this.indexTable[nextRowIndex][nextColIndex].cellIndex);
	            } catch (e) {
	                showError(e);
	            }
	        },
	        getPreviewCell:function (cell, top) {
	            try {
	                var cellInfo = this.getCellInfo(cell),
	                    previewRowIndex, previewColIndex;
	                var len = this.selectedTds.length,
	                    range = this.cellsRange;
	                //首行或者首列没有前置单元格
	                if ((!top && (!len ? !cellInfo.colIndex : !range.beginColIndex)) || (top && (!len ? (cellInfo.rowIndex > (this.colsNum - 1)) : (range.endColIndex == this.colsNum - 1)))) return null;
	
	                previewRowIndex = !top ? ( !len ? cellInfo.rowIndex : range.beginRowIndex )
	                    : ( !len ? (cellInfo.rowIndex < 1 ? 0 : (cellInfo.rowIndex - 1)) : range.beginRowIndex);
	                previewColIndex = !top ? ( !len ? (cellInfo.colIndex < 1 ? 0 : (cellInfo.colIndex - 1)) : range.beginColIndex - 1)
	                    : ( !len ? cellInfo.colIndex : range.endColIndex + 1);
	                return this.getCell(this.indexTable[previewRowIndex][previewColIndex].rowIndex, this.indexTable[previewRowIndex][previewColIndex].cellIndex);
	            } catch (e) {
	                showError(e);
	            }
	        },
	        /**
	         * 移动单元格中的内容
	         */
	        moveContent:function (cellTo, cellFrom) {
	            if (UETable.isEmptyBlock(cellFrom)) return;
	            if (UETable.isEmptyBlock(cellTo)) {
	                cellTo.innerHTML = cellFrom.innerHTML;
	                return;
	            }
	            var child = cellTo.lastChild;
	            if (child.nodeType == 3 || !dtd.$block[child.tagName]) {
	                cellTo.appendChild(cellTo.ownerDocument.createElement('br'))
	            }
	            while (child = cellFrom.firstChild) {
	                cellTo.appendChild(child);
	            }
	        },
	        /**
	         * 向右合并单元格
	         */
	        mergeRight:function (cell) {
	            var cellInfo = this.getCellInfo(cell),
	                rightColIndex = cellInfo.colIndex + cellInfo.colSpan,
	                rightCellInfo = this.indexTable[cellInfo.rowIndex][rightColIndex],
	                rightCell = this.getCell(rightCellInfo.rowIndex, rightCellInfo.cellIndex);
	            //合并
	            cell.colSpan = cellInfo.colSpan + rightCellInfo.colSpan;
	            //被合并的单元格不应存在宽度属性
	            cell.removeAttribute("width");
	            //移动内容
	            this.moveContent(cell, rightCell);
	            //删掉被合并的Cell
	            this.deleteCell(rightCell, rightCellInfo.rowIndex);
	            this.update();
	        },
	        /**
	         * 向下合并单元格
	         */
	        mergeDown:function (cell) {
	            var cellInfo = this.getCellInfo(cell),
	                downRowIndex = cellInfo.rowIndex + cellInfo.rowSpan,
	                downCellInfo = this.indexTable[downRowIndex][cellInfo.colIndex],
	                downCell = this.getCell(downCellInfo.rowIndex, downCellInfo.cellIndex);
	            cell.rowSpan = cellInfo.rowSpan + downCellInfo.rowSpan;
	            cell.removeAttribute("height");
	            this.moveContent(cell, downCell);
	            this.deleteCell(downCell, downCellInfo.rowIndex);
	            this.update();
	        },
	        /**
	         * 合并整个range中的内容
	         */
	        mergeRange:function () {
	            //由于合并操作可以在任意时刻进行，所以无法通过鼠标位置等信息实时生成range，只能通过缓存实例中的cellsRange对象来访问
	            var range = this.cellsRange,
	                leftTopCell = this.getCell(range.beginRowIndex, this.indexTable[range.beginRowIndex][range.beginColIndex].cellIndex);
	
	            if (leftTopCell.tagName == "TH" && range.endRowIndex !== range.beginRowIndex) {
	                var index = this.indexTable,
	                    info = this.getCellInfo(leftTopCell);
	                leftTopCell = this.getCell(1, index[1][info.colIndex].cellIndex);
	                range = this.getCellsRange(leftTopCell, this.getCell(index[this.rowsNum - 1][info.colIndex].rowIndex, index[this.rowsNum - 1][info.colIndex].cellIndex));
	            }
	
	            // 删除剩余的Cells
	            var cells = this.getCells(range);
	            for(var i= 0,ci;ci=cells[i++];){
	                if (ci !== leftTopCell) {
	                    this.moveContent(leftTopCell, ci);
	                    this.deleteCell(ci);
	                }
	            }
	            // 修改左上角Cell的rowSpan和colSpan，并调整宽度属性设置
	            leftTopCell.rowSpan = range.endRowIndex - range.beginRowIndex + 1;
	            leftTopCell.rowSpan > 1 && leftTopCell.removeAttribute("height");
	            leftTopCell.colSpan = range.endColIndex - range.beginColIndex + 1;
	            leftTopCell.colSpan > 1 && leftTopCell.removeAttribute("width");
	            if (leftTopCell.rowSpan == this.rowsNum && leftTopCell.colSpan != 1) {
	                leftTopCell.colSpan = 1;
	            }
	
	            if (leftTopCell.colSpan == this.colsNum && leftTopCell.rowSpan != 1) {
	                var rowIndex = leftTopCell.parentNode.rowIndex;
	                //解决IE下的表格操作问题
	                if( this.table.deleteRow ) {
	                    for (var i = rowIndex+ 1, curIndex=rowIndex+ 1, len=leftTopCell.rowSpan; i < len; i++) {
	                        this.table.deleteRow(curIndex);
	                    }
	                } else {
	                    for (var i = 0, len=leftTopCell.rowSpan - 1; i < len; i++) {
	                        var row = this.table.rows[rowIndex + 1];
	                        row.parentNode.removeChild(row);
	                    }
	                }
	                leftTopCell.rowSpan = 1;
	            }
	            this.update();
	        },
	        /**
	         * 插入一行单元格
	         */
	        insertRow:function (rowIndex, sourceCell) {
	            var numCols = this.colsNum,
	                table = this.table,
	                row = table.insertRow(rowIndex), cell,
	                isInsertTitle = typeof sourceCell == 'string' && sourceCell.toUpperCase() == 'TH';
	
	            function replaceTdToTh(colIndex, cell, tableRow) {
	                if (colIndex == 0) {
	                    var tr = tableRow.nextSibling || tableRow.previousSibling,
	                        th = tr.cells[colIndex];
	                    if (th.tagName == 'TH') {
	                        th = cell.ownerDocument.createElement("th");
	                        th.appendChild(cell.firstChild);
	                        tableRow.insertBefore(th, cell);
	                        domUtils.remove(cell)
	                    }
	                }else{
	                    if (cell.tagName == 'TH') {
	                        var td = cell.ownerDocument.createElement("td");
	                        td.appendChild(cell.firstChild);
	                        tableRow.insertBefore(td, cell);
	                        domUtils.remove(cell)
	                    }
	                }
	            }
	
	            //首行直接插入,无需考虑部分单元格被rowspan的情况
	            if (rowIndex == 0 || rowIndex == this.rowsNum) {
	                for (var colIndex = 0; colIndex < numCols; colIndex++) {
	                    cell = this.cloneCell(sourceCell, true);
	                    this.setCellContent(cell);
	                    cell.getAttribute('vAlign') && cell.setAttribute('vAlign', cell.getAttribute('vAlign'));
	                    row.appendChild(cell);
	                    if(!isInsertTitle) replaceTdToTh(colIndex, cell, row);
	                }
	            } else {
	                var infoRow = this.indexTable[rowIndex],
	                    cellIndex = 0;
	                for (colIndex = 0; colIndex < numCols; colIndex++) {
	                    var cellInfo = infoRow[colIndex];
	                    //如果存在某个单元格的rowspan穿过待插入行的位置，则修改该单元格的rowspan即可，无需插入单元格
	                    if (cellInfo.rowIndex < rowIndex) {
	                        cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
	                        cell.rowSpan = cellInfo.rowSpan + 1;
	                    } else {
	                        cell = this.cloneCell(sourceCell, true);
	                        this.setCellContent(cell);
	                        row.appendChild(cell);
	                    }
	                    if(!isInsertTitle) replaceTdToTh(colIndex, cell, row);
	                }
	            }
	            //框选时插入不触发contentchange，需要手动更新索引。
	            this.update();
	            return row;
	        },
	        /**
	         * 删除一行单元格
	         * @param rowIndex
	         */
	        deleteRow:function (rowIndex) {
	            var row = this.table.rows[rowIndex],
	                infoRow = this.indexTable[rowIndex],
	                colsNum = this.colsNum,
	                count = 0;     //处理计数
	            for (var colIndex = 0; colIndex < colsNum;) {
	                var cellInfo = infoRow[colIndex],
	                    cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
	                if (cell.rowSpan > 1) {
	                    if (cellInfo.rowIndex == rowIndex) {
	                        var clone = cell.cloneNode(true);
	                        clone.rowSpan = cell.rowSpan - 1;
	                        clone.innerHTML = "";
	                        cell.rowSpan = 1;
	                        var nextRowIndex = rowIndex + 1,
	                            nextRow = this.table.rows[nextRowIndex],
	                            insertCellIndex,
	                            preMerged = this.getPreviewMergedCellsNum(nextRowIndex, colIndex) - count;
	                        if (preMerged < colIndex) {
	                            insertCellIndex = colIndex - preMerged - 1;
	                            //nextRow.insertCell(insertCellIndex);
	                            domUtils.insertAfter(nextRow.cells[insertCellIndex], clone);
	                        } else {
	                            if (nextRow.cells.length) nextRow.insertBefore(clone, nextRow.cells[0])
	                        }
	                        count += 1;
	                        //cell.parentNode.removeChild(cell);
	                    }
	                }
	                colIndex += cell.colSpan || 1;
	            }
	            var deleteTds = [], cacheMap = {};
	            for (colIndex = 0; colIndex < colsNum; colIndex++) {
	                var tmpRowIndex = infoRow[colIndex].rowIndex,
	                    tmpCellIndex = infoRow[colIndex].cellIndex,
	                    key = tmpRowIndex + "_" + tmpCellIndex;
	                if (cacheMap[key])continue;
	                cacheMap[key] = 1;
	                cell = this.getCell(tmpRowIndex, tmpCellIndex);
	                deleteTds.push(cell);
	            }
	            var mergeTds = [];
	            utils.each(deleteTds, function (td) {
	                if (td.rowSpan == 1) {
	                    td.parentNode.removeChild(td);
	                } else {
	                    mergeTds.push(td);
	                }
	            });
	            utils.each(mergeTds, function (td) {
	                td.rowSpan--;
	            });
	            row.parentNode.removeChild(row);
	            //浏览器方法本身存在bug,采用自定义方法删除
	            //this.table.deleteRow(rowIndex);
	            this.update();
	        },
	        insertCol:function (colIndex, sourceCell, defaultValue) {
	            var rowsNum = this.rowsNum,
	                rowIndex = 0,
	                tableRow, cell,
	                backWidth = parseInt((this.table.offsetWidth - (this.colsNum + 1) * 20 - (this.colsNum + 1)) / (this.colsNum + 1), 10),
	                isInsertTitleCol = typeof sourceCell == 'string' && sourceCell.toUpperCase() == 'TH';
	
	            function replaceTdToTh(rowIndex, cell, tableRow) {
	                if (rowIndex == 0) {
	                    var th = cell.nextSibling || cell.previousSibling;
	                    if (th.tagName == 'TH') {
	                        th = cell.ownerDocument.createElement("th");
	                        th.appendChild(cell.firstChild);
	                        tableRow.insertBefore(th, cell);
	                        domUtils.remove(cell)
	                    }
	                }else{
	                    if (cell.tagName == 'TH') {
	                        var td = cell.ownerDocument.createElement("td");
	                        td.appendChild(cell.firstChild);
	                        tableRow.insertBefore(td, cell);
	                        domUtils.remove(cell)
	                    }
	                }
	            }
	
	            var preCell;
	            if (colIndex == 0 || colIndex == this.colsNum) {
	                for (; rowIndex < rowsNum; rowIndex++) {
	                    tableRow = this.table.rows[rowIndex];
	                    preCell = tableRow.cells[colIndex == 0 ? colIndex : tableRow.cells.length];
	                    cell = this.cloneCell(sourceCell, true); //tableRow.insertCell(colIndex == 0 ? colIndex : tableRow.cells.length);
	                    this.setCellContent(cell);
	                    cell.setAttribute('vAlign', cell.getAttribute('vAlign'));
	                    preCell && cell.setAttribute('width', preCell.getAttribute('width'));
	                    if (!colIndex) {
	                        tableRow.insertBefore(cell, tableRow.cells[0]);
	                    } else {
	                        domUtils.insertAfter(tableRow.cells[tableRow.cells.length - 1], cell);
	                    }
	                    if(!isInsertTitleCol) replaceTdToTh(rowIndex, cell, tableRow)
	                }
	            } else {
	                for (; rowIndex < rowsNum; rowIndex++) {
	                    var cellInfo = this.indexTable[rowIndex][colIndex];
	                    if (cellInfo.colIndex < colIndex) {
	                        cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
	                        cell.colSpan = cellInfo.colSpan + 1;
	                    } else {
	                        tableRow = this.table.rows[rowIndex];
	                        preCell = tableRow.cells[cellInfo.cellIndex];
	
	                        cell = this.cloneCell(sourceCell, true);//tableRow.insertCell(cellInfo.cellIndex);
	                        this.setCellContent(cell);
	                        cell.setAttribute('vAlign', cell.getAttribute('vAlign'));
	                        preCell && cell.setAttribute('width', preCell.getAttribute('width'));
	                        //防止IE下报错
	                        preCell ? tableRow.insertBefore(cell, preCell) : tableRow.appendChild(cell);
	                    }
	                    if(!isInsertTitleCol) replaceTdToTh(rowIndex, cell, tableRow);
	                }
	            }
	            //框选时插入不触发contentchange，需要手动更新索引
	            this.update();
	            this.updateWidth(backWidth, defaultValue || {tdPadding:10, tdBorder:1});
	        },
	        updateWidth:function (width, defaultValue) {
	            var table = this.table,
	                tmpWidth = UETable.getWidth(table) - defaultValue.tdPadding * 2 - defaultValue.tdBorder + width;
	            if (tmpWidth < table.ownerDocument.body.offsetWidth) {
	                table.setAttribute("width", tmpWidth);
	                return;
	            }
	            var tds = domUtils.getElementsByTagName(this.table, "td th");
	            utils.each(tds, function (td) {
	                td.setAttribute("width", width);
	            })
	        },
	        deleteCol:function (colIndex) {
	            var indexTable = this.indexTable,
	                tableRows = this.table.rows,
	                backTableWidth = this.table.getAttribute("width"),
	                backTdWidth = 0,
	                rowsNum = this.rowsNum,
	                cacheMap = {};
	            for (var rowIndex = 0; rowIndex < rowsNum;) {
	                var infoRow = indexTable[rowIndex],
	                    cellInfo = infoRow[colIndex],
	                    key = cellInfo.rowIndex + '_' + cellInfo.colIndex;
	                // 跳过已经处理过的Cell
	                if (cacheMap[key])continue;
	                cacheMap[key] = 1;
	                var cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
	                if (!backTdWidth) backTdWidth = cell && parseInt(cell.offsetWidth / cell.colSpan, 10).toFixed(0);
	                // 如果Cell的colSpan大于1, 就修改colSpan, 否则就删掉这个Cell
	                if (cell.colSpan > 1) {
	                    cell.colSpan--;
	                } else {
	                    tableRows[rowIndex].deleteCell(cellInfo.cellIndex);
	                }
	                rowIndex += cellInfo.rowSpan || 1;
	            }
	            this.table.setAttribute("width", backTableWidth - backTdWidth);
	            this.update();
	        },
	        splitToCells:function (cell) {
	            var me = this,
	                cells = this.splitToRows(cell);
	            utils.each(cells, function (cell) {
	                me.splitToCols(cell);
	            })
	        },
	        splitToRows:function (cell) {
	            var cellInfo = this.getCellInfo(cell),
	                rowIndex = cellInfo.rowIndex,
	                colIndex = cellInfo.colIndex,
	                results = [];
	            // 修改Cell的rowSpan
	            cell.rowSpan = 1;
	            results.push(cell);
	            // 补齐单元格
	            for (var i = rowIndex, endRow = rowIndex + cellInfo.rowSpan; i < endRow; i++) {
	                if (i == rowIndex)continue;
	                var tableRow = this.table.rows[i],
	                    tmpCell = tableRow.insertCell(colIndex - this.getPreviewMergedCellsNum(i, colIndex));
	                tmpCell.colSpan = cellInfo.colSpan;
	                this.setCellContent(tmpCell);
	                tmpCell.setAttribute('vAlign', cell.getAttribute('vAlign'));
	                tmpCell.setAttribute('align', cell.getAttribute('align'));
	                if (cell.style.cssText) {
	                    tmpCell.style.cssText = cell.style.cssText;
	                }
	                results.push(tmpCell);
	            }
	            this.update();
	            return results;
	        },
	        getPreviewMergedCellsNum:function (rowIndex, colIndex) {
	            var indexRow = this.indexTable[rowIndex],
	                num = 0;
	            for (var i = 0; i < colIndex;) {
	                var colSpan = indexRow[i].colSpan,
	                    tmpRowIndex = indexRow[i].rowIndex;
	                num += (colSpan - (tmpRowIndex == rowIndex ? 1 : 0));
	                i += colSpan;
	            }
	            return num;
	        },
	        splitToCols:function (cell) {
	            var backWidth = (cell.offsetWidth / cell.colSpan - 22).toFixed(0),
	
	                cellInfo = this.getCellInfo(cell),
	                rowIndex = cellInfo.rowIndex,
	                colIndex = cellInfo.colIndex,
	                results = [];
	            // 修改Cell的rowSpan
	            cell.colSpan = 1;
	            cell.setAttribute("width", backWidth);
	            results.push(cell);
	            // 补齐单元格
	            for (var j = colIndex, endCol = colIndex + cellInfo.colSpan; j < endCol; j++) {
	                if (j == colIndex)continue;
	                var tableRow = this.table.rows[rowIndex],
	                    tmpCell = tableRow.insertCell(this.indexTable[rowIndex][j].cellIndex + 1);
	                tmpCell.rowSpan = cellInfo.rowSpan;
	                this.setCellContent(tmpCell);
	                tmpCell.setAttribute('vAlign', cell.getAttribute('vAlign'));
	                tmpCell.setAttribute('align', cell.getAttribute('align'));
	                tmpCell.setAttribute('width', backWidth);
	                if (cell.style.cssText) {
	                    tmpCell.style.cssText = cell.style.cssText;
	                }
	                //处理th的情况
	                if (cell.tagName == 'TH') {
	                    var th = cell.ownerDocument.createElement('th');
	                    th.appendChild(tmpCell.firstChild);
	                    th.setAttribute('vAlign', cell.getAttribute('vAlign'));
	                    th.rowSpan = tmpCell.rowSpan;
	                    tableRow.insertBefore(th, tmpCell);
	                    domUtils.remove(tmpCell);
	                }
	                results.push(tmpCell);
	            }
	            this.update();
	            return results;
	        },
	        isLastCell:function (cell, rowsNum, colsNum) {
	            rowsNum = rowsNum || this.rowsNum;
	            colsNum = colsNum || this.colsNum;
	            var cellInfo = this.getCellInfo(cell);
	            return ((cellInfo.rowIndex + cellInfo.rowSpan) == rowsNum) &&
	                ((cellInfo.colIndex + cellInfo.colSpan) == colsNum);
	        },
	        getLastCell:function (cells) {
	            cells = cells || this.table.getElementsByTagName("td");
	            var firstInfo = this.getCellInfo(cells[0]);
	            var me = this, last = cells[0],
	                tr = last.parentNode,
	                cellsNum = 0, cols = 0, rows;
	            utils.each(cells, function (cell) {
	                if (cell.parentNode == tr)cols += cell.colSpan || 1;
	                cellsNum += cell.rowSpan * cell.colSpan || 1;
	            });
	            rows = cellsNum / cols;
	            utils.each(cells, function (cell) {
	                if (me.isLastCell(cell, rows, cols)) {
	                    last = cell;
	                    return false;
	                }
	            });
	            return last;
	
	        },
	        selectRow:function (rowIndex) {
	            var indexRow = this.indexTable[rowIndex],
	                start = this.getCell(indexRow[0].rowIndex, indexRow[0].cellIndex),
	                end = this.getCell(indexRow[this.colsNum - 1].rowIndex, indexRow[this.colsNum - 1].cellIndex),
	                range = this.getCellsRange(start, end);
	            this.setSelected(range);
	        },
	        selectTable:function () {
	            var tds = this.table.getElementsByTagName("td"),
	                range = this.getCellsRange(tds[0], tds[tds.length - 1]);
	            this.setSelected(range);
	        },
	        setBackground:function (cells, value) {
	            if (typeof value === "string") {
	                utils.each(cells, function (cell) {
	                    cell.style.backgroundColor = value;
	                })
	            } else if (typeof value === "object") {
	                value = utils.extend({
	                    repeat:true,
	                    colorList:["#ddd", "#fff"]
	                }, value);
	                var rowIndex = this.getCellInfo(cells[0]).rowIndex,
	                    count = 0,
	                    colors = value.colorList,
	                    getColor = function (list, index, repeat) {
	                        return list[index] ? list[index] : repeat ? list[index % list.length] : "";
	                    };
	                for (var i = 0, cell; cell = cells[i++];) {
	                    var cellInfo = this.getCellInfo(cell);
	                    cell.style.backgroundColor = getColor(colors, ((rowIndex + count) == cellInfo.rowIndex) ? count : ++count, value.repeat);
	                }
	            }
	        },
	        removeBackground:function (cells) {
	            utils.each(cells, function (cell) {
	                cell.style.backgroundColor = "";
	            })
	        }
	
	
	    };
	    function showError(e) {
	    }
	})();
	
	// plugins/table.cmds.js
	/**
	 * Created with JetBrains PhpStorm.
	 * User: taoqili
	 * Date: 13-2-20
	 * Time: 下午6:25
	 * To change this template use File | Settings | File Templates.
	 */
	;
	(function () {
	    var UT = UE.UETable,
	        getTableItemsByRange = function (editor) {
	            return UT.getTableItemsByRange(editor);
	        },
	        getUETableBySelected = function (editor) {
	            return UT.getUETableBySelected(editor)
	        },
	        getDefaultValue = function (editor, table) {
	            return UT.getDefaultValue(editor, table);
	        },
	        getUETable = function (tdOrTable) {
	            return UT.getUETable(tdOrTable);
	        };
	
	
	    UE.commands['inserttable'] = {
	        queryCommandState: function () {
	            return getTableItemsByRange(this).table ? -1 : 0;
	        },
	        execCommand: function (cmd, opt) {
	            function createTable(opt, tdWidth) {
	                var html = [],
	                    rowsNum = opt.numRows,
	                    colsNum = opt.numCols;
	                for (var r = 0; r < rowsNum; r++) {
	                    html.push('<tr' + (r == 0 ? ' class="firstRow"':'') + '>');
	                    for (var c = 0; c < colsNum; c++) {
	                        html.push('<td width="' + tdWidth + '"  vAlign="' + opt.tdvalign + '" >' + (browser.ie && browser.version < 11 ? domUtils.fillChar : '<br/>') + '</td>')
	                    }
	                    html.push('</tr>')
	                }
	                //禁止指定table-width
	                return '<table><tbody>' + html.join('') + '</tbody></table>'
	            }
	
	            if (!opt) {
	                opt = utils.extend({}, {
	                    numCols: this.options.defaultCols,
	                    numRows: this.options.defaultRows,
	                    tdvalign: this.options.tdvalign
	                })
	            }
	            var me = this;
	            var range = this.selection.getRange(),
	                start = range.startContainer,
	                firstParentBlock = domUtils.findParent(start, function (node) {
	                    return domUtils.isBlockElm(node);
	                }, true) || me.body;
	
	            var defaultValue = getDefaultValue(me),
	                tableWidth = firstParentBlock.offsetWidth,
	                tdWidth = Math.floor(tableWidth / opt.numCols - defaultValue.tdPadding * 2 - defaultValue.tdBorder);
	
	            //todo其他属性
	            !opt.tdvalign && (opt.tdvalign = me.options.tdvalign);
	            me.execCommand("inserthtml", createTable(opt, tdWidth));
	        }
	    };
	
	    UE.commands['insertparagraphbeforetable'] = {
	        queryCommandState: function () {
	            return getTableItemsByRange(this).cell ? 0 : -1;
	        },
	        execCommand: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                var p = this.document.createElement("p");
	                p.innerHTML = browser.ie ? '&nbsp;' : '<br />';
	                table.parentNode.insertBefore(p, table);
	                this.selection.getRange().setStart(p, 0).setCursor();
	            }
	        }
	    };
	
	    UE.commands['deletetable'] = {
	        queryCommandState: function () {
	            var rng = this.selection.getRange();
	            return domUtils.findParentByTagName(rng.startContainer, 'table', true) ? 0 : -1;
	        },
	        execCommand: function (cmd, table) {
	            var rng = this.selection.getRange();
	            table = table || domUtils.findParentByTagName(rng.startContainer, 'table', true);
	            if (table) {
	                var next = table.nextSibling;
	                if (!next) {
	                    next = domUtils.createElement(this.document, 'p', {
	                        'innerHTML': browser.ie ? domUtils.fillChar : '<br/>'
	                    });
	                    table.parentNode.insertBefore(next, table);
	                }
	                domUtils.remove(table);
	                rng = this.selection.getRange();
	                if (next.nodeType == 3) {
	                    rng.setStartBefore(next)
	                } else {
	                    rng.setStart(next, 0)
	                }
	                rng.setCursor(false, true)
	                this.fireEvent("tablehasdeleted")
	
	            }
	
	        }
	    };
	    UE.commands['cellalign'] = {
	        queryCommandState: function () {
	            return getSelectedArr(this).length ? 0 : -1
	        },
	        execCommand: function (cmd, align) {
	            var selectedTds = getSelectedArr(this);
	            if (selectedTds.length) {
	                for (var i = 0, ci; ci = selectedTds[i++];) {
	                    ci.setAttribute('align', align);
	                }
	            }
	        }
	    };
	    UE.commands['cellvalign'] = {
	        queryCommandState: function () {
	            return getSelectedArr(this).length ? 0 : -1;
	        },
	        execCommand: function (cmd, valign) {
	            var selectedTds = getSelectedArr(this);
	            if (selectedTds.length) {
	                for (var i = 0, ci; ci = selectedTds[i++];) {
	                    ci.setAttribute('vAlign', valign);
	                }
	            }
	        }
	    };
	    UE.commands['insertcaption'] = {
	        queryCommandState: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                return table.getElementsByTagName('caption').length == 0 ? 1 : -1;
	            }
	            return -1;
	        },
	        execCommand: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                var caption = this.document.createElement('caption');
	                caption.innerHTML = browser.ie ? domUtils.fillChar : '<br/>';
	                table.insertBefore(caption, table.firstChild);
	                var range = this.selection.getRange();
	                range.setStart(caption, 0).setCursor();
	            }
	
	        }
	    };
	    UE.commands['deletecaption'] = {
	        queryCommandState: function () {
	            var rng = this.selection.getRange(),
	                table = domUtils.findParentByTagName(rng.startContainer, 'table');
	            if (table) {
	                return table.getElementsByTagName('caption').length == 0 ? -1 : 1;
	            }
	            return -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                table = domUtils.findParentByTagName(rng.startContainer, 'table');
	            if (table) {
	                domUtils.remove(table.getElementsByTagName('caption')[0]);
	                var range = this.selection.getRange();
	                range.setStart(table.rows[0].cells[0], 0).setCursor();
	            }
	
	        }
	    };
	    UE.commands['inserttitle'] = {
	        queryCommandState: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                var firstRow = table.rows[0];
	                return firstRow.cells[firstRow.cells.length-1].tagName.toLowerCase() != 'th' ? 0 : -1
	            }
	            return -1;
	        },
	        execCommand: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                getUETable(table).insertRow(0, 'th');
	            }
	            var th = table.getElementsByTagName('th')[0];
	            this.selection.getRange().setStart(th, 0).setCursor(false, true);
	        }
	    };
	    UE.commands['deletetitle'] = {
	        queryCommandState: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                var firstRow = table.rows[0];
	                return firstRow.cells[firstRow.cells.length-1].tagName.toLowerCase() == 'th' ? 0 : -1
	            }
	            return -1;
	        },
	        execCommand: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                domUtils.remove(table.rows[0])
	            }
	            var td = table.getElementsByTagName('td')[0];
	            this.selection.getRange().setStart(td, 0).setCursor(false, true);
	        }
	    };
	    UE.commands['inserttitlecol'] = {
	        queryCommandState: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                var lastRow = table.rows[table.rows.length-1];
	                return lastRow.getElementsByTagName('th').length ? -1 : 0;
	            }
	            return -1;
	        },
	        execCommand: function (cmd) {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                getUETable(table).insertCol(0, 'th');
	            }
	            resetTdWidth(table, this);
	            var th = table.getElementsByTagName('th')[0];
	            this.selection.getRange().setStart(th, 0).setCursor(false, true);
	        }
	    };
	    UE.commands['deletetitlecol'] = {
	        queryCommandState: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                var lastRow = table.rows[table.rows.length-1];
	                return lastRow.getElementsByTagName('th').length ? 0 : -1;
	            }
	            return -1;
	        },
	        execCommand: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                for(var i = 0; i< table.rows.length; i++ ){
	                    domUtils.remove(table.rows[i].children[0])
	                }
	            }
	            resetTdWidth(table, this);
	            var td = table.getElementsByTagName('td')[0];
	            this.selection.getRange().setStart(td, 0).setCursor(false, true);
	        }
	    };
	
	    UE.commands["mergeright"] = {
	        queryCommandState: function (cmd) {
	            var tableItems = getTableItemsByRange(this),
	                table = tableItems.table,
	                cell = tableItems.cell;
	
	            if (!table || !cell) return -1;
	            var ut = getUETable(table);
	            if (ut.selectedTds.length) return -1;
	
	            var cellInfo = ut.getCellInfo(cell),
	                rightColIndex = cellInfo.colIndex + cellInfo.colSpan;
	            if (rightColIndex >= ut.colsNum) return -1; // 如果处于最右边则不能向右合并
	
	            var rightCellInfo = ut.indexTable[cellInfo.rowIndex][rightColIndex],
	                rightCell = table.rows[rightCellInfo.rowIndex].cells[rightCellInfo.cellIndex];
	            if (!rightCell || cell.tagName != rightCell.tagName) return -1; // TH和TD不能相互合并
	
	            // 当且仅当两个Cell的开始列号和结束列号一致时能进行合并
	            return (rightCellInfo.rowIndex == cellInfo.rowIndex && rightCellInfo.rowSpan == cellInfo.rowSpan) ? 0 : -1;
	        },
	        execCommand: function (cmd) {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell);
	            ut.mergeRight(cell);
	            rng.moveToBookmark(bk).select();
	        }
	    };
	    UE.commands["mergedown"] = {
	        queryCommandState: function (cmd) {
	            var tableItems = getTableItemsByRange(this),
	                table = tableItems.table,
	                cell = tableItems.cell;
	
	            if (!table || !cell) return -1;
	            var ut = getUETable(table);
	            if (ut.selectedTds.length)return -1;
	
	            var cellInfo = ut.getCellInfo(cell),
	                downRowIndex = cellInfo.rowIndex + cellInfo.rowSpan;
	            if (downRowIndex >= ut.rowsNum) return -1; // 如果处于最下边则不能向下合并
	
	            var downCellInfo = ut.indexTable[downRowIndex][cellInfo.colIndex],
	                downCell = table.rows[downCellInfo.rowIndex].cells[downCellInfo.cellIndex];
	            if (!downCell || cell.tagName != downCell.tagName) return -1; // TH和TD不能相互合并
	
	            // 当且仅当两个Cell的开始列号和结束列号一致时能进行合并
	            return (downCellInfo.colIndex == cellInfo.colIndex && downCellInfo.colSpan == cellInfo.colSpan) ? 0 : -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell);
	            ut.mergeDown(cell);
	            rng.moveToBookmark(bk).select();
	        }
	    };
	    UE.commands["mergecells"] = {
	        queryCommandState: function () {
	            return getUETableBySelected(this) ? 0 : -1;
	        },
	        execCommand: function () {
	            var ut = getUETableBySelected(this);
	            if (ut && ut.selectedTds.length) {
	                var cell = ut.selectedTds[0];
	                ut.mergeRange();
	                var rng = this.selection.getRange();
	                if (domUtils.isEmptyBlock(cell)) {
	                    rng.setStart(cell, 0).collapse(true)
	                } else {
	                    rng.selectNodeContents(cell)
	                }
	                rng.select();
	            }
	
	
	        }
	    };
	    UE.commands["insertrow"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell;
	            return cell && (cell.tagName == "TD" || (cell.tagName == 'TH' && tableItems.tr !== tableItems.table.rows[0])) &&
	                getUETable(tableItems.table).rowsNum < this.options.maxRowNum ? 0 : -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell,
	                table = tableItems.table,
	                ut = getUETable(table),
	                cellInfo = ut.getCellInfo(cell);
	            //ut.insertRow(!ut.selectedTds.length ? cellInfo.rowIndex:ut.cellsRange.beginRowIndex,'');
	            if (!ut.selectedTds.length) {
	                ut.insertRow(cellInfo.rowIndex, cell);
	            } else {
	                var range = ut.cellsRange;
	                for (var i = 0, len = range.endRowIndex - range.beginRowIndex + 1; i < len; i++) {
	                    ut.insertRow(range.beginRowIndex, cell);
	                }
	            }
	            rng.moveToBookmark(bk).select();
	            if (table.getAttribute("interlaced") === "enabled")this.fireEvent("interlacetable", table);
	        }
	    };
	    //后插入行
	    UE.commands["insertrownext"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell;
	            return cell && (cell.tagName == "TD") && getUETable(tableItems.table).rowsNum < this.options.maxRowNum ? 0 : -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell,
	                table = tableItems.table,
	                ut = getUETable(table),
	                cellInfo = ut.getCellInfo(cell);
	            //ut.insertRow(!ut.selectedTds.length? cellInfo.rowIndex + cellInfo.rowSpan : ut.cellsRange.endRowIndex + 1,'');
	            if (!ut.selectedTds.length) {
	                ut.insertRow(cellInfo.rowIndex + cellInfo.rowSpan, cell);
	            } else {
	                var range = ut.cellsRange;
	                for (var i = 0, len = range.endRowIndex - range.beginRowIndex + 1; i < len; i++) {
	                    ut.insertRow(range.endRowIndex + 1, cell);
	                }
	            }
	            rng.moveToBookmark(bk).select();
	            if (table.getAttribute("interlaced") === "enabled")this.fireEvent("interlacetable", table);
	        }
	    };
	    UE.commands["deleterow"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this);
	            return tableItems.cell ? 0 : -1;
	        },
	        execCommand: function () {
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell),
	                cellsRange = ut.cellsRange,
	                cellInfo = ut.getCellInfo(cell),
	                preCell = ut.getVSideCell(cell),
	                nextCell = ut.getVSideCell(cell, true),
	                rng = this.selection.getRange();
	            if (utils.isEmptyObject(cellsRange)) {
	                ut.deleteRow(cellInfo.rowIndex);
	            } else {
	                for (var i = cellsRange.beginRowIndex; i < cellsRange.endRowIndex + 1; i++) {
	                    ut.deleteRow(cellsRange.beginRowIndex);
	                }
	            }
	            var table = ut.table;
	            if (!table.getElementsByTagName('td').length) {
	                var nextSibling = table.nextSibling;
	                domUtils.remove(table);
	                if (nextSibling) {
	                    rng.setStart(nextSibling, 0).setCursor(false, true);
	                }
	            } else {
	                if (cellInfo.rowSpan == 1 || cellInfo.rowSpan == cellsRange.endRowIndex - cellsRange.beginRowIndex + 1) {
	                    if (nextCell || preCell) rng.selectNodeContents(nextCell || preCell).setCursor(false, true);
	                } else {
	                    var newCell = ut.getCell(cellInfo.rowIndex, ut.indexTable[cellInfo.rowIndex][cellInfo.colIndex].cellIndex);
	                    if (newCell) rng.selectNodeContents(newCell).setCursor(false, true);
	                }
	            }
	            if (table.getAttribute("interlaced") === "enabled")this.fireEvent("interlacetable", table);
	        }
	    };
	    UE.commands["insertcol"] = {
	        queryCommandState: function (cmd) {
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell;
	            return cell && (cell.tagName == "TD" || (cell.tagName == 'TH' && cell !== tableItems.tr.cells[0])) &&
	                getUETable(tableItems.table).colsNum < this.options.maxColNum ? 0 : -1;
	        },
	        execCommand: function (cmd) {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            if (this.queryCommandState(cmd) == -1)return;
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell),
	                cellInfo = ut.getCellInfo(cell);
	
	            //ut.insertCol(!ut.selectedTds.length ? cellInfo.colIndex:ut.cellsRange.beginColIndex);
	            if (!ut.selectedTds.length) {
	                ut.insertCol(cellInfo.colIndex, cell);
	            } else {
	                var range = ut.cellsRange;
	                for (var i = 0, len = range.endColIndex - range.beginColIndex + 1; i < len; i++) {
	                    ut.insertCol(range.beginColIndex, cell);
	                }
	            }
	            rng.moveToBookmark(bk).select(true);
	        }
	    };
	    UE.commands["insertcolnext"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell;
	            return cell && getUETable(tableItems.table).colsNum < this.options.maxColNum ? 0 : -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell),
	                cellInfo = ut.getCellInfo(cell);
	            //ut.insertCol(!ut.selectedTds.length ? cellInfo.colIndex + cellInfo.colSpan:ut.cellsRange.endColIndex +1);
	            if (!ut.selectedTds.length) {
	                ut.insertCol(cellInfo.colIndex + cellInfo.colSpan, cell);
	            } else {
	                var range = ut.cellsRange;
	                for (var i = 0, len = range.endColIndex - range.beginColIndex + 1; i < len; i++) {
	                    ut.insertCol(range.endColIndex + 1, cell);
	                }
	            }
	            rng.moveToBookmark(bk).select();
	        }
	    };
	
	    UE.commands["deletecol"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this);
	            return tableItems.cell ? 0 : -1;
	        },
	        execCommand: function () {
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell),
	                range = ut.cellsRange,
	                cellInfo = ut.getCellInfo(cell),
	                preCell = ut.getHSideCell(cell),
	                nextCell = ut.getHSideCell(cell, true);
	            if (utils.isEmptyObject(range)) {
	                ut.deleteCol(cellInfo.colIndex);
	            } else {
	                for (var i = range.beginColIndex; i < range.endColIndex + 1; i++) {
	                    ut.deleteCol(range.beginColIndex);
	                }
	            }
	            var table = ut.table,
	                rng = this.selection.getRange();
	
	            if (!table.getElementsByTagName('td').length) {
	                var nextSibling = table.nextSibling;
	                domUtils.remove(table);
	                if (nextSibling) {
	                    rng.setStart(nextSibling, 0).setCursor(false, true);
	                }
	            } else {
	                if (domUtils.inDoc(cell, this.document)) {
	                    rng.setStart(cell, 0).setCursor(false, true);
	                } else {
	                    if (nextCell && domUtils.inDoc(nextCell, this.document)) {
	                        rng.selectNodeContents(nextCell).setCursor(false, true);
	                    } else {
	                        if (preCell && domUtils.inDoc(preCell, this.document)) {
	                            rng.selectNodeContents(preCell).setCursor(true, true);
	                        }
	                    }
	                }
	            }
	        }
	    };
	    UE.commands["splittocells"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell;
	            if (!cell) return -1;
	            var ut = getUETable(tableItems.table);
	            if (ut.selectedTds.length > 0) return -1;
	            return cell && (cell.colSpan > 1 || cell.rowSpan > 1) ? 0 : -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell);
	            ut.splitToCells(cell);
	            rng.moveToBookmark(bk).select();
	        }
	    };
	    UE.commands["splittorows"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell;
	            if (!cell) return -1;
	            var ut = getUETable(tableItems.table);
	            if (ut.selectedTds.length > 0) return -1;
	            return cell && cell.rowSpan > 1 ? 0 : -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell);
	            ut.splitToRows(cell);
	            rng.moveToBookmark(bk).select();
	        }
	    };
	    UE.commands["splittocols"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell;
	            if (!cell) return -1;
	            var ut = getUETable(tableItems.table);
	            if (ut.selectedTds.length > 0) return -1;
	            return cell && cell.colSpan > 1 ? 0 : -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell);
	            ut.splitToCols(cell);
	            rng.moveToBookmark(bk).select();
	
	        }
	    };
	
	    UE.commands["adaptbytext"] =
	        UE.commands["adaptbywindow"] = {
	            queryCommandState: function () {
	                return getTableItemsByRange(this).table ? 0 : -1
	            },
	            execCommand: function (cmd) {
	                var tableItems = getTableItemsByRange(this),
	                    table = tableItems.table;
	                if (table) {
	                    if (cmd == 'adaptbywindow') {
	                        resetTdWidth(table, this);
	                    } else {
	                        var cells = domUtils.getElementsByTagName(table, "td th");
	                        utils.each(cells, function (cell) {
	                            cell.removeAttribute("width");
	                        });
	                        table.removeAttribute("width");
	                    }
	                }
	            }
	        };
	
	    //平均分配各列
	    UE.commands['averagedistributecol'] = {
	        queryCommandState: function () {
	            var ut = getUETableBySelected(this);
	            if (!ut) return -1;
	            return ut.isFullRow() || ut.isFullCol() ? 0 : -1;
	        },
	        execCommand: function (cmd) {
	            var me = this,
	                ut = getUETableBySelected(me);
	
	            function getAverageWidth() {
	                var tb = ut.table,
	                    averageWidth, sumWidth = 0, colsNum = 0,
	                    tbAttr = getDefaultValue(me, tb);
	
	                if (ut.isFullRow()) {
	                    sumWidth = tb.offsetWidth;
	                    colsNum = ut.colsNum;
	                } else {
	                    var begin = ut.cellsRange.beginColIndex,
	                        end = ut.cellsRange.endColIndex,
	                        node;
	                    for (var i = begin; i <= end;) {
	                        node = ut.selectedTds[i];
	                        sumWidth += node.offsetWidth;
	                        i += node.colSpan;
	                        colsNum += 1;
	                    }
	                }
	                averageWidth = Math.ceil(sumWidth / colsNum) - tbAttr.tdBorder * 2 - tbAttr.tdPadding * 2;
	                return averageWidth;
	            }
	
	            function setAverageWidth(averageWidth) {
	                utils.each(domUtils.getElementsByTagName(ut.table, "th"), function (node) {
	                    node.setAttribute("width", "");
	                });
	                var cells = ut.isFullRow() ? domUtils.getElementsByTagName(ut.table, "td") : ut.selectedTds;
	
	                utils.each(cells, function (node) {
	                    if (node.colSpan == 1) {
	                        node.setAttribute("width", averageWidth);
	                    }
	                });
	            }
	
	            if (ut && ut.selectedTds.length) {
	                setAverageWidth(getAverageWidth());
	            }
	        }
	    };
	    //平均分配各行
	    UE.commands['averagedistributerow'] = {
	        queryCommandState: function () {
	            var ut = getUETableBySelected(this);
	            if (!ut) return -1;
	            if (ut.selectedTds && /th/ig.test(ut.selectedTds[0].tagName)) return -1;
	            return ut.isFullRow() || ut.isFullCol() ? 0 : -1;
	        },
	        execCommand: function (cmd) {
	            var me = this,
	                ut = getUETableBySelected(me);
	
	            function getAverageHeight() {
	                var averageHeight, rowNum, sumHeight = 0,
	                    tb = ut.table,
	                    tbAttr = getDefaultValue(me, tb),
	                    tdpadding = parseInt(domUtils.getComputedStyle(tb.getElementsByTagName('td')[0], "padding-top"));
	
	                if (ut.isFullCol()) {
	                    var captionArr = domUtils.getElementsByTagName(tb, "caption"),
	                        thArr = domUtils.getElementsByTagName(tb, "th"),
	                        captionHeight, thHeight;
	
	                    if (captionArr.length > 0) {
	                        captionHeight = captionArr[0].offsetHeight;
	                    }
	                    if (thArr.length > 0) {
	                        thHeight = thArr[0].offsetHeight;
	                    }
	
	                    sumHeight = tb.offsetHeight - (captionHeight || 0) - (thHeight || 0);
	                    rowNum = thArr.length == 0 ? ut.rowsNum : (ut.rowsNum - 1);
	                } else {
	                    var begin = ut.cellsRange.beginRowIndex,
	                        end = ut.cellsRange.endRowIndex,
	                        count = 0,
	                        trs = domUtils.getElementsByTagName(tb, "tr");
	                    for (var i = begin; i <= end; i++) {
	                        sumHeight += trs[i].offsetHeight;
	                        count += 1;
	                    }
	                    rowNum = count;
	                }
	                //ie8下是混杂模式
	                if (browser.ie && browser.version < 9) {
	                    averageHeight = Math.ceil(sumHeight / rowNum);
	                } else {
	                    averageHeight = Math.ceil(sumHeight / rowNum) - tbAttr.tdBorder * 2 - tdpadding * 2;
	                }
	                return averageHeight;
	            }
	
	            function setAverageHeight(averageHeight) {
	                var cells = ut.isFullCol() ? domUtils.getElementsByTagName(ut.table, "td") : ut.selectedTds;
	                utils.each(cells, function (node) {
	                    if (node.rowSpan == 1) {
	                        node.setAttribute("height", averageHeight);
	                    }
	                });
	            }
	
	            if (ut && ut.selectedTds.length) {
	                setAverageHeight(getAverageHeight());
	            }
	        }
	    };
	
	    //单元格对齐方式
	    UE.commands['cellalignment'] = {
	        queryCommandState: function () {
	            return getTableItemsByRange(this).table ? 0 : -1
	        },
	        execCommand: function (cmd, data) {
	            var me = this,
	                ut = getUETableBySelected(me);
	
	            if (!ut) {
	                var start = me.selection.getStart(),
	                    cell = start && domUtils.findParentByTagName(start, ["td", "th", "caption"], true);
	                if (!/caption/ig.test(cell.tagName)) {
	                    domUtils.setAttributes(cell, data);
	                } else {
	                    cell.style.textAlign = data.align;
	                    cell.style.verticalAlign = data.vAlign;
	                }
	                me.selection.getRange().setCursor(true);
	            } else {
	                utils.each(ut.selectedTds, function (cell) {
	                    domUtils.setAttributes(cell, data);
	                });
	            }
	        },
	        /**
	         * 查询当前点击的单元格的对齐状态， 如果当前已经选择了多个单元格， 则会返回所有单元格经过统一协调过后的状态
	         * @see UE.UETable.getTableCellAlignState
	         */
	        queryCommandValue: function (cmd) {
	
	            var activeMenuCell = getTableItemsByRange( this).cell;
	
	            if( !activeMenuCell ) {
	                activeMenuCell = getSelectedArr(this)[0];
	            }
	
	            if (!activeMenuCell) {
	
	                return null;
	
	            } else {
	
	                //获取同时选中的其他单元格
	                var cells = UE.UETable.getUETable(activeMenuCell).selectedTds;
	
	                !cells.length && ( cells = activeMenuCell );
	
	                return UE.UETable.getTableCellAlignState(cells);
	
	            }
	
	        }
	    };
	    //表格对齐方式
	    UE.commands['tablealignment'] = {
	        queryCommandState: function () {
	            if (browser.ie && browser.version < 8) {
	                return -1;
	            }
	            return getTableItemsByRange(this).table ? 0 : -1
	        },
	        execCommand: function (cmd, value) {
	            var me = this,
	                start = me.selection.getStart(),
	                table = start && domUtils.findParentByTagName(start, ["table"], true);
	
	            if (table) {
	                table.setAttribute("align",value);
	            }
	        }
	    };
	
	    //表格属性
	    UE.commands['edittable'] = {
	        queryCommandState: function () {
	            return getTableItemsByRange(this).table ? 0 : -1
	        },
	        execCommand: function (cmd, color) {
	            var rng = this.selection.getRange(),
	                table = domUtils.findParentByTagName(rng.startContainer, 'table');
	            if (table) {
	                var arr = domUtils.getElementsByTagName(table, "td").concat(
	                    domUtils.getElementsByTagName(table, "th"),
	                    domUtils.getElementsByTagName(table, "caption")
	                );
	                utils.each(arr, function (node) {
	                    node.style.borderColor = color;
	                });
	            }
	        }
	    };
	    //单元格属性
	    UE.commands['edittd'] = {
	        queryCommandState: function () {
	            return getTableItemsByRange(this).table ? 0 : -1
	        },
	        execCommand: function (cmd, bkColor) {
	            var me = this,
	                ut = getUETableBySelected(me);
	
	            if (!ut) {
	                var start = me.selection.getStart(),
	                    cell = start && domUtils.findParentByTagName(start, ["td", "th", "caption"], true);
	                if (cell) {
	                    cell.style.backgroundColor = bkColor;
	                }
	            } else {
	                utils.each(ut.selectedTds, function (cell) {
	                    cell.style.backgroundColor = bkColor;
	                });
	            }
	        }
	    };
	
	    UE.commands["settablebackground"] = {
	        queryCommandState: function () {
	            return getSelectedArr(this).length > 1 ? 0 : -1;
	        },
	        execCommand: function (cmd, value) {
	            var cells, ut;
	            cells = getSelectedArr(this);
	            ut = getUETable(cells[0]);
	            ut.setBackground(cells, value);
	        }
	    };
	
	    UE.commands["cleartablebackground"] = {
	        queryCommandState: function () {
	            var cells = getSelectedArr(this);
	            if (!cells.length)return -1;
	            for (var i = 0, cell; cell = cells[i++];) {
	                if (cell.style.backgroundColor !== "") return 0;
	            }
	            return -1;
	        },
	        execCommand: function () {
	            var cells = getSelectedArr(this),
	                ut = getUETable(cells[0]);
	            ut.removeBackground(cells);
	        }
	    };
	
	    UE.commands["interlacetable"] = UE.commands["uninterlacetable"] = {
	        queryCommandState: function (cmd) {
	            var table = getTableItemsByRange(this).table;
	            if (!table) return -1;
	            var interlaced = table.getAttribute("interlaced");
	            if (cmd == "interlacetable") {
	                //TODO 待定
	                //是否需要待定，如果设置，则命令只能单次执行成功，但反射具备toggle效果；否则可以覆盖前次命令，但反射将不存在toggle效果
	                return (interlaced === "enabled") ? -1 : 0;
	            } else {
	                return (!interlaced || interlaced === "disabled") ? -1 : 0;
	            }
	        },
	        execCommand: function (cmd, classList) {
	            var table = getTableItemsByRange(this).table;
	            if (cmd == "interlacetable") {
	                table.setAttribute("interlaced", "enabled");
	                this.fireEvent("interlacetable", table, classList);
	            } else {
	                table.setAttribute("interlaced", "disabled");
	                this.fireEvent("uninterlacetable", table);
	            }
	        }
	    };
	    UE.commands["setbordervisible"] = {
	        queryCommandState: function (cmd) {
	            var table = getTableItemsByRange(this).table;
	            if (!table) return -1;
	            return 0;
	        },
	        execCommand: function () {
	            var table = getTableItemsByRange(this).table;
	            utils.each(domUtils.getElementsByTagName(table,'td'),function(td){
	                td.style.borderWidth = '1px';
	                td.style.borderStyle = 'solid';
	            })
	        }
	    };
	    function resetTdWidth(table, editor) {
	        var tds = domUtils.getElementsByTagName(table,'td th');
	        utils.each(tds, function (td) {
	            td.removeAttribute("width");
	        });
	        table.setAttribute('width', getTableWidth(editor, true, getDefaultValue(editor, table)));
	        var tdsWidths = [];
	        setTimeout(function () {
	            utils.each(tds, function (td) {
	                (td.colSpan == 1) && tdsWidths.push(td.offsetWidth)
	            })
	            utils.each(tds, function (td,i) {
	                (td.colSpan == 1) && td.setAttribute("width", tdsWidths[i] + "");
	            })
	        }, 0);
	    }
	
	    function getTableWidth(editor, needIEHack, defaultValue) {
	        var body = editor.body;
	        return body.offsetWidth - (needIEHack ? parseInt(domUtils.getComputedStyle(body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (editor.options.offsetWidth || 0);
	    }
	
	    function getSelectedArr(editor) {
	        var cell = getTableItemsByRange(editor).cell;
	        if (cell) {
	            var ut = getUETable(cell);
	            return ut.selectedTds.length ? ut.selectedTds : [cell];
	        } else {
	            return [];
	        }
	    }
	})();
	
	
	// plugins/table.action.js
	/**
	 * Created with JetBrains PhpStorm.
	 * User: taoqili
	 * Date: 12-10-12
	 * Time: 上午10:05
	 * To change this template use File | Settings | File Templates.
	 */
	UE.plugins['table'] = function () {
	    var me = this,
	        tabTimer = null,
	        //拖动计时器
	        tableDragTimer = null,
	        //双击计时器
	        tableResizeTimer = null,
	        //单元格最小宽度
	        cellMinWidth = 5,
	        isInResizeBuffer = false,
	        //单元格边框大小
	        cellBorderWidth = 5,
	        //鼠标偏移距离
	        offsetOfTableCell = 10,
	        //记录在有限时间内的点击状态， 共有3个取值， 0, 1, 2。 0代表未初始化， 1代表单击了1次，2代表2次
	        singleClickState = 0,
	        userActionStatus = null,
	        //双击允许的时间范围
	        dblclickTime = 360,
	        UT = UE.UETable,
	        getUETable = function (tdOrTable) {
	            return UT.getUETable(tdOrTable);
	        },
	        getUETableBySelected = function (editor) {
	            return UT.getUETableBySelected(editor);
	        },
	        getDefaultValue = function (editor, table) {
	            return UT.getDefaultValue(editor, table);
	        },
	        removeSelectedClass = function (cells) {
	            return UT.removeSelectedClass(cells);
	        };
	
	    function showError(e) {
	//        throw e;
	    }
	    me.ready(function(){
	        var me = this;
	        var orgGetText = me.selection.getText;
	        me.selection.getText = function(){
	            var table = getUETableBySelected(me);
	            if(table){
	                var str = '';
	                utils.each(table.selectedTds,function(td){
	                    str += td[browser.ie?'innerText':'textContent'];
	                })
	                return str;
	            }else{
	                return orgGetText.call(me.selection)
	            }
	
	        }
	    })
	
	    //处理拖动及框选相关方法
	    var startTd = null, //鼠标按下时的锚点td
	        currentTd = null, //当前鼠标经过时的td
	        onDrag = "", //指示当前拖动状态，其值可为"","h","v" ,分别表示未拖动状态，横向拖动状态，纵向拖动状态，用于鼠标移动过程中的判断
	        onBorder = false, //检测鼠标按下时是否处在单元格边缘位置
	        dragButton = null,
	        dragOver = false,
	        dragLine = null, //模拟的拖动线
	        dragTd = null;    //发生拖动的目标td
	
	    var mousedown = false,
	    //todo 判断混乱模式
	        needIEHack = true;
	
	    me.setOpt({
	        'maxColNum':20,
	        'maxRowNum':100,
	        'defaultCols':5,
	        'defaultRows':5,
	        'tdvalign':'top',
	        'cursorpath':me.options.UEDITOR_HOME_URL + "themes/default/images/cursor_",
	        'tableDragable':false,
	        'classList':["ue-table-interlace-color-single","ue-table-interlace-color-double"]
	    });
	    me.getUETable = getUETable;
	    var commands = {
	        'deletetable':1,
	        'inserttable':1,
	        'cellvalign':1,
	        'insertcaption':1,
	        'deletecaption':1,
	        'inserttitle':1,
	        'deletetitle':1,
	        "mergeright":1,
	        "mergedown":1,
	        "mergecells":1,
	        "insertrow":1,
	        "insertrownext":1,
	        "deleterow":1,
	        "insertcol":1,
	        "insertcolnext":1,
	        "deletecol":1,
	        "splittocells":1,
	        "splittorows":1,
	        "splittocols":1,
	        "adaptbytext":1,
	        "adaptbywindow":1,
	        "adaptbycustomer":1,
	        "insertparagraph":1,
	        "insertparagraphbeforetable":1,
	        "averagedistributecol":1,
	        "averagedistributerow":1
	    };
	    me.ready(function () {
	        utils.cssRule('table',
	            //选中的td上的样式
	            '.selectTdClass{background-color:#edf5fa !important}' +
	                'table.noBorderTable td,table.noBorderTable th,table.noBorderTable caption{border:1px dashed #ddd !important}' +
	                //插入的表格的默认样式
	                'table{margin-bottom:10px;border-collapse:collapse;display:table;}' +
	                'td,th{padding: 5px 10px;border: 1px solid #DDD;}' +
	                'caption{border:1px dashed #DDD;border-bottom:0;padding:3px;text-align:center;}' +
	                'th{border-top:1px solid #BBB;background-color:#F7F7F7;}' +
	                'table tr.firstRow th{border-top-width:2px;}' +
	                '.ue-table-interlace-color-single{ background-color: #fcfcfc; } .ue-table-interlace-color-double{ background-color: #f7faff; }' +
	                'td p{margin:0;padding:0;}', me.document);
	
	        var tableCopyList, isFullCol, isFullRow;
	        //注册del/backspace事件
	        me.addListener('keydown', function (cmd, evt) {
	            var me = this;
	            var keyCode = evt.keyCode || evt.which;
	
	            if (keyCode == 8) {
	
	                var ut = getUETableBySelected(me);
	                if (ut && ut.selectedTds.length) {
	
	                    if (ut.isFullCol()) {
	                        me.execCommand('deletecol')
	                    } else if (ut.isFullRow()) {
	                        me.execCommand('deleterow')
	                    } else {
	                        me.fireEvent('delcells');
	                    }
	                    domUtils.preventDefault(evt);
	                }
	
	                var caption = domUtils.findParentByTagName(me.selection.getStart(), 'caption', true),
	                    range = me.selection.getRange();
	                if (range.collapsed && caption && isEmptyBlock(caption)) {
	                    me.fireEvent('saveScene');
	                    var table = caption.parentNode;
	                    domUtils.remove(caption);
	                    if (table) {
	                        range.setStart(table.rows[0].cells[0], 0).setCursor(false, true);
	                    }
	                    me.fireEvent('saveScene');
	                }
	
	            }
	
	            if (keyCode == 46) {
	
	                ut = getUETableBySelected(me);
	                if (ut) {
	                    me.fireEvent('saveScene');
	                    for (var i = 0, ci; ci = ut.selectedTds[i++];) {
	                        domUtils.fillNode(me.document, ci)
	                    }
	                    me.fireEvent('saveScene');
	                    domUtils.preventDefault(evt);
	
	                }
	
	            }
	            if (keyCode == 13) {
	
	                var rng = me.selection.getRange(),
	                    caption = domUtils.findParentByTagName(rng.startContainer, 'caption', true);
	                if (caption) {
	                    var table = domUtils.findParentByTagName(caption, 'table');
	                    if (!rng.collapsed) {
	
	                        rng.deleteContents();
	                        me.fireEvent('saveScene');
	                    } else {
	                        if (caption) {
	                            rng.setStart(table.rows[0].cells[0], 0).setCursor(false, true);
	                        }
	                    }
	                    domUtils.preventDefault(evt);
	                    return;
	                }
	                if (rng.collapsed) {
	                    var table = domUtils.findParentByTagName(rng.startContainer, 'table');
	                    if (table) {
	                        var cell = table.rows[0].cells[0],
	                            start = domUtils.findParentByTagName(me.selection.getStart(), ['td', 'th'], true),
	                            preNode = table.previousSibling;
	                        if (cell === start && (!preNode || preNode.nodeType == 1 && preNode.tagName == 'TABLE' ) && domUtils.isStartInblock(rng)) {
	                            var first = domUtils.findParent(me.selection.getStart(), function(n){return domUtils.isBlockElm(n)}, true);
	                            if(first && ( /t(h|d)/i.test(first.tagName) || first ===  start.firstChild )){
	                                me.execCommand('insertparagraphbeforetable');
	                                domUtils.preventDefault(evt);
	                            }
	
	                        }
	                    }
	                }
	            }
	
	            if ((evt.ctrlKey || evt.metaKey) && evt.keyCode == '67') {
	                tableCopyList = null;
	                var ut = getUETableBySelected(me);
	                if (ut) {
	                    var tds = ut.selectedTds;
	                    isFullCol = ut.isFullCol();
	                    isFullRow = ut.isFullRow();
	                    tableCopyList = [
	                        [ut.cloneCell(tds[0],null,true)]
	                    ];
	                    for (var i = 1, ci; ci = tds[i]; i++) {
	                        if (ci.parentNode !== tds[i - 1].parentNode) {
	                            tableCopyList.push([ut.cloneCell(ci,null,true)]);
	                        } else {
	                            tableCopyList[tableCopyList.length - 1].push(ut.cloneCell(ci,null,true));
	                        }
	
	                    }
	                }
	            }
	        });
	        me.addListener("tablehasdeleted",function(){
	            toggleDraggableState(this, false, "", null);
	            if (dragButton)domUtils.remove(dragButton);
	        });
	
	        me.addListener('beforepaste', function (cmd, html) {
	            var me = this;
	            var rng = me.selection.getRange();
	            if (domUtils.findParentByTagName(rng.startContainer, 'caption', true)) {
	                var div = me.document.createElement("div");
	                div.innerHTML = html.html;
	                //trace:3729
	                html.html = div[browser.ie9below ? 'innerText' : 'textContent'];
	                return;
	            }
	            var table = getUETableBySelected(me);
	            if (tableCopyList) {
	                me.fireEvent('saveScene');
	                var rng = me.selection.getRange();
	                var td = domUtils.findParentByTagName(rng.startContainer, ['td', 'th'], true), tmpNode, preNode;
	                if (td) {
	                    var ut = getUETable(td);
	                    if (isFullRow) {
	                        var rowIndex = ut.getCellInfo(td).rowIndex;
	                        if (td.tagName == 'TH') {
	                            rowIndex++;
	                        }
	                        for (var i = 0, ci; ci = tableCopyList[i++];) {
	                            var tr = ut.insertRow(rowIndex++, "td");
	                            for (var j = 0, cj; cj = ci[j]; j++) {
	                                var cell = tr.cells[j];
	                                if (!cell) {
	                                    cell = tr.insertCell(j)
	                                }
	                                cell.innerHTML = cj.innerHTML;
	                                cj.getAttribute('width') && cell.setAttribute('width', cj.getAttribute('width'));
	                                cj.getAttribute('vAlign') && cell.setAttribute('vAlign', cj.getAttribute('vAlign'));
	                                cj.getAttribute('align') && cell.setAttribute('align', cj.getAttribute('align'));
	                                cj.style.cssText && (cell.style.cssText = cj.style.cssText)
	                            }
	                            for (var j = 0, cj; cj = tr.cells[j]; j++) {
	                                if (!ci[j])
	                                    break;
	                                cj.innerHTML = ci[j].innerHTML;
	                                ci[j].getAttribute('width') && cj.setAttribute('width', ci[j].getAttribute('width'));
	                                ci[j].getAttribute('vAlign') && cj.setAttribute('vAlign', ci[j].getAttribute('vAlign'));
	                                ci[j].getAttribute('align') && cj.setAttribute('align', ci[j].getAttribute('align'));
	                                ci[j].style.cssText && (cj.style.cssText = ci[j].style.cssText)
	                            }
	                        }
	                    } else {
	                        if (isFullCol) {
	                            cellInfo = ut.getCellInfo(td);
	                            var maxColNum = 0;
	                            for (var j = 0, ci = tableCopyList[0], cj; cj = ci[j++];) {
	                                maxColNum += cj.colSpan || 1;
	                            }
	                            me.__hasEnterExecCommand = true;
	                            for (i = 0; i < maxColNum; i++) {
	                                me.execCommand('insertcol');
	                            }
	                            me.__hasEnterExecCommand = false;
	                            td = ut.table.rows[0].cells[cellInfo.cellIndex];
	                            if (td.tagName == 'TH') {
	                                td = ut.table.rows[1].cells[cellInfo.cellIndex];
	                            }
	                        }
	                        for (var i = 0, ci; ci = tableCopyList[i++];) {
	                            tmpNode = td;
	                            for (var j = 0, cj; cj = ci[j++];) {
	                                if (td) {
	                                    td.innerHTML = cj.innerHTML;
	                                    //todo 定制处理
	                                    cj.getAttribute('width') && td.setAttribute('width', cj.getAttribute('width'));
	                                    cj.getAttribute('vAlign') && td.setAttribute('vAlign', cj.getAttribute('vAlign'));
	                                    cj.getAttribute('align') && td.setAttribute('align', cj.getAttribute('align'));
	                                    cj.style.cssText && (td.style.cssText = cj.style.cssText);
	                                    preNode = td;
	                                    td = td.nextSibling;
	                                } else {
	                                    var cloneTd = cj.cloneNode(true);
	                                    domUtils.removeAttributes(cloneTd, ['class', 'rowSpan', 'colSpan']);
	
	                                    preNode.parentNode.appendChild(cloneTd)
	                                }
	                            }
	                            td = ut.getNextCell(tmpNode, true, true);
	                            if (!tableCopyList[i])
	                                break;
	                            if (!td) {
	                                var cellInfo = ut.getCellInfo(tmpNode);
	                                ut.table.insertRow(ut.table.rows.length);
	                                ut.update();
	                                td = ut.getVSideCell(tmpNode, true);
	                            }
	                        }
	                    }
	                    ut.update();
	                } else {
	                    table = me.document.createElement('table');
	                    for (var i = 0, ci; ci = tableCopyList[i++];) {
	                        var tr = table.insertRow(table.rows.length);
	                        for (var j = 0, cj; cj = ci[j++];) {
	                            cloneTd = UT.cloneCell(cj,null,true);
	                            domUtils.removeAttributes(cloneTd, ['class']);
	                            tr.appendChild(cloneTd)
	                        }
	                        if (j == 2 && cloneTd.rowSpan > 1) {
	                            cloneTd.rowSpan = 1;
	                        }
	                    }
	
	                    var defaultValue = getDefaultValue(me),
	                        width = me.body.offsetWidth -
	                            (needIEHack ? parseInt(domUtils.getComputedStyle(me.body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (me.options.offsetWidth || 0);
	                    me.execCommand('insertHTML', '<table  ' +
	                        ( isFullCol && isFullRow ? 'width="' + width + '"' : '') +
	                        '>' + table.innerHTML.replace(/>\s*</g, '><').replace(/\bth\b/gi, "td") + '</table>')
	                }
	                me.fireEvent('contentchange');
	                me.fireEvent('saveScene');
	                html.html = '';
	                return true;
	            } else {
	                var div = me.document.createElement("div"), tables;
	                div.innerHTML = html.html;
	                tables = div.getElementsByTagName("table");
	                if (domUtils.findParentByTagName(me.selection.getStart(), 'table')) {
	                    utils.each(tables, function (t) {
	                        domUtils.remove(t)
	                    });
	                    if (domUtils.findParentByTagName(me.selection.getStart(), 'caption', true)) {
	                        div.innerHTML = div[browser.ie ? 'innerText' : 'textContent'];
	                    }
	                } else {
	                    utils.each(tables, function (table) {
	                        removeStyleSize(table, true);
	                        domUtils.removeAttributes(table, ['style', 'border']);
	                        utils.each(domUtils.getElementsByTagName(table, "td"), function (td) {
	                            if (isEmptyBlock(td)) {
	                                domUtils.fillNode(me.document, td);
	                            }
	                            removeStyleSize(td, true);
	//                            domUtils.removeAttributes(td, ['style'])
	                        });
	                    });
	                }
	                html.html = div.innerHTML;
	            }
	        });
	
	        me.addListener('afterpaste', function () {
	            utils.each(domUtils.getElementsByTagName(me.body, "table"), function (table) {
	                if (table.offsetWidth > me.body.offsetWidth) {
	                    var defaultValue = getDefaultValue(me, table);
	                    table.style.width = me.body.offsetWidth - (needIEHack ? parseInt(domUtils.getComputedStyle(me.body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (me.options.offsetWidth || 0) + 'px'
	                }
	            })
	        });
	        me.addListener('blur', function () {
	            tableCopyList = null;
	        });
	        var timer;
	        me.addListener('keydown', function () {
	            clearTimeout(timer);
	            timer = setTimeout(function () {
	                var rng = me.selection.getRange(),
	                    cell = domUtils.findParentByTagName(rng.startContainer, ['th', 'td'], true);
	                if (cell) {
	                    var table = cell.parentNode.parentNode.parentNode;
	                    if (table.offsetWidth > table.getAttribute("width")) {
	                        cell.style.wordBreak = "break-all";
	                    }
	                }
	
	            }, 100);
	        });
	        me.addListener("selectionchange", function () {
	            toggleDraggableState(me, false, "", null);
	        });
	
	
	        //内容变化时触发索引更新
	        //todo 可否考虑标记检测，如果不涉及表格的变化就不进行索引重建和更新
	        me.addListener("contentchange", function () {
	            var me = this;
	            //尽可能排除一些不需要更新的状况
	            hideDragLine(me);
	            if (getUETableBySelected(me))return;
	            var rng = me.selection.getRange();
	            var start = rng.startContainer;
	            start = domUtils.findParentByTagName(start, ['td', 'th'], true);
	            utils.each(domUtils.getElementsByTagName(me.document, 'table'), function (table) {
	                if (me.fireEvent("excludetable", table) === true) return;
	                table.ueTable = new UT(table);
	                //trace:3742
	//                utils.each(domUtils.getElementsByTagName(me.document, 'td'), function (td) {
	//
	//                    if (domUtils.isEmptyBlock(td) && td !== start) {
	//                        domUtils.fillNode(me.document, td);
	//                        if (browser.ie && browser.version == 6) {
	//                            td.innerHTML = '&nbsp;'
	//                        }
	//                    }
	//                });
	//                utils.each(domUtils.getElementsByTagName(me.document, 'th'), function (th) {
	//                    if (domUtils.isEmptyBlock(th) && th !== start) {
	//                        domUtils.fillNode(me.document, th);
	//                        if (browser.ie && browser.version == 6) {
	//                            th.innerHTML = '&nbsp;'
	//                        }
	//                    }
	//                });
	                table.onmouseover = function () {
	                    me.fireEvent('tablemouseover', table);
	                };
	                table.onmousemove = function () {
	                    me.fireEvent('tablemousemove', table);
	                    me.options.tableDragable && toggleDragButton(true, this, me);
	                    utils.defer(function(){
	                        me.fireEvent('contentchange',50)
	                    },true)
	                };
	                table.onmouseout = function () {
	                    me.fireEvent('tablemouseout', table);
	                    toggleDraggableState(me, false, "", null);
	                    hideDragLine(me);
	                };
	                table.onclick = function (evt) {
	                    evt = me.window.event || evt;
	                    var target = getParentTdOrTh(evt.target || evt.srcElement);
	                    if (!target)return;
	                    var ut = getUETable(target),
	                        table = ut.table,
	                        cellInfo = ut.getCellInfo(target),
	                        cellsRange,
	                        rng = me.selection.getRange();
	//                    if ("topLeft" == inPosition(table, mouseCoords(evt))) {
	//                        cellsRange = ut.getCellsRange(ut.table.rows[0].cells[0], ut.getLastCell());
	//                        ut.setSelected(cellsRange);
	//                        return;
	//                    }
	//                    if ("bottomRight" == inPosition(table, mouseCoords(evt))) {
	//
	//                        return;
	//                    }
	                    if (inTableSide(table, target, evt, true)) {
	                        var endTdCol = ut.getCell(ut.indexTable[ut.rowsNum - 1][cellInfo.colIndex].rowIndex, ut.indexTable[ut.rowsNum - 1][cellInfo.colIndex].cellIndex);
	                        if (evt.shiftKey && ut.selectedTds.length) {
	                            if (ut.selectedTds[0] !== endTdCol) {
	                                cellsRange = ut.getCellsRange(ut.selectedTds[0], endTdCol);
	                                ut.setSelected(cellsRange);
	                            } else {
	                                rng && rng.selectNodeContents(endTdCol).select();
	                            }
	                        } else {
	                            if (target !== endTdCol) {
	                                cellsRange = ut.getCellsRange(target, endTdCol);
	                                ut.setSelected(cellsRange);
	                            } else {
	                                rng && rng.selectNodeContents(endTdCol).select();
	                            }
	                        }
	                        return;
	                    }
	                    if (inTableSide(table, target, evt)) {
	                        var endTdRow = ut.getCell(ut.indexTable[cellInfo.rowIndex][ut.colsNum - 1].rowIndex, ut.indexTable[cellInfo.rowIndex][ut.colsNum - 1].cellIndex);
	                        if (evt.shiftKey && ut.selectedTds.length) {
	                            if (ut.selectedTds[0] !== endTdRow) {
	                                cellsRange = ut.getCellsRange(ut.selectedTds[0], endTdRow);
	                                ut.setSelected(cellsRange);
	                            } else {
	                                rng && rng.selectNodeContents(endTdRow).select();
	                            }
	                        } else {
	                            if (target !== endTdRow) {
	                                cellsRange = ut.getCellsRange(target, endTdRow);
	                                ut.setSelected(cellsRange);
	                            } else {
	                                rng && rng.selectNodeContents(endTdRow).select();
	                            }
	                        }
	                    }
	                };
	            });
	
	            switchBorderColor(me, true);
	        });
	
	        domUtils.on(me.document, "mousemove", mouseMoveEvent);
	
	        domUtils.on(me.document, "mouseout", function (evt) {
	            var target = evt.target || evt.srcElement;
	            if (target.tagName == "TABLE") {
	                toggleDraggableState(me, false, "", null);
	            }
	        });
	        /**
	         * 表格隔行变色
	         */
	        me.addListener("interlacetable",function(type,table,classList){
	            if(!table) return;
	            var me = this,
	                rows = table.rows,
	                len = rows.length,
	                getClass = function(list,index,repeat){
	                    return list[index] ? list[index] : repeat ? list[index % list.length]: "";
	                };
	            for(var i = 0;i<len;i++){
	                rows[i].className = getClass( classList|| me.options.classList,i,true);
	            }
	        });
	        me.addListener("uninterlacetable",function(type,table){
	            if(!table) return;
	            var me = this,
	                rows = table.rows,
	                classList = me.options.classList,
	                len = rows.length;
	            for(var i = 0;i<len;i++){
	                domUtils.removeClasses( rows[i], classList );
	            }
	        });
	
	        me.addListener("mousedown", mouseDownEvent);
	        me.addListener("mouseup", mouseUpEvent);
	        //拖动的时候触发mouseup
	        domUtils.on( me.body, 'dragstart', function( evt ){
	            mouseUpEvent.call( me, 'dragstart', evt );
	        });
	        me.addOutputRule(function(root){
	            utils.each(root.getNodesByTagName('div'),function(n){
	                if (n.getAttr('id') == 'ue_tableDragLine') {
	                    n.parentNode.removeChild(n);
	                }
	            });
	        });
	
	        var currentRowIndex = 0;
	        me.addListener("mousedown", function () {
	            currentRowIndex = 0;
	        });
	        me.addListener('tabkeydown', function () {
	            var range = this.selection.getRange(),
	                common = range.getCommonAncestor(true, true),
	                table = domUtils.findParentByTagName(common, 'table');
	            if (table) {
	                if (domUtils.findParentByTagName(common, 'caption', true)) {
	                    var cell = domUtils.getElementsByTagName(table, 'th td');
	                    if (cell && cell.length) {
	                        range.setStart(cell[0], 0).setCursor(false, true)
	                    }
	                } else {
	                    var cell = domUtils.findParentByTagName(common, ['td', 'th'], true),
	                        ua = getUETable(cell);
	                    currentRowIndex = cell.rowSpan > 1 ? currentRowIndex : ua.getCellInfo(cell).rowIndex;
	                    var nextCell = ua.getTabNextCell(cell, currentRowIndex);
	                    if (nextCell) {
	                        if (isEmptyBlock(nextCell)) {
	                            range.setStart(nextCell, 0).setCursor(false, true)
	                        } else {
	                            range.selectNodeContents(nextCell).select()
	                        }
	                    } else {
	                        me.fireEvent('saveScene');
	                        me.__hasEnterExecCommand = true;
	                        this.execCommand('insertrownext');
	                        me.__hasEnterExecCommand = false;
	                        range = this.selection.getRange();
	                        range.setStart(table.rows[table.rows.length - 1].cells[0], 0).setCursor();
	                        me.fireEvent('saveScene');
	                    }
	                }
	                return true;
	            }
	
	        });
	        browser.ie && me.addListener('selectionchange', function () {
	            toggleDraggableState(this, false, "", null);
	        });
	        me.addListener("keydown", function (type, evt) {
	            var me = this;
	            //处理在表格的最后一个输入tab产生新的表格
	            var keyCode = evt.keyCode || evt.which;
	            if (keyCode == 8 || keyCode == 46) {
	                return;
	            }
	            var notCtrlKey = !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey;
	            notCtrlKey && removeSelectedClass(domUtils.getElementsByTagName(me.body, "td"));
	            var ut = getUETableBySelected(me);
	            if (!ut) return;
	            notCtrlKey && ut.clearSelected();
	        });
	
	        me.addListener("beforegetcontent", function () {
	            switchBorderColor(this, false);
	            browser.ie && utils.each(this.document.getElementsByTagName('caption'), function (ci) {
	                if (domUtils.isEmptyNode(ci)) {
	                    ci.innerHTML = '&nbsp;'
	                }
	            });
	        });
	        me.addListener("aftergetcontent", function () {
	            switchBorderColor(this, true);
	        });
	        me.addListener("getAllHtml", function () {
	            removeSelectedClass(me.document.getElementsByTagName("td"));
	        });
	        //修正全屏状态下插入的表格宽度在非全屏状态下撑开编辑器的情况
	        me.addListener("fullscreenchanged", function (type, fullscreen) {
	            if (!fullscreen) {
	                var ratio = this.body.offsetWidth / document.body.offsetWidth,
	                    tables = domUtils.getElementsByTagName(this.body, "table");
	                utils.each(tables, function (table) {
	                    if (table.offsetWidth < me.body.offsetWidth) return false;
	                    var tds = domUtils.getElementsByTagName(table, "td"),
	                        backWidths = [];
	                    utils.each(tds, function (td) {
	                        backWidths.push(td.offsetWidth);
	                    });
	                    for (var i = 0, td; td = tds[i]; i++) {
	                        td.setAttribute("width", Math.floor(backWidths[i] * ratio));
	                    }
	                    table.setAttribute("width", Math.floor(getTableWidth(me, needIEHack, getDefaultValue(me))))
	                });
	            }
	        });
	
	        //重写execCommand命令，用于处理框选时的处理
	        var oldExecCommand = me.execCommand;
	        me.execCommand = function (cmd, datatat) {
	
	            var me = this,
	                args = arguments;
	
	            cmd = cmd.toLowerCase();
	            var ut = getUETableBySelected(me), tds,
	                range = new dom.Range(me.document),
	                cmdFun = me.commands[cmd] || UE.commands[cmd],
	                result;
	            if (!cmdFun) return;
	            if (ut && !commands[cmd] && !cmdFun.notNeedUndo && !me.__hasEnterExecCommand) {
	                me.__hasEnterExecCommand = true;
	                me.fireEvent("beforeexeccommand", cmd);
	                tds = ut.selectedTds;
	                var lastState = -2, lastValue = -2, value, state;
	                for (var i = 0, td; td = tds[i]; i++) {
	                    if (isEmptyBlock(td)) {
	                        range.setStart(td, 0).setCursor(false, true)
	                    } else {
	                        range.selectNode(td).select(true);
	                    }
	                    state = me.queryCommandState(cmd);
	                    value = me.queryCommandValue(cmd);
	                    if (state != -1) {
	                        if (lastState !== state || lastValue !== value) {
	                            me._ignoreContentChange = true;
	                            result = oldExecCommand.apply(me, arguments);
	                            me._ignoreContentChange = false;
	
	                        }
	                        lastState = me.queryCommandState(cmd);
	                        lastValue = me.queryCommandValue(cmd);
	                        if (domUtils.isEmptyBlock(td)) {
	                            domUtils.fillNode(me.document, td)
	                        }
	                    }
	                }
	                range.setStart(tds[0], 0).shrinkBoundary(true).setCursor(false, true);
	                me.fireEvent('contentchange');
	                me.fireEvent("afterexeccommand", cmd);
	                me.__hasEnterExecCommand = false;
	                me._selectionChange();
	            } else {
	                result = oldExecCommand.apply(me, arguments);
	            }
	            return result;
	        };
	
	
	    });
	    /**
	     * 删除obj的宽高style，改成属性宽高
	     * @param obj
	     * @param replaceToProperty
	     */
	    function removeStyleSize(obj, replaceToProperty) {
	        removeStyle(obj, "width", true);
	        removeStyle(obj, "height", true);
	    }
	
	    function removeStyle(obj, styleName, replaceToProperty) {
	        if (obj.style[styleName]) {
	            replaceToProperty && obj.setAttribute(styleName, parseInt(obj.style[styleName], 10));
	            obj.style[styleName] = "";
	        }
	    }
	
	    function getParentTdOrTh(ele) {
	        if (ele.tagName == "TD" || ele.tagName == "TH") return ele;
	        var td;
	        if (td = domUtils.findParentByTagName(ele, "td", true) || domUtils.findParentByTagName(ele, "th", true)) return td;
	        return null;
	    }
	
	    function isEmptyBlock(node) {
	        var reg = new RegExp(domUtils.fillChar, 'g');
	        if (node[browser.ie ? 'innerText' : 'textContent'].replace(/^\s*$/, '').replace(reg, '').length > 0) {
	            return 0;
	        }
	        for (var n in dtd.$isNotEmpty) {
	            if (node.getElementsByTagName(n).length) {
	                return 0;
	            }
	        }
	        return 1;
	    }
	
	
	    function mouseCoords(evt) {
	        if (evt.pageX || evt.pageY) {
	            return { x:evt.pageX, y:evt.pageY };
	        }
	        return {
	            x:evt.clientX + me.document.body.scrollLeft - me.document.body.clientLeft,
	            y:evt.clientY + me.document.body.scrollTop - me.document.body.clientTop
	        };
	    }
	
	    function mouseMoveEvent(evt) {
	
	        if( isEditorDisabled() ) {
	            return;
	        }
	
	        try {
	
	            //普通状态下鼠标移动
	            var target = getParentTdOrTh(evt.target || evt.srcElement),
	                pos;
	
	            //区分用户的行为是拖动还是双击
	            if( isInResizeBuffer  ) {
	
	                me.body.style.webkitUserSelect = 'none';
	
	                if( Math.abs( userActionStatus.x - evt.clientX ) > offsetOfTableCell || Math.abs( userActionStatus.y - evt.clientY ) > offsetOfTableCell ) {
	                    clearTableDragTimer();
	                    isInResizeBuffer = false;
	                    singleClickState = 0;
	                    //drag action
	                    tableBorderDrag(evt);
	                }
	            }
	
	            //修改单元格大小时的鼠标移动
	            if (onDrag && dragTd) {
	                singleClickState = 0;
	                me.body.style.webkitUserSelect = 'none';
	                me.selection.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();
	                pos = mouseCoords(evt);
	                toggleDraggableState(me, true, onDrag, pos, target);
	                if (onDrag == "h") {
	                    dragLine.style.left = getPermissionX(dragTd, evt) + "px";
	                } else if (onDrag == "v") {
	                    dragLine.style.top = getPermissionY(dragTd, evt) + "px";
	                }
	                return;
	            }
	            //当鼠标处于table上时，修改移动过程中的光标状态
	            if (target) {
	                //针对使用table作为容器的组件不触发拖拽效果
	                if (me.fireEvent('excludetable', target) === true)
	                    return;
	                pos = mouseCoords(evt);
	                var state = getRelation(target, pos),
	                    table = domUtils.findParentByTagName(target, "table", true);
	
	                if (inTableSide(table, target, evt, true)) {
	                    if (me.fireEvent("excludetable", table) === true) return;
	                    me.body.style.cursor = "url(" + me.options.cursorpath + "h.png),pointer";
	                } else if (inTableSide(table, target, evt)) {
	                    if (me.fireEvent("excludetable", table) === true) return;
	                    me.body.style.cursor = "url(" + me.options.cursorpath + "v.png),pointer";
	                } else {
	                    me.body.style.cursor = "text";
	                    var curCell = target;
	                    if (/\d/.test(state)) {
	                        state = state.replace(/\d/, '');
	                        target = getUETable(target).getPreviewCell(target, state == "v");
	                    }
	                    //位于第一行的顶部或者第一列的左边时不可拖动
	                    toggleDraggableState(me, target ? !!state : false, target ? state : '', pos, target);
	
	                }
	            } else {
	                toggleDragButton(false, table, me);
	            }
	
	        } catch (e) {
	            showError(e);
	        }
	    }
	
	    var dragButtonTimer;
	
	    function toggleDragButton(show, table, editor) {
	        if (!show) {
	            if (dragOver)return;
	            dragButtonTimer = setTimeout(function () {
	                !dragOver && dragButton && dragButton.parentNode && dragButton.parentNode.removeChild(dragButton);
	            }, 2000);
	        } else {
	            createDragButton(table, editor);
	        }
	    }
	
	    function createDragButton(table, editor) {
	        var pos = domUtils.getXY(table),
	            doc = table.ownerDocument;
	        if (dragButton && dragButton.parentNode)return dragButton;
	        dragButton = doc.createElement("div");
	        dragButton.contentEditable = false;
	        dragButton.innerHTML = "";
	        dragButton.style.cssText = "width:15px;height:15px;background-image:url(" + editor.options.UEDITOR_HOME_URL + "dialogs/table/dragicon.png);position: absolute;cursor:move;top:" + (pos.y - 15) + "px;left:" + (pos.x) + "px;";
	        domUtils.unSelectable(dragButton);
	        dragButton.onmouseover = function (evt) {
	            dragOver = true;
	        };
	        dragButton.onmouseout = function (evt) {
	            dragOver = false;
	        };
	        domUtils.on(dragButton, 'click', function (type, evt) {
	            doClick(evt, this);
	        });
	        domUtils.on(dragButton, 'dblclick', function (type, evt) {
	            doDblClick(evt);
	        });
	        domUtils.on(dragButton, 'dragstart', function (type, evt) {
	            domUtils.preventDefault(evt);
	        });
	        var timer;
	
	        function doClick(evt, button) {
	            // 部分浏览器下需要清理
	            clearTimeout(timer);
	            timer = setTimeout(function () {
	                editor.fireEvent("tableClicked", table, button);
	            }, 300);
	        }
	
	        function doDblClick(evt) {
	            clearTimeout(timer);
	            var ut = getUETable(table),
	                start = table.rows[0].cells[0],
	                end = ut.getLastCell(),
	                range = ut.getCellsRange(start, end);
	            editor.selection.getRange().setStart(start, 0).setCursor(false, true);
	            ut.setSelected(range);
	        }
	
	        doc.body.appendChild(dragButton);
	    }
	
	
	//    function inPosition(table, pos) {
	//        var tablePos = domUtils.getXY(table),
	//            width = table.offsetWidth,
	//            height = table.offsetHeight;
	//        if (pos.x - tablePos.x < 5 && pos.y - tablePos.y < 5) {
	//            return "topLeft";
	//        } else if (tablePos.x + width - pos.x < 5 && tablePos.y + height - pos.y < 5) {
	//            return "bottomRight";
	//        }
	//    }
	
	    function inTableSide(table, cell, evt, top) {
	        var pos = mouseCoords(evt),
	            state = getRelation(cell, pos);
	
	        if (top) {
	            var caption = table.getElementsByTagName("caption")[0],
	                capHeight = caption ? caption.offsetHeight : 0;
	            return (state == "v1") && ((pos.y - domUtils.getXY(table).y - capHeight) < 8);
	        } else {
	            return (state == "h1") && ((pos.x - domUtils.getXY(table).x) < 8);
	        }
	    }
	
	    /**
	     * 获取拖动时允许的X轴坐标
	     * @param dragTd
	     * @param evt
	     */
	    function getPermissionX(dragTd, evt) {
	        var ut = getUETable(dragTd);
	        if (ut) {
	            var preTd = ut.getSameEndPosCells(dragTd, "x")[0],
	                nextTd = ut.getSameStartPosXCells(dragTd)[0],
	                mouseX = mouseCoords(evt).x,
	                left = (preTd ? domUtils.getXY(preTd).x : domUtils.getXY(ut.table).x) + 20 ,
	                right = nextTd ? domUtils.getXY(nextTd).x + nextTd.offsetWidth - 20 : (me.body.offsetWidth + 5 || parseInt(domUtils.getComputedStyle(me.body, "width"), 10));
	
	            left += cellMinWidth;
	            right -= cellMinWidth;
	
	            return mouseX < left ? left : mouseX > right ? right : mouseX;
	        }
	    }
	
	    /**
	     * 获取拖动时允许的Y轴坐标
	     */
	    function getPermissionY(dragTd, evt) {
	        try {
	            var top = domUtils.getXY(dragTd).y,
	                mousePosY = mouseCoords(evt).y;
	            return mousePosY < top ? top : mousePosY;
	        } catch (e) {
	            showError(e);
	        }
	    }
	
	    /**
	     * 移动状态切换
	     */
	    function toggleDraggableState(editor, draggable, dir, mousePos, cell) {
	        try {
	            editor.body.style.cursor = dir == "h" ? "col-resize" : dir == "v" ? "row-resize" : "text";
	            if (browser.ie) {
	                if (dir && !mousedown && !getUETableBySelected(editor)) {
	                    getDragLine(editor, editor.document);
	                    showDragLineAt(dir, cell);
	                } else {
	                    hideDragLine(editor)
	                }
	            }
	            onBorder = draggable;
	        } catch (e) {
	            showError(e);
	        }
	    }
	
	    /**
	     * 获取与UETable相关的resize line
	     * @param uetable UETable对象
	     */
	    function getResizeLineByUETable() {
	
	        var lineId = '_UETableResizeLine',
	            line = this.document.getElementById( lineId );
	
	        if( !line ) {
	            line = this.document.createElement("div");
	            line.id = lineId;
	            line.contnetEditable = false;
	            line.setAttribute("unselectable", "on");
	
	            var styles = {
	                width: 2*cellBorderWidth + 1 + 'px',
	                position: 'absolute',
	                'z-index': 100000,
	                cursor: 'col-resize',
	                background: 'red',
	                display: 'none'
	            };
	
	            //切换状态
	            line.onmouseout = function(){
	                this.style.display = 'none';
	            };
	
	            utils.extend( line.style, styles );
	
	            this.document.body.appendChild( line );
	
	        }
	
	        return line;
	
	    }
	
	    /**
	     * 更新resize-line
	     */
	    function updateResizeLine( cell, uetable ) {
	
	        var line = getResizeLineByUETable.call( this ),
	            table = uetable.table,
	            styles = {
	                top: domUtils.getXY( table ).y + 'px',
	                left: domUtils.getXY( cell).x + cell.offsetWidth - cellBorderWidth + 'px',
	                display: 'block',
	                height: table.offsetHeight + 'px'
	            };
	
	        utils.extend( line.style, styles );
	
	    }
	
	    /**
	     * 显示resize-line
	     */
	    function showResizeLine( cell ) {
	
	        var uetable = getUETable( cell );
	
	        updateResizeLine.call( this, cell, uetable );
	
	    }
	
	    /**
	     * 获取鼠标与当前单元格的相对位置
	     * @param ele
	     * @param mousePos
	     */
	    function getRelation(ele, mousePos) {
	        var elePos = domUtils.getXY(ele);
	
	        if( !elePos ) {
	            return '';
	        }
	
	        if (elePos.x + ele.offsetWidth - mousePos.x < cellBorderWidth) {
	            return "h";
	        }
	        if (mousePos.x - elePos.x < cellBorderWidth) {
	            return 'h1'
	        }
	        if (elePos.y + ele.offsetHeight - mousePos.y < cellBorderWidth) {
	            return "v";
	        }
	        if (mousePos.y - elePos.y < cellBorderWidth) {
	            return 'v1'
	        }
	        return '';
	    }
	
	    function mouseDownEvent(type, evt) {
	
	        if( isEditorDisabled() ) {
	            return ;
	        }
	
	        userActionStatus = {
	            x: evt.clientX,
	            y: evt.clientY
	        };
	
	        //右键菜单单独处理
	        if (evt.button == 2) {
	            var ut = getUETableBySelected(me),
	                flag = false;
	
	            if (ut) {
	                var td = getTargetTd(me, evt);
	                utils.each(ut.selectedTds, function (ti) {
	                    if (ti === td) {
	                        flag = true;
	                    }
	                });
	                if (!flag) {
	                    removeSelectedClass(domUtils.getElementsByTagName(me.body, "th td"));
	                    ut.clearSelected()
	                } else {
	                    td = ut.selectedTds[0];
	                    setTimeout(function () {
	                        me.selection.getRange().setStart(td, 0).setCursor(false, true);
	                    }, 0);
	
	                }
	            }
	        } else {
	            tableClickHander( evt );
	        }
	
	    }
	
	    //清除表格的计时器
	    function clearTableTimer() {
	        tabTimer && clearTimeout( tabTimer );
	        tabTimer = null;
	    }
	
	    //双击收缩
	    function tableDbclickHandler(evt) {
	        singleClickState = 0;
	        evt = evt || me.window.event;
	        var target = getParentTdOrTh(evt.target || evt.srcElement);
	        if (target) {
	            var h;
	            if (h = getRelation(target, mouseCoords(evt))) {
	
	                hideDragLine( me );
	
	                if (h == 'h1') {
	                    h = 'h';
	                    if (inTableSide(domUtils.findParentByTagName(target, "table"), target, evt)) {
	                        me.execCommand('adaptbywindow');
	                    } else {
	                        target = getUETable(target).getPreviewCell(target);
	                        if (target) {
	                            var rng = me.selection.getRange();
	                            rng.selectNodeContents(target).setCursor(true, true)
	                        }
	                    }
	                }
	                if (h == 'h') {
	                    var ut = getUETable(target),
	                        table = ut.table,
	                        cells = getCellsByMoveBorder( target, table, true );
	
	                    cells = extractArray( cells, 'left' );
	
	                    ut.width = ut.offsetWidth;
	
	                    var oldWidth = [],
	                        newWidth = [];
	
	                    utils.each( cells, function( cell ){
	
	                        oldWidth.push( cell.offsetWidth );
	
	                    } );
	
	                    utils.each( cells, function( cell ){
	
	                        cell.removeAttribute("width");
	
	                    } );
	
	                    window.setTimeout( function(){
	
	                        //是否允许改变
	                        var changeable = true;
	
	                        utils.each( cells, function( cell, index ){
	
	                            var width = cell.offsetWidth;
	
	                            if( width > oldWidth[index] ) {
	                                changeable = false;
	                                return false;
	                            }
	
	                            newWidth.push( width );
	
	                        } );
	
	                        var change = changeable ? newWidth : oldWidth;
	
	                        utils.each( cells, function( cell, index ){
	
	                            cell.width = change[index] - getTabcellSpace();
	
	                        } );
	
	
	                    }, 0 );
	
	//                    minWidth -= cellMinWidth;
	//
	//                    table.removeAttribute("width");
	//                    utils.each(cells, function (cell) {
	//                        cell.style.width = "";
	//                        cell.width -= minWidth;
	//                    });
	
	                }
	            }
	        }
	    }
	
	    function tableClickHander( evt ) {
	
	        removeSelectedClass(domUtils.getElementsByTagName(me.body, "td th"));
	        //trace:3113
	        //选中单元格，点击table外部，不会清掉table上挂的ueTable,会引起getUETableBySelected方法返回值
	        utils.each(me.document.getElementsByTagName('table'), function (t) {
	            t.ueTable = null;
	        });
	        startTd = getTargetTd(me, evt);
	        if( !startTd ) return;
	        var table = domUtils.findParentByTagName(startTd, "table", true);
	        ut = getUETable(table);
	        ut && ut.clearSelected();
	
	        //判断当前鼠标状态
	        if (!onBorder) {
	            me.document.body.style.webkitUserSelect = '';
	            mousedown = true;
	            me.addListener('mouseover', mouseOverEvent);
	        } else {
	            //边框上的动作处理
	            borderActionHandler( evt );
	        }
	
	
	    }
	
	    //处理表格边框上的动作, 这里做延时处理，避免两种动作互相影响
	    function borderActionHandler( evt ) {
	
	        if ( browser.ie ) {
	            evt = reconstruct(evt );
	        }
	
	        clearTableDragTimer();
	
	        //是否正在等待resize的缓冲中
	        isInResizeBuffer = true;
	
	        tableDragTimer = setTimeout(function(){
	            tableBorderDrag( evt );
	        }, dblclickTime);
	
	    }
	
	    function extractArray( originArr, key ) {
	
	        var result = [],
	            tmp = null;
	
	        for( var i = 0, len = originArr.length; i<len; i++ ) {
	
	            tmp = originArr[ i ][ key ];
	
	            if( tmp ) {
	                result.push( tmp );
	            }
	
	        }
	
	        return result;
	
	    }
	
	    function clearTableDragTimer() {
	        tableDragTimer && clearTimeout(tableDragTimer);
	        tableDragTimer = null;
	    }
	
	    function reconstruct( obj ) {
	
	        var attrs = ['pageX', 'pageY', 'clientX', 'clientY', 'srcElement', 'target'],
	            newObj = {};
	
	        if( obj ) {
	
	            for( var i = 0, key, val; key = attrs[i]; i++ ) {
	                val=obj[ key ];
	                val && (newObj[ key ] = val);
	            }
	
	        }
	
	        return newObj;
	
	    }
	
	    //边框拖动
	    function tableBorderDrag( evt ) {
	
	        isInResizeBuffer = false;
	
	        startTd = evt.target || evt.srcElement;
	        if( !startTd ) return;
	        var state = getRelation(startTd, mouseCoords(evt));
	        if (/\d/.test(state)) {
	            state = state.replace(/\d/, '');
	            startTd = getUETable(startTd).getPreviewCell(startTd, state == 'v');
	        }
	        hideDragLine(me);
	        getDragLine(me, me.document);
	        me.fireEvent('saveScene');
	        showDragLineAt(state, startTd);
	        mousedown = true;
	        //拖动开始
	        onDrag = state;
	        dragTd = startTd;
	    }
	
	    function mouseUpEvent(type, evt) {
	
	        if( isEditorDisabled() ) {
	            return ;
	        }
	
	        clearTableDragTimer();
	
	        isInResizeBuffer = false;
	
	        if( onBorder ) {
	            singleClickState = ++singleClickState % 3;
	
	            userActionStatus = {
	                x: evt.clientX,
	                y: evt.clientY
	            };
	
	            tableResizeTimer = setTimeout(function(){
	                singleClickState > 0 && singleClickState--;
	            }, dblclickTime );
	
	            if( singleClickState === 2 ) {
	
	                singleClickState = 0;
	                tableDbclickHandler(evt);
	                return;
	
	            }
	
	        }
	
	        if (evt.button == 2)return;
	        var me = this;
	        //清除表格上原生跨选问题
	        var range = me.selection.getRange(),
	            start = domUtils.findParentByTagName(range.startContainer, 'table', true),
	            end = domUtils.findParentByTagName(range.endContainer, 'table', true);
	
	        if (start || end) {
	            if (start === end) {
	                start = domUtils.findParentByTagName(range.startContainer, ['td', 'th', 'caption'], true);
	                end = domUtils.findParentByTagName(range.endContainer, ['td', 'th', 'caption'], true);
	                if (start !== end) {
	                    me.selection.clearRange()
	                }
	            } else {
	                me.selection.clearRange()
	            }
	        }
	        mousedown = false;
	        me.document.body.style.webkitUserSelect = '';
	        //拖拽状态下的mouseUP
	        if ( onDrag && dragTd ) {
	
	            me.selection.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();
	
	            singleClickState = 0;
	            dragLine = me.document.getElementById('ue_tableDragLine');
	
	            // trace 3973
	            if (dragLine) {
	                var dragTdPos = domUtils.getXY(dragTd),
	                    dragLinePos = domUtils.getXY(dragLine);
	
	                switch (onDrag) {
	                    case "h":
	                        changeColWidth(dragTd, dragLinePos.x - dragTdPos.x);
	                        break;
	                    case "v":
	                        changeRowHeight(dragTd, dragLinePos.y - dragTdPos.y - dragTd.offsetHeight);
	                        break;
	                    default:
	                }
	                onDrag = "";
	                dragTd = null;
	
	                hideDragLine(me);
	                me.fireEvent('saveScene');
	                return;
	            }
	        }
	        //正常状态下的mouseup
	        if (!startTd) {
	            var target = domUtils.findParentByTagName(evt.target || evt.srcElement, "td", true);
	            if (!target) target = domUtils.findParentByTagName(evt.target || evt.srcElement, "th", true);
	            if (target && (target.tagName == "TD" || target.tagName == "TH")) {
	                if (me.fireEvent("excludetable", target) === true) return;
	                range = new dom.Range(me.document);
	                range.setStart(target, 0).setCursor(false, true);
	            }
	        } else {
	            var ut = getUETable(startTd),
	                cell = ut ? ut.selectedTds[0] : null;
	            if (cell) {
	                range = new dom.Range(me.document);
	                if (domUtils.isEmptyBlock(cell)) {
	                    range.setStart(cell, 0).setCursor(false, true);
	                } else {
	                    range.selectNodeContents(cell).shrinkBoundary().setCursor(false, true);
	                }
	            } else {
	                range = me.selection.getRange().shrinkBoundary();
	                if (!range.collapsed) {
	                    var start = domUtils.findParentByTagName(range.startContainer, ['td', 'th'], true),
	                        end = domUtils.findParentByTagName(range.endContainer, ['td', 'th'], true);
	                    //在table里边的不能清除
	                    if (start && !end || !start && end || start && end && start !== end) {
	                        range.setCursor(false, true);
	                    }
	                }
	            }
	            startTd = null;
	            me.removeListener('mouseover', mouseOverEvent);
	        }
	        me._selectionChange(250, evt);
	    }
	
	    function mouseOverEvent(type, evt) {
	
	        if( isEditorDisabled() ) {
	            return;
	        }
	
	        var me = this,
	            tar = evt.target || evt.srcElement;
	        currentTd = domUtils.findParentByTagName(tar, "td", true) || domUtils.findParentByTagName(tar, "th", true);
	        //需要判断两个TD是否位于同一个表格内
	        if (startTd && currentTd &&
	            ((startTd.tagName == "TD" && currentTd.tagName == "TD") || (startTd.tagName == "TH" && currentTd.tagName == "TH")) &&
	            domUtils.findParentByTagName(startTd, 'table') == domUtils.findParentByTagName(currentTd, 'table')) {
	            var ut = getUETable(currentTd);
	            if (startTd != currentTd) {
	                me.document.body.style.webkitUserSelect = 'none';
	                me.selection.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();
	                var range = ut.getCellsRange(startTd, currentTd);
	                ut.setSelected(range);
	            } else {
	                me.document.body.style.webkitUserSelect = '';
	                ut.clearSelected();
	            }
	
	        }
	        evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);
	    }
	
	    function setCellHeight(cell, height, backHeight) {
	        var lineHight = parseInt(domUtils.getComputedStyle(cell, "line-height"), 10),
	            tmpHeight = backHeight + height;
	        height = tmpHeight < lineHight ? lineHight : tmpHeight;
	        if (cell.style.height) cell.style.height = "";
	        cell.rowSpan == 1 ? cell.setAttribute("height", height) : (cell.removeAttribute && cell.removeAttribute("height"));
	    }
	
	    function getWidth(cell) {
	        if (!cell)return 0;
	        return parseInt(domUtils.getComputedStyle(cell, "width"), 10);
	    }
	
	    function changeColWidth(cell, changeValue) {
	
	        var ut = getUETable(cell);
	        if (ut) {
	
	            //根据当前移动的边框获取相关的单元格
	            var table = ut.table,
	                cells = getCellsByMoveBorder( cell, table );
	
	            table.style.width = "";
	            table.removeAttribute("width");
	
	            //修正改变量
	            changeValue = correctChangeValue( changeValue, cell, cells );
	
	            if (cell.nextSibling) {
	
	                var i=0;
	
	                utils.each( cells, function( cellGroup ){
	
	                    cellGroup.left.width = (+cellGroup.left.width)+changeValue;
	                    cellGroup.right && ( cellGroup.right.width = (+cellGroup.right.width)-changeValue );
	
	                } );
	
	            } else {
	
	                utils.each( cells, function( cellGroup ){
	                    cellGroup.left.width -= -changeValue;
	                } );
	
	            }
	        }
	
	    }
	
	    function isEditorDisabled() {
	        return me.body.contentEditable === "false";
	    }
	
	    function changeRowHeight(td, changeValue) {
	        if (Math.abs(changeValue) < 10) return;
	        var ut = getUETable(td);
	        if (ut) {
	            var cells = ut.getSameEndPosCells(td, "y"),
	            //备份需要连带变化的td的原始高度，否则后期无法获取正确的值
	                backHeight = cells[0] ? cells[0].offsetHeight : 0;
	            for (var i = 0, cell; cell = cells[i++];) {
	                setCellHeight(cell, changeValue, backHeight);
	            }
	        }
	
	    }
	
	    /**
	     * 获取调整单元格大小的相关单元格
	     * @isContainMergeCell 返回的结果中是否包含发生合并后的单元格
	     */
	    function getCellsByMoveBorder( cell, table, isContainMergeCell ) {
	
	        if( !table ) {
	            table = domUtils.findParentByTagName( cell, 'table' );
	        }
	
	        if( !table ) {
	            return null;
	        }
	
	        //获取到该单元格所在行的序列号
	        var index = domUtils.getNodeIndex( cell ),
	            temp = cell,
	            rows = table.rows,
	            colIndex = 0;
	
	        while( temp ) {
	            //获取到当前单元格在未发生单元格合并时的序列
	            if( temp.nodeType === 1 ) {
	                colIndex += (temp.colSpan || 1);
	            }
	            temp = temp.previousSibling;
	        }
	
	        temp = null;
	
	        //记录想关的单元格
	        var borderCells = [];
	
	        utils.each(rows, function( tabRow ){
	
	            var cells = tabRow.cells,
	                currIndex = 0;
	
	            utils.each( cells, function( tabCell ){
	
	                currIndex += (tabCell.colSpan || 1);
	
	                if( currIndex === colIndex ) {
	
	                    borderCells.push({
	                        left: tabCell,
	                        right: tabCell.nextSibling || null
	                    });
	
	                    return false;
	
	                } else if( currIndex > colIndex ) {
	
	                    if( isContainMergeCell ) {
	                        borderCells.push({
	                            left: tabCell
	                        });
	                    }
	
	                    return false;
	                }
	
	
	            } );
	
	        });
	
	        return borderCells;
	
	    }
	
	
	    /**
	     * 通过给定的单元格集合获取最小的单元格width
	     */
	    function getMinWidthByTableCells( cells ) {
	
	        var minWidth = Number.MAX_VALUE;
	
	        for( var i = 0, curCell; curCell = cells[ i ] ; i++ ) {
	
	            minWidth = Math.min( minWidth, curCell.width || getTableCellWidth( curCell ) );
	
	        }
	
	        return minWidth;
	
	    }
	
	    function correctChangeValue( changeValue, relatedCell, cells ) {
	
	        //为单元格的paading预留空间
	        changeValue -= getTabcellSpace();
	
	        if( changeValue < 0 ) {
	            return 0;
	        }
	
	        changeValue -= getTableCellWidth( relatedCell );
	
	        //确定方向
	        var direction = changeValue < 0 ? 'left':'right';
	
	        changeValue = Math.abs(changeValue);
	
	        //只关心非最后一个单元格就可以
	        utils.each( cells, function( cellGroup ){
	
	            var curCell = cellGroup[direction];
	
	            //为单元格保留最小空间
	            if( curCell ) {
	                changeValue = Math.min( changeValue, getTableCellWidth( curCell )-cellMinWidth );
	            }
	
	
	        } );
	
	
	        //修正越界
	        changeValue = changeValue < 0 ? 0 : changeValue;
	
	        return direction === 'left' ? -changeValue : changeValue;
	
	    }
	
	    function getTableCellWidth( cell ) {
	
	        var width = 0,
	            //偏移纠正量
	            offset = 0,
	            width = cell.offsetWidth - getTabcellSpace();
	
	        //最后一个节点纠正一下
	        if( !cell.nextSibling ) {
	
	            width -= getTableCellOffset( cell );
	
	        }
	
	        width = width < 0 ? 0 : width;
	
	        try {
	            cell.width = width;
	        } catch(e) {
	        }
	
	        return width;
	
	    }
	
	    /**
	     * 获取单元格所在表格的最末单元格的偏移量
	     */
	    function getTableCellOffset( cell ) {
	
	        tab = domUtils.findParentByTagName( cell, "table", false);
	
	        if( tab.offsetVal === undefined ) {
	
	            var prev = cell.previousSibling;
	
	            if( prev ) {
	
	                //最后一个单元格和前一个单元格的width diff结果 如果恰好为一个border width， 则条件成立
	                tab.offsetVal = cell.offsetWidth - prev.offsetWidth === UT.borderWidth ? UT.borderWidth : 0;
	
	            } else {
	                tab.offsetVal = 0;
	            }
	
	        }
	
	        return tab.offsetVal;
	
	    }
	
	    function getTabcellSpace() {
	
	        if( UT.tabcellSpace === undefined ) {
	
	            var cell = null,
	                tab = me.document.createElement("table"),
	                tbody = me.document.createElement("tbody"),
	                trow = me.document.createElement("tr"),
	                tabcell = me.document.createElement("td"),
	                mirror = null;
	
	            tabcell.style.cssText = 'border: 0;';
	            tabcell.width = 1;
	
	            trow.appendChild( tabcell );
	            trow.appendChild( mirror = tabcell.cloneNode( false ) );
	
	            tbody.appendChild( trow );
	
	            tab.appendChild( tbody );
	
	            tab.style.cssText = "visibility: hidden;";
	
	            me.body.appendChild( tab );
	
	            UT.paddingSpace = tabcell.offsetWidth - 1;
	
	            var tmpTabWidth = tab.offsetWidth;
	
	            tabcell.style.cssText = '';
	            mirror.style.cssText = '';
	
	            UT.borderWidth = ( tab.offsetWidth - tmpTabWidth ) / 3;
	
	            UT.tabcellSpace = UT.paddingSpace + UT.borderWidth;
	
	            me.body.removeChild( tab );
	
	        }
	
	        getTabcellSpace = function(){ return UT.tabcellSpace; };
	
	        return UT.tabcellSpace;
	
	    }
	
	    function getDragLine(editor, doc) {
	        if (mousedown)return;
	        dragLine = editor.document.createElement("div");
	        domUtils.setAttributes(dragLine, {
	            id:"ue_tableDragLine",
	            unselectable:'on',
	            contenteditable:false,
	            'onresizestart':'return false',
	            'ondragstart':'return false',
	            'onselectstart':'return false',
	            style:"background-color:blue;position:absolute;padding:0;margin:0;background-image:none;border:0px none;opacity:0;filter:alpha(opacity=0)"
	        });
	        editor.body.appendChild(dragLine);
	    }
	
	    function hideDragLine(editor) {
	        if (mousedown)return;
	        var line;
	        while (line = editor.document.getElementById('ue_tableDragLine')) {
	            domUtils.remove(line)
	        }
	    }
	
	    /**
	     * 依据state（v|h）在cell位置显示横线
	     * @param state
	     * @param cell
	     */
	    function showDragLineAt(state, cell) {
	        if (!cell) return;
	        var table = domUtils.findParentByTagName(cell, "table"),
	            caption = table.getElementsByTagName('caption'),
	            width = table.offsetWidth,
	            height = table.offsetHeight - (caption.length > 0 ? caption[0].offsetHeight : 0),
	            tablePos = domUtils.getXY(table),
	            cellPos = domUtils.getXY(cell), css;
	        switch (state) {
	            case "h":
	                css = 'height:' + height + 'px;top:' + (tablePos.y + (caption.length > 0 ? caption[0].offsetHeight : 0)) + 'px;left:' + (cellPos.x + cell.offsetWidth);
	                dragLine.style.cssText = css + 'px;position: absolute;display:block;background-color:blue;width:1px;border:0; color:blue;opacity:.3;filter:alpha(opacity=30)';
	                break;
	            case "v":
	                css = 'width:' + width + 'px;left:' + tablePos.x + 'px;top:' + (cellPos.y + cell.offsetHeight );
	                //必须加上border:0和color:blue，否则低版ie不支持背景色显示
	                dragLine.style.cssText = css + 'px;overflow:hidden;position: absolute;display:block;background-color:blue;height:1px;border:0;color:blue;opacity:.2;filter:alpha(opacity=20)';
	                break;
	            default:
	        }
	    }
	
	    /**
	     * 当表格边框颜色为白色时设置为虚线,true为添加虚线
	     * @param editor
	     * @param flag
	     */
	    function switchBorderColor(editor, flag) {
	        var tableArr = domUtils.getElementsByTagName(editor.body, "table"), color;
	        for (var i = 0, node; node = tableArr[i++];) {
	            var td = domUtils.getElementsByTagName(node, "td");
	            if (td[0]) {
	                if (flag) {
	                    color = (td[0].style.borderColor).replace(/\s/g, "");
	                    if (/(#ffffff)|(rgb\(255,255,255\))/ig.test(color))
	                        domUtils.addClass(node, "noBorderTable")
	                } else {
	                    domUtils.removeClasses(node, "noBorderTable")
	                }
	            }
	
	        }
	    }
	
	    function getTableWidth(editor, needIEHack, defaultValue) {
	        var body = editor.body;
	        return body.offsetWidth - (needIEHack ? parseInt(domUtils.getComputedStyle(body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (editor.options.offsetWidth || 0);
	    }
	
	    /**
	     * 获取当前拖动的单元格
	     */
	    function getTargetTd(editor, evt) {
	
	        var target = domUtils.findParentByTagName(evt.target || evt.srcElement, ["td", "th"], true),
	            dir = null;
	
	        if( !target ) {
	            return null;
	        }
	
	        dir = getRelation( target, mouseCoords( evt ) );
	
	        //如果有前一个节点， 需要做一个修正， 否则可能会得到一个错误的td
	
	        if( !target ) {
	            return null;
	        }
	
	        if( dir === 'h1' && target.previousSibling ) {
	
	            var position = domUtils.getXY( target),
	                cellWidth = target.offsetWidth;
	
	            if( Math.abs( position.x + cellWidth - evt.clientX ) > cellWidth / 3 ) {
	                target = target.previousSibling;
	            }
	
	        } else if( dir === 'v1' && target.parentNode.previousSibling ) {
	
	            var position = domUtils.getXY( target),
	                cellHeight = target.offsetHeight;
	
	            if( Math.abs( position.y + cellHeight - evt.clientY ) > cellHeight / 3 ) {
	                target = target.parentNode.previousSibling.firstChild;
	            }
	
	        }
	
	
	        //排除了非td内部以及用于代码高亮部分的td
	        return target && !(editor.fireEvent("excludetable", target) === true) ? target : null;
	    }
	
	};
	
	
	// plugins/table.sort.js
	/**
	 * Created with JetBrains PhpStorm.
	 * User: Jinqn
	 * Date: 13-10-12
	 * Time: 上午10:20
	 * To change this template use File | Settings | File Templates.
	 */
	
	UE.UETable.prototype.sortTable = function (sortByCellIndex, compareFn) {
	    var table = this.table,
	        rows = table.rows,
	        trArray = [],
	        flag = rows[0].cells[0].tagName === "TH",
	        lastRowIndex = 0;
	    if(this.selectedTds.length){
	        var range = this.cellsRange,
	            len = range.endRowIndex + 1;
	        for (var i = range.beginRowIndex; i < len; i++) {
	            trArray[i] = rows[i];
	        }
	        trArray.splice(0,range.beginRowIndex);
	        lastRowIndex = (range.endRowIndex +1) === this.rowsNum ? 0 : range.endRowIndex +1;
	    }else{
	        for (var i = 0,len = rows.length; i < len; i++) {
	            trArray[i] = rows[i];
	        }
	    }
	
	    var Fn = {
	        'reversecurrent': function(td1,td2){
	            return 1;
	        },
	        'orderbyasc': function(td1,td2){
	            var value1 = td1.innerText||td1.textContent,
	                value2 = td2.innerText||td2.textContent;
	            return value1.localeCompare(value2);
	        },
	        'reversebyasc': function(td1,td2){
	            var value1 = td1.innerHTML,
	                value2 = td2.innerHTML;
	            return value2.localeCompare(value1);
	        },
	        'orderbynum': function(td1,td2){
	            var value1 = td1[browser.ie ? 'innerText':'textContent'].match(/\d+/),
	                value2 = td2[browser.ie ? 'innerText':'textContent'].match(/\d+/);
	            if(value1) value1 = +value1[0];
	            if(value2) value2 = +value2[0];
	            return (value1||0) - (value2||0);
	        },
	        'reversebynum': function(td1,td2){
	            var value1 = td1[browser.ie ? 'innerText':'textContent'].match(/\d+/),
	                value2 = td2[browser.ie ? 'innerText':'textContent'].match(/\d+/);
	            if(value1) value1 = +value1[0];
	            if(value2) value2 = +value2[0];
	            return (value2||0) - (value1||0);
	        }
	    };
	
	    //对表格设置排序的标记data-sort-type
	    table.setAttribute('data-sort-type', compareFn && typeof compareFn === "string" && Fn[compareFn] ? compareFn:'');
	
	    //th不参与排序
	    flag && trArray.splice(0, 1);
	    trArray = utils.sort(trArray,function (tr1, tr2) {
	        var result;
	        if (compareFn && typeof compareFn === "function") {
	            result = compareFn.call(this, tr1.cells[sortByCellIndex], tr2.cells[sortByCellIndex]);
	        } else if (compareFn && typeof compareFn === "number") {
	            result = 1;
	        } else if (compareFn && typeof compareFn === "string" && Fn[compareFn]) {
	            result = Fn[compareFn].call(this, tr1.cells[sortByCellIndex], tr2.cells[sortByCellIndex]);
	        } else {
	            result = Fn['orderbyasc'].call(this, tr1.cells[sortByCellIndex], tr2.cells[sortByCellIndex]);
	        }
	        return result;
	    });
	    var fragment = table.ownerDocument.createDocumentFragment();
	    for (var j = 0, len = trArray.length; j < len; j++) {
	        fragment.appendChild(trArray[j]);
	    }
	    var tbody = table.getElementsByTagName("tbody")[0];
	    if(!lastRowIndex){
	        tbody.appendChild(fragment);
	    }else{
	        tbody.insertBefore(fragment,rows[lastRowIndex- range.endRowIndex + range.beginRowIndex - 1])
	    }
	};
	
	UE.plugins['tablesort'] = function () {
	    var me = this,
	        UT = UE.UETable,
	        getUETable = function (tdOrTable) {
	            return UT.getUETable(tdOrTable);
	        },
	        getTableItemsByRange = function (editor) {
	            return UT.getTableItemsByRange(editor);
	        };
	
	
	    me.ready(function () {
	        //添加表格可排序的样式
	        utils.cssRule('tablesort',
	            'table.sortEnabled tr.firstRow th,table.sortEnabled tr.firstRow td{padding-right:20px;background-repeat: no-repeat;background-position: center right;' +
	                '   background-image:url(' + me.options.themePath + me.options.theme + '/images/sortable.png);}',
	            me.document);
	
	        //做单元格合并操作时,清除可排序标识
	        me.addListener("afterexeccommand", function (type, cmd) {
	            if( cmd == 'mergeright' || cmd == 'mergedown' || cmd == 'mergecells') {
	                this.execCommand('disablesort');
	            }
	        });
	    });
	
	
	
	    //表格排序
	    UE.commands['sorttable'] = {
	        queryCommandState: function () {
	            var me = this,
	                tableItems = getTableItemsByRange(me);
	            if (!tableItems.cell) return -1;
	            var table = tableItems.table,
	                cells = table.getElementsByTagName("td");
	            for (var i = 0, cell; cell = cells[i++];) {
	                if (cell.rowSpan != 1 || cell.colSpan != 1) return -1;
	            }
	            return 0;
	        },
	        execCommand: function (cmd, fn) {
	            var me = this,
	                range = me.selection.getRange(),
	                bk = range.createBookmark(true),
	                tableItems = getTableItemsByRange(me),
	                cell = tableItems.cell,
	                ut = getUETable(tableItems.table),
	                cellInfo = ut.getCellInfo(cell);
	            ut.sortTable(cellInfo.cellIndex, fn);
	            range.moveToBookmark(bk);
	            try{
	                range.select();
	            }catch(e){}
	        }
	    };
	
	    //设置表格可排序,清除表格可排序
	    UE.commands["enablesort"] = UE.commands["disablesort"] = {
	        queryCommandState: function (cmd) {
	            var table = getTableItemsByRange(this).table;
	            if(table && cmd=='enablesort') {
	                var cells = domUtils.getElementsByTagName(table, 'th td');
	                for(var i = 0; i<cells.length; i++) {
	                    if(cells[i].getAttribute('colspan')>1 || cells[i].getAttribute('rowspan')>1) return -1;
	                }
	            }
	
	            return !table ? -1: cmd=='enablesort' ^ table.getAttribute('data-sort')!='sortEnabled' ? -1:0;
	        },
	        execCommand: function (cmd) {
	            var table = getTableItemsByRange(this).table;
	            table.setAttribute("data-sort", cmd == "enablesort" ? "sortEnabled" : "sortDisabled");
	            cmd == "enablesort" ? domUtils.addClass(table,"sortEnabled"):domUtils.removeClasses(table,"sortEnabled");
	        }
	    };
	};
	
	
	// plugins/contextmenu.js
	///import core
	///commands 右键菜单
	///commandsName  ContextMenu
	///commandsTitle  右键菜单
	/**
	 * 右键菜单
	 * @function
	 * @name baidu.editor.plugins.contextmenu
	 * @author zhanyi
	 */
	
	UE.plugins['contextmenu'] = function () {
	    var me = this;
	    me.setOpt('enableContextMenu',true);
	    if(me.getOpt('enableContextMenu') === false){
	        return;
	    }
	    var lang = me.getLang( "contextMenu" ),
	            menu,
	            items = me.options.contextMenu || [
	                {label:lang['selectall'], cmdName:'selectall'},
	                {
	                    label:lang.cleardoc,
	                    cmdName:'cleardoc',
	                    exec:function () {
	                        if ( confirm( lang.confirmclear ) ) {
	                            this.execCommand( 'cleardoc' );
	                        }
	                    }
	                },
	                '-',
	                {
	                    label:lang.unlink,
	                    cmdName:'unlink'
	                },
	                '-',
	                {
	                    group:lang.paragraph,
	                    icon:'justifyjustify',
	                    subMenu:[
	                        {
	                            label:lang.justifyleft,
	                            cmdName:'justify',
	                            value:'left'
	                        },
	                        {
	                            label:lang.justifyright,
	                            cmdName:'justify',
	                            value:'right'
	                        },
	                        {
	                            label:lang.justifycenter,
	                            cmdName:'justify',
	                            value:'center'
	                        },
	                        {
	                            label:lang.justifyjustify,
	                            cmdName:'justify',
	                            value:'justify'
	                        }
	                    ]
	                },
	                '-',
	                {
	                    group:lang.table,
	                    icon:'table',
	                    subMenu:[
	                        {
	                            label:lang.inserttable,
	                            cmdName:'inserttable'
	                        },
	                        {
	                            label:lang.deletetable,
	                            cmdName:'deletetable'
	                        },
	                        '-',
	                        {
	                            label:lang.deleterow,
	                            cmdName:'deleterow'
	                        },
	                        {
	                            label:lang.deletecol,
	                            cmdName:'deletecol'
	                        },
	                        {
	                            label:lang.insertcol,
	                            cmdName:'insertcol'
	                        },
	                        {
	                            label:lang.insertcolnext,
	                            cmdName:'insertcolnext'
	                        },
	                        {
	                            label:lang.insertrow,
	                            cmdName:'insertrow'
	                        },
	                        {
	                            label:lang.insertrownext,
	                            cmdName:'insertrownext'
	                        },
	                        '-',
	                        {
	                            label:lang.insertcaption,
	                            cmdName:'insertcaption'
	                        },
	                        {
	                            label:lang.deletecaption,
	                            cmdName:'deletecaption'
	                        },
	                        {
	                            label:lang.inserttitle,
	                            cmdName:'inserttitle'
	                        },
	                        {
	                            label:lang.deletetitle,
	                            cmdName:'deletetitle'
	                        },
	                        {
	                            label:lang.inserttitlecol,
	                            cmdName:'inserttitlecol'
	                        },
	                        {
	                            label:lang.deletetitlecol,
	                            cmdName:'deletetitlecol'
	                        },
	                        '-',
	                        {
	                            label:lang.mergecells,
	                            cmdName:'mergecells'
	                        },
	                        {
	                            label:lang.mergeright,
	                            cmdName:'mergeright'
	                        },
	                        {
	                            label:lang.mergedown,
	                            cmdName:'mergedown'
	                        },
	                        '-',
	                        {
	                            label:lang.splittorows,
	                            cmdName:'splittorows'
	                        },
	                        {
	                            label:lang.splittocols,
	                            cmdName:'splittocols'
	                        },
	                        {
	                            label:lang.splittocells,
	                            cmdName:'splittocells'
	                        },
	                        '-',
	                        {
	                            label:lang.averageDiseRow,
	                            cmdName:'averagedistributerow'
	                        },
	                        {
	                            label:lang.averageDisCol,
	                            cmdName:'averagedistributecol'
	                        },
	                        '-',
	                        {
	                            label:lang.edittd,
	                            cmdName:'edittd',
	                            exec:function () {
	                                if ( UE.ui['edittd'] ) {
	                                    new UE.ui['edittd']( this );
	                                }
	                                this.getDialog('edittd').open();
	                            }
	                        },
	                        {
	                            label:lang.edittable,
	                            cmdName:'edittable',
	                            exec:function () {
	                                if ( UE.ui['edittable'] ) {
	                                    new UE.ui['edittable']( this );
	                                }
	                                this.getDialog('edittable').open();
	                            }
	                        },
	                        {
	                            label:lang.setbordervisible,
	                            cmdName:'setbordervisible'
	                        }
	                    ]
	                },
	                {
	                    group:lang.tablesort,
	                    icon:'tablesort',
	                    subMenu:[
	                        {
	                            label:lang.enablesort,
	                            cmdName:'enablesort'
	                        },
	                        {
	                            label:lang.disablesort,
	                            cmdName:'disablesort'
	                        },
	                        '-',
	                        {
	                            label:lang.reversecurrent,
	                            cmdName:'sorttable',
	                            value:'reversecurrent'
	                        },
	                        {
	                            label:lang.orderbyasc,
	                            cmdName:'sorttable',
	                            value:'orderbyasc'
	                        },
	                        {
	                            label:lang.reversebyasc,
	                            cmdName:'sorttable',
	                            value:'reversebyasc'
	                        },
	                        {
	                            label:lang.orderbynum,
	                            cmdName:'sorttable',
	                            value:'orderbynum'
	                        },
	                        {
	                            label:lang.reversebynum,
	                            cmdName:'sorttable',
	                            value:'reversebynum'
	                        }
	                    ]
	                },
	                {
	                    group:lang.borderbk,
	                    icon:'borderBack',
	                    subMenu:[
	                        {
	                            label:lang.setcolor,
	                            cmdName:"interlacetable",
	                            exec:function(){
	                                this.execCommand("interlacetable");
	                            }
	                        },
	                        {
	                            label:lang.unsetcolor,
	                            cmdName:"uninterlacetable",
	                            exec:function(){
	                                this.execCommand("uninterlacetable");
	                            }
	                        },
	                        {
	                            label:lang.setbackground,
	                            cmdName:"settablebackground",
	                            exec:function(){
	                                this.execCommand("settablebackground",{repeat:true,colorList:["#bbb","#ccc"]});
	                            }
	                        },
	                        {
	                            label:lang.unsetbackground,
	                            cmdName:"cleartablebackground",
	                            exec:function(){
	                                this.execCommand("cleartablebackground");
	                            }
	                        },
	                        {
	                            label:lang.redandblue,
	                            cmdName:"settablebackground",
	                            exec:function(){
	                                this.execCommand("settablebackground",{repeat:true,colorList:["red","blue"]});
	                            }
	                        },
	                        {
	                            label:lang.threecolorgradient,
	                            cmdName:"settablebackground",
	                            exec:function(){
	                                this.execCommand("settablebackground",{repeat:true,colorList:["#aaa","#bbb","#ccc"]});
	                            }
	                        }
	                    ]
	                },
	                {
	                    group:lang.aligntd,
	                    icon:'aligntd',
	                    subMenu:[
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'left',vAlign:'top'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'center',vAlign:'top'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'right',vAlign:'top'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'left',vAlign:'middle'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'center',vAlign:'middle'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'right',vAlign:'middle'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'left',vAlign:'bottom'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'center',vAlign:'bottom'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'right',vAlign:'bottom'}
	                        }
	                    ]
	                },
	                {
	                    group:lang.aligntable,
	                    icon:'aligntable',
	                    subMenu:[
	                        {
	                            cmdName:'tablealignment',
	                            className: 'left',
	                            label:lang.tableleft,
	                            value:"left"
	                        },
	                        {
	                            cmdName:'tablealignment',
	                            className: 'center',
	                            label:lang.tablecenter,
	                            value:"center"
	                        },
	                        {
	                            cmdName:'tablealignment',
	                            className: 'right',
	                            label:lang.tableright,
	                            value:"right"
	                        }
	                    ]
	                },
	                '-',
	                {
	                    label:lang.insertparagraphbefore,
	                    cmdName:'insertparagraph',
	                    value:true
	                },
	                {
	                    label:lang.insertparagraphafter,
	                    cmdName:'insertparagraph'
	                },
	                {
	                    label:lang['copy'],
	                    cmdName:'copy'
	                },
	                {
	                    label:lang['paste'],
	                    cmdName:'paste'
	                }
	            ];
	    if ( !items.length ) {
	        return;
	    }
	    var uiUtils = UE.ui.uiUtils;
	
	    me.addListener( 'contextmenu', function ( type, evt ) {
	
	        var offset = uiUtils.getViewportOffsetByEvent( evt );
	        me.fireEvent( 'beforeselectionchange' );
	        if ( menu ) {
	            menu.destroy();
	        }
	        for ( var i = 0, ti, contextItems = []; ti = items[i]; i++ ) {
	            var last;
	            (function ( item ) {
	                if ( item == '-' ) {
	                    if ( (last = contextItems[contextItems.length - 1 ] ) && last !== '-' ) {
	                        contextItems.push( '-' );
	                    }
	                } else if ( item.hasOwnProperty( "group" ) ) {
	                    for ( var j = 0, cj, subMenu = []; cj = item.subMenu[j]; j++ ) {
	                        (function ( subItem ) {
	                            if ( subItem == '-' ) {
	                                if ( (last = subMenu[subMenu.length - 1 ] ) && last !== '-' ) {
	                                    subMenu.push( '-' );
	                                }else{
	                                    subMenu.splice(subMenu.length-1);
	                                }
	                            } else {
	                                if ( (me.commands[subItem.cmdName] || UE.commands[subItem.cmdName] || subItem.query) &&
	                                        (subItem.query ? subItem.query() : me.queryCommandState( subItem.cmdName )) > -1 ) {
	                                    subMenu.push( {
	                                        'label':subItem.label || me.getLang( "contextMenu." + subItem.cmdName + (subItem.value || '') )||"",
	                                        'className':'edui-for-' +subItem.cmdName + ( subItem.className ? ( ' edui-for-' + subItem.cmdName + '-' + subItem.className ) : '' ),
	                                        onclick:subItem.exec ? function () {
	                                                subItem.exec.call( me );
	                                        } : function () {
	                                            me.execCommand( subItem.cmdName, subItem.value );
	                                        }
	                                    } );
	                                }
	                            }
	                        })( cj );
	                    }
	                    if ( subMenu.length ) {
	                        function getLabel(){
	                            switch (item.icon){
	                                case "table":
	                                    return me.getLang( "contextMenu.table" );
	                                case "justifyjustify":
	                                    return me.getLang( "contextMenu.paragraph" );
	                                case "aligntd":
	                                    return me.getLang("contextMenu.aligntd");
	                                case "aligntable":
	                                    return me.getLang("contextMenu.aligntable");
	                                case "tablesort":
	                                    return lang.tablesort;
	                                case "borderBack":
	                                    return lang.borderbk;
	                                default :
	                                    return '';
	                            }
	                        }
	                        contextItems.push( {
	                            //todo 修正成自动获取方式
	                            'label':getLabel(),
	                            className:'edui-for-' + item.icon,
	                            'subMenu':{
	                                items:subMenu,
	                                editor:me
	                            }
	                        } );
	                    }
	
	                } else {
	                    //有可能commmand没有加载右键不能出来，或者没有command也想能展示出来添加query方法
	                    if ( (me.commands[item.cmdName] || UE.commands[item.cmdName] || item.query) &&
	                            (item.query ? item.query.call(me) : me.queryCommandState( item.cmdName )) > -1 ) {
	
	                        contextItems.push( {
	                            'label':item.label || me.getLang( "contextMenu." + item.cmdName ),
	                            className:'edui-for-' + (item.icon ? item.icon : item.cmdName + (item.value || '')),
	                            onclick:item.exec ? function () {
	                                item.exec.call( me );
	                            } : function () {
	                                me.execCommand( item.cmdName, item.value );
	                            }
	                        } );
	                    }
	
	                }
	
	            })( ti );
	        }
	        if ( contextItems[contextItems.length - 1] == '-' ) {
	            contextItems.pop();
	        }
	
	        menu = new UE.ui.Menu( {
	            items:contextItems,
	            className:"edui-contextmenu",
	            editor:me
	        } );
	        menu.render();
	        menu.showAt( offset );
	
	        me.fireEvent("aftershowcontextmenu",menu);
	
	        domUtils.preventDefault( evt );
	        if ( browser.ie ) {
	            var ieRange;
	            try {
	                ieRange = me.selection.getNative().createRange();
	            } catch ( e ) {
	                return;
	            }
	            if ( ieRange.item ) {
	                var range = new dom.Range( me.document );
	                range.selectNode( ieRange.item( 0 ) ).select( true, true );
	            }
	        }
	    });
	
	    // 添加复制的flash按钮
	    me.addListener('aftershowcontextmenu', function(type, menu) {
	        if (me.zeroclipboard) {
	            var items = menu.items;
	            for (var key in items) {
	                if (items[key].className == 'edui-for-copy') {
	                    me.zeroclipboard.clip(items[key].getDom());
	                }
	            }
	        }
	    });
	
	};
	
	
	// plugins/shortcutmenu.js
	///import core
	///commands       弹出菜单
	// commandsName  popupmenu
	///commandsTitle  弹出菜单
	/**
	 * 弹出菜单
	 * @function
	 * @name baidu.editor.plugins.popupmenu
	 * @author xuheng
	 */
	
	UE.plugins['shortcutmenu'] = function () {
	    var me = this,
	        menu,
	        items = me.options.shortcutMenu || [];
	
	    if (!items.length) {
	        return;
	    }
	
	    me.addListener ('contextmenu mouseup' , function (type , e) {
	        var me = this,
	            customEvt = {
	                type : type ,
	                target : e.target || e.srcElement ,
	                screenX : e.screenX ,
	                screenY : e.screenY ,
	                clientX : e.clientX ,
	                clientY : e.clientY
	            };
	
	        setTimeout (function () {
	            var rng = me.selection.getRange ();
	            if (rng.collapsed === false || type == "contextmenu") {
	
	                if (!menu) {
	                    menu = new baidu.editor.ui.ShortCutMenu ({
	                        editor : me ,
	                        items : items ,
	                        theme : me.options.theme ,
	                        className : 'edui-shortcutmenu'
	                    });
	
	                    menu.render ();
	                    me.fireEvent ("afterrendershortcutmenu" , menu);
	                }
	
	                menu.show (customEvt , !!UE.plugins['contextmenu']);
	            }
	        });
	
	        if (type == 'contextmenu') {
	            domUtils.preventDefault (e);
	            if (browser.ie9below) {
	                var ieRange;
	                try {
	                    ieRange = me.selection.getNative().createRange();
	                } catch (e) {
	                    return;
	                }
	                if (ieRange.item) {
	                    var range = new dom.Range (me.document);
	                    range.selectNode (ieRange.item (0)).select (true , true);
	
	                }
	            }
	        }
	    });
	
	    me.addListener ('keydown' , function (type) {
	        if (type == "keydown") {
	            menu && !menu.isHidden && menu.hide ();
	        }
	
	    });
	
	};
	
	
	
	
	// plugins/basestyle.js
	/**
	 * B、I、sub、super命令支持
	 * @file
	 * @since 1.2.6.1
	 */
	
	UE.plugins['basestyle'] = function(){
	
	    /**
	     * 字体加粗
	     * @command bold
	     * @param { String } cmd 命令字符串
	     * @remind 对已加粗的文本内容执行该命令， 将取消加粗
	     * @method execCommand
	     * @example
	     * ```javascript
	     * //editor是编辑器实例
	     * //对当前选中的文本内容执行加粗操作
	     * //第一次执行， 文本内容加粗
	     * editor.execCommand( 'bold' );
	     *
	     * //第二次执行， 文本内容取消加粗
	     * editor.execCommand( 'bold' );
	     * ```
	     */
	
	
	    /**
	     * 字体倾斜
	     * @command italic
	     * @method execCommand
	     * @param { String } cmd 命令字符串
	     * @remind 对已倾斜的文本内容执行该命令， 将取消倾斜
	     * @example
	     * ```javascript
	     * //editor是编辑器实例
	     * //对当前选中的文本内容执行斜体操作
	     * //第一次操作， 文本内容将变成斜体
	     * editor.execCommand( 'italic' );
	     *
	     * //再次对同一文本内容执行， 则文本内容将恢复正常
	     * editor.execCommand( 'italic' );
	     * ```
	     */
	
	    /**
	     * 下标文本，与“superscript”命令互斥
	     * @command subscript
	     * @method execCommand
	     * @remind  把选中的文本内容切换成下标文本， 如果当前选中的文本已经是下标， 则该操作会把文本内容还原成正常文本
	     * @param { String } cmd 命令字符串
	     * @example
	     * ```javascript
	     * //editor是编辑器实例
	     * //对当前选中的文本内容执行下标操作
	     * //第一次操作， 文本内容将变成下标文本
	     * editor.execCommand( 'subscript' );
	     *
	     * //再次对同一文本内容执行， 则文本内容将恢复正常
	     * editor.execCommand( 'subscript' );
	     * ```
	     */
	
	    /**
	     * 上标文本，与“subscript”命令互斥
	     * @command superscript
	     * @method execCommand
	     * @remind 把选中的文本内容切换成上标文本， 如果当前选中的文本已经是上标， 则该操作会把文本内容还原成正常文本
	     * @param { String } cmd 命令字符串
	     * @example
	     * ```javascript
	     * //editor是编辑器实例
	     * //对当前选中的文本内容执行上标操作
	     * //第一次操作， 文本内容将变成上标文本
	     * editor.execCommand( 'superscript' );
	     *
	     * //再次对同一文本内容执行， 则文本内容将恢复正常
	     * editor.execCommand( 'superscript' );
	     * ```
	     */
	    var basestyles = {
	            'bold':['strong','b'],
	            'italic':['em','i'],
	            'subscript':['sub'],
	            'superscript':['sup']
	        },
	        getObj = function(editor,tagNames){
	            return domUtils.filterNodeList(editor.selection.getStartElementPath(),tagNames);
	        },
	        me = this;
	    //添加快捷键
	    me.addshortcutkey({
	        "Bold" : "ctrl+66",//^B
	        "Italic" : "ctrl+73", //^I
	        "Underline" : "ctrl+85"//^U
	    });
	    me.addInputRule(function(root){
	        utils.each(root.getNodesByTagName('b i'),function(node){
	            switch (node.tagName){
	                case 'b':
	                    node.tagName = 'strong';
	                    break;
	                case 'i':
	                    node.tagName = 'em';
	            }
	        });
	    });
	    for ( var style in basestyles ) {
	        (function( cmd, tagNames ) {
	            me.commands[cmd] = {
	                execCommand : function( cmdName ) {
	                    var range = me.selection.getRange(),obj = getObj(this,tagNames);
	                    if ( range.collapsed ) {
	                        if ( obj ) {
	                            var tmpText =  me.document.createTextNode('');
	                            range.insertNode( tmpText ).removeInlineStyle( tagNames );
	                            range.setStartBefore(tmpText);
	                            domUtils.remove(tmpText);
	                        } else {
	                            var tmpNode = range.document.createElement( tagNames[0] );
	                            if(cmdName == 'superscript' || cmdName == 'subscript'){
	                                tmpText = me.document.createTextNode('');
	                                range.insertNode(tmpText)
	                                    .removeInlineStyle(['sub','sup'])
	                                    .setStartBefore(tmpText)
	                                    .collapse(true);
	                            }
	                            range.insertNode( tmpNode ).setStart( tmpNode, 0 );
	                        }
	                        range.collapse( true );
	                    } else {
	                        if(cmdName == 'superscript' || cmdName == 'subscript'){
	                            if(!obj || obj.tagName.toLowerCase() != cmdName){
	                                range.removeInlineStyle(['sub','sup']);
	                            }
	                        }
	                        obj ? range.removeInlineStyle( tagNames ) : range.applyInlineStyle( tagNames[0] );
	                    }
	                    range.select();
	                },
	                queryCommandState : function() {
	                   return getObj(this,tagNames) ? 1 : 0;
	                }
	            };
	        })( style, basestyles[style] );
	    }
	};
	
	
	
	// plugins/elementpath.js
	/**
	 * 选取路径命令
	 * @file
	 */
	UE.plugins['elementpath'] = function(){
	    var currentLevel,
	        tagNames,
	        me = this;
	    me.setOpt('elementPathEnabled',true);
	    if(!me.options.elementPathEnabled){
	        return;
	    }
	    me.commands['elementpath'] = {
	        execCommand : function( cmdName, level ) {
	            var start = tagNames[level],
	                range = me.selection.getRange();
	            currentLevel = level*1;
	            range.selectNode(start).select();
	        },
	        queryCommandValue : function() {
	            //产生一个副本，不能修改原来的startElementPath;
	            var parents = [].concat(this.selection.getStartElementPath()).reverse(),
	                names = [];
	            tagNames = parents;
	            for(var i=0,ci;ci=parents[i];i++){
	                if(ci.nodeType == 3) {
	                    continue;
	                }
	                var name = ci.tagName.toLowerCase();
	                if(name == 'img' && ci.getAttribute('anchorname')){
	                    name = 'anchor';
	                }
	                names[i] = name;
	                if(currentLevel == i){
	                   currentLevel = -1;
	                    break;
	                }
	            }
	            return names;
	        }
	    };
	};
	
	
	
	// plugins/formatmatch.js
	/**
	 * 格式刷，只格式inline的
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 格式刷
	 * @command formatmatch
	 * @method execCommand
	 * @remind 该操作不能复制段落格式
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * //editor是编辑器实例
	 * //获取格式刷
	 * editor.execCommand( 'formatmatch' );
	 * ```
	 */
	UE.plugins['formatmatch'] = function(){
	
	    var me = this,
	        list = [],img,
	        flag = 0;
	
	     me.addListener('reset',function(){
	         list = [];
	         flag = 0;
	     });
	
	    function addList(type,evt){
	        
	        if(browser.webkit){
	            var target = evt.target.tagName == 'IMG' ? evt.target : null;
	        }
	
	        function addFormat(range){
	
	            if(text){
	                range.selectNode(text);
	            }
	            return range.applyInlineStyle(list[list.length-1].tagName,null,list);
	
	        }
	
	        me.undoManger && me.undoManger.save();
	
	        var range = me.selection.getRange(),
	            imgT = target || range.getClosedNode();
	        if(img && imgT && imgT.tagName == 'IMG'){
	            //trace:964
	
	            imgT.style.cssText += ';float:' + (img.style.cssFloat || img.style.styleFloat ||'none') + ';display:' + (img.style.display||'inline');
	
	            img = null;
	        }else{
	            if(!img){
	                var collapsed = range.collapsed;
	                if(collapsed){
	                    var text = me.document.createTextNode('match');
	                    range.insertNode(text).select();
	
	
	                }
	                me.__hasEnterExecCommand = true;
	                //不能把block上的属性干掉
	                //trace:1553
	                var removeFormatAttributes = me.options.removeFormatAttributes;
	                me.options.removeFormatAttributes = '';
	                me.execCommand('removeformat');
	                me.options.removeFormatAttributes = removeFormatAttributes;
	                me.__hasEnterExecCommand = false;
	                //trace:969
	                range = me.selection.getRange();
	                if(list.length){
	                    addFormat(range);
	                }
	                if(text){
	                    range.setStartBefore(text).collapse(true);
	
	                }
	                range.select();
	                text && domUtils.remove(text);
	            }
	
	        }
	
	
	
	
	        me.undoManger && me.undoManger.save();
	        me.removeListener('mouseup',addList);
	        flag = 0;
	    }
	
	    me.commands['formatmatch'] = {
	        execCommand : function( cmdName ) {
	          
	            if(flag){
	                flag = 0;
	                list = [];
	                 me.removeListener('mouseup',addList);
	                return;
	            }
	
	
	              
	            var range = me.selection.getRange();
	            img = range.getClosedNode();
	            if(!img || img.tagName != 'IMG'){
	               range.collapse(true).shrinkBoundary();
	               var start = range.startContainer;
	               list = domUtils.findParents(start,true,function(node){
	                   return !domUtils.isBlockElm(node) && node.nodeType == 1;
	               });
	               //a不能加入格式刷, 并且克隆节点
	               for(var i=0,ci;ci=list[i];i++){
	                   if(ci.tagName == 'A'){
	                       list.splice(i,1);
	                       break;
	                   }
	               }
	
	            }
	
	            me.addListener('mouseup',addList);
	            flag = 1;
	
	
	        },
	        queryCommandState : function() {
	            return flag;
	        },
	        notNeedUndo : 1
	    };
	};
	
	
	
	// plugins/searchreplace.js
	///import core
	///commands 查找替换
	///commandsName  SearchReplace
	///commandsTitle  查询替换
	///commandsDialog  dialogs\searchreplace
	/**
	 * @description 查找替换
	 * @author zhanyi
	 */
	
	UE.plugin.register('searchreplace',function(){
	    var me = this;
	
	    var _blockElm = {'table':1,'tbody':1,'tr':1,'ol':1,'ul':1};
	
	    function findTextInString(textContent,opt,currentIndex){
	        var str = opt.searchStr;
	        if(opt.dir == -1){
	            textContent = textContent.split('').reverse().join('');
	            str = str.split('').reverse().join('');
	            currentIndex = textContent.length - currentIndex;
	
	        }
	        var reg = new RegExp(str,'g' + (opt.casesensitive ? '' : 'i')),match;
	
	        while(match = reg.exec(textContent)){
	            if(match.index >= currentIndex){
	                return opt.dir == -1 ? textContent.length - match.index - opt.searchStr.length : match.index;
	            }
	        }
	        return  -1
	    }
	    function findTextBlockElm(node,currentIndex,opt){
	        var textContent,index,methodName = opt.all || opt.dir == 1 ? 'getNextDomNode' : 'getPreDomNode';
	        if(domUtils.isBody(node)){
	            node = node.firstChild;
	        }
	        var first = 1;
	        while(node){
	            textContent = node.nodeType == 3 ? node.nodeValue : node[browser.ie ? 'innerText' : 'textContent'];
	            index = findTextInString(textContent,opt,currentIndex );
	            first = 0;
	            if(index!=-1){
	                return {
	                    'node':node,
	                    'index':index
	                }
	            }
	            node = domUtils[methodName](node);
	            while(node && _blockElm[node.nodeName.toLowerCase()]){
	                node = domUtils[methodName](node,true);
	            }
	            if(node){
	                currentIndex = opt.dir == -1 ? (node.nodeType == 3 ? node.nodeValue : node[browser.ie ? 'innerText' : 'textContent']).length : 0;
	            }
	
	        }
	    }
	    function findNTextInBlockElm(node,index,str){
	        var currentIndex = 0,
	            currentNode = node.firstChild,
	            currentNodeLength = 0,
	            result;
	        while(currentNode){
	            if(currentNode.nodeType == 3){
	                currentNodeLength = currentNode.nodeValue.replace(/(^[\t\r\n]+)|([\t\r\n]+$)/,'').length;
	                currentIndex += currentNodeLength;
	                if(currentIndex >= index){
	                    return {
	                        'node':currentNode,
	                        'index': currentNodeLength - (currentIndex - index)
	                    }
	                }
	            }else if(!dtd.$empty[currentNode.tagName]){
	                currentNodeLength = currentNode[browser.ie ? 'innerText' : 'textContent'].replace(/(^[\t\r\n]+)|([\t\r\n]+$)/,'').length
	                currentIndex += currentNodeLength;
	                if(currentIndex >= index){
	                    result = findNTextInBlockElm(currentNode,currentNodeLength - (currentIndex - index),str);
	                    if(result){
	                        return result;
	                    }
	                }
	            }
	            currentNode = domUtils.getNextDomNode(currentNode);
	
	        }
	    }
	
	    function searchReplace(me,opt){
	
	        var rng = me.selection.getRange(),
	            startBlockNode,
	            searchStr = opt.searchStr,
	            span = me.document.createElement('span');
	        span.innerHTML = '$$ueditor_searchreplace_key$$';
	
	        rng.shrinkBoundary(true);
	
	        //判断是不是第一次选中
	        if(!rng.collapsed){
	            rng.select();
	            var rngText = me.selection.getText();
	            if(new RegExp('^' + opt.searchStr + '$',(opt.casesensitive ? '' : 'i')).test(rngText)){
	                if(opt.replaceStr != undefined){
	                    replaceText(rng,opt.replaceStr);
	                    rng.select();
	                    return true;
	                }else{
	                    rng.collapse(opt.dir == -1)
	                }
	
	            }
	        }
	
	
	        rng.insertNode(span);
	        rng.enlargeToBlockElm(true);
	        startBlockNode = rng.startContainer;
	        var currentIndex = startBlockNode[browser.ie ? 'innerText' : 'textContent'].indexOf('$$ueditor_searchreplace_key$$');
	        rng.setStartBefore(span);
	        domUtils.remove(span);
	        var result = findTextBlockElm(startBlockNode,currentIndex,opt);
	        if(result){
	            var rngStart = findNTextInBlockElm(result.node,result.index,searchStr);
	            var rngEnd = findNTextInBlockElm(result.node,result.index + searchStr.length,searchStr);
	            rng.setStart(rngStart.node,rngStart.index).setEnd(rngEnd.node,rngEnd.index);
	
	            if(opt.replaceStr !== undefined){
	                replaceText(rng,opt.replaceStr)
	            }
	            rng.select();
	            return true;
	        }else{
	            rng.setCursor()
	        }
	
	    }
	    function replaceText(rng,str){
	
	        str = me.document.createTextNode(str);
	        rng.deleteContents().insertNode(str);
	
	    }
	    return {
	        commands:{
	            'searchreplace':{
	                execCommand:function(cmdName,opt){
	                    utils.extend(opt,{
	                        all : false,
	                        casesensitive : false,
	                        dir : 1
	                    },true);
	                    var num = 0;
	                    if(opt.all){
	
	                        var rng = me.selection.getRange(),
	                            first = me.body.firstChild;
	                        if(first && first.nodeType == 1){
	                            rng.setStart(first,0);
	                            rng.shrinkBoundary(true);
	                        }else if(first.nodeType == 3){
	                            rng.setStartBefore(first)
	                        }
	                        rng.collapse(true).select(true);
	                        if(opt.replaceStr !== undefined){
	                            me.fireEvent('saveScene');
	                        }
	                        while(searchReplace(this,opt)){
	                            num++;
	                        }
	                        if(num){
	                            me.fireEvent('saveScene');
	                        }
	                    }else{
	                        if(opt.replaceStr !== undefined){
	                            me.fireEvent('saveScene');
	                        }
	                        if(searchReplace(this,opt)){
	                            num++
	                        }
	                        if(num){
	                            me.fireEvent('saveScene');
	                        }
	
	                    }
	
	                    return num;
	                },
	                notNeedUndo:1
	            }
	        }
	    }
	});
	
	// plugins/customstyle.js
	/**
	 * 自定义样式
	 * @file
	 * @since 1.2.6.1
	 */
	
	/**
	 * 根据config配置文件里“customstyle”选项的值对匹配的标签执行样式替换。
	 * @command customstyle
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'customstyle' );
	 * ```
	 */
	UE.plugins['customstyle'] = function() {
	    var me = this;
	    me.setOpt({ 'customstyle':[
	        {tag:'h1',name:'tc', style:'font-size:32px;font-weight:bold;border-bottom:#ccc 2px solid;padding:0 4px 0 0;text-align:center;margin:0 0 20px 0;'},
	        {tag:'h1',name:'tl', style:'font-size:32px;font-weight:bold;border-bottom:#ccc 2px solid;padding:0 4px 0 0;text-align:left;margin:0 0 10px 0;'},
	        {tag:'span',name:'im', style:'font-size:16px;font-style:italic;font-weight:bold;line-height:18px;'},
	        {tag:'span',name:'hi', style:'font-size:16px;font-style:italic;font-weight:bold;color:rgb(51, 153, 204);line-height:18px;'}
	    ]});
	    me.commands['customstyle'] = {
	        execCommand : function(cmdName, obj) {
	            var me = this,
	                    tagName = obj.tag,
	                    node = domUtils.findParent(me.selection.getStart(), function(node) {
	                        return node.getAttribute('label');
	                    }, true),
	                    range,bk,tmpObj = {};
	            for (var p in obj) {
	               if(obj[p]!==undefined)
	                    tmpObj[p] = obj[p];
	            }
	            delete tmpObj.tag;
	            if (node && node.getAttribute('label') == obj.label) {
	                range = this.selection.getRange();
	                bk = range.createBookmark();
	                if (range.collapsed) {
	                    //trace:1732 删掉自定义标签，要有p来回填站位
	                    if(dtd.$block[node.tagName]){
	                        var fillNode = me.document.createElement('p');
	                        domUtils.moveChild(node, fillNode);
	                        node.parentNode.insertBefore(fillNode, node);
	                        domUtils.remove(node);
	                    }else{
	                        domUtils.remove(node,true);
	                    }
	
	                } else {
	
	                    var common = domUtils.getCommonAncestor(bk.start, bk.end),
	                            nodes = domUtils.getElementsByTagName(common, tagName);
	                    if(new RegExp(tagName,'i').test(common.tagName)){
	                        nodes.push(common);
	                    }
	                    for (var i = 0,ni; ni = nodes[i++];) {
	                        if (ni.getAttribute('label') == obj.label) {
	                            var ps = domUtils.getPosition(ni, bk.start),pe = domUtils.getPosition(ni, bk.end);
	                            if ((ps & domUtils.POSITION_FOLLOWING || ps & domUtils.POSITION_CONTAINS)
	                                    &&
	                                    (pe & domUtils.POSITION_PRECEDING || pe & domUtils.POSITION_CONTAINS)
	                                    )
	                                if (dtd.$block[tagName]) {
	                                    var fillNode = me.document.createElement('p');
	                                    domUtils.moveChild(ni, fillNode);
	                                    ni.parentNode.insertBefore(fillNode, ni);
	                                }
	                            domUtils.remove(ni, true);
	                        }
	                    }
	                    node = domUtils.findParent(common, function(node) {
	                        return node.getAttribute('label') == obj.label;
	                    }, true);
	                    if (node) {
	
	                        domUtils.remove(node, true);
	
	                    }
	
	                }
	                range.moveToBookmark(bk).select();
	            } else {
	                if (dtd.$block[tagName]) {
	                    this.execCommand('paragraph', tagName, tmpObj,'customstyle');
	                    range = me.selection.getRange();
	                    if (!range.collapsed) {
	                        range.collapse();
	                        node = domUtils.findParent(me.selection.getStart(), function(node) {
	                            return node.getAttribute('label') == obj.label;
	                        }, true);
	                        var pNode = me.document.createElement('p');
	                        domUtils.insertAfter(node, pNode);
	                        domUtils.fillNode(me.document, pNode);
	                        range.setStart(pNode, 0).setCursor();
	                    }
	                } else {
	
	                    range = me.selection.getRange();
	                    if (range.collapsed) {
	                        node = me.document.createElement(tagName);
	                        domUtils.setAttributes(node, tmpObj);
	                        range.insertNode(node).setStart(node, 0).setCursor();
	
	                        return;
	                    }
	
	                    bk = range.createBookmark();
	                    range.applyInlineStyle(tagName, tmpObj).moveToBookmark(bk).select();
	                }
	            }
	
	        },
	        queryCommandValue : function() {
	            var parent = domUtils.filterNodeList(
	                this.selection.getStartElementPath(),
	                function(node){return node.getAttribute('label')}
	            );
	            return  parent ? parent.getAttribute('label') : '';
	        }
	    };
	    //当去掉customstyle是，如果是块元素，用p代替
	    me.addListener('keyup', function(type, evt) {
	        var keyCode = evt.keyCode || evt.which;
	
	        if (keyCode == 32 || keyCode == 13) {
	            var range = me.selection.getRange();
	            if (range.collapsed) {
	                var node = domUtils.findParent(me.selection.getStart(), function(node) {
	                    return node.getAttribute('label');
	                }, true);
	                if (node && dtd.$block[node.tagName] && domUtils.isEmptyNode(node)) {
	                        var p = me.document.createElement('p');
	                        domUtils.insertAfter(node, p);
	                        domUtils.fillNode(me.document, p);
	                        domUtils.remove(node);
	                        range.setStart(p, 0).setCursor();
	
	
	                }
	            }
	        }
	    });
	};
	
	// plugins/catchremoteimage.js
	///import core
	///commands 远程图片抓取
	///commandsName  catchRemoteImage,catchremoteimageenable
	///commandsTitle  远程图片抓取
	/**
	 * 远程图片抓取,当开启本插件时所有不符合本地域名的图片都将被抓取成为本地服务器上的图片
	 */
	UE.plugins['catchremoteimage'] = function () {
	    var me = this,
	        ajax = UE.ajax;
	
	    /* 设置默认值 */
	    if (me.options.catchRemoteImageEnable === false) return;
	    me.setOpt({
	        catchRemoteImageEnable: false
	    });
	
	    me.addListener("afterpaste", function () {
	        me.fireEvent("catchRemoteImage");
	    });
	
	    me.addListener("catchRemoteImage", function () {
	
	        var catcherLocalDomain = me.getOpt('catcherLocalDomain'),
	            catcherActionUrl = me.getActionUrl(me.getOpt('catcherActionName')),
	            catcherUrlPrefix = me.getOpt('catcherUrlPrefix'),
	            catcherFieldName = me.getOpt('catcherFieldName');
	
	        var remoteImages = [],
	            imgs = domUtils.getElementsByTagName(me.document, "img"),
	            test = function (src, urls) {
	                if (src.indexOf(location.host) != -1 || /(^\.)|(^\/)/.test(src)) {
	                    return true;
	                }
	                if (urls) {
	                    for (var j = 0, url; url = urls[j++];) {
	                        if (src.indexOf(url) !== -1) {
	                            return true;
	                        }
	                    }
	                }
	                return false;
	            };
	
	        for (var i = 0, ci; ci = imgs[i++];) {
	            if (ci.getAttribute("word_img")) {
	                continue;
	            }
	            var src = ci.getAttribute("_src") || ci.src || "";
	            if (/^(https?|ftp):/i.test(src) && !test(src, catcherLocalDomain)) {
	                remoteImages.push(src);
	            }
	        }
	
	        if (remoteImages.length) {
	            catchremoteimage(remoteImages, {
	                //成功抓取
	                success: function (r) {
	                    try {
	                        var info = r.state !== undefined ? r:eval("(" + r.responseText + ")");
	                    } catch (e) {
	                        return;
	                    }
	
	                    /* 获取源路径和新路径 */
	                    var i, j, ci, cj, oldSrc, newSrc, list = info.list;
	
	                    for (i = 0; ci = imgs[i++];) {
	                        oldSrc = ci.getAttribute("_src") || ci.src || "";
	                        for (j = 0; cj = list[j++];) {
	                            if (oldSrc == cj.source && cj.state == "SUCCESS") {  //抓取失败时不做替换处理
	                                newSrc = catcherUrlPrefix + cj.url;
	                                domUtils.setAttributes(ci, {
	                                    "src": newSrc,
	                                    "_src": newSrc
	                                });
	                                break;
	                            }
	                        }
	                    }
	                    me.fireEvent('catchremotesuccess')
	                },
	                //回调失败，本次请求超时
	                error: function () {
	                    me.fireEvent("catchremoteerror");
	                }
	            });
	        }
	
	        function catchremoteimage(imgs, callbacks) {
	            var params = utils.serializeParam(me.queryCommandValue('serverparam')) || '',
	                url = utils.formatUrl(catcherActionUrl + (catcherActionUrl.indexOf('?') == -1 ? '?':'&') + params),
	                isJsonp = utils.isCrossDomainUrl(url),
	                opt = {
	                    'method': 'POST',
	                    'dataType': isJsonp ? 'jsonp':'',
	                    'timeout': 60000, //单位：毫秒，回调请求超时设置。目标用户如果网速不是很快的话此处建议设置一个较大的数值
	                    'onsuccess': callbacks["success"],
	                    'onerror': callbacks["error"]
	                };
	            opt[catcherFieldName] = imgs;
	            ajax.request(url, opt);
	        }
	
	    });
	};
	
	// plugins/snapscreen.js
	/**
	 * 截屏插件，为UEditor提供插入支持
	 * @file
	 * @since 1.4.2
	 */
	UE.plugin.register('snapscreen', function (){
	
	    var me = this;
	    var snapplugin;
	
	    function getLocation(url){
	        var search,
	            a = document.createElement('a'),
	            params = utils.serializeParam(me.queryCommandValue('serverparam')) || '';
	
	        a.href = url;
	        if (browser.ie) {
	            a.href = a.href;
	        }
	
	
	        search = a.search;
	        if (params) {
	            search = search + (search.indexOf('?') == -1 ? '?':'&')+ params;
	            search = search.replace(/[&]+/ig, '&');
	        }
	        return {
	            'port': a.port,
	            'hostname': a.hostname,
	            'path': a.pathname + search ||  + a.hash
	        }
	    }
	
	    return {
	        commands:{
	            /**
	             * 字体背景颜色
	             * @command snapscreen
	             * @method execCommand
	             * @param { String } cmd 命令字符串
	             * @example
	             * ```javascript
	             * editor.execCommand('snapscreen');
	             * ```
	             */
	            'snapscreen':{
	                execCommand:function (cmd) {
	                    var url, local, res;
	                    var lang = me.getLang("snapScreen_plugin");
	
	                    if(!snapplugin){
	                        var container = me.container;
	                        var doc = me.container.ownerDocument || me.container.document;
	                        snapplugin = doc.createElement("object");
	                        try{snapplugin.type = "application/x-pluginbaidusnap";}catch(e){
	                            return;
	                        }
	                        snapplugin.style.cssText = "position:absolute;left:-9999px;width:0;height:0;";
	                        snapplugin.setAttribute("width","0");
	                        snapplugin.setAttribute("height","0");
	                        container.appendChild(snapplugin);
	                    }
	
	                    function onSuccess(rs){
	                        try{
	                            rs = eval("("+ rs +")");
	                            if(rs.state == 'SUCCESS'){
	                                var opt = me.options;
	                                me.execCommand('insertimage', {
	                                    src: opt.snapscreenUrlPrefix + rs.url,
	                                    _src: opt.snapscreenUrlPrefix + rs.url,
	                                    alt: rs.title || '',
	                                    floatStyle: opt.snapscreenImgAlign
	                                });
	                            } else {
	                                alert(rs.state);
	                            }
	                        }catch(e){
	                            alert(lang.callBackErrorMsg);
	                        }
	                    }
	                    url = me.getActionUrl(me.getOpt('snapscreenActionName'));
	                    local = getLocation(url);
	                    setTimeout(function () {
	                        try{
	                            res =snapplugin.saveSnapshot(local.hostname, local.path, local.port);
	                        }catch(e){
	                            me.ui._dialogs['snapscreenDialog'].open();
	                            return;
	                        }
	
	                        onSuccess(res);
	                    }, 50);
	                },
	                queryCommandState: function(){
	                    return (navigator.userAgent.indexOf("Windows",0) != -1) ? 0:-1;
	                }
	            }
	        }
	    }
	});
	
	
	// plugins/insertparagraph.js
	/**
	 * 插入段落
	 * @file
	 * @since 1.2.6.1
	 */
	
	
	/**
	 * 插入段落
	 * @command insertparagraph
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * //editor是编辑器实例
	 * editor.execCommand( 'insertparagraph' );
	 * ```
	 */
	
	UE.commands['insertparagraph'] = {
	    execCommand : function( cmdName,front) {
	        var me = this,
	            range = me.selection.getRange(),
	            start = range.startContainer,tmpNode;
	        while(start ){
	            if(domUtils.isBody(start)){
	                break;
	            }
	            tmpNode = start;
	            start = start.parentNode;
	        }
	        if(tmpNode){
	            var p = me.document.createElement('p');
	            if(front){
	                tmpNode.parentNode.insertBefore(p,tmpNode)
	            }else{
	                tmpNode.parentNode.insertBefore(p,tmpNode.nextSibling)
	            }
	            domUtils.fillNode(me.document,p);
	            range.setStart(p,0).setCursor(false,true);
	        }
	    }
	};
	
	
	
	// plugins/webapp.js
	/**
	 * 百度应用
	 * @file
	 * @since 1.2.6.1
	 */
	
	
	/**
	 * 插入百度应用
	 * @command webapp
	 * @method execCommand
	 * @remind 需要百度APPKey
	 * @remind 百度应用主页： <a href="http://app.baidu.com/" target="_blank">http://app.baidu.com/</a>
	 * @param { Object } appOptions 应用所需的参数项， 支持的key有： title=>应用标题， width=>应用容器宽度，
	 * height=>应用容器高度，logo=>应用logo，url=>应用地址
	 * @example
	 * ```javascript
	 * //editor是编辑器实例
	 * //在编辑器里插入一个“植物大战僵尸”的APP
	 * editor.execCommand( 'webapp' , {
	 *     title: '植物大战僵尸',
	 *     width: 560,
	 *     height: 465,
	 *     logo: '应用展示的图片',
	 *     url: '百度应用的地址'
	 * } );
	 * ```
	 */
	
	//UE.plugins['webapp'] = function () {
	//    var me = this;
	//    function createInsertStr( obj, toIframe, addParagraph ) {
	//        return !toIframe ?
	//                (addParagraph ? '<p>' : '') + '<img title="'+obj.title+'" width="' + obj.width + '" height="' + obj.height + '"' +
	//                        ' src="' + me.options.UEDITOR_HOME_URL + 'themes/default/images/spacer.gif" style="background:url(' + obj.logo+') no-repeat center center; border:1px solid gray;" class="edui-faked-webapp" _url="' + obj.url + '" />' +
	//                        (addParagraph ? '</p>' : '')
	//                :
	//                '<iframe class="edui-faked-webapp" title="'+obj.title+'" width="' + obj.width + '" height="' + obj.height + '"  scrolling="no" frameborder="0" src="' + obj.url + '" logo_url = '+obj.logo+'></iframe>';
	//    }
	//
	//    function switchImgAndIframe( img2frame ) {
	//        var tmpdiv,
	//                nodes = domUtils.getElementsByTagName( me.document, !img2frame ? "iframe" : "img" );
	//        for ( var i = 0, node; node = nodes[i++]; ) {
	//            if ( node.className != "edui-faked-webapp" ){
	//                continue;
	//            }
	//            tmpdiv = me.document.createElement( "div" );
	//            tmpdiv.innerHTML = createInsertStr( img2frame ? {url:node.getAttribute( "_url" ), width:node.width, height:node.height,title:node.title,logo:node.style.backgroundImage.replace("url(","").replace(")","")} : {url:node.getAttribute( "src", 2 ),title:node.title, width:node.width, height:node.height,logo:node.getAttribute("logo_url")}, img2frame ? true : false,false );
	//            node.parentNode.replaceChild( tmpdiv.firstChild, node );
	//        }
	//    }
	//
	//    me.addListener( "beforegetcontent", function () {
	//        switchImgAndIframe( true );
	//    } );
	//    me.addListener( 'aftersetcontent', function () {
	//        switchImgAndIframe( false );
	//    } );
	//    me.addListener( 'aftergetcontent', function ( cmdName ) {
	//        if ( cmdName == 'aftergetcontent' && me.queryCommandState( 'source' ) ){
	//            return;
	//        }
	//        switchImgAndIframe( false );
	//    } );
	//
	//    me.commands['webapp'] = {
	//        execCommand:function ( cmd, obj ) {
	//            me.execCommand( "inserthtml", createInsertStr( obj, false,true ) );
	//        }
	//    };
	//};
	
	UE.plugin.register('webapp', function (){
	    var me = this;
	    function createInsertStr(obj,toEmbed){
	        return  !toEmbed ?
	            '<img title="'+obj.title+'" width="' + obj.width + '" height="' + obj.height + '"' +
	                ' src="' + me.options.UEDITOR_HOME_URL + 'themes/default/images/spacer.gif" _logo_url="'+obj.logo+'" style="background:url(' + obj.logo
	                +') no-repeat center center; border:1px solid gray;" class="edui-faked-webapp" _url="' + obj.url + '" ' +
	                (obj.align && !obj.cssfloat? 'align="' + obj.align + '"' : '') +
	                (obj.cssfloat ? 'style="float:' + obj.cssfloat + '"' : '') +
	                '/>'
	            :
	            '<iframe class="edui-faked-webapp" title="'+obj.title+'" ' +
	                (obj.align && !obj.cssfloat? 'align="' + obj.align + '"' : '') +
	                (obj.cssfloat ? 'style="float:' + obj.cssfloat + '"' : '') +
	                'width="' + obj.width + '" height="' + obj.height + '"  scrolling="no" frameborder="0" src="' + obj.url + '" logo_url = "'+obj.logo+'"></iframe>'
	
	    }
	    return {
	        outputRule: function(root){
	            utils.each(root.getNodesByTagName('img'),function(node){
	                var html;
	                if(node.getAttr('class') == 'edui-faked-webapp'){
	                    html =  createInsertStr({
	                        title:node.getAttr('title'),
	                        'width':node.getAttr('width'),
	                        'height':node.getAttr('height'),
	                        'align':node.getAttr('align'),
	                        'cssfloat':node.getStyle('float'),
	                        'url':node.getAttr("_url"),
	                        'logo':node.getAttr('_logo_url')
	                    },true);
	                    var embed = UE.uNode.createElement(html);
	                    node.parentNode.replaceChild(embed,node);
	                }
	            })
	        },
	        inputRule:function(root){
	            utils.each(root.getNodesByTagName('iframe'),function(node){
	                if(node.getAttr('class') == 'edui-faked-webapp'){
	                    var img = UE.uNode.createElement(createInsertStr({
	                        title:node.getAttr('title'),
	                        'width':node.getAttr('width'),
	                        'height':node.getAttr('height'),
	                        'align':node.getAttr('align'),
	                        'cssfloat':node.getStyle('float'),
	                        'url':node.getAttr("src"),
	                        'logo':node.getAttr('logo_url')
	                    }));
	                    node.parentNode.replaceChild(img,node);
	                }
	            })
	
	        },
	        commands:{
	            /**
	             * 插入百度应用
	             * @command webapp
	             * @method execCommand
	             * @remind 需要百度APPKey
	             * @remind 百度应用主页： <a href="http://app.baidu.com/" target="_blank">http://app.baidu.com/</a>
	             * @param { Object } appOptions 应用所需的参数项， 支持的key有： title=>应用标题， width=>应用容器宽度，
	             * height=>应用容器高度，logo=>应用logo，url=>应用地址
	             * @example
	             * ```javascript
	             * //editor是编辑器实例
	             * //在编辑器里插入一个“植物大战僵尸”的APP
	             * editor.execCommand( 'webapp' , {
	             *     title: '植物大战僵尸',
	             *     width: 560,
	             *     height: 465,
	             *     logo: '应用展示的图片',
	             *     url: '百度应用的地址'
	             * } );
	             * ```
	             */
	            'webapp':{
	                execCommand:function (cmd, obj) {
	
	                    var me = this,
	                        str = createInsertStr(utils.extend(obj,{
	                            align:'none'
	                        }), false);
	                    me.execCommand("inserthtml",str);
	                },
	                queryCommandState:function () {
	                    var me = this,
	                        img = me.selection.getRange().getClosedNode(),
	                        flag = img && (img.className == "edui-faked-webapp");
	                    return flag ? 1 : 0;
	                }
	            }
	        }
	    }
	});
	
	// plugins/template.js
	///import core
	///import plugins\inserthtml.js
	///import plugins\cleardoc.js
	///commands 模板
	///commandsName  template
	///commandsTitle  模板
	///commandsDialog  dialogs\template
	UE.plugins['template'] = function () {
	    UE.commands['template'] = {
	        execCommand:function (cmd, obj) {
	            obj.html && this.execCommand("inserthtml", obj.html);
	        }
	    };
	    this.addListener("click", function (type, evt) {
	        var el = evt.target || evt.srcElement,
	            range = this.selection.getRange();
	        var tnode = domUtils.findParent(el, function (node) {
	            if (node.className && domUtils.hasClass(node, "ue_t")) {
	                return node;
	            }
	        }, true);
	        tnode && range.selectNode(tnode).shrinkBoundary().select();
	    });
	    this.addListener("keydown", function (type, evt) {
	        var range = this.selection.getRange();
	        if (!range.collapsed) {
	            if (!evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey) {
	                var tnode = domUtils.findParent(range.startContainer, function (node) {
	                    if (node.className && domUtils.hasClass(node, "ue_t")) {
	                        return node;
	                    }
	                }, true);
	                if (tnode) {
	                    domUtils.removeClasses(tnode, ["ue_t"]);
	                }
	            }
	        }
	    });
	};
	
	
	// plugins/music.js
	/**
	 * 插入音乐命令
	 * @file
	 */
	UE.plugin.register('music', function (){
	    var me = this;
	    function creatInsertStr(url,width,height,align,cssfloat,toEmbed){
	        return  !toEmbed ?
	                '<img ' +
	                    (align && !cssfloat? 'align="' + align + '"' : '') +
	                    (cssfloat ? 'style="float:' + cssfloat + '"' : '') +
	                    ' width="'+ width +'" height="' + height + '" _url="'+url+'" class="edui-faked-music"' +
	                    ' src="'+me.options.langPath+me.options.lang+'/images/music.png" />'
	            :
	            '<embed type="application/x-shockwave-flash" class="edui-faked-music" pluginspage="http://www.macromedia.com/go/getflashplayer"' +
	                ' src="' + url + '" width="' + width  + '" height="' + height  + '" '+ (align && !cssfloat? 'align="' + align + '"' : '') +
	                (cssfloat ? 'style="float:' + cssfloat + '"' : '') +
	                ' wmode="transparent" play="true" loop="false" menu="false" allowscriptaccess="never" allowfullscreen="true" >';
	    }
	    return {
	        outputRule: function(root){
	            utils.each(root.getNodesByTagName('img'),function(node){
	                var html;
	                if(node.getAttr('class') == 'edui-faked-music'){
	                    var cssfloat = node.getStyle('float');
	                    var align = node.getAttr('align');
	                    html =  creatInsertStr(node.getAttr("_url"), node.getAttr('width'), node.getAttr('height'), align, cssfloat, true);
	                    var embed = UE.uNode.createElement(html);
	                    node.parentNode.replaceChild(embed,node);
	                }
	            })
	        },
	        inputRule:function(root){
	            utils.each(root.getNodesByTagName('embed'),function(node){
	                if(node.getAttr('class') == 'edui-faked-music'){
	                    var cssfloat = node.getStyle('float');
	                    var align = node.getAttr('align');
	                    html =  creatInsertStr(node.getAttr("src"), node.getAttr('width'), node.getAttr('height'), align, cssfloat,false);
	                    var img = UE.uNode.createElement(html);
	                    node.parentNode.replaceChild(img,node);
	                }
	            })
	
	        },
	        commands:{
	            /**
	             * 插入音乐
	             * @command music
	             * @method execCommand
	             * @param { Object } musicOptions 插入音乐的参数项， 支持的key有： url=>音乐地址；
	             * width=>音乐容器宽度；height=>音乐容器高度；align=>音乐文件的对齐方式， 可选值有: left, center, right, none
	             * @example
	             * ```javascript
	             * //editor是编辑器实例
	             * //在编辑器里插入一个“植物大战僵尸”的APP
	             * editor.execCommand( 'music' , {
	             *     width: 400,
	             *     height: 95,
	             *     align: "center",
	             *     url: "音乐地址"
	             * } );
	             * ```
	             */
	            'music':{
	                execCommand:function (cmd, musicObj) {
	                    var me = this,
	                        str = creatInsertStr(musicObj.url, musicObj.width || 400, musicObj.height || 95, "none", false);
	                    me.execCommand("inserthtml",str);
	                },
	                queryCommandState:function () {
	                    var me = this,
	                        img = me.selection.getRange().getClosedNode(),
	                        flag = img && (img.className == "edui-faked-music");
	                    return flag ? 1 : 0;
	                }
	            }
	        }
	    }
	});
	
	// plugins/autoupload.js
	/**
	 * @description
	 * 1.拖放文件到编辑区域，自动上传并插入到选区
	 * 2.插入粘贴板的图片，自动上传并插入到选区
	 * @author Jinqn
	 * @date 2013-10-14
	 */
	UE.plugin.register('autoupload', function (){
	
	    function sendAndInsertFile(file, editor) {
	        var me  = editor;
	        //模拟数据
	        var fieldName, urlPrefix, maxSize, allowFiles, actionUrl,
	            loadingHtml, errorHandler, successHandler,
	            filetype = /image\/\w+/i.test(file.type) ? 'image':'file',
	            loadingId = 'loading_' + (+new Date()).toString(36);
	
	        fieldName = me.getOpt(filetype + 'FieldName');
	        urlPrefix = me.getOpt(filetype + 'UrlPrefix');
	        maxSize = me.getOpt(filetype + 'MaxSize');
	        allowFiles = me.getOpt(filetype + 'AllowFiles');
	        actionUrl = me.getActionUrl(me.getOpt(filetype + 'ActionName'));
	        errorHandler = function(title) {
	            var loader = me.document.getElementById(loadingId);
	            loader && domUtils.remove(loader);
	            me.fireEvent('showmessage', {
	                'id': loadingId,
	                'content': title,
	                'type': 'error',
	                'timeout': 4000
	            });
	        };
	
	        if (filetype == 'image') {
	            loadingHtml = '<img class="loadingclass" id="' + loadingId + '" src="' +
	                me.options.themePath + me.options.theme +
	                '/images/spacer.gif" title="' + (me.getLang('autoupload.loading') || '') + '" >';
	            successHandler = function(data) {
	                var link = urlPrefix + data.url,
	                    loader = me.document.getElementById(loadingId);
	                if (loader) {
	                    loader.setAttribute('src', link);
	                    loader.setAttribute('_src', link);
	                    loader.setAttribute('title', data.title || '');
	                    loader.setAttribute('alt', data.original || '');
	                    loader.removeAttribute('id');
	                    domUtils.removeClasses(loader, 'loadingclass');
	                }
	            };
	        } else {
	            loadingHtml = '<p>' +
	                '<img class="loadingclass" id="' + loadingId + '" src="' +
	                me.options.themePath + me.options.theme +
	                '/images/spacer.gif" title="' + (me.getLang('autoupload.loading') || '') + '" >' +
	                '</p>';
	            successHandler = function(data) {
	                var link = urlPrefix + data.url,
	                    loader = me.document.getElementById(loadingId);
	
	                var rng = me.selection.getRange(),
	                    bk = rng.createBookmark();
	                rng.selectNode(loader).select();
	                me.execCommand('insertfile', {'url': link});
	                rng.moveToBookmark(bk).select();
	            };
	        }
	
	        /* 插入loading的占位符 */
	        me.execCommand('inserthtml', loadingHtml);
	
	        /* 判断后端配置是否没有加载成功 */
	        if (!me.getOpt(filetype + 'ActionName')) {
	            errorHandler(me.getLang('autoupload.errorLoadConfig'));
	            return;
	        }
	        /* 判断文件大小是否超出限制 */
	        if(file.size > maxSize) {
	            errorHandler(me.getLang('autoupload.exceedSizeError'));
	            return;
	        }
	        /* 判断文件格式是否超出允许 */
	        var fileext = file.name ? file.name.substr(file.name.lastIndexOf('.')):'';
	        if ((fileext && filetype != 'image') || (allowFiles && (allowFiles.join('') + '.').indexOf(fileext.toLowerCase() + '.') == -1)) {
	            errorHandler(me.getLang('autoupload.exceedTypeError'));
	            return;
	        }
	
	        /* 创建Ajax并提交 */
	        var xhr = new XMLHttpRequest(),
	            fd = new FormData(),
	            params = utils.serializeParam(me.queryCommandValue('serverparam')) || '',
	            url = utils.formatUrl(actionUrl + (actionUrl.indexOf('?') == -1 ? '?':'&') + params);
	
	        fd.append(fieldName, file, file.name || ('blob.' + file.type.substr('image/'.length)));
	        fd.append('type', 'ajax');
	        xhr.open("post", url, true);
	        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
	        xhr.addEventListener('load', function (e) {
	            try{
	                var json = (new Function("return " + utils.trim(e.target.response)))();
	                if (json.state == 'SUCCESS' && json.url) {
	                    successHandler(json);
	                } else {
	                    errorHandler(json.state);
	                }
	            }catch(er){
	                errorHandler(me.getLang('autoupload.loadError'));
	            }
	        });
	        xhr.send(fd);
	    }
	
	    function getPasteImage(e){
	        return e.clipboardData && e.clipboardData.items && e.clipboardData.items.length == 1 && /^image\//.test(e.clipboardData.items[0].type) ? e.clipboardData.items:null;
	    }
	    function getDropImage(e){
	        return  e.dataTransfer && e.dataTransfer.files ? e.dataTransfer.files:null;
	    }
	
	    return {
	        outputRule: function(root){
	            utils.each(root.getNodesByTagName('img'),function(n){
	                if (/\b(loaderrorclass)|(bloaderrorclass)\b/.test(n.getAttr('class'))) {
	                    n.parentNode.removeChild(n);
	                }
	            });
	            utils.each(root.getNodesByTagName('p'),function(n){
	                if (/\bloadpara\b/.test(n.getAttr('class'))) {
	                    n.parentNode.removeChild(n);
	                }
	            });
	        },
	        bindEvents:{
	            //插入粘贴板的图片，拖放插入图片
	            'ready':function(e){
	                var me = this;
	                if(window.FormData && window.FileReader) {
	                    domUtils.on(me.body, 'paste drop', function(e){
	                        var hasImg = false,
	                            items;
	                        //获取粘贴板文件列表或者拖放文件列表
	                        items = e.type == 'paste' ? getPasteImage(e):getDropImage(e);
	                        if(items){
	                            var len = items.length,
	                                file;
	                            while (len--){
	                                file = items[len];
	                                if(file.getAsFile) file = file.getAsFile();
	                                if(file && file.size > 0) {
	                                    sendAndInsertFile(file, me);
	                                    hasImg = true;
	                                }
	                            }
	                            hasImg && e.preventDefault();
	                        }
	
	                    });
	                    //取消拖放图片时出现的文字光标位置提示
	                    domUtils.on(me.body, 'dragover', function (e) {
	                        if(e.dataTransfer.types[0] == 'Files') {
	                            e.preventDefault();
	                        }
	                    });
	
	                    //设置loading的样式
	                    utils.cssRule('loading',
	                        '.loadingclass{display:inline-block;cursor:default;background: url(\''
	                            + this.options.themePath
	                            + this.options.theme +'/images/loading.gif\') no-repeat center center transparent;border:1px solid #cccccc;margin-left:1px;height: 22px;width: 22px;}\n' +
	                            '.loaderrorclass{display:inline-block;cursor:default;background: url(\''
	                            + this.options.themePath
	                            + this.options.theme +'/images/loaderror.png\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;' +
	                            '}',
	                        this.document);
	                }
	            }
	        }
	    }
	});
	
	// plugins/autosave.js
	UE.plugin.register('autosave', function (){
	
	    var me = this,
	        //无限循环保护
	        lastSaveTime = new Date(),
	        //最小保存间隔时间
	        MIN_TIME = 20,
	        //auto save key
	        saveKey = null;
	
	    function save ( editor ) {
	
	        var saveData;
	
	        if ( new Date() - lastSaveTime < MIN_TIME ) {
	            return;
	        }
	
	        if ( !editor.hasContents() ) {
	            //这里不能调用命令来删除， 会造成事件死循环
	            saveKey && me.removePreferences( saveKey );
	            return;
	        }
	
	        lastSaveTime = new Date();
	
	        editor._saveFlag = null;
	
	        saveData = me.body.innerHTML;
	
	        if ( editor.fireEvent( "beforeautosave", {
	            content: saveData
	        } ) === false ) {
	            return;
	        }
	
	        me.setPreferences( saveKey, saveData );
	
	        editor.fireEvent( "afterautosave", {
	            content: saveData
	        } );
	
	    }
	
	    return {
	        defaultOptions: {
	            //默认间隔时间
	            saveInterval: 500
	        },
	        bindEvents:{
	            'ready':function(){
	
	                var _suffix = "-drafts-data",
	                    key = null;
	
	                if ( me.key ) {
	                    key = me.key + _suffix;
	                } else {
	                    key = ( me.container.parentNode.id || 'ue-common' ) + _suffix;
	                }
	
	                //页面地址+编辑器ID 保持唯一
	                saveKey = ( location.protocol + location.host + location.pathname ).replace( /[.:\/]/g, '_' ) + key;
	
	            },
	
	            'contentchange': function () {
	
	                if ( !saveKey ) {
	                    return;
	                }
	
	                if ( me._saveFlag ) {
	                    window.clearTimeout( me._saveFlag );
	                }
	
	                if ( me.options.saveInterval > 0 ) {
	
	                    me._saveFlag = window.setTimeout( function () {
	
	                        save( me );
	
	                    }, me.options.saveInterval );
	
	                } else {
	
	                    save(me);
	
	                }
	
	
	            }
	        },
	        commands:{
	            'clearlocaldata':{
	                execCommand:function (cmd, name) {
	                    if ( saveKey && me.getPreferences( saveKey ) ) {
	                        me.removePreferences( saveKey )
	                    }
	                },
	                notNeedUndo: true,
	                ignoreContentChange:true
	            },
	
	            'getlocaldata':{
	                execCommand:function (cmd, name) {
	                    return saveKey ? me.getPreferences( saveKey ) || '' : '';
	                },
	                notNeedUndo: true,
	                ignoreContentChange:true
	            },
	
	            'drafts':{
	                execCommand:function (cmd, name) {
	                    if ( saveKey ) {
	                        me.body.innerHTML = me.getPreferences( saveKey ) || '<p>'+domUtils.fillHtml+'</p>';
	                        me.focus(true);
	                    }
	                },
	                queryCommandState: function () {
	                    return saveKey ? ( me.getPreferences( saveKey ) === null ? -1 : 0 ) : -1;
	                },
	                notNeedUndo: true,
	                ignoreContentChange:true
	            }
	        }
	    }
	
	});
	
	// plugins/charts.js
	UE.plugin.register('charts', function (){
	
	    var me = this;
	
	    return {
	        bindEvents: {
	            'chartserror': function () {
	            }
	        },
	        commands:{
	            'charts': {
	                execCommand: function ( cmd, data ) {
	
	                    var tableNode = domUtils.findParentByTagName(this.selection.getRange().startContainer, 'table', true),
	                        flagText = [],
	                        config = {};
	
	                    if ( !tableNode ) {
	                        return false;
	                    }
	
	                    if ( !validData( tableNode ) ) {
	                        me.fireEvent( "chartserror" );
	                        return false;
	                    }
	
	                    config.title = data.title || '';
	                    config.subTitle = data.subTitle || '';
	                    config.xTitle = data.xTitle || '';
	                    config.yTitle = data.yTitle || '';
	                    config.suffix = data.suffix || '';
	                    config.tip = data.tip || '';
	                    //数据对齐方式
	                    config.dataFormat = data.tableDataFormat || '';
	                    //图表类型
	                    config.chartType = data.chartType || 0;
	
	                    for ( var key in config ) {
	
	                        if ( !config.hasOwnProperty( key ) ) {
	                            continue;
	                        }
	
	                        flagText.push( key+":"+config[ key ] );
	
	                    }
	
	                    tableNode.setAttribute( "data-chart", flagText.join( ";" ) );
	                    domUtils.addClass( tableNode, "edui-charts-table" );
	
	
	
	                },
	                queryCommandState: function ( cmd, name ) {
	
	                    var tableNode = domUtils.findParentByTagName(this.selection.getRange().startContainer, 'table', true);
	                    return tableNode && validData( tableNode ) ? 0 : -1;
	
	                }
	            }
	        },
	        inputRule:function(root){
	            utils.each(root.getNodesByTagName('table'),function( tableNode ){
	
	                if ( tableNode.getAttr("data-chart") !== undefined ) {
	                    tableNode.setAttr("style");
	                }
	
	            })
	
	        },
	        outputRule:function(root){
	            utils.each(root.getNodesByTagName('table'),function( tableNode ){
	
	                if ( tableNode.getAttr("data-chart") !== undefined ) {
	                    tableNode.setAttr("style", "display: none;");
	                }
	
	            })
	
	        }
	    }
	
	    function validData ( table ) {
	
	        var firstRows = null,
	            cellCount = 0;
	
	        //行数不够
	        if ( table.rows.length < 2 ) {
	            return false;
	        }
	
	        //列数不够
	        if ( table.rows[0].cells.length < 2 ) {
	            return false;
	        }
	
	        //第一行所有cell必须是th
	        firstRows = table.rows[ 0 ].cells;
	        cellCount = firstRows.length;
	
	        for ( var i = 0, cell; cell = firstRows[ i ]; i++ ) {
	
	            if ( cell.tagName.toLowerCase() !== 'th' ) {
	                return false;
	            }
	
	        }
	
	        for ( var i = 1, row; row = table.rows[ i ]; i++ ) {
	
	            //每行单元格数不匹配， 返回false
	            if ( row.cells.length != cellCount ) {
	                return false;
	            }
	
	            //第一列不是th也返回false
	            if ( row.cells[0].tagName.toLowerCase() !== 'th' ) {
	                return false;
	            }
	
	            for ( var j = 1, cell; cell = row.cells[ j ]; j++ ) {
	
	                var value = utils.trim( ( cell.innerText || cell.textContent || '' ) );
	
	                value = value.replace( new RegExp( UE.dom.domUtils.fillChar, 'g' ), '' ).replace( /^\s+|\s+$/g, '' );
	
	                //必须是数字
	                if ( !/^\d*\.?\d+$/.test( value ) ) {
	                    return false;
	                }
	
	            }
	
	        }
	
	        return true;
	
	    }
	
	});
	
	// plugins/section.js
	/**
	 * 目录大纲支持插件
	 * @file
	 * @since 1.3.0
	 */
	UE.plugin.register('section', function (){
	    /* 目录节点对象 */
	    function Section(option){
	        this.tag = '';
	        this.level = -1,
	            this.dom = null;
	        this.nextSection = null;
	        this.previousSection = null;
	        this.parentSection = null;
	        this.startAddress = [];
	        this.endAddress = [];
	        this.children = [];
	    }
	    function getSection(option) {
	        var section = new Section();
	        return utils.extend(section, option);
	    }
	    function getNodeFromAddress(startAddress, root) {
	        var current = root;
	        for(var i = 0;i < startAddress.length; i++) {
	            if(!current.childNodes) return null;
	            current = current.childNodes[startAddress[i]];
	        }
	        return current;
	    }
	
	    var me = this;
	
	    return {
	        bindMultiEvents:{
	            type: 'aftersetcontent afterscencerestore',
	            handler: function(){
	                me.fireEvent('updateSections');
	            }
	        },
	        bindEvents:{
	            /* 初始化、拖拽、粘贴、执行setcontent之后 */
	            'ready': function (){
	                me.fireEvent('updateSections');
	                domUtils.on(me.body, 'drop paste', function(){
	                    me.fireEvent('updateSections');
	                });
	            },
	            /* 执行paragraph命令之后 */
	            'afterexeccommand': function (type, cmd) {
	                if(cmd == 'paragraph') {
	                    me.fireEvent('updateSections');
	                }
	            },
	            /* 部分键盘操作，触发updateSections事件 */
	            'keyup': function (type, e) {
	                var me = this,
	                    range = me.selection.getRange();
	                if(range.collapsed != true) {
	                    me.fireEvent('updateSections');
	                } else {
	                    var keyCode = e.keyCode || e.which;
	                    if(keyCode == 13 || keyCode == 8 || keyCode == 46) {
	                        me.fireEvent('updateSections');
	                    }
	                }
	            }
	        },
	        commands:{
	            'getsections': {
	                execCommand: function (cmd, levels) {
	                    var levelFn = levels || ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
	
	                    for (var i = 0; i < levelFn.length; i++) {
	                        if (typeof levelFn[i] == 'string') {
	                            levelFn[i] = function(fn){
	                                return function(node){
	                                    return node.tagName == fn.toUpperCase()
	                                };
	                            }(levelFn[i]);
	                        } else if (typeof levelFn[i] != 'function') {
	                            levelFn[i] = function (node) {
	                                return null;
	                            }
	                        }
	                    }
	                    function getSectionLevel(node) {
	                        for (var i = 0; i < levelFn.length; i++) {
	                            if (levelFn[i](node)) return i;
	                        }
	                        return -1;
	                    }
	
	                    var me = this,
	                        Directory = getSection({'level':-1, 'title':'root'}),
	                        previous = Directory;
	
	                    function traversal(node, Directory) {
	                        var level,
	                            tmpSection = null,
	                            parent,
	                            child,
	                            children = node.childNodes;
	                        for (var i = 0, len = children.length; i < len; i++) {
	                            child = children[i];
	                            level = getSectionLevel(child);
	                            if (level >= 0) {
	                                var address = me.selection.getRange().selectNode(child).createAddress(true).startAddress,
	                                    current = getSection({
	                                        'tag': child.tagName,
	                                        'title': child.innerText || child.textContent || '',
	                                        'level': level,
	                                        'dom': child,
	                                        'startAddress': utils.clone(address, []),
	                                        'endAddress': utils.clone(address, []),
	                                        'children': []
	                                    });
	                                previous.nextSection = current;
	                                current.previousSection = previous;
	                                parent = previous;
	                                while(level <= parent.level){
	                                    parent = parent.parentSection;
	                                }
	                                current.parentSection = parent;
	                                parent.children.push(current);
	                                tmpSection = previous = current;
	                            } else {
	                                child.nodeType === 1 && traversal(child, Directory);
	                                tmpSection && tmpSection.endAddress[tmpSection.endAddress.length - 1] ++;
	                            }
	                        }
	                    }
	                    traversal(me.body, Directory);
	                    return Directory;
	                },
	                notNeedUndo: true
	            },
	            'movesection': {
	                execCommand: function (cmd, sourceSection, targetSection, isAfter) {
	
	                    var me = this,
	                        targetAddress,
	                        target;
	
	                    if(!sourceSection || !targetSection || targetSection.level == -1) return;
	
	                    targetAddress = isAfter ? targetSection.endAddress:targetSection.startAddress;
	                    target = getNodeFromAddress(targetAddress, me.body);
	
	                    /* 判断目标地址是否被源章节包含 */
	                    if(!targetAddress || !target || isContainsAddress(sourceSection.startAddress, sourceSection.endAddress, targetAddress)) return;
	
	                    var startNode = getNodeFromAddress(sourceSection.startAddress, me.body),
	                        endNode = getNodeFromAddress(sourceSection.endAddress, me.body),
	                        current,
	                        nextNode;
	
	                    if(isAfter) {
	                        current = endNode;
	                        while ( current && !(domUtils.getPosition( startNode, current ) & domUtils.POSITION_FOLLOWING) ) {
	                            nextNode = current.previousSibling;
	                            domUtils.insertAfter(target, current);
	                            if(current == startNode) break;
	                            current = nextNode;
	                        }
	                    } else {
	                        current = startNode;
	                        while ( current && !(domUtils.getPosition( current, endNode ) & domUtils.POSITION_FOLLOWING) ) {
	                            nextNode = current.nextSibling;
	                            target.parentNode.insertBefore(current, target);
	                            if(current == endNode) break;
	                            current = nextNode;
	                        }
	                    }
	
	                    me.fireEvent('updateSections');
	
	                    /* 获取地址的包含关系 */
	                    function isContainsAddress(startAddress, endAddress, addressTarget){
	                        var isAfterStartAddress = false,
	                            isBeforeEndAddress = false;
	                        for(var i = 0; i< startAddress.length; i++){
	                            if(i >= addressTarget.length) break;
	                            if(addressTarget[i] > startAddress[i]) {
	                                isAfterStartAddress = true;
	                                break;
	                            } else if(addressTarget[i] < startAddress[i]) {
	                                break;
	                            }
	                        }
	                        for(var i = 0; i< endAddress.length; i++){
	                            if(i >= addressTarget.length) break;
	                            if(addressTarget[i] < startAddress[i]) {
	                                isBeforeEndAddress = true;
	                                break;
	                            } else if(addressTarget[i] > startAddress[i]) {
	                                break;
	                            }
	                        }
	                        return isAfterStartAddress && isBeforeEndAddress;
	                    }
	                }
	            },
	            'deletesection': {
	                execCommand: function (cmd, section, keepChildren) {
	                    var me = this;
	
	                    if(!section) return;
	
	                    function getNodeFromAddress(startAddress) {
	                        var current = me.body;
	                        for(var i = 0;i < startAddress.length; i++) {
	                            if(!current.childNodes) return null;
	                            current = current.childNodes[startAddress[i]];
	                        }
	                        return current;
	                    }
	
	                    var startNode = getNodeFromAddress(section.startAddress),
	                        endNode = getNodeFromAddress(section.endAddress),
	                        current = startNode,
	                        nextNode;
	
	                    if(!keepChildren) {
	                        while ( current && domUtils.inDoc(endNode, me.document) && !(domUtils.getPosition( current, endNode ) & domUtils.POSITION_FOLLOWING) ) {
	                            nextNode = current.nextSibling;
	                            domUtils.remove(current);
	                            current = nextNode;
	                        }
	                    } else {
	                        domUtils.remove(current);
	                    }
	
	                    me.fireEvent('updateSections');
	                }
	            },
	            'selectsection': {
	                execCommand: function (cmd, section) {
	                    if(!section && !section.dom) return false;
	                    var me = this,
	                        range = me.selection.getRange(),
	                        address = {
	                            'startAddress':utils.clone(section.startAddress, []),
	                            'endAddress':utils.clone(section.endAddress, [])
	                        };
	                    address.endAddress[address.endAddress.length - 1]++;
	                    range.moveToAddress(address).select().scrollToView();
	                    return true;
	                },
	                notNeedUndo: true
	            },
	            'scrolltosection': {
	                execCommand: function (cmd, section) {
	                    if(!section && !section.dom) return false;
	                    var me = this,
	                        range = me.selection.getRange(),
	                        address = {
	                            'startAddress':section.startAddress,
	                            'endAddress':section.endAddress
	                        };
	                    address.endAddress[address.endAddress.length - 1]++;
	                    range.moveToAddress(address).scrollToView();
	                    return true;
	                },
	                notNeedUndo: true
	            }
	        }
	    }
	});
	
	// plugins/simpleupload.js
	/**
	 * @description
	 * 简单上传:点击按钮,直接选择文件上传
	 * @author Jinqn
	 * @date 2014-03-31
	 */
	UE.plugin.register('simpleupload', function (){
	    var me = this,
	        isLoaded = false,
	        containerBtn;
	
	    function initUploadBtn(){
	        var w = containerBtn.offsetWidth || 20,
	            h = containerBtn.offsetHeight || 20,
	            btnIframe = document.createElement('iframe'),
	            btnStyle = 'display:block;width:' + w + 'px;height:' + h + 'px;overflow:hidden;border:0;margin:0;padding:0;position:absolute;top:0;left:0;filter:alpha(opacity=0);-moz-opacity:0;-khtml-opacity: 0;opacity: 0;cursor:pointer;';
	
	        domUtils.on(btnIframe, 'load', function(){
	
	            var timestrap = (+new Date()).toString(36),
	                wrapper,
	                btnIframeDoc,
	                btnIframeBody;
	
	            btnIframeDoc = (btnIframe.contentDocument || btnIframe.contentWindow.document);
	            btnIframeBody = btnIframeDoc.body;
	            wrapper = btnIframeDoc.createElement('div');
	
	            wrapper.innerHTML = '<form id="edui_form_' + timestrap + '" target="edui_iframe_' + timestrap + '" method="POST" enctype="multipart/form-data" action="' + me.getOpt('serverUrl') + '" ' +
	            'style="' + btnStyle + '">' +
	            '<input id="edui_input_' + timestrap + '" type="file" accept="image/*" name="' + me.options.imageFieldName + '" ' +
	            'style="' + btnStyle + '">' +
	            '</form>' +
	            '<iframe id="edui_iframe_' + timestrap + '" name="edui_iframe_' + timestrap + '" style="display:none;width:0;height:0;border:0;margin:0;padding:0;position:absolute;"></iframe>';
	
	            wrapper.className = 'edui-' + me.options.theme;
	            wrapper.id = me.ui.id + '_iframeupload';
	            btnIframeBody.style.cssText = btnStyle;
	            btnIframeBody.style.width = w + 'px';
	            btnIframeBody.style.height = h + 'px';
	            btnIframeBody.appendChild(wrapper);
	
	            if (btnIframeBody.parentNode) {
	                btnIframeBody.parentNode.style.width = w + 'px';
	                btnIframeBody.parentNode.style.height = w + 'px';
	            }
	
	            var form = btnIframeDoc.getElementById('edui_form_' + timestrap);
	            var input = btnIframeDoc.getElementById('edui_input_' + timestrap);
	            var iframe = btnIframeDoc.getElementById('edui_iframe_' + timestrap);
	
	            domUtils.on(input, 'change', function(){
	                if(!input.value) return;
	                var loadingId = 'loading_' + (+new Date()).toString(36);
	                var params = utils.serializeParam(me.queryCommandValue('serverparam')) || '';
	
	                var imageActionUrl = me.getActionUrl(me.getOpt('imageActionName'));
	                var allowFiles = me.getOpt('imageAllowFiles');
	
	                me.focus();
	                me.execCommand('inserthtml', '<img class="loadingclass" id="' + loadingId + '" src="' + me.options.themePath + me.options.theme +'/images/spacer.gif" title="' + (me.getLang('simpleupload.loading') || '') + '" >');
	
	                function callback(){
	                    try{
	                        var link, json, loader,
	                            body = (iframe.contentDocument || iframe.contentWindow.document).body,
	                            result = body.innerText || body.textContent || '';
	                        json = (new Function("return " + result))();
	                        link = me.options.imageUrlPrefix + json.url;
	                        if(json.state == 'SUCCESS' && json.url) {
	                            loader = me.document.getElementById(loadingId);
	                            loader.setAttribute('src', link);
	                            loader.setAttribute('_src', link);
	                            loader.setAttribute('title', json.title || '');
	                            loader.setAttribute('alt', json.original || '');
	                            loader.removeAttribute('id');
	                            domUtils.removeClasses(loader, 'loadingclass');
	                        } else {
	                            showErrorLoader && showErrorLoader(json.state);
	                        }
	                    }catch(er){
	                        showErrorLoader && showErrorLoader(me.getLang('simpleupload.loadError'));
	                    }
	                    form.reset();
	                    domUtils.un(iframe, 'load', callback);
	                }
	                function showErrorLoader(title){
	                    if(loadingId) {
	                        var loader = me.document.getElementById(loadingId);
	                        loader && domUtils.remove(loader);
	                        me.fireEvent('showmessage', {
	                            'id': loadingId,
	                            'content': title,
	                            'type': 'error',
	                            'timeout': 4000
	                        });
	                    }
	                }
	
	                /* 判断后端配置是否没有加载成功 */
	                if (!me.getOpt('imageActionName')) {
	                    errorHandler(me.getLang('autoupload.errorLoadConfig'));
	                    return;
	                }
	                // 判断文件格式是否错误
	                var filename = input.value,
	                    fileext = filename ? filename.substr(filename.lastIndexOf('.')):'';
	                if (!fileext || (allowFiles && (allowFiles.join('') + '.').indexOf(fileext.toLowerCase() + '.') == -1)) {
	                    showErrorLoader(me.getLang('simpleupload.exceedTypeError'));
	                    return;
	                }
	
	                domUtils.on(iframe, 'load', callback);
	                form.action = utils.formatUrl(imageActionUrl + (imageActionUrl.indexOf('?') == -1 ? '?':'&') + params);
	                form.submit();
	            });
	
	            var stateTimer;
	            me.addListener('selectionchange', function () {
	                clearTimeout(stateTimer);
	                stateTimer = setTimeout(function() {
	                    var state = me.queryCommandState('simpleupload');
	                    if (state == -1) {
	                        input.disabled = 'disabled';
	                    } else {
	                        input.disabled = false;
	                    }
	                }, 400);
	            });
	            isLoaded = true;
	        });
	
	        btnIframe.style.cssText = btnStyle;
	        containerBtn.appendChild(btnIframe);
	    }
	
	    return {
	        bindEvents:{
	            'ready': function() {
	                //设置loading的样式
	                utils.cssRule('loading',
	                    '.loadingclass{display:inline-block;cursor:default;background: url(\''
	                    + this.options.themePath
	                    + this.options.theme +'/images/loading.gif\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;}\n' +
	                    '.loaderrorclass{display:inline-block;cursor:default;background: url(\''
	                    + this.options.themePath
	                    + this.options.theme +'/images/loaderror.png\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;' +
	                    '}',
	                    this.document);
	            },
	            /* 初始化简单上传按钮 */
	            'simpleuploadbtnready': function(type, container) {
	                containerBtn = container;
	                me.afterConfigReady(initUploadBtn);
	            }
	        },
	        outputRule: function(root){
	            utils.each(root.getNodesByTagName('img'),function(n){
	                if (/\b(loaderrorclass)|(bloaderrorclass)\b/.test(n.getAttr('class'))) {
	                    n.parentNode.removeChild(n);
	                }
	            });
	        },
	        commands: {
	            'simpleupload': {
	                queryCommandState: function () {
	                    return isLoaded ? 0:-1;
	                }
	            }
	        }
	    }
	});
	
	// plugins/serverparam.js
	/**
	 * 服务器提交的额外参数列表设置插件
	 * @file
	 * @since 1.2.6.1
	 */
	UE.plugin.register('serverparam', function (){
	
	    var me = this,
	        serverParam = {};
	
	    return {
	        commands:{
	            /**
	             * 修改服务器提交的额外参数列表,清除所有项
	             * @command serverparam
	             * @method execCommand
	             * @param { String } cmd 命令字符串
	             * @example
	             * ```javascript
	             * editor.execCommand('serverparam');
	             * editor.queryCommandValue('serverparam'); //返回空
	             * ```
	             */
	            /**
	             * 修改服务器提交的额外参数列表,删除指定项
	             * @command serverparam
	             * @method execCommand
	             * @param { String } cmd 命令字符串
	             * @param { String } key 要清除的属性
	             * @example
	             * ```javascript
	             * editor.execCommand('serverparam', 'name'); //删除属性name
	             * ```
	             */
	            /**
	             * 修改服务器提交的额外参数列表,使用键值添加项
	             * @command serverparam
	             * @method execCommand
	             * @param { String } cmd 命令字符串
	             * @param { String } key 要添加的属性
	             * @param { String } value 要添加属性的值
	             * @example
	             * ```javascript
	             * editor.execCommand('serverparam', 'name', 'hello');
	             * editor.queryCommandValue('serverparam'); //返回对象 {'name': 'hello'}
	             * ```
	             */
	            /**
	             * 修改服务器提交的额外参数列表,传入键值对对象添加多项
	             * @command serverparam
	             * @method execCommand
	             * @param { String } cmd 命令字符串
	             * @param { Object } key 传入的键值对对象
	             * @example
	             * ```javascript
	             * editor.execCommand('serverparam', {'name': 'hello'});
	             * editor.queryCommandValue('serverparam'); //返回对象 {'name': 'hello'}
	             * ```
	             */
	            /**
	             * 修改服务器提交的额外参数列表,使用自定义函数添加多项
	             * @command serverparam
	             * @method execCommand
	             * @param { String } cmd 命令字符串
	             * @param { Function } key 自定义获取参数的函数
	             * @example
	             * ```javascript
	             * editor.execCommand('serverparam', function(editor){
	             *     return {'key': 'value'};
	             * });
	             * editor.queryCommandValue('serverparam'); //返回对象 {'key': 'value'}
	             * ```
	             */
	
	            /**
	             * 获取服务器提交的额外参数列表
	             * @command serverparam
	             * @method queryCommandValue
	             * @param { String } cmd 命令字符串
	             * @example
	             * ```javascript
	             * editor.queryCommandValue( 'serverparam' ); //返回对象 {'key': 'value'}
	             * ```
	             */
	            'serverparam':{
	                execCommand:function (cmd, key, value) {
	                    if (key === undefined || key === null) { //不传参数,清空列表
	                        serverParam = {};
	                    } else if (utils.isString(key)) { //传入键值
	                        if(value === undefined || value === null) {
	                            delete serverParam[key];
	                        } else {
	                            serverParam[key] = value;
	                        }
	                    } else if (utils.isObject(key)) { //传入对象,覆盖列表项
	                        utils.extend(serverParam, key, true);
	                    } else if (utils.isFunction(key)){ //传入函数,添加列表项
	                        utils.extend(serverParam, key(), true);
	                    }
	                },
	                queryCommandValue: function(){
	                    return serverParam || {};
	                }
	            }
	        }
	    }
	});
	
	
	// plugins/insertfile.js
	/**
	 * 插入附件
	 */
	UE.plugin.register('insertfile', function (){
	
	    var me = this;
	
	    function getFileIcon(url){
	        var ext = url.substr(url.lastIndexOf('.') + 1).toLowerCase(),
	            maps = {
	                "rar":"icon_rar.gif",
	                "zip":"icon_rar.gif",
	                "tar":"icon_rar.gif",
	                "gz":"icon_rar.gif",
	                "bz2":"icon_rar.gif",
	                "doc":"icon_doc.gif",
	                "docx":"icon_doc.gif",
	                "pdf":"icon_pdf.gif",
	                "mp3":"icon_mp3.gif",
	                "xls":"icon_xls.gif",
	                "chm":"icon_chm.gif",
	                "ppt":"icon_ppt.gif",
	                "pptx":"icon_ppt.gif",
	                "avi":"icon_mv.gif",
	                "rmvb":"icon_mv.gif",
	                "wmv":"icon_mv.gif",
	                "flv":"icon_mv.gif",
	                "swf":"icon_mv.gif",
	                "rm":"icon_mv.gif",
	                "exe":"icon_exe.gif",
	                "psd":"icon_psd.gif",
	                "txt":"icon_txt.gif",
	                "jpg":"icon_jpg.gif",
	                "png":"icon_jpg.gif",
	                "jpeg":"icon_jpg.gif",
	                "gif":"icon_jpg.gif",
	                "ico":"icon_jpg.gif",
	                "bmp":"icon_jpg.gif"
	            };
	        return maps[ext] ? maps[ext]:maps['txt'];
	    }
	
	    return {
	        commands:{
	            'insertfile': {
	                execCommand: function (command, filelist){
	                    filelist = utils.isArray(filelist) ? filelist : [filelist];
	
	                    var i, item, icon, title,
	                        html = '',
	                        URL = me.getOpt('UEDITOR_HOME_URL'),
	                        iconDir = URL + (URL.substr(URL.length - 1) == '/' ? '':'/') + 'dialogs/attachment/fileTypeImages/';
	                    for (i = 0; i < filelist.length; i++) {
	                        item = filelist[i];
	                        icon = iconDir + getFileIcon(item.url);
	                        title = item.title || item.url.substr(item.url.lastIndexOf('/') + 1);
	                        html += '<p style="line-height: 16px;">' +
	                            '<img style="vertical-align: middle; margin-right: 2px;" src="'+ icon + '" _src="' + icon + '" />' +
	                            '<a style="font-size:12px; color:#0066cc;" href="' + item.url +'" title="' + title + '">' + title + '</a>' +
	                            '</p>';
	                    }
	                    me.execCommand('insertHtml', html);
	                }
	            }
	        }
	    }
	});
	
	
	
	
	// plugins/xssFilter.js
	/**
	 * @file xssFilter.js
	 * @desc xss过滤器
	 * @author robbenmu
	 */
	
	UE.plugins.xssFilter = function() {
	
		var config = UEDITOR_CONFIG;
		var whitList = config.whitList;
	
		function filter(node) {
	
			var tagName = node.tagName;
			var attrs = node.attrs;
	
			if (!whitList.hasOwnProperty(tagName)) {
				node.parentNode.removeChild(node);
				return false;
			}
	
			UE.utils.each(attrs, function (val, key) {
	
				if (whitList[tagName].indexOf(key) === -1) {
					node.setAttr(key);
				}
			});
		}
	
		// 添加inserthtml\paste等操作用的过滤规则
		if (whitList && config.xssFilterRules) {
			this.options.filterRules = function () {
	
				var result = {};
	
				UE.utils.each(whitList, function(val, key) {
					result[key] = function (node) {
						return filter(node);
					};
				});
	
				return result;
			}();
		}
	
		var tagList = [];
	
		UE.utils.each(whitList, function (val, key) {
			tagList.push(key);
		});
	
		// 添加input过滤规则
		//
		if (whitList && config.inputXssFilter) {
			this.addInputRule(function (root) {
	
				root.traversal(function(node) {
					if (node.type !== 'element') {
						return false;
					}
					filter(node);
				});
			});
		}
		// 添加output过滤规则
		//
		if (whitList && config.outputXssFilter) {
			this.addOutputRule(function (root) {
	
				root.traversal(function(node) {
					if (node.type !== 'element') {
						return false;
					}
					filter(node);
				});
			});
		}
	
	};
	
	
	// ui/ui.js
	var baidu = baidu || {};
	baidu.editor = baidu.editor || {};
	UE.ui = baidu.editor.ui = {};
	
	// ui/uiutils.js
	(function (){
	    var browser = baidu.editor.browser,
	        domUtils = baidu.editor.dom.domUtils;
	
	    var magic = '$EDITORUI';
	    var root = window[magic] = {};
	    var uidMagic = 'ID' + magic;
	    var uidCount = 0;
	
	    var uiUtils = baidu.editor.ui.uiUtils = {
	        uid: function (obj){
	            return (obj ? obj[uidMagic] || (obj[uidMagic] = ++ uidCount) : ++ uidCount);
	        },
	        hook: function ( fn, callback ) {
	            var dg;
	            if (fn && fn._callbacks) {
	                dg = fn;
	            } else {
	                dg = function (){
	                    var q;
	                    if (fn) {
	                        q = fn.apply(this, arguments);
	                    }
	                    var callbacks = dg._callbacks;
	                    var k = callbacks.length;
	                    while (k --) {
	                        var r = callbacks[k].apply(this, arguments);
	                        if (q === undefined) {
	                            q = r;
	                        }
	                    }
	                    return q;
	                };
	                dg._callbacks = [];
	            }
	            dg._callbacks.push(callback);
	            return dg;
	        },
	        createElementByHtml: function (html){
	            var el = document.createElement('div');
	            el.innerHTML = html;
	            el = el.firstChild;
	            el.parentNode.removeChild(el);
	            return el;
	        },
	        getViewportElement: function (){
	            return (browser.ie && browser.quirks) ?
	                document.body : document.documentElement;
	        },
	        getClientRect: function (element){
	            var bcr;
	            //trace  IE6下在控制编辑器显隐时可能会报错，catch一下
	            try{
	                bcr = element.getBoundingClientRect();
	            }catch(e){
	                bcr={left:0,top:0,height:0,width:0}
	            }
	            var rect = {
	                left: Math.round(bcr.left),
	                top: Math.round(bcr.top),
	                height: Math.round(bcr.bottom - bcr.top),
	                width: Math.round(bcr.right - bcr.left)
	            };
	            var doc;
	            while ((doc = element.ownerDocument) !== document &&
	                (element = domUtils.getWindow(doc).frameElement)) {
	                bcr = element.getBoundingClientRect();
	                rect.left += bcr.left;
	                rect.top += bcr.top;
	            }
	            rect.bottom = rect.top + rect.height;
	            rect.right = rect.left + rect.width;
	            return rect;
	        },
	        getViewportRect: function (){
	            var viewportEl = uiUtils.getViewportElement();
	            var width = (window.innerWidth || viewportEl.clientWidth) | 0;
	            var height = (window.innerHeight ||viewportEl.clientHeight) | 0;
	            return {
	                left: 0,
	                top: 0,
	                height: height,
	                width: width,
	                bottom: height,
	                right: width
	            };
	        },
	        setViewportOffset: function (element, offset){
	            var rect;
	            var fixedLayer = uiUtils.getFixedLayer();
	            if (element.parentNode === fixedLayer) {
	                element.style.left = offset.left + 'px';
	                element.style.top = offset.top + 'px';
	            } else {
	                domUtils.setViewportOffset(element, offset);
	            }
	        },
	        getEventOffset: function (evt){
	            var el = evt.target || evt.srcElement;
	            var rect = uiUtils.getClientRect(el);
	            var offset = uiUtils.getViewportOffsetByEvent(evt);
	            return {
	                left: offset.left - rect.left,
	                top: offset.top - rect.top
	            };
	        },
	        getViewportOffsetByEvent: function (evt){
	            var el = evt.target || evt.srcElement;
	            var frameEl = domUtils.getWindow(el).frameElement;
	            var offset = {
	                left: evt.clientX,
	                top: evt.clientY
	            };
	            if (frameEl && el.ownerDocument !== document) {
	                var rect = uiUtils.getClientRect(frameEl);
	                offset.left += rect.left;
	                offset.top += rect.top;
	            }
	            return offset;
	        },
	        setGlobal: function (id, obj){
	            root[id] = obj;
	            return magic + '["' + id  + '"]';
	        },
	        unsetGlobal: function (id){
	            delete root[id];
	        },
	        copyAttributes: function (tgt, src){
	            var attributes = src.attributes;
	            var k = attributes.length;
	            while (k --) {
	                var attrNode = attributes[k];
	                if ( attrNode.nodeName != 'style' && attrNode.nodeName != 'class' && (!browser.ie || attrNode.specified) ) {
	                    tgt.setAttribute(attrNode.nodeName, attrNode.nodeValue);
	                }
	            }
	            if (src.className) {
	                domUtils.addClass(tgt,src.className);
	            }
	            if (src.style.cssText) {
	                tgt.style.cssText += ';' + src.style.cssText;
	            }
	        },
	        removeStyle: function (el, styleName){
	            if (el.style.removeProperty) {
	                el.style.removeProperty(styleName);
	            } else if (el.style.removeAttribute) {
	                el.style.removeAttribute(styleName);
	            } else throw '';
	        },
	        contains: function (elA, elB){
	            return elA && elB && (elA === elB ? false : (
	                elA.contains ? elA.contains(elB) :
	                    elA.compareDocumentPosition(elB) & 16
	                ));
	        },
	        startDrag: function (evt, callbacks,doc){
	            var doc = doc || document;
	            var startX = evt.clientX;
	            var startY = evt.clientY;
	            function handleMouseMove(evt){
	                var x = evt.clientX - startX;
	                var y = evt.clientY - startY;
	                callbacks.ondragmove(x, y,evt);
	                if (evt.stopPropagation) {
	                    evt.stopPropagation();
	                } else {
	                    evt.cancelBubble = true;
	                }
	            }
	            if (doc.addEventListener) {
	                function handleMouseUp(evt){
	                    doc.removeEventListener('mousemove', handleMouseMove, true);
	                    doc.removeEventListener('mouseup', handleMouseUp, true);
	                    window.removeEventListener('mouseup', handleMouseUp, true);
	                    callbacks.ondragstop();
	                }
	                doc.addEventListener('mousemove', handleMouseMove, true);
	                doc.addEventListener('mouseup', handleMouseUp, true);
	                window.addEventListener('mouseup', handleMouseUp, true);
	
	                evt.preventDefault();
	            } else {
	                var elm = evt.srcElement;
	                elm.setCapture();
	                function releaseCaptrue(){
	                    elm.releaseCapture();
	                    elm.detachEvent('onmousemove', handleMouseMove);
	                    elm.detachEvent('onmouseup', releaseCaptrue);
	                    elm.detachEvent('onlosecaptrue', releaseCaptrue);
	                    callbacks.ondragstop();
	                }
	                elm.attachEvent('onmousemove', handleMouseMove);
	                elm.attachEvent('onmouseup', releaseCaptrue);
	                elm.attachEvent('onlosecaptrue', releaseCaptrue);
	                evt.returnValue = false;
	            }
	            callbacks.ondragstart();
	        },
	        getFixedLayer: function (){
	            var layer = document.getElementById('edui_fixedlayer');
	            if (layer == null) {
	                layer = document.createElement('div');
	                layer.id = 'edui_fixedlayer';
	                document.body.appendChild(layer);
	                if (browser.ie && browser.version <= 8) {
	                    layer.style.position = 'absolute';
	                    bindFixedLayer();
	                    setTimeout(updateFixedOffset);
	                } else {
	                    layer.style.position = 'fixed';
	                }
	                layer.style.left = '0';
	                layer.style.top = '0';
	                layer.style.width = '0';
	                layer.style.height = '0';
	            }
	            return layer;
	        },
	        makeUnselectable: function (element){
	            if (browser.opera || (browser.ie && browser.version < 9)) {
	                element.unselectable = 'on';
	                if (element.hasChildNodes()) {
	                    for (var i=0; i<element.childNodes.length; i++) {
	                        if (element.childNodes[i].nodeType == 1) {
	                            uiUtils.makeUnselectable(element.childNodes[i]);
	                        }
	                    }
	                }
	            } else {
	                if (element.style.MozUserSelect !== undefined) {
	                    element.style.MozUserSelect = 'none';
	                } else if (element.style.WebkitUserSelect !== undefined) {
	                    element.style.WebkitUserSelect = 'none';
	                } else if (element.style.KhtmlUserSelect !== undefined) {
	                    element.style.KhtmlUserSelect = 'none';
	                }
	            }
	        }
	    };
	    function updateFixedOffset(){
	        var layer = document.getElementById('edui_fixedlayer');
	        uiUtils.setViewportOffset(layer, {
	            left: 0,
	            top: 0
	        });
	//        layer.style.display = 'none';
	//        layer.style.display = 'block';
	
	        //#trace: 1354
	//        setTimeout(updateFixedOffset);
	    }
	    function bindFixedLayer(adjOffset){
	        domUtils.on(window, 'scroll', updateFixedOffset);
	        domUtils.on(window, 'resize', baidu.editor.utils.defer(updateFixedOffset, 0, true));
	    }
	})();
	
	
	// ui/uibase.js
	(function () {
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        EventBase = baidu.editor.EventBase,
	        UIBase = baidu.editor.ui.UIBase = function () {
	        };
	
	    UIBase.prototype = {
	        className:'',
	        uiName:'',
	        initOptions:function (options) {
	            var me = this;
	            for (var k in options) {
	                me[k] = options[k];
	            }
	            this.id = this.id || 'edui' + uiUtils.uid();
	        },
	        initUIBase:function () {
	            this._globalKey = utils.unhtml(uiUtils.setGlobal(this.id, this));
	        },
	        render:function (holder) {
	            var html = this.renderHtml();
	            var el = uiUtils.createElementByHtml(html);
	
	            //by xuheng 给每个node添加class
	            var list = domUtils.getElementsByTagName(el, "*");
	            var theme = "edui-" + (this.theme || this.editor.options.theme);
	            var layer = document.getElementById('edui_fixedlayer');
	            for (var i = 0, node; node = list[i++];) {
	                domUtils.addClass(node, theme);
	            }
	            domUtils.addClass(el, theme);
	            if(layer){
	                layer.className="";
	                domUtils.addClass(layer,theme);
	            }
	
	            var seatEl = this.getDom();
	            if (seatEl != null) {
	                seatEl.parentNode.replaceChild(el, seatEl);
	                uiUtils.copyAttributes(el, seatEl);
	            } else {
	                if (typeof holder == 'string') {
	                    holder = document.getElementById(holder);
	                }
	                holder = holder || uiUtils.getFixedLayer();
	                domUtils.addClass(holder, theme);
	                holder.appendChild(el);
	            }
	            this.postRender();
	        },
	        getDom:function (name) {
	            if (!name) {
	                return document.getElementById(this.id);
	            } else {
	                return document.getElementById(this.id + '_' + name);
	            }
	        },
	        postRender:function () {
	            this.fireEvent('postrender');
	        },
	        getHtmlTpl:function () {
	            return '';
	        },
	        formatHtml:function (tpl) {
	            var prefix = 'edui-' + this.uiName;
	            return (tpl
	                .replace(/##/g, this.id)
	                .replace(/%%-/g, this.uiName ? prefix + '-' : '')
	                .replace(/%%/g, (this.uiName ? prefix : '') + ' ' + this.className)
	                .replace(/\$\$/g, this._globalKey));
	        },
	        renderHtml:function () {
	            return this.formatHtml(this.getHtmlTpl());
	        },
	        dispose:function () {
	            var box = this.getDom();
	            if (box) baidu.editor.dom.domUtils.remove(box);
	            uiUtils.unsetGlobal(this.id);
	        }
	    };
	    utils.inherits(UIBase, EventBase);
	})();
	
	
	// ui/separator.js
	(function (){
	    var utils = baidu.editor.utils,
	        UIBase = baidu.editor.ui.UIBase,
	        Separator = baidu.editor.ui.Separator = function (options){
	            this.initOptions(options);
	            this.initSeparator();
	        };
	    Separator.prototype = {
	        uiName: 'separator',
	        initSeparator: function (){
	            this.initUIBase();
	        },
	        getHtmlTpl: function (){
	            return '<div id="##" class="edui-box %%"></div>';
	        }
	    };
	    utils.inherits(Separator, UIBase);
	
	})();
	
	
	// ui/mask.js
	///import core
	///import uicore
	(function (){
	    var utils = baidu.editor.utils,
	        domUtils = baidu.editor.dom.domUtils,
	        UIBase = baidu.editor.ui.UIBase,
	        uiUtils = baidu.editor.ui.uiUtils;
	    
	    var Mask = baidu.editor.ui.Mask = function (options){
	        this.initOptions(options);
	        this.initUIBase();
	    };
	    Mask.prototype = {
	        getHtmlTpl: function (){
	            return '<div id="##" class="edui-mask %%" onclick="return $$._onClick(event, this);" onmousedown="return $$._onMouseDown(event, this);"></div>';
	        },
	        postRender: function (){
	            var me = this;
	            domUtils.on(window, 'resize', function (){
	                setTimeout(function (){
	                    if (!me.isHidden()) {
	                        me._fill();
	                    }
	                });
	            });
	        },
	        show: function (zIndex){
	            this._fill();
	            this.getDom().style.display = '';
	            this.getDom().style.zIndex = zIndex;
	        },
	        hide: function (){
	            this.getDom().style.display = 'none';
	            this.getDom().style.zIndex = '';
	        },
	        isHidden: function (){
	            return this.getDom().style.display == 'none';
	        },
	        _onMouseDown: function (){
	            return false;
	        },
	        _onClick: function (e, target){
	            this.fireEvent('click', e, target);
	        },
	        _fill: function (){
	            var el = this.getDom();
	            var vpRect = uiUtils.getViewportRect();
	            el.style.width = vpRect.width + 'px';
	            el.style.height = vpRect.height + 'px';
	        }
	    };
	    utils.inherits(Mask, UIBase);
	})();
	
	
	// ui/popup.js
	///import core
	///import uicore
	(function () {
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        domUtils = baidu.editor.dom.domUtils,
	        UIBase = baidu.editor.ui.UIBase,
	        Popup = baidu.editor.ui.Popup = function (options){
	            this.initOptions(options);
	            this.initPopup();
	        };
	
	    var allPopups = [];
	    function closeAllPopup( evt,el ){
	        for ( var i = 0; i < allPopups.length; i++ ) {
	            var pop = allPopups[i];
	            if (!pop.isHidden()) {
	                if (pop.queryAutoHide(el) !== false) {
	                    if(evt&&/scroll/ig.test(evt.type)&&pop.className=="edui-wordpastepop")   return;
	                    pop.hide();
	                }
	            }
	        }
	
	        if(allPopups.length)
	            pop.editor.fireEvent("afterhidepop");
	    }
	
	    Popup.postHide = closeAllPopup;
	
	    var ANCHOR_CLASSES = ['edui-anchor-topleft','edui-anchor-topright',
	        'edui-anchor-bottomleft','edui-anchor-bottomright'];
	    Popup.prototype = {
	        SHADOW_RADIUS: 5,
	        content: null,
	        _hidden: false,
	        autoRender: true,
	        canSideLeft: true,
	        canSideUp: true,
	        initPopup: function (){
	            this.initUIBase();
	            allPopups.push( this );
	        },
	        getHtmlTpl: function (){
	            return '<div id="##" class="edui-popup %%" onmousedown="return false;">' +
	                ' <div id="##_body" class="edui-popup-body">' +
	                ' <iframe style="position:absolute;z-index:-1;left:0;top:0;background-color: transparent;" frameborder="0" width="100%" height="100%" src="about:blank"></iframe>' +
	                ' <div class="edui-shadow"></div>' +
	                ' <div id="##_content" class="edui-popup-content">' +
	                this.getContentHtmlTpl() +
	                '  </div>' +
	                ' </div>' +
	                '</div>';
	        },
	        getContentHtmlTpl: function (){
	            if(this.content){
	                if (typeof this.content == 'string') {
	                    return this.content;
	                }
	                return this.content.renderHtml();
	            }else{
	                return ''
	            }
	
	        },
	        _UIBase_postRender: UIBase.prototype.postRender,
	        postRender: function (){
	
	
	            if (this.content instanceof UIBase) {
	                this.content.postRender();
	            }
	
	            //捕获鼠标滚轮
	            if( this.captureWheel && !this.captured ) {
	
	                this.captured = true;
	
	                var winHeight = ( document.documentElement.clientHeight || document.body.clientHeight )  - 80,
	                    _height = this.getDom().offsetHeight,
	                    _top = uiUtils.getClientRect( this.combox.getDom() ).top,
	                    content = this.getDom('content'),
	                    ifr = this.getDom('body').getElementsByTagName('iframe'),
	                    me = this;
	
	                ifr.length && ( ifr = ifr[0] );
	
	                while( _top + _height > winHeight ) {
	                    _height -= 30;
	                }
	                content.style.height = _height + 'px';
	                //同步更改iframe高度
	                ifr && ( ifr.style.height = _height + 'px' );
	
	                //阻止在combox上的鼠标滚轮事件, 防止用户的正常操作被误解
	                if( window.XMLHttpRequest ) {
	
	                    domUtils.on( content, ( 'onmousewheel' in document.body ) ? 'mousewheel' :'DOMMouseScroll' , function(e){
	
	                        if(e.preventDefault) {
	                            e.preventDefault();
	                        } else {
	                            e.returnValue = false;
	                        }
	
	                        if( e.wheelDelta ) {
	
	                            content.scrollTop -= ( e.wheelDelta / 120 )*60;
	
	                        } else {
	
	                            content.scrollTop -= ( e.detail / -3 )*60;
	
	                        }
	
	                    });
	
	                } else {
	
	                    //ie6
	                    domUtils.on( this.getDom(), 'mousewheel' , function(e){
	
	                        e.returnValue = false;
	
	                        me.getDom('content').scrollTop -= ( e.wheelDelta / 120 )*60;
	
	                    });
	
	                }
	
	            }
	            this.fireEvent('postRenderAfter');
	            this.hide(true);
	            this._UIBase_postRender();
	        },
	        _doAutoRender: function (){
	            if (!this.getDom() && this.autoRender) {
	                this.render();
	            }
	        },
	        mesureSize: function (){
	            var box = this.getDom('content');
	            return uiUtils.getClientRect(box);
	        },
	        fitSize: function (){
	            if( this.captureWheel && this.sized ) {
	                return this.__size;
	            }
	            this.sized = true;
	            var popBodyEl = this.getDom('body');
	            popBodyEl.style.width = '';
	            popBodyEl.style.height = '';
	            var size = this.mesureSize();
	            if( this.captureWheel ) {
	                popBodyEl.style.width =  -(-20 -size.width) + 'px';
	                var height = parseInt( this.getDom('content').style.height, 10 );
	                !window.isNaN( height ) && ( size.height = height );
	            } else {
	                popBodyEl.style.width =  size.width + 'px';
	            }
	            popBodyEl.style.height = size.height + 'px';
	            this.__size = size;
	            this.captureWheel && (this.getDom('content').style.overflow = 'auto');
	            return size;
	        },
	        showAnchor: function ( element, hoz ){
	            this.showAnchorRect( uiUtils.getClientRect( element ), hoz );
	        },
	        showAnchorRect: function ( rect, hoz, adj ){
	            this._doAutoRender();
	            var vpRect = uiUtils.getViewportRect();
	            this.getDom().style.visibility = 'hidden';
	            this._show();
	            var popSize = this.fitSize();
	
	            var sideLeft, sideUp, left, top;
	            if (hoz) {
	                sideLeft = this.canSideLeft && (rect.right + popSize.width > vpRect.right && rect.left > popSize.width);
	                sideUp = this.canSideUp && (rect.top + popSize.height > vpRect.bottom && rect.bottom > popSize.height);
	                left = (sideLeft ? rect.left - popSize.width : rect.right);
	                top = (sideUp ? rect.bottom - popSize.height : rect.top);
	            } else {
	                sideLeft = this.canSideLeft && (rect.right + popSize.width > vpRect.right && rect.left > popSize.width);
	                sideUp = this.canSideUp && (rect.top + popSize.height > vpRect.bottom && rect.bottom > popSize.height);
	                left = (sideLeft ? rect.right - popSize.width : rect.left);
	                top = (sideUp ? rect.top - popSize.height : rect.bottom);
	            }
	
	            var popEl = this.getDom();
	            uiUtils.setViewportOffset(popEl, {
	                left: left,
	                top: top
	            });
	            domUtils.removeClasses(popEl, ANCHOR_CLASSES);
	            popEl.className += ' ' + ANCHOR_CLASSES[(sideUp ? 1 : 0) * 2 + (sideLeft ? 1 : 0)];
	            if(this.editor){
	                popEl.style.zIndex = this.editor.container.style.zIndex * 1 + 10;
	                baidu.editor.ui.uiUtils.getFixedLayer().style.zIndex = popEl.style.zIndex - 1;
	            }
	            this.getDom().style.visibility = 'visible';
	
	        },
	        showAt: function (offset) {
	            var left = offset.left;
	            var top = offset.top;
	            var rect = {
	                left: left,
	                top: top,
	                right: left,
	                bottom: top,
	                height: 0,
	                width: 0
	            };
	            this.showAnchorRect(rect, false, true);
	        },
	        _show: function (){
	            if (this._hidden) {
	                var box = this.getDom();
	                box.style.display = '';
	                this._hidden = false;
	//                if (box.setActive) {
	//                    box.setActive();
	//                }
	                this.fireEvent('show');
	            }
	        },
	        isHidden: function (){
	            return this._hidden;
	        },
	        show: function (){
	            this._doAutoRender();
	            this._show();
	        },
	        hide: function (notNofity){
	            if (!this._hidden && this.getDom()) {
	                this.getDom().style.display = 'none';
	                this._hidden = true;
	                if (!notNofity) {
	                    this.fireEvent('hide');
	                }
	            }
	        },
	        queryAutoHide: function (el){
	            return !el || !uiUtils.contains(this.getDom(), el);
	        }
	    };
	    utils.inherits(Popup, UIBase);
	    
	    domUtils.on( document, 'mousedown', function ( evt ) {
	        var el = evt.target || evt.srcElement;
	        closeAllPopup( evt,el );
	    } );
	    domUtils.on( window, 'scroll', function (evt,el) {
	        closeAllPopup( evt,el );
	    } );
	
	})();
	
	
	// ui/colorpicker.js
	///import core
	///import uicore
	(function (){
	    var utils = baidu.editor.utils,
	        UIBase = baidu.editor.ui.UIBase,
	        ColorPicker = baidu.editor.ui.ColorPicker = function (options){
	            this.initOptions(options);
	            this.noColorText = this.noColorText || this.editor.getLang("clearColor");
	            this.initUIBase();
	        };
	
	    ColorPicker.prototype = {
	        getHtmlTpl: function (){
	            return genColorPicker(this.noColorText,this.editor);
	        },
	        _onTableClick: function (evt){
	            var tgt = evt.target || evt.srcElement;
	            var color = tgt.getAttribute('data-color');
	            if (color) {
	                this.fireEvent('pickcolor', color);
	            }
	        },
	        _onTableOver: function (evt){
	            var tgt = evt.target || evt.srcElement;
	            var color = tgt.getAttribute('data-color');
	            if (color) {
	                this.getDom('preview').style.backgroundColor = color;
	            }
	        },
	        _onTableOut: function (){
	            this.getDom('preview').style.backgroundColor = '';
	        },
	        _onPickNoColor: function (){
	            this.fireEvent('picknocolor');
	        }
	    };
	    utils.inherits(ColorPicker, UIBase);
	
	    var COLORS = (
	        'ffffff,000000,eeece1,1f497d,4f81bd,c0504d,9bbb59,8064a2,4bacc6,f79646,' +
	            'f2f2f2,7f7f7f,ddd9c3,c6d9f0,dbe5f1,f2dcdb,ebf1dd,e5e0ec,dbeef3,fdeada,' +
	            'd8d8d8,595959,c4bd97,8db3e2,b8cce4,e5b9b7,d7e3bc,ccc1d9,b7dde8,fbd5b5,' +
	            'bfbfbf,3f3f3f,938953,548dd4,95b3d7,d99694,c3d69b,b2a2c7,92cddc,fac08f,' +
	            'a5a5a5,262626,494429,17365d,366092,953734,76923c,5f497a,31859b,e36c09,' +
	            '7f7f7f,0c0c0c,1d1b10,0f243e,244061,632423,4f6128,3f3151,205867,974806,' +
	            'c00000,ff0000,ffc000,ffff00,92d050,00b050,00b0f0,0070c0,002060,7030a0,').split(',');
	
	    function genColorPicker(noColorText,editor){
	        var html = '<div id="##" class="edui-colorpicker %%">' +
	            '<div class="edui-colorpicker-topbar edui-clearfix">' +
	            '<div unselectable="on" id="##_preview" class="edui-colorpicker-preview"></div>' +
	            '<div unselectable="on" class="edui-colorpicker-nocolor" onclick="$$._onPickNoColor(event, this);">'+ noColorText +'</div>' +
	            '</div>' +
	            '<table  class="edui-box" style="border-collapse: collapse;" onmouseover="$$._onTableOver(event, this);" onmouseout="$$._onTableOut(event, this);" onclick="return $$._onTableClick(event, this);" cellspacing="0" cellpadding="0">' +
	            '<tr style="border-bottom: 1px solid #ddd;font-size: 13px;line-height: 25px;color:#39C;padding-top: 2px"><td colspan="10">'+editor.getLang("themeColor")+'</td> </tr>'+
	            '<tr class="edui-colorpicker-tablefirstrow" >';
	        for (var i=0; i<COLORS.length; i++) {
	            if (i && i%10 === 0) {
	                html += '</tr>'+(i==60?'<tr style="border-bottom: 1px solid #ddd;font-size: 13px;line-height: 25px;color:#39C;"><td colspan="10">'+editor.getLang("standardColor")+'</td></tr>':'')+'<tr'+(i==60?' class="edui-colorpicker-tablefirstrow"':'')+'>';
	            }
	            html += i<70 ? '<td style="padding: 0 2px;"><a hidefocus title="'+COLORS[i]+'" onclick="return false;" href="javascript:" unselectable="on" class="edui-box edui-colorpicker-colorcell"' +
	                ' data-color="#'+ COLORS[i] +'"'+
	                ' style="background-color:#'+ COLORS[i] +';border:solid #ccc;'+
	                (i<10 || i>=60?'border-width:1px;':
	                    i>=10&&i<20?'border-width:1px 1px 0 1px;':
	
	                        'border-width:0 1px 0 1px;')+
	                '"' +
	                '></a></td>':'';
	        }
	        html += '</tr></table></div>';
	        return html;
	    }
	})();
	
	
	// ui/tablepicker.js
	///import core
	///import uicore
	(function (){
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        UIBase = baidu.editor.ui.UIBase;
	    
	    var TablePicker = baidu.editor.ui.TablePicker = function (options){
	        this.initOptions(options);
	        this.initTablePicker();
	    };
	    TablePicker.prototype = {
	        defaultNumRows: 10,
	        defaultNumCols: 10,
	        maxNumRows: 20,
	        maxNumCols: 20,
	        numRows: 10,
	        numCols: 10,
	        lengthOfCellSide: 22,
	        initTablePicker: function (){
	            this.initUIBase();
	        },
	        getHtmlTpl: function (){
	            var me = this;
	            return '<div id="##" class="edui-tablepicker %%">' +
	                 '<div class="edui-tablepicker-body">' +
	                  '<div class="edui-infoarea">' +
	                   '<span id="##_label" class="edui-label"></span>' +
	                  '</div>' +
	                  '<div class="edui-pickarea"' +
	                   ' onmousemove="$$._onMouseMove(event, this);"' +
	                   ' onmouseover="$$._onMouseOver(event, this);"' +
	                   ' onmouseout="$$._onMouseOut(event, this);"' +
	                   ' onclick="$$._onClick(event, this);"' +
	                  '>' +
	                    '<div id="##_overlay" class="edui-overlay"></div>' +
	                  '</div>' +
	                 '</div>' +
	                '</div>';
	        },
	        _UIBase_render: UIBase.prototype.render,
	        render: function (holder){
	            this._UIBase_render(holder);
	            this.getDom('label').innerHTML = '0'+this.editor.getLang("t_row")+' x 0'+this.editor.getLang("t_col");
	        },
	        _track: function (numCols, numRows){
	            var style = this.getDom('overlay').style;
	            var sideLen = this.lengthOfCellSide;
	            style.width = numCols * sideLen + 'px';
	            style.height = numRows * sideLen + 'px';
	            var label = this.getDom('label');
	            label.innerHTML = numCols +this.editor.getLang("t_col")+' x ' + numRows + this.editor.getLang("t_row");
	            this.numCols = numCols;
	            this.numRows = numRows;
	        },
	        _onMouseOver: function (evt, el){
	            var rel = evt.relatedTarget || evt.fromElement;
	            if (!uiUtils.contains(el, rel) && el !== rel) {
	                this.getDom('label').innerHTML = '0'+this.editor.getLang("t_col")+' x 0'+this.editor.getLang("t_row");
	                this.getDom('overlay').style.visibility = '';
	            }
	        },
	        _onMouseOut: function (evt, el){
	            var rel = evt.relatedTarget || evt.toElement;
	            if (!uiUtils.contains(el, rel) && el !== rel) {
	                this.getDom('label').innerHTML = '0'+this.editor.getLang("t_col")+' x 0'+this.editor.getLang("t_row");
	                this.getDom('overlay').style.visibility = 'hidden';
	            }
	        },
	        _onMouseMove: function (evt, el){
	            var style = this.getDom('overlay').style;
	            var offset = uiUtils.getEventOffset(evt);
	            var sideLen = this.lengthOfCellSide;
	            var numCols = Math.ceil(offset.left / sideLen);
	            var numRows = Math.ceil(offset.top / sideLen);
	            this._track(numCols, numRows);
	        },
	        _onClick: function (){
	            this.fireEvent('picktable', this.numCols, this.numRows);
	        }
	    };
	    utils.inherits(TablePicker, UIBase);
	})();
	
	
	// ui/stateful.js
	(function (){
	    var browser = baidu.editor.browser,
	        domUtils = baidu.editor.dom.domUtils,
	        uiUtils = baidu.editor.ui.uiUtils;
	    
	    var TPL_STATEFUL = 'onmousedown="$$.Stateful_onMouseDown(event, this);"' +
	        ' onmouseup="$$.Stateful_onMouseUp(event, this);"' +
	        ( browser.ie ? (
	        ' onmouseenter="$$.Stateful_onMouseEnter(event, this);"' +
	        ' onmouseleave="$$.Stateful_onMouseLeave(event, this);"' )
	        : (
	        ' onmouseover="$$.Stateful_onMouseOver(event, this);"' +
	        ' onmouseout="$$.Stateful_onMouseOut(event, this);"' ));
	    
	    baidu.editor.ui.Stateful = {
	        alwalysHoverable: false,
	        target:null,//目标元素和this指向dom不一样
	        Stateful_init: function (){
	            this._Stateful_dGetHtmlTpl = this.getHtmlTpl;
	            this.getHtmlTpl = this.Stateful_getHtmlTpl;
	        },
	        Stateful_getHtmlTpl: function (){
	            var tpl = this._Stateful_dGetHtmlTpl();
	            // 使用function避免$转义
	            return tpl.replace(/stateful/g, function (){ return TPL_STATEFUL; });
	        },
	        Stateful_onMouseEnter: function (evt, el){
	            this.target=el;
	            if (!this.isDisabled() || this.alwalysHoverable) {
	                this.addState('hover');
	                this.fireEvent('over');
	            }
	        },
	        Stateful_onMouseLeave: function (evt, el){
	            if (!this.isDisabled() || this.alwalysHoverable) {
	                this.removeState('hover');
	                this.removeState('active');
	                this.fireEvent('out');
	            }
	        },
	        Stateful_onMouseOver: function (evt, el){
	            var rel = evt.relatedTarget;
	            if (!uiUtils.contains(el, rel) && el !== rel) {
	                this.Stateful_onMouseEnter(evt, el);
	            }
	        },
	        Stateful_onMouseOut: function (evt, el){
	            var rel = evt.relatedTarget;
	            if (!uiUtils.contains(el, rel) && el !== rel) {
	                this.Stateful_onMouseLeave(evt, el);
	            }
	        },
	        Stateful_onMouseDown: function (evt, el){
	            if (!this.isDisabled()) {
	                this.addState('active');
	            }
	        },
	        Stateful_onMouseUp: function (evt, el){
	            if (!this.isDisabled()) {
	                this.removeState('active');
	            }
	        },
	        Stateful_postRender: function (){
	            if (this.disabled && !this.hasState('disabled')) {
	                this.addState('disabled');
	            }
	        },
	        hasState: function (state){
	            return domUtils.hasClass(this.getStateDom(), 'edui-state-' + state);
	        },
	        addState: function (state){
	            if (!this.hasState(state)) {
	                this.getStateDom().className += ' edui-state-' + state;
	            }
	        },
	        removeState: function (state){
	            if (this.hasState(state)) {
	                domUtils.removeClasses(this.getStateDom(), ['edui-state-' + state]);
	            }
	        },
	        getStateDom: function (){
	            return this.getDom('state');
	        },
	        isChecked: function (){
	            return this.hasState('checked');
	        },
	        setChecked: function (checked){
	            if (!this.isDisabled() && checked) {
	                this.addState('checked');
	            } else {
	                this.removeState('checked');
	            }
	        },
	        isDisabled: function (){
	            return this.hasState('disabled');
	        },
	        setDisabled: function (disabled){
	            if (disabled) {
	                this.removeState('hover');
	                this.removeState('checked');
	                this.removeState('active');
	                this.addState('disabled');
	            } else {
	                this.removeState('disabled');
	            }
	        }
	    };
	})();
	
	
	// ui/button.js
	///import core
	///import uicore
	///import ui/stateful.js
	(function (){
	    var utils = baidu.editor.utils,
	        UIBase = baidu.editor.ui.UIBase,
	        Stateful = baidu.editor.ui.Stateful,
	        Button = baidu.editor.ui.Button = function (options){
	            if(options.name){
	                var btnName = options.name;
	                var cssRules = options.cssRules;
	                if(!options.className){
	                    options.className =  'edui-for-' + btnName;
	                }
	                options.cssRules = '.edui-default  .edui-for-'+ btnName +' .edui-icon {'+ cssRules +'}'
	            }
	            this.initOptions(options);
	            this.initButton();
	        };
	    Button.prototype = {
	        uiName: 'button',
	        label: '',
	        title: '',
	        showIcon: true,
	        showText: true,
	        cssRules:'',
	        initButton: function (){
	            this.initUIBase();
	            this.Stateful_init();
	            if(this.cssRules){
	                utils.cssRule('edui-customize-'+this.name+'-style',this.cssRules);
	            }
	        },
	        getHtmlTpl: function (){
	            return '<div id="##" class="edui-box %%">' +
	                '<div id="##_state" stateful>' +
	                 '<div class="%%-wrap"><div id="##_body" unselectable="on" ' + (this.title ? 'title="' + this.title + '"' : '') +
	                 ' class="%%-body" onmousedown="return $$._onMouseDown(event, this);" onclick="return $$._onClick(event, this);">' +
	                  (this.showIcon ? '<div class="edui-box edui-icon"></div>' : '') +
	                  (this.showText ? '<div class="edui-box edui-label">' + this.label + '</div>' : '') +
	                 '</div>' +
	                '</div>' +
	                '</div></div>';
	        },
	        postRender: function (){
	            this.Stateful_postRender();
	            this.setDisabled(this.disabled)
	        },
	        _onMouseDown: function (e){
	            var target = e.target || e.srcElement,
	                tagName = target && target.tagName && target.tagName.toLowerCase();
	            if (tagName == 'input' || tagName == 'object' || tagName == 'object') {
	                return false;
	            }
	        },
	        _onClick: function (){
	            if (!this.isDisabled()) {
	                this.fireEvent('click');
	            }
	        },
	        setTitle: function(text){
	            var label = this.getDom('label');
	            label.innerHTML = text;
	        }
	    };
	    utils.inherits(Button, UIBase);
	    utils.extend(Button.prototype, Stateful);
	
	})();
	
	
	// ui/splitbutton.js
	///import core
	///import uicore
	///import ui/stateful.js
	(function (){
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        domUtils = baidu.editor.dom.domUtils,
	        UIBase = baidu.editor.ui.UIBase,
	        Stateful = baidu.editor.ui.Stateful,
	        SplitButton = baidu.editor.ui.SplitButton = function (options){
	            this.initOptions(options);
	            this.initSplitButton();
	        };
	    SplitButton.prototype = {
	        popup: null,
	        uiName: 'splitbutton',
	        title: '',
	        initSplitButton: function (){
	            this.initUIBase();
	            this.Stateful_init();
	            var me = this;
	            if (this.popup != null) {
	                var popup = this.popup;
	                this.popup = null;
	                this.setPopup(popup);
	            }
	        },
	        _UIBase_postRender: UIBase.prototype.postRender,
	        postRender: function (){
	            this.Stateful_postRender();
	            this._UIBase_postRender();
	        },
	        setPopup: function (popup){
	            if (this.popup === popup) return;
	            if (this.popup != null) {
	                this.popup.dispose();
	            }
	            popup.addListener('show', utils.bind(this._onPopupShow, this));
	            popup.addListener('hide', utils.bind(this._onPopupHide, this));
	            popup.addListener('postrender', utils.bind(function (){
	                popup.getDom('body').appendChild(
	                    uiUtils.createElementByHtml('<div id="' +
	                        this.popup.id + '_bordereraser" class="edui-bordereraser edui-background" style="width:' +
	                        (uiUtils.getClientRect(this.getDom()).width + 20) + 'px"></div>')
	                    );
	                popup.getDom().className += ' ' + this.className;
	            }, this));
	            this.popup = popup;
	        },
	        _onPopupShow: function (){
	            this.addState('opened');
	        },
	        _onPopupHide: function (){
	            this.removeState('opened');
	        },
	        getHtmlTpl: function (){
	            return '<div id="##" class="edui-box %%">' +
	                '<div '+ (this.title ? 'title="' + this.title + '"' : '') +' id="##_state" stateful><div class="%%-body">' +
	                '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onButtonClick(event, this);">' +
	                '<div class="edui-box edui-icon"></div>' +
	                '</div>' +
	                '<div class="edui-box edui-splitborder"></div>' +
	                '<div class="edui-box edui-arrow" onclick="$$._onArrowClick();"></div>' +
	                '</div></div></div>';
	        },
	        showPopup: function (){
	            // 当popup往上弹出的时候，做特殊处理
	            var rect = uiUtils.getClientRect(this.getDom());
	            rect.top -= this.popup.SHADOW_RADIUS;
	            rect.height += this.popup.SHADOW_RADIUS;
	            this.popup.showAnchorRect(rect);
	        },
	        _onArrowClick: function (event, el){
	            if (!this.isDisabled()) {
	                this.showPopup();
	            }
	        },
	        _onButtonClick: function (){
	            if (!this.isDisabled()) {
	                this.fireEvent('buttonclick');
	            }
	        }
	    };
	    utils.inherits(SplitButton, UIBase);
	    utils.extend(SplitButton.prototype, Stateful, true);
	
	})();
	
	
	// ui/colorbutton.js
	///import core
	///import uicore
	///import ui/colorpicker.js
	///import ui/popup.js
	///import ui/splitbutton.js
	(function (){
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        ColorPicker = baidu.editor.ui.ColorPicker,
	        Popup = baidu.editor.ui.Popup,
	        SplitButton = baidu.editor.ui.SplitButton,
	        ColorButton = baidu.editor.ui.ColorButton = function (options){
	            this.initOptions(options);
	            this.initColorButton();
	        };
	    ColorButton.prototype = {
	        initColorButton: function (){
	            var me = this;
	            this.popup = new Popup({
	                content: new ColorPicker({
	                    noColorText: me.editor.getLang("clearColor"),
	                    editor:me.editor,
	                    onpickcolor: function (t, color){
	                        me._onPickColor(color);
	                    },
	                    onpicknocolor: function (t, color){
	                        me._onPickNoColor(color);
	                    }
	                }),
	                editor:me.editor
	            });
	            this.initSplitButton();
	        },
	        _SplitButton_postRender: SplitButton.prototype.postRender,
	        postRender: function (){
	            this._SplitButton_postRender();
	            this.getDom('button_body').appendChild(
	                uiUtils.createElementByHtml('<div id="' + this.id + '_colorlump" class="edui-colorlump"></div>')
	            );
	            this.getDom().className += ' edui-colorbutton';
	        },
	        setColor: function (color){
	            this.getDom('colorlump').style.backgroundColor = color;
	            this.color = color;
	        },
	        _onPickColor: function (color){
	            if (this.fireEvent('pickcolor', color) !== false) {
	                this.setColor(color);
	                this.popup.hide();
	            }
	        },
	        _onPickNoColor: function (color){
	            if (this.fireEvent('picknocolor') !== false) {
	                this.popup.hide();
	            }
	        }
	    };
	    utils.inherits(ColorButton, SplitButton);
	
	})();
	
	
	// ui/tablebutton.js
	///import core
	///import uicore
	///import ui/popup.js
	///import ui/tablepicker.js
	///import ui/splitbutton.js
	(function (){
	    var utils = baidu.editor.utils,
	        Popup = baidu.editor.ui.Popup,
	        TablePicker = baidu.editor.ui.TablePicker,
	        SplitButton = baidu.editor.ui.SplitButton,
	        TableButton = baidu.editor.ui.TableButton = function (options){
	            this.initOptions(options);
	            this.initTableButton();
	        };
	    TableButton.prototype = {
	        initTableButton: function (){
	            var me = this;
	            this.popup = new Popup({
	                content: new TablePicker({
	                    editor:me.editor,
	                    onpicktable: function (t, numCols, numRows){
	                        me._onPickTable(numCols, numRows);
	                    }
	                }),
	                'editor':me.editor
	            });
	            this.initSplitButton();
	        },
	        _onPickTable: function (numCols, numRows){
	            if (this.fireEvent('picktable', numCols, numRows) !== false) {
	                this.popup.hide();
	            }
	        }
	    };
	    utils.inherits(TableButton, SplitButton);
	
	})();
	
	
	// ui/autotypesetpicker.js
	///import core
	///import uicore
	(function () {
	    var utils = baidu.editor.utils,
	        UIBase = baidu.editor.ui.UIBase;
	
	    var AutoTypeSetPicker = baidu.editor.ui.AutoTypeSetPicker = function (options) {
	        this.initOptions(options);
	        this.initAutoTypeSetPicker();
	    };
	    AutoTypeSetPicker.prototype = {
	        initAutoTypeSetPicker:function () {
	            this.initUIBase();
	        },
	        getHtmlTpl:function () {
	            var me = this.editor,
	                opt = me.options.autotypeset,
	                lang = me.getLang("autoTypeSet");
	
	            var textAlignInputName = 'textAlignValue' + me.uid,
	                imageBlockInputName = 'imageBlockLineValue' + me.uid,
	                symbolConverInputName = 'symbolConverValue' + me.uid;
	
	            return '<div id="##" class="edui-autotypesetpicker %%">' +
	                '<div class="edui-autotypesetpicker-body">' +
	                '<table >' +
	                '<tr><td nowrap><input type="checkbox" name="mergeEmptyline" ' + (opt["mergeEmptyline"] ? "checked" : "" ) + '>' + lang.mergeLine + '</td><td colspan="2"><input type="checkbox" name="removeEmptyline" ' + (opt["removeEmptyline"] ? "checked" : "" ) + '>' + lang.delLine + '</td></tr>' +
	                '<tr><td nowrap><input type="checkbox" name="removeClass" ' + (opt["removeClass"] ? "checked" : "" ) + '>' + lang.removeFormat + '</td><td colspan="2"><input type="checkbox" name="indent" ' + (opt["indent"] ? "checked" : "" ) + '>' + lang.indent + '</td></tr>' +
	                '<tr>' +
	                '<td nowrap><input type="checkbox" name="textAlign" ' + (opt["textAlign"] ? "checked" : "" ) + '>' + lang.alignment + '</td>' +
	                '<td colspan="2" id="' + textAlignInputName + '">' +
	                '<input type="radio" name="'+ textAlignInputName +'" value="left" ' + ((opt["textAlign"] && opt["textAlign"] == "left") ? "checked" : "") + '>' + me.getLang("justifyleft") +
	                '<input type="radio" name="'+ textAlignInputName +'" value="center" ' + ((opt["textAlign"] && opt["textAlign"] == "center") ? "checked" : "") + '>' + me.getLang("justifycenter") +
	                '<input type="radio" name="'+ textAlignInputName +'" value="right" ' + ((opt["textAlign"] && opt["textAlign"] == "right") ? "checked" : "") + '>' + me.getLang("justifyright") +
	                '</td>' +
	                '</tr>' +
	                '<tr>' +
	                '<td nowrap><input type="checkbox" name="imageBlockLine" ' + (opt["imageBlockLine"] ? "checked" : "" ) + '>' + lang.imageFloat + '</td>' +
	                '<td nowrap id="'+ imageBlockInputName +'">' +
	                '<input type="radio" name="'+ imageBlockInputName +'" value="none" ' + ((opt["imageBlockLine"] && opt["imageBlockLine"] == "none") ? "checked" : "") + '>' + me.getLang("default") +
	                '<input type="radio" name="'+ imageBlockInputName +'" value="left" ' + ((opt["imageBlockLine"] && opt["imageBlockLine"] == "left") ? "checked" : "") + '>' + me.getLang("justifyleft") +
	                '<input type="radio" name="'+ imageBlockInputName +'" value="center" ' + ((opt["imageBlockLine"] && opt["imageBlockLine"] == "center") ? "checked" : "") + '>' + me.getLang("justifycenter") +
	                '<input type="radio" name="'+ imageBlockInputName +'" value="right" ' + ((opt["imageBlockLine"] && opt["imageBlockLine"] == "right") ? "checked" : "") + '>' + me.getLang("justifyright") +
	                '</td>' +
	                '</tr>' +
	                '<tr><td nowrap><input type="checkbox" name="clearFontSize" ' + (opt["clearFontSize"] ? "checked" : "" ) + '>' + lang.removeFontsize + '</td><td colspan="2"><input type="checkbox" name="clearFontFamily" ' + (opt["clearFontFamily"] ? "checked" : "" ) + '>' + lang.removeFontFamily + '</td></tr>' +
	                '<tr><td nowrap colspan="3"><input type="checkbox" name="removeEmptyNode" ' + (opt["removeEmptyNode"] ? "checked" : "" ) + '>' + lang.removeHtml + '</td></tr>' +
	                '<tr><td nowrap colspan="3"><input type="checkbox" name="pasteFilter" ' + (opt["pasteFilter"] ? "checked" : "" ) + '>' + lang.pasteFilter + '</td></tr>' +
	                '<tr>' +
	                '<td nowrap><input type="checkbox" name="symbolConver" ' + (opt["bdc2sb"] || opt["tobdc"] ? "checked" : "" ) + '>' + lang.symbol + '</td>' +
	                '<td id="' + symbolConverInputName + '">' +
	                '<input type="radio" name="bdc" value="bdc2sb" ' + (opt["bdc2sb"] ? "checked" : "" ) + '>' + lang.bdc2sb +
	                '<input type="radio" name="bdc" value="tobdc" ' + (opt["tobdc"] ? "checked" : "" ) + '>' + lang.tobdc + '' +
	                '</td>' +
	                '<td nowrap align="right"><button >' + lang.run + '</button></td>' +
	                '</tr>' +
	                '</table>' +
	                '</div>' +
	                '</div>';
	
	
	        },
	        _UIBase_render:UIBase.prototype.render
	    };
	    utils.inherits(AutoTypeSetPicker, UIBase);
	})();
	
	
	// ui/autotypesetbutton.js
	///import core
	///import uicore
	///import ui/popup.js
	///import ui/autotypesetpicker.js
	///import ui/splitbutton.js
	(function (){
	    var utils = baidu.editor.utils,
	        Popup = baidu.editor.ui.Popup,
	        AutoTypeSetPicker = baidu.editor.ui.AutoTypeSetPicker,
	        SplitButton = baidu.editor.ui.SplitButton,
	        AutoTypeSetButton = baidu.editor.ui.AutoTypeSetButton = function (options){
	            this.initOptions(options);
	            this.initAutoTypeSetButton();
	        };
	    function getPara(me){
	
	        var opt = {},
	            cont = me.getDom(),
	            editorId = me.editor.uid,
	            inputType = null,
	            attrName = null,
	            ipts = domUtils.getElementsByTagName(cont,"input");
	        for(var i=ipts.length-1,ipt;ipt=ipts[i--];){
	            inputType = ipt.getAttribute("type");
	            if(inputType=="checkbox"){
	                attrName = ipt.getAttribute("name");
	                opt[attrName] && delete opt[attrName];
	                if(ipt.checked){
	                    var attrValue = document.getElementById( attrName + "Value" + editorId );
	                    if(attrValue){
	                        if(/input/ig.test(attrValue.tagName)){
	                            opt[attrName] = attrValue.value;
	                        } else {
	                            var iptChilds = attrValue.getElementsByTagName("input");
	                            for(var j=iptChilds.length-1,iptchild;iptchild=iptChilds[j--];){
	                                if(iptchild.checked){
	                                    opt[attrName] = iptchild.value;
	                                    break;
	                                }
	                            }
	                        }
	                    } else {
	                        opt[attrName] = true;
	                    }
	                } else {
	                    opt[attrName] = false;
	                }
	            } else {
	                opt[ipt.getAttribute("value")] = ipt.checked;
	            }
	
	        }
	
	        var selects = domUtils.getElementsByTagName(cont,"select");
	        for(var i=0,si;si=selects[i++];){
	            var attr = si.getAttribute('name');
	            opt[attr] = opt[attr] ? si.value : '';
	        }
	
	        utils.extend(me.editor.options.autotypeset,opt);
	
	        me.editor.setPreferences('autotypeset', opt);
	    }
	
	    AutoTypeSetButton.prototype = {
	        initAutoTypeSetButton: function (){
	
	            var me = this;
	            this.popup = new Popup({
	                //传入配置参数
	                content: new AutoTypeSetPicker({editor:me.editor}),
	                'editor':me.editor,
	                hide : function(){
	                    if (!this._hidden && this.getDom()) {
	                        getPara(this);
	                        this.getDom().style.display = 'none';
	                        this._hidden = true;
	                        this.fireEvent('hide');
	                    }
	                }
	            });
	            var flag = 0;
	            this.popup.addListener('postRenderAfter',function(){
	                var popupUI = this;
	                if(flag)return;
	                var cont = this.getDom(),
	                    btn = cont.getElementsByTagName('button')[0];
	
	                btn.onclick = function(){
	                    getPara(popupUI);
	                    me.editor.execCommand('autotypeset');
	                    popupUI.hide()
	                };
	
	                domUtils.on(cont, 'click', function(e) {
	                    var target = e.target || e.srcElement,
	                        editorId = me.editor.uid;
	                    if (target && target.tagName == 'INPUT') {
	
	                        // 点击图片浮动的checkbox,去除对应的radio
	                        if (target.name == 'imageBlockLine' || target.name == 'textAlign' || target.name == 'symbolConver') {
	                            var checked = target.checked,
	                                radioTd = document.getElementById( target.name + 'Value' + editorId),
	                                radios = radioTd.getElementsByTagName('input'),
	                                defalutSelect = {
	                                    'imageBlockLine': 'none',
	                                    'textAlign': 'left',
	                                    'symbolConver': 'tobdc'
	                                };
	
	                            for (var i = 0; i < radios.length; i++) {
	                                if (checked) {
	                                    if (radios[i].value == defalutSelect[target.name]) {
	                                        radios[i].checked = 'checked';
	                                    }
	                                } else {
	                                    radios[i].checked = false;
	                                }
	                            }
	                        }
	                        // 点击radio,选中对应的checkbox
	                        if (target.name == ('imageBlockLineValue' + editorId) || target.name == ('textAlignValue' + editorId) || target.name == 'bdc') {
	                            var checkboxs = target.parentNode.previousSibling.getElementsByTagName('input');
	                            checkboxs && (checkboxs[0].checked = true);
	                        }
	
	                        getPara(popupUI);
	                    }
	                });
	
	                flag = 1;
	            });
	            this.initSplitButton();
	        }
	    };
	    utils.inherits(AutoTypeSetButton, SplitButton);
	
	})();
	
	
	// ui/cellalignpicker.js
	///import core
	///import uicore
	(function () {
	    var utils = baidu.editor.utils,
	        Popup = baidu.editor.ui.Popup,
	        Stateful = baidu.editor.ui.Stateful,
	        UIBase = baidu.editor.ui.UIBase;
	
	    /**
	     * 该参数将新增一个参数： selected， 参数类型为一个Object， 形如{ 'align': 'center', 'valign': 'top' }， 表示单元格的初始
	     * 对齐状态为： 竖直居上，水平居中; 其中 align的取值为：'center', 'left', 'right'; valign的取值为: 'top', 'middle', 'bottom'
	     * @update 2013/4/2 hancong03@baidu.com
	     */
	    var CellAlignPicker = baidu.editor.ui.CellAlignPicker = function (options) {
	        this.initOptions(options);
	        this.initSelected();
	        this.initCellAlignPicker();
	    };
	    CellAlignPicker.prototype = {
	        //初始化选中状态， 该方法将根据传递进来的参数获取到应该选中的对齐方式图标的索引
	        initSelected: function(){
	
	            var status = {
	
	                valign: {
	                    top: 0,
	                    middle: 1,
	                    bottom: 2
	                },
	                align: {
	                    left: 0,
	                    center: 1,
	                    right: 2
	                },
	                count: 3
	
	                },
	                result = -1;
	
	            if( this.selected ) {
	                this.selectedIndex = status.valign[ this.selected.valign ] * status.count + status.align[ this.selected.align ];
	            }
	
	        },
	        initCellAlignPicker:function () {
	            this.initUIBase();
	            this.Stateful_init();
	        },
	        getHtmlTpl:function () {
	
	            var alignType = [ 'left', 'center', 'right' ],
	                COUNT = 9,
	                tempClassName = null,
	                tempIndex = -1,
	                tmpl = [];
	
	
	            for( var i= 0; i<COUNT; i++ ) {
	
	                tempClassName = this.selectedIndex === i ? ' class="edui-cellalign-selected" ' : '';
	                tempIndex = i % 3;
	
	                tempIndex === 0 && tmpl.push('<tr>');
	
	                tmpl.push( '<td index="'+ i +'" ' + tempClassName + ' stateful><div class="edui-icon edui-'+ alignType[ tempIndex ] +'"></div></td>' );
	
	                tempIndex === 2 && tmpl.push('</tr>');
	
	            }
	
	            return '<div id="##" class="edui-cellalignpicker %%">' +
	                '<div class="edui-cellalignpicker-body">' +
	                '<table onclick="$$._onClick(event);">' +
	                tmpl.join('') +
	                '</table>' +
	                '</div>' +
	                '</div>';
	        },
	        getStateDom: function (){
	            return this.target;
	        },
	        _onClick: function (evt){
	            var target= evt.target || evt.srcElement;
	            if(/icon/.test(target.className)){
	                this.items[target.parentNode.getAttribute("index")].onclick();
	                Popup.postHide(evt);
	            }
	        },
	        _UIBase_render:UIBase.prototype.render
	    };
	    utils.inherits(CellAlignPicker, UIBase);
	    utils.extend(CellAlignPicker.prototype, Stateful,true);
	})();
	
	
	
	
	
	// ui/pastepicker.js
	///import core
	///import uicore
	(function () {
	    var utils = baidu.editor.utils,
	        Stateful = baidu.editor.ui.Stateful,
	        uiUtils = baidu.editor.ui.uiUtils,
	        UIBase = baidu.editor.ui.UIBase;
	
	    var PastePicker = baidu.editor.ui.PastePicker = function (options) {
	        this.initOptions(options);
	        this.initPastePicker();
	    };
	    PastePicker.prototype = {
	        initPastePicker:function () {
	            this.initUIBase();
	            this.Stateful_init();
	        },
	        getHtmlTpl:function () {
	            return '<div class="edui-pasteicon" onclick="$$._onClick(this)"></div>' +
	                '<div class="edui-pastecontainer">' +
	                '<div class="edui-title">' + this.editor.getLang("pasteOpt") + '</div>' +
	                '<div class="edui-button">' +
	                '<div title="' + this.editor.getLang("pasteSourceFormat") + '" onclick="$$.format(false)" stateful>' +
	                '<div class="edui-richtxticon"></div></div>' +
	                '<div title="' + this.editor.getLang("tagFormat") + '" onclick="$$.format(2)" stateful>' +
	                '<div class="edui-tagicon"></div></div>' +
	                '<div title="' + this.editor.getLang("pasteTextFormat") + '" onclick="$$.format(true)" stateful>' +
	                '<div class="edui-plaintxticon"></div></div>' +
	                '</div>' +
	                '</div>' +
	                '</div>'
	        },
	        getStateDom:function () {
	            return this.target;
	        },
	        format:function (param) {
	            this.editor.ui._isTransfer = true;
	            this.editor.fireEvent('pasteTransfer', param);
	        },
	        _onClick:function (cur) {
	            var node = domUtils.getNextDomNode(cur),
	                screenHt = uiUtils.getViewportRect().height,
	                subPop = uiUtils.getClientRect(node);
	
	            if ((subPop.top + subPop.height) > screenHt)
	                node.style.top = (-subPop.height - cur.offsetHeight) + "px";
	            else
	                node.style.top = "";
	
	            if (/hidden/ig.test(domUtils.getComputedStyle(node, "visibility"))) {
	                node.style.visibility = "visible";
	                domUtils.addClass(cur, "edui-state-opened");
	            } else {
	                node.style.visibility = "hidden";
	                domUtils.removeClasses(cur, "edui-state-opened")
	            }
	        },
	        _UIBase_render:UIBase.prototype.render
	    };
	    utils.inherits(PastePicker, UIBase);
	    utils.extend(PastePicker.prototype, Stateful, true);
	})();
	
	
	
	
	
	
	// ui/toolbar.js
	(function (){
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        UIBase = baidu.editor.ui.UIBase,
	        Toolbar = baidu.editor.ui.Toolbar = function (options){
	            this.initOptions(options);
	            this.initToolbar();
	        };
	    Toolbar.prototype = {
	        items: null,
	        initToolbar: function (){
	            this.items = this.items || [];
	            this.initUIBase();
	        },
	        add: function (item,index){
	            if(index === undefined){
	                this.items.push(item);
	            }else{
	                this.items.splice(index,0,item)
	            }
	
	        },
	        getHtmlTpl: function (){
	            var buff = [];
	            for (var i=0; i<this.items.length; i++) {
	                buff[i] = this.items[i].renderHtml();
	            }
	            return '<div id="##" class="edui-toolbar %%" onselectstart="return false;" onmousedown="return $$._onMouseDown(event, this);">' +
	                buff.join('') +
	                '</div>'
	        },
	        postRender: function (){
	            var box = this.getDom();
	            for (var i=0; i<this.items.length; i++) {
	                this.items[i].postRender();
	            }
	            uiUtils.makeUnselectable(box);
	        },
	        _onMouseDown: function (e){
	            var target = e.target || e.srcElement,
	                tagName = target && target.tagName && target.tagName.toLowerCase();
	            if (tagName == 'input' || tagName == 'object' || tagName == 'object') {
	                return false;
	            }
	        }
	    };
	    utils.inherits(Toolbar, UIBase);
	
	})();
	
	
	// ui/menu.js
	///import core
	///import uicore
	///import ui\popup.js
	///import ui\stateful.js
	(function () {
	    var utils = baidu.editor.utils,
	        domUtils = baidu.editor.dom.domUtils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        UIBase = baidu.editor.ui.UIBase,
	        Popup = baidu.editor.ui.Popup,
	        Stateful = baidu.editor.ui.Stateful,
	        CellAlignPicker = baidu.editor.ui.CellAlignPicker,
	
	        Menu = baidu.editor.ui.Menu = function (options) {
	            this.initOptions(options);
	            this.initMenu();
	        };
	
	    var menuSeparator = {
	        renderHtml:function () {
	            return '<div class="edui-menuitem edui-menuseparator"><div class="edui-menuseparator-inner"></div></div>';
	        },
	        postRender:function () {
	        },
	        queryAutoHide:function () {
	            return true;
	        }
	    };
	    Menu.prototype = {
	        items:null,
	        uiName:'menu',
	        initMenu:function () {
	            this.items = this.items || [];
	            this.initPopup();
	            this.initItems();
	        },
	        initItems:function () {
	            for (var i = 0; i < this.items.length; i++) {
	                var item = this.items[i];
	                if (item == '-') {
	                    this.items[i] = this.getSeparator();
	                } else if (!(item instanceof MenuItem)) {
	                    item.editor = this.editor;
	                    item.theme = this.editor.options.theme;
	                    this.items[i] = this.createItem(item);
	                }
	            }
	        },
	        getSeparator:function () {
	            return menuSeparator;
	        },
	        createItem:function (item) {
	            //新增一个参数menu, 该参数存储了menuItem所对应的menu引用
	            item.menu = this;
	            return new MenuItem(item);
	        },
	        _Popup_getContentHtmlTpl:Popup.prototype.getContentHtmlTpl,
	        getContentHtmlTpl:function () {
	            if (this.items.length == 0) {
	                return this._Popup_getContentHtmlTpl();
	            }
	            var buff = [];
	            for (var i = 0; i < this.items.length; i++) {
	                var item = this.items[i];
	                buff[i] = item.renderHtml();
	            }
	            return ('<div class="%%-body">' + buff.join('') + '</div>');
	        },
	        _Popup_postRender:Popup.prototype.postRender,
	        postRender:function () {
	            var me = this;
	            for (var i = 0; i < this.items.length; i++) {
	                var item = this.items[i];
	                item.ownerMenu = this;
	                item.postRender();
	            }
	            domUtils.on(this.getDom(), 'mouseover', function (evt) {
	                evt = evt || event;
	                var rel = evt.relatedTarget || evt.fromElement;
	                var el = me.getDom();
	                if (!uiUtils.contains(el, rel) && el !== rel) {
	                    me.fireEvent('over');
	                }
	            });
	            this._Popup_postRender();
	        },
	        queryAutoHide:function (el) {
	            if (el) {
	                if (uiUtils.contains(this.getDom(), el)) {
	                    return false;
	                }
	                for (var i = 0; i < this.items.length; i++) {
	                    var item = this.items[i];
	                    if (item.queryAutoHide(el) === false) {
	                        return false;
	                    }
	                }
	            }
	        },
	        clearItems:function () {
	            for (var i = 0; i < this.items.length; i++) {
	                var item = this.items[i];
	                clearTimeout(item._showingTimer);
	                clearTimeout(item._closingTimer);
	                if (item.subMenu) {
	                    item.subMenu.destroy();
	                }
	            }
	            this.items = [];
	        },
	        destroy:function () {
	            if (this.getDom()) {
	                domUtils.remove(this.getDom());
	            }
	            this.clearItems();
	        },
	        dispose:function () {
	            this.destroy();
	        }
	    };
	    utils.inherits(Menu, Popup);
	
	    /**
	     * @update 2013/04/03 hancong03 新增一个参数menu, 该参数存储了menuItem所对应的menu引用
	     * @type {Function}
	     */
	    var MenuItem = baidu.editor.ui.MenuItem = function (options) {
	        this.initOptions(options);
	        this.initUIBase();
	        this.Stateful_init();
	        if (this.subMenu && !(this.subMenu instanceof Menu)) {
	            if (options.className && options.className.indexOf("aligntd") != -1) {
	                var me = this;
	
	                //获取单元格对齐初始状态
	                this.subMenu.selected = this.editor.queryCommandValue( 'cellalignment' );
	
	                this.subMenu = new Popup({
	                    content:new CellAlignPicker(this.subMenu),
	                    parentMenu:me,
	                    editor:me.editor,
	                    destroy:function () {
	                        if (this.getDom()) {
	                            domUtils.remove(this.getDom());
	                        }
	                    }
	                });
	                this.subMenu.addListener("postRenderAfter", function () {
	                    domUtils.on(this.getDom(), "mouseover", function () {
	                        me.addState('opened');
	                    });
	                });
	            } else {
	                this.subMenu = new Menu(this.subMenu);
	            }
	        }
	    };
	    MenuItem.prototype = {
	        label:'',
	        subMenu:null,
	        ownerMenu:null,
	        uiName:'menuitem',
	        alwalysHoverable:true,
	        getHtmlTpl:function () {
	            return '<div id="##" class="%%" stateful onclick="$$._onClick(event, this);">' +
	                '<div class="%%-body">' +
	                this.renderLabelHtml() +
	                '</div>' +
	                '</div>';
	        },
	        postRender:function () {
	            var me = this;
	            this.addListener('over', function () {
	                me.ownerMenu.fireEvent('submenuover', me);
	                if (me.subMenu) {
	                    me.delayShowSubMenu();
	                }
	            });
	            if (this.subMenu) {
	                this.getDom().className += ' edui-hassubmenu';
	                this.subMenu.render();
	                this.addListener('out', function () {
	                    me.delayHideSubMenu();
	                });
	                this.subMenu.addListener('over', function () {
	                    clearTimeout(me._closingTimer);
	                    me._closingTimer = null;
	                    me.addState('opened');
	                });
	                this.ownerMenu.addListener('hide', function () {
	                    me.hideSubMenu();
	                });
	                this.ownerMenu.addListener('submenuover', function (t, subMenu) {
	                    if (subMenu !== me) {
	                        me.delayHideSubMenu();
	                    }
	                });
	                this.subMenu._bakQueryAutoHide = this.subMenu.queryAutoHide;
	                this.subMenu.queryAutoHide = function (el) {
	                    if (el && uiUtils.contains(me.getDom(), el)) {
	                        return false;
	                    }
	                    return this._bakQueryAutoHide(el);
	                };
	            }
	            this.getDom().style.tabIndex = '-1';
	            uiUtils.makeUnselectable(this.getDom());
	            this.Stateful_postRender();
	        },
	        delayShowSubMenu:function () {
	            var me = this;
	            if (!me.isDisabled()) {
	                me.addState('opened');
	                clearTimeout(me._showingTimer);
	                clearTimeout(me._closingTimer);
	                me._closingTimer = null;
	                me._showingTimer = setTimeout(function () {
	                    me.showSubMenu();
	                }, 250);
	            }
	        },
	        delayHideSubMenu:function () {
	            var me = this;
	            if (!me.isDisabled()) {
	                me.removeState('opened');
	                clearTimeout(me._showingTimer);
	                if (!me._closingTimer) {
	                    me._closingTimer = setTimeout(function () {
	                        if (!me.hasState('opened')) {
	                            me.hideSubMenu();
	                        }
	                        me._closingTimer = null;
	                    }, 400);
	                }
	            }
	        },
	        renderLabelHtml:function () {
	            return '<div class="edui-arrow"></div>' +
	                '<div class="edui-box edui-icon"></div>' +
	                '<div class="edui-box edui-label %%-label">' + (this.label || '') + '</div>';
	        },
	        getStateDom:function () {
	            return this.getDom();
	        },
	        queryAutoHide:function (el) {
	            if (this.subMenu && this.hasState('opened')) {
	                return this.subMenu.queryAutoHide(el);
	            }
	        },
	        _onClick:function (event, this_) {
	            if (this.hasState('disabled')) return;
	            if (this.fireEvent('click', event, this_) !== false) {
	                if (this.subMenu) {
	                    this.showSubMenu();
	                } else {
	                    Popup.postHide(event);
	                }
	            }
	        },
	        showSubMenu:function () {
	            var rect = uiUtils.getClientRect(this.getDom());
	            rect.right -= 5;
	            rect.left += 2;
	            rect.width -= 7;
	            rect.top -= 4;
	            rect.bottom += 4;
	            rect.height += 8;
	            this.subMenu.showAnchorRect(rect, true, true);
	        },
	        hideSubMenu:function () {
	            this.subMenu.hide();
	        }
	    };
	    utils.inherits(MenuItem, UIBase);
	    utils.extend(MenuItem.prototype, Stateful, true);
	})();
	
	
	// ui/combox.js
	///import core
	///import uicore
	///import ui/menu.js
	///import ui/splitbutton.js
	(function (){
	    // todo: menu和item提成通用list
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        Menu = baidu.editor.ui.Menu,
	        SplitButton = baidu.editor.ui.SplitButton,
	        Combox = baidu.editor.ui.Combox = function (options){
	            this.initOptions(options);
	            this.initCombox();
	        };
	    Combox.prototype = {
	        uiName: 'combox',
	        onbuttonclick:function () {
	            this.showPopup();
	        },
	        initCombox: function (){
	            var me = this;
	            this.items = this.items || [];
	            for (var i=0; i<this.items.length; i++) {
	                var item = this.items[i];
	                item.uiName = 'listitem';
	                item.index = i;
	                item.onclick = function (){
	                    me.selectByIndex(this.index);
	                };
	            }
	            this.popup = new Menu({
	                items: this.items,
	                uiName: 'list',
	                editor:this.editor,
	                captureWheel: true,
	                combox: this
	            });
	
	            this.initSplitButton();
	        },
	        _SplitButton_postRender: SplitButton.prototype.postRender,
	        postRender: function (){
	            this._SplitButton_postRender();
	            this.setLabel(this.label || '');
	            this.setValue(this.initValue || '');
	        },
	        showPopup: function (){
	            var rect = uiUtils.getClientRect(this.getDom());
	            rect.top += 1;
	            rect.bottom -= 1;
	            rect.height -= 2;
	            this.popup.showAnchorRect(rect);
	        },
	        getValue: function (){
	            return this.value;
	        },
	        setValue: function (value){
	            var index = this.indexByValue(value);
	            if (index != -1) {
	                this.selectedIndex = index;
	                this.setLabel(this.items[index].label);
	                this.value = this.items[index].value;
	            } else {
	                this.selectedIndex = -1;
	                this.setLabel(this.getLabelForUnknowValue(value));
	                this.value = value;
	            }
	        },
	        setLabel: function (label){
	            this.getDom('button_body').innerHTML = label;
	            this.label = label;
	        },
	        getLabelForUnknowValue: function (value){
	            return value;
	        },
	        indexByValue: function (value){
	            for (var i=0; i<this.items.length; i++) {
	                if (value == this.items[i].value) {
	                    return i;
	                }
	            }
	            return -1;
	        },
	        getItem: function (index){
	            return this.items[index];
	        },
	        selectByIndex: function (index){
	            if (index < this.items.length && this.fireEvent('select', index) !== false) {
	                this.selectedIndex = index;
	                this.value = this.items[index].value;
	                this.setLabel(this.items[index].label);
	            }
	        }
	    };
	    utils.inherits(Combox, SplitButton);
	})();
	
	
	// ui/dialog.js
	///import core
	///import uicore
	///import ui/mask.js
	///import ui/button.js
	(function (){
	    var utils = baidu.editor.utils,
	        domUtils = baidu.editor.dom.domUtils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        Mask = baidu.editor.ui.Mask,
	        UIBase = baidu.editor.ui.UIBase,
	        Button = baidu.editor.ui.Button,
	        Dialog = baidu.editor.ui.Dialog = function (options){
	            if(options.name){
	                var name = options.name;
	                var cssRules = options.cssRules;
	                if(!options.className){
	                    options.className =  'edui-for-' + name;
	                }
	                if(cssRules){
	                    options.cssRules = '.edui-default .edui-for-'+ name +' .edui-dialog-content  {'+ cssRules +'}'
	                }
	            }
	            this.initOptions(utils.extend({
	                autoReset: true,
	                draggable: true,
	                onok: function (){},
	                oncancel: function (){},
	                onclose: function (t, ok){
	                    return ok ? this.onok() : this.oncancel();
	                },
	                //是否控制dialog中的scroll事件， 默认为不阻止
	                holdScroll: false
	            },options));
	            this.initDialog();
	        };
	    var modalMask;
	    var dragMask;
	    var activeDialog;
	    Dialog.prototype = {
	        draggable: false,
	        uiName: 'dialog',
	        initDialog: function (){
	            var me = this,
	                theme=this.editor.options.theme;
	            if(this.cssRules){
	                utils.cssRule('edui-customize-'+this.name+'-style',this.cssRules);
	            }
	            this.initUIBase();
	            this.modalMask = (modalMask || (modalMask = new Mask({
	                className: 'edui-dialog-modalmask',
	                theme:theme,
	                onclick: function (){
	                    activeDialog && activeDialog.close(false);
	                }
	            })));
	            this.dragMask = (dragMask || (dragMask = new Mask({
	                className: 'edui-dialog-dragmask',
	                theme:theme
	            })));
	            this.closeButton = new Button({
	                className: 'edui-dialog-closebutton',
	                title: me.closeDialog,
	                theme:theme,
	                onclick: function (){
	                    me.close(false);
	                }
	            });
	
	            this.fullscreen && this.initResizeEvent();
	
	            if (this.buttons) {
	                for (var i=0; i<this.buttons.length; i++) {
	                    if (!(this.buttons[i] instanceof Button)) {
	                        this.buttons[i] = new Button(utils.extend(this.buttons[i],{
	                            editor : this.editor
	                        },true));
	                    }
	                }
	            }
	        },
	        initResizeEvent: function () {
	
	            var me = this;
	
	            domUtils.on( window, "resize", function () {
	
	                if ( me._hidden || me._hidden === undefined ) {
	                    return;
	                }
	
	                if ( me.__resizeTimer ) {
	                    window.clearTimeout( me.__resizeTimer );
	                }
	
	                me.__resizeTimer = window.setTimeout( function () {
	
	                    me.__resizeTimer = null;
	
	                    var dialogWrapNode = me.getDom(),
	                        contentNode = me.getDom('content'),
	                        wrapRect = UE.ui.uiUtils.getClientRect( dialogWrapNode ),
	                        contentRect = UE.ui.uiUtils.getClientRect( contentNode ),
	                        vpRect = uiUtils.getViewportRect();
	
	                    contentNode.style.width = ( vpRect.width - wrapRect.width + contentRect.width ) + "px";
	                    contentNode.style.height = ( vpRect.height - wrapRect.height + contentRect.height ) + "px";
	
	                    dialogWrapNode.style.width = vpRect.width + "px";
	                    dialogWrapNode.style.height = vpRect.height + "px";
	
	                    me.fireEvent( "resize" );
	
	                }, 100 );
	
	            } );
	
	        },
	        fitSize: function (){
	            var popBodyEl = this.getDom('body');
	//            if (!(baidu.editor.browser.ie && baidu.editor.browser.version == 7)) {
	//                uiUtils.removeStyle(popBodyEl, 'width');
	//                uiUtils.removeStyle(popBodyEl, 'height');
	//            }
	            var size = this.mesureSize();
	            popBodyEl.style.width = size.width + 'px';
	            popBodyEl.style.height = size.height + 'px';
	            return size;
	        },
	        safeSetOffset: function (offset){
	            var me = this;
	            var el = me.getDom();
	            var vpRect = uiUtils.getViewportRect();
	            var rect = uiUtils.getClientRect(el);
	            var left = offset.left;
	            if (left + rect.width > vpRect.right) {
	                left = vpRect.right - rect.width;
	            }
	            var top = offset.top;
	            if (top + rect.height > vpRect.bottom) {
	                top = vpRect.bottom - rect.height;
	            }
	            el.style.left = Math.max(left, 0) + 'px';
	            el.style.top = Math.max(top, 0) + 'px';
	        },
	        showAtCenter: function (){
	
	            var vpRect = uiUtils.getViewportRect();
	
	            if ( !this.fullscreen ) {
	                this.getDom().style.display = '';
	                var popSize = this.fitSize();
	                var titleHeight = this.getDom('titlebar').offsetHeight | 0;
	                var left = vpRect.width / 2 - popSize.width / 2;
	                var top = vpRect.height / 2 - (popSize.height - titleHeight) / 2 - titleHeight;
	                var popEl = this.getDom();
	                this.safeSetOffset({
	                    left: Math.max(left | 0, 0),
	                    top: Math.max(top | 0, 0)
	                });
	                if (!domUtils.hasClass(popEl, 'edui-state-centered')) {
	                    popEl.className += ' edui-state-centered';
	                }
	            } else {
	                var dialogWrapNode = this.getDom(),
	                    contentNode = this.getDom('content');
	
	                dialogWrapNode.style.display = "block";
	
	                var wrapRect = UE.ui.uiUtils.getClientRect( dialogWrapNode ),
	                    contentRect = UE.ui.uiUtils.getClientRect( contentNode );
	                dialogWrapNode.style.left = "-100000px";
	
	                contentNode.style.width = ( vpRect.width - wrapRect.width + contentRect.width ) + "px";
	                contentNode.style.height = ( vpRect.height - wrapRect.height + contentRect.height ) + "px";
	
	                dialogWrapNode.style.width = vpRect.width + "px";
	                dialogWrapNode.style.height = vpRect.height + "px";
	                dialogWrapNode.style.left = 0;
	
	                //保存环境的overflow值
	                this._originalContext = {
	                    html: {
	                        overflowX: document.documentElement.style.overflowX,
	                        overflowY: document.documentElement.style.overflowY
	                    },
	                    body: {
	                        overflowX: document.body.style.overflowX,
	                        overflowY: document.body.style.overflowY
	                    }
	                };
	
	                document.documentElement.style.overflowX = 'hidden';
	                document.documentElement.style.overflowY = 'hidden';
	                document.body.style.overflowX = 'hidden';
	                document.body.style.overflowY = 'hidden';
	
	            }
	
	            this._show();
	        },
	        getContentHtml: function (){
	            var contentHtml = '';
	            if (typeof this.content == 'string') {
	                contentHtml = this.content;
	            } else if (this.iframeUrl) {
	                contentHtml = '<span id="'+ this.id +'_contmask" class="dialogcontmask"></span><iframe id="'+ this.id +
	                    '_iframe" class="%%-iframe" height="100%" width="100%" frameborder="0" src="'+ this.iframeUrl +'"></iframe>';
	            }
	            return contentHtml;
	        },
	        getHtmlTpl: function (){
	            var footHtml = '';
	
	            if (this.buttons) {
	                var buff = [];
	                for (var i=0; i<this.buttons.length; i++) {
	                    buff[i] = this.buttons[i].renderHtml();
	                }
	                footHtml = '<div class="%%-foot">' +
	                     '<div id="##_buttons" class="%%-buttons">' + buff.join('') + '</div>' +
	                    '</div>';
	            }
	
	            return '<div id="##" class="%%"><div '+ ( !this.fullscreen ? 'class="%%"' : 'class="%%-wrap edui-dialog-fullscreen-flag"' ) +'><div id="##_body" class="%%-body">' +
	                '<div class="%%-shadow"></div>' +
	                '<div id="##_titlebar" class="%%-titlebar">' +
	                '<div class="%%-draghandle" onmousedown="$$._onTitlebarMouseDown(event, this);">' +
	                 '<span class="%%-caption">' + (this.title || '') + '</span>' +
	                '</div>' +
	                this.closeButton.renderHtml() +
	                '</div>' +
	                '<div id="##_content" class="%%-content">'+ ( this.autoReset ? '' : this.getContentHtml()) +'</div>' +
	                footHtml +
	                '</div></div></div>';
	        },
	        postRender: function (){
	            // todo: 保持居中/记住上次关闭位置选项
	            if (!this.modalMask.getDom()) {
	                this.modalMask.render();
	                this.modalMask.hide();
	            }
	            if (!this.dragMask.getDom()) {
	                this.dragMask.render();
	                this.dragMask.hide();
	            }
	            var me = this;
	            this.addListener('show', function (){
	                me.modalMask.show(this.getDom().style.zIndex - 2);
	            });
	            this.addListener('hide', function (){
	                me.modalMask.hide();
	            });
	            if (this.buttons) {
	                for (var i=0; i<this.buttons.length; i++) {
	                    this.buttons[i].postRender();
	                }
	            }
	            domUtils.on(window, 'resize', function (){
	                setTimeout(function (){
	                    if (!me.isHidden()) {
	                        me.safeSetOffset(uiUtils.getClientRect(me.getDom()));
	                    }
	                });
	            });
	
	            //hold住scroll事件，防止dialog的滚动影响页面
	//            if( this.holdScroll ) {
	//
	//                if( !me.iframeUrl ) {
	//                    domUtils.on( document.getElementById( me.id + "_iframe"), !browser.gecko ? "mousewheel" : "DOMMouseScroll", function(e){
	//                        domUtils.preventDefault(e);
	//                    } );
	//                } else {
	//                    me.addListener('dialogafterreset', function(){
	//                        window.setTimeout(function(){
	//                            var iframeWindow = document.getElementById( me.id + "_iframe").contentWindow;
	//
	//                            if( browser.ie ) {
	//
	//                                var timer = window.setInterval(function(){
	//
	//                                    if( iframeWindow.document && iframeWindow.document.body ) {
	//                                        window.clearInterval( timer );
	//                                        timer = null;
	//                                        domUtils.on( iframeWindow.document.body, !browser.gecko ? "mousewheel" : "DOMMouseScroll", function(e){
	//                                            domUtils.preventDefault(e);
	//                                        } );
	//                                    }
	//
	//                                }, 100);
	//
	//                            } else {
	//                                domUtils.on( iframeWindow, !browser.gecko ? "mousewheel" : "DOMMouseScroll", function(e){
	//                                    domUtils.preventDefault(e);
	//                                } );
	//                            }
	//
	//                        }, 1);
	//                    });
	//                }
	//
	//            }
	            this._hide();
	        },
	        mesureSize: function (){
	            var body = this.getDom('body');
	            var width = uiUtils.getClientRect(this.getDom('content')).width;
	            var dialogBodyStyle = body.style;
	            dialogBodyStyle.width = width;
	            return uiUtils.getClientRect(body);
	        },
	        _onTitlebarMouseDown: function (evt, el){
	            if (this.draggable) {
	                var rect;
	                var vpRect = uiUtils.getViewportRect();
	                var me = this;
	                uiUtils.startDrag(evt, {
	                    ondragstart: function (){
	                        rect = uiUtils.getClientRect(me.getDom());
	                        me.getDom('contmask').style.visibility = 'visible';
	                        me.dragMask.show(me.getDom().style.zIndex - 1);
	                    },
	                    ondragmove: function (x, y){
	                        var left = rect.left + x;
	                        var top = rect.top + y;
	                        me.safeSetOffset({
	                            left: left,
	                            top: top
	                        });
	                    },
	                    ondragstop: function (){
	                        me.getDom('contmask').style.visibility = 'hidden';
	                        domUtils.removeClasses(me.getDom(), ['edui-state-centered']);
	                        me.dragMask.hide();
	                    }
	                });
	            }
	        },
	        reset: function (){
	            this.getDom('content').innerHTML = this.getContentHtml();
	            this.fireEvent('dialogafterreset');
	        },
	        _show: function (){
	            if (this._hidden) {
	                this.getDom().style.display = '';
	
	                //要高过编辑器的zindxe
	                this.editor.container.style.zIndex && (this.getDom().style.zIndex = this.editor.container.style.zIndex * 1 + 10);
	                this._hidden = false;
	                this.fireEvent('show');
	                baidu.editor.ui.uiUtils.getFixedLayer().style.zIndex = this.getDom().style.zIndex - 4;
	            }
	        },
	        isHidden: function (){
	            return this._hidden;
	        },
	        _hide: function (){
	            if (!this._hidden) {
	                var wrapNode = this.getDom();
	                wrapNode.style.display = 'none';
	                wrapNode.style.zIndex = '';
	                wrapNode.style.width = '';
	                wrapNode.style.height = '';
	                this._hidden = true;
	                this.fireEvent('hide');
	            }
	        },
	        open: function (){
	            if (this.autoReset) {
	                //有可能还没有渲染
	                try{
	                    this.reset();
	                }catch(e){
	                    this.render();
	                    this.open()
	                }
	            }
	            this.showAtCenter();
	            if (this.iframeUrl) {
	                try {
	                    this.getDom('iframe').focus();
	                } catch(ex){}
	            }
	            activeDialog = this;
	        },
	        _onCloseButtonClick: function (evt, el){
	            this.close(false);
	        },
	        close: function (ok){
	            if (this.fireEvent('close', ok) !== false) {
	                //还原环境
	                if ( this.fullscreen ) {
	
	                    document.documentElement.style.overflowX = this._originalContext.html.overflowX;
	                    document.documentElement.style.overflowY = this._originalContext.html.overflowY;
	                    document.body.style.overflowX = this._originalContext.body.overflowX;
	                    document.body.style.overflowY = this._originalContext.body.overflowY;
	                    delete this._originalContext;
	
	                }
	                this._hide();
	
	                //销毁content
	                var content = this.getDom('content');
	                var iframe = this.getDom('iframe');
	                if (content && iframe) {
	                    var doc = iframe.contentDocument || iframe.contentWindow.document;
	                    doc && (doc.body.innerHTML = '');
	                    domUtils.remove(content);
	                }
	            }
	        }
	    };
	    utils.inherits(Dialog, UIBase);
	})();
	
	
	// ui/menubutton.js
	///import core
	///import uicore
	///import ui/menu.js
	///import ui/splitbutton.js
	(function (){
	    var utils = baidu.editor.utils,
	        Menu = baidu.editor.ui.Menu,
	        SplitButton = baidu.editor.ui.SplitButton,
	        MenuButton = baidu.editor.ui.MenuButton = function (options){
	            this.initOptions(options);
	            this.initMenuButton();
	        };
	    MenuButton.prototype = {
	        initMenuButton: function (){
	            var me = this;
	            this.uiName = "menubutton";
	            this.popup = new Menu({
	                items: me.items,
	                className: me.className,
	                editor:me.editor
	            });
	            this.popup.addListener('show', function (){
	                var list = this;
	                for (var i=0; i<list.items.length; i++) {
	                    list.items[i].removeState('checked');
	                    if (list.items[i].value == me._value) {
	                        list.items[i].addState('checked');
	                        this.value = me._value;
	                    }
	                }
	            });
	            this.initSplitButton();
	        },
	        setValue : function(value){
	            this._value = value;
	        }
	        
	    };
	    utils.inherits(MenuButton, SplitButton);
	})();
	
	// ui/multiMenu.js
	///import core
	///import uicore
	 ///commands 表情
	(function(){
	    var utils = baidu.editor.utils,
	        Popup = baidu.editor.ui.Popup,
	        SplitButton = baidu.editor.ui.SplitButton,
	        MultiMenuPop = baidu.editor.ui.MultiMenuPop = function(options){
	            this.initOptions(options);
	            this.initMultiMenu();
	        };
	
	    MultiMenuPop.prototype = {
	        initMultiMenu: function (){
	            var me = this;
	            this.popup = new Popup({
	                content: '',
	                editor : me.editor,
	                iframe_rendered: false,
	                onshow: function (){
	                    if (!this.iframe_rendered) {
	                        this.iframe_rendered = true;
	                        this.getDom('content').innerHTML = '<iframe id="'+me.id+'_iframe" src="'+ me.iframeUrl +'" frameborder="0"></iframe>';
	                        me.editor.container.style.zIndex && (this.getDom().style.zIndex = me.editor.container.style.zIndex * 1 + 1);
	                    }
	                }
	               // canSideUp:false,
	               // canSideLeft:false
	            });
	            this.onbuttonclick = function(){
	                this.showPopup();
	            };
	            this.initSplitButton();
	        }
	
	    };
	
	    utils.inherits(MultiMenuPop, SplitButton);
	})();
	
	
	// ui/shortcutmenu.js
	(function () {
	    var UI = baidu.editor.ui,
	        UIBase = UI.UIBase,
	        uiUtils = UI.uiUtils,
	        utils = baidu.editor.utils,
	        domUtils = baidu.editor.dom.domUtils;
	
	    var allMenus = [],//存储所有快捷菜单
	        timeID,
	        isSubMenuShow = false;//是否有子pop显示
	
	    var ShortCutMenu = UI.ShortCutMenu = function (options) {
	        this.initOptions (options);
	        this.initShortCutMenu ();
	    };
	
	    ShortCutMenu.postHide = hideAllMenu;
	
	    ShortCutMenu.prototype = {
	        isHidden : true ,
	        SPACE : 5 ,
	        initShortCutMenu : function () {
	            this.items = this.items || [];
	            this.initUIBase ();
	            this.initItems ();
	            this.initEvent ();
	            allMenus.push (this);
	        } ,
	        initEvent : function () {
	            var me = this,
	                doc = me.editor.document;
	
	            domUtils.on (doc , "mousemove" , function (e) {
	                if (me.isHidden === false) {
	                    //有pop显示就不隐藏快捷菜单
	                    if (me.getSubMenuMark () || me.eventType == "contextmenu")   return;
	
	
	                    var flag = true,
	                        el = me.getDom (),
	                        wt = el.offsetWidth,
	                        ht = el.offsetHeight,
	                        distanceX = wt / 2 + me.SPACE,//距离中心X标准
	                        distanceY = ht / 2,//距离中心Y标准
	                        x = Math.abs (e.screenX - me.left),//离中心距离横坐标
	                        y = Math.abs (e.screenY - me.top);//离中心距离纵坐标
	
	                    clearTimeout (timeID);
	                    timeID = setTimeout (function () {
	                        if (y > 0 && y < distanceY) {
	                            me.setOpacity (el , "1");
	                        } else if (y > distanceY && y < distanceY + 70) {
	                            me.setOpacity (el , "0.5");
	                            flag = false;
	                        } else if (y > distanceY + 70 && y < distanceY + 140) {
	                            me.hide ();
	                        }
	
	                        if (flag && x > 0 && x < distanceX) {
	                            me.setOpacity (el , "1")
	                        } else if (x > distanceX && x < distanceX + 70) {
	                            me.setOpacity (el , "0.5")
	                        } else if (x > distanceX + 70 && x < distanceX + 140) {
	                            me.hide ();
	                        }
	                    });
	                }
	            });
	
	            //ie\ff下 mouseout不准
	            if (browser.chrome) {
	                domUtils.on (doc , "mouseout" , function (e) {
	                    var relatedTgt = e.relatedTarget || e.toElement;
	
	                    if (relatedTgt == null || relatedTgt.tagName == "HTML") {
	                        me.hide ();
	                    }
	                });
	            }
	
	            me.editor.addListener ("afterhidepop" , function () {
	                if (!me.isHidden) {
	                    isSubMenuShow = true;
	                }
	            });
	
	        } ,
	        initItems : function () {
	            if (utils.isArray (this.items)) {
	                for (var i = 0, len = this.items.length ; i < len ; i++) {
	                    var item = this.items[i].toLowerCase ();
	
	                    if (UI[item]) {
	                        this.items[i] = new UI[item] (this.editor);
	                        this.items[i].className += " edui-shortcutsubmenu ";
	                    }
	                }
	            }
	        } ,
	        setOpacity : function (el , value) {
	            if (browser.ie && browser.version < 9) {
	                el.style.filter = "alpha(opacity = " + parseFloat (value) * 100 + ");"
	            } else {
	                el.style.opacity = value;
	            }
	        } ,
	        getSubMenuMark : function () {
	            isSubMenuShow = false;
	            var layerEle = uiUtils.getFixedLayer ();
	            var list = domUtils.getElementsByTagName (layerEle , "div" , function (node) {
	                return domUtils.hasClass (node , "edui-shortcutsubmenu edui-popup")
	            });
	
	            for (var i = 0, node ; node = list[i++] ;) {
	                if (node.style.display != "none") {
	                    isSubMenuShow = true;
	                }
	            }
	            return isSubMenuShow;
	        } ,
	        show : function (e , hasContextmenu) {
	            var me = this,
	                offset = {},
	                el = this.getDom (),
	                fixedlayer = uiUtils.getFixedLayer ();
	
	            function setPos (offset) {
	                if (offset.left < 0) {
	                    offset.left = 0;
	                }
	                if (offset.top < 0) {
	                    offset.top = 0;
	                }
	                el.style.cssText = "position:absolute;left:" + offset.left + "px;top:" + offset.top + "px;";
	            }
	
	            function setPosByCxtMenu (menu) {
	                if (!menu.tagName) {
	                    menu = menu.getDom ();
	                }
	                offset.left = parseInt (menu.style.left);
	                offset.top = parseInt (menu.style.top);
	                offset.top -= el.offsetHeight + 15;
	                setPos (offset);
	            }
	
	
	            me.eventType = e.type;
	            el.style.cssText = "display:block;left:-9999px";
	
	            if (e.type == "contextmenu" && hasContextmenu) {
	                var menu = domUtils.getElementsByTagName (fixedlayer , "div" , "edui-contextmenu")[0];
	                if (menu) {
	                    setPosByCxtMenu (menu)
	                } else {
	                    me.editor.addListener ("aftershowcontextmenu" , function (type , menu) {
	                        setPosByCxtMenu (menu);
	                    });
	                }
	            } else {
	                offset = uiUtils.getViewportOffsetByEvent (e);
	                offset.top -= el.offsetHeight + me.SPACE;
	                offset.left += me.SPACE + 20;
	                setPos (offset);
	                me.setOpacity (el , 0.2);
	            }
	
	
	            me.isHidden = false;
	            me.left = e.screenX + el.offsetWidth / 2 - me.SPACE;
	            me.top = e.screenY - (el.offsetHeight / 2) - me.SPACE;
	
	            if (me.editor) {
	                el.style.zIndex = me.editor.container.style.zIndex * 1 + 10;
	                fixedlayer.style.zIndex = el.style.zIndex - 1;
	            }
	        } ,
	        hide : function () {
	            if (this.getDom ()) {
	                this.getDom ().style.display = "none";
	            }
	            this.isHidden = true;
	        } ,
	        postRender : function () {
	            if (utils.isArray (this.items)) {
	                for (var i = 0, item ; item = this.items[i++] ;) {
	                    item.postRender ();
	                }
	            }
	        } ,
	        getHtmlTpl : function () {
	            var buff;
	            if (utils.isArray (this.items)) {
	                buff = [];
	                for (var i = 0 ; i < this.items.length ; i++) {
	                    buff[i] = this.items[i].renderHtml ();
	                }
	                buff = buff.join ("");
	            } else {
	                buff = this.items;
	            }
	
	            return '<div id="##" class="%% edui-toolbar" data-src="shortcutmenu" onmousedown="return false;" onselectstart="return false;" >' +
	                buff +
	                '</div>';
	        }
	    };
	
	    utils.inherits (ShortCutMenu , UIBase);
	
	    function hideAllMenu (e) {
	        var tgt = e.target || e.srcElement,
	            cur = domUtils.findParent (tgt , function (node) {
	                return domUtils.hasClass (node , "edui-shortcutmenu") || domUtils.hasClass (node , "edui-popup");
	            } , true);
	
	        if (!cur) {
	            for (var i = 0, menu ; menu = allMenus[i++] ;) {
	                menu.hide ()
	            }
	        }
	    }
	
	    domUtils.on (document , 'mousedown' , function (e) {
	        hideAllMenu (e);
	    });
	
	    domUtils.on (window , 'scroll' , function (e) {
	        hideAllMenu (e);
	    });
	
	}) ();
	
	
	// ui/breakline.js
	(function (){
	    var utils = baidu.editor.utils,
	        UIBase = baidu.editor.ui.UIBase,
	        Breakline = baidu.editor.ui.Breakline = function (options){
	            this.initOptions(options);
	            this.initSeparator();
	        };
	    Breakline.prototype = {
	        uiName: 'Breakline',
	        initSeparator: function (){
	            this.initUIBase();
	        },
	        getHtmlTpl: function (){
	            return '<br/>';
	        }
	    };
	    utils.inherits(Breakline, UIBase);
	
	})();
	
	
	// ui/message.js
	///import core
	///import uicore
	(function () {
	    var utils = baidu.editor.utils,
	        domUtils = baidu.editor.dom.domUtils,
	        UIBase = baidu.editor.ui.UIBase,
	        Message = baidu.editor.ui.Message = function (options){
	            this.initOptions(options);
	            this.initMessage();
	        };
	
	    Message.prototype = {
	        initMessage: function (){
	            this.initUIBase();
	        },
	        getHtmlTpl: function (){
	            return '<div id="##" class="edui-message %%">' +
	            ' <div id="##_closer" class="edui-message-closer">×</div>' +
	            ' <div id="##_body" class="edui-message-body edui-message-type-info">' +
	            ' <iframe style="position:absolute;z-index:-1;left:0;top:0;background-color: transparent;" frameborder="0" width="100%" height="100%" src="about:blank"></iframe>' +
	            ' <div class="edui-shadow"></div>' +
	            ' <div id="##_content" class="edui-message-content">' +
	            '  </div>' +
	            ' </div>' +
	            '</div>';
	        },
	        reset: function(opt){
	            var me = this;
	            if (!opt.keepshow) {
	                clearTimeout(this.timer);
	                me.timer = setTimeout(function(){
	                    me.hide();
	                }, opt.timeout || 4000);
	            }
	
	            opt.content !== undefined && me.setContent(opt.content);
	            opt.type !== undefined && me.setType(opt.type);
	
	            me.show();
	        },
	        postRender: function(){
	            var me = this,
	                closer = this.getDom('closer');
	            closer && domUtils.on(closer, 'click', function(){
	                me.hide();
	            });
	        },
	        setContent: function(content){
	            this.getDom('content').innerHTML = content;
	        },
	        setType: function(type){
	            type = type || 'info';
	            var body = this.getDom('body');
	            body.className = body.className.replace(/edui-message-type-[\w-]+/, 'edui-message-type-' + type);
	        },
	        getContent: function(){
	            return this.getDom('content').innerHTML;
	        },
	        getType: function(){
	            var arr = this.getDom('body').match(/edui-message-type-([\w-]+)/);
	            return arr ? arr[1]:'';
	        },
	        show: function (){
	            this.getDom().style.display = 'block';
	        },
	        hide: function (){
	            var dom = this.getDom();
	            if (dom) {
	                dom.style.display = 'none';
	                dom.parentNode && dom.parentNode.removeChild(dom);
	            }
	        }
	    };
	
	    utils.inherits(Message, UIBase);
	
	})();
	
	
	// adapter/editorui.js
	//ui跟编辑器的适配層
	//那个按钮弹出是dialog，是下拉筐等都是在这个js中配置
	//自己写的ui也要在这里配置，放到baidu.editor.ui下边，当编辑器实例化的时候会根据ueditor.config中的toolbars找到相应的进行实例化
	(function () {
	    var utils = baidu.editor.utils;
	    var editorui = baidu.editor.ui;
	    var _Dialog = editorui.Dialog;
	    editorui.buttons = {};
	
	    editorui.Dialog = function (options) {
	        var dialog = new _Dialog(options);
	        dialog.addListener('hide', function () {
	
	            if (dialog.editor) {
	                var editor = dialog.editor;
	                try {
	                    if (browser.gecko) {
	                        var y = editor.window.scrollY,
	                            x = editor.window.scrollX;
	                        editor.body.focus();
	                        editor.window.scrollTo(x, y);
	                    } else {
	                        editor.focus();
	                    }
	
	
	                } catch (ex) {
	                }
	            }
	        });
	        return dialog;
	    };
	
	    var iframeUrlMap = {
	        'anchor':'~/dialogs/anchor/anchor.html',
	        'insertimage':'~/dialogs/image/image.html',
	        'link':'~/dialogs/link/link.html',
	        'spechars':'~/dialogs/spechars/spechars.html',
	        'searchreplace':'~/dialogs/searchreplace/searchreplace.html',
	        'map':'~/dialogs/map/map.html',
	        'gmap':'~/dialogs/gmap/gmap.html',
	        'insertvideo':'~/dialogs/video/video.html',
	        'help':'~/dialogs/help/help.html',
	        'preview':'~/dialogs/preview/preview.html',
	        'emotion':'~/dialogs/emotion/emotion.html',
	        'wordimage':'~/dialogs/wordimage/wordimage.html',
	        'attachment':'~/dialogs/attachment/attachment.html',
	        'insertframe':'~/dialogs/insertframe/insertframe.html',
	        'edittip':'~/dialogs/table/edittip.html',
	        'edittable':'~/dialogs/table/edittable.html',
	        'edittd':'~/dialogs/table/edittd.html',
	        'webapp':'~/dialogs/webapp/webapp.html',
	        'snapscreen':'~/dialogs/snapscreen/snapscreen.html',
	        'scrawl':'~/dialogs/scrawl/scrawl.html',
	        'music':'~/dialogs/music/music.html',
	        'template':'~/dialogs/template/template.html',
	        'background':'~/dialogs/background/background.html',
	        'charts': '~/dialogs/charts/charts.html'
	    };
	    //为工具栏添加按钮，以下都是统一的按钮触发命令，所以写在一起
	    var btnCmds = ['undo', 'redo', 'formatmatch',
	        'bold', 'italic', 'underline', 'fontborder', 'touppercase', 'tolowercase',
	        'strikethrough', 'subscript', 'superscript', 'source', 'indent', 'outdent',
	        'blockquote', 'pasteplain', 'pagebreak',
	        'selectall', 'print','horizontal', 'removeformat', 'time', 'date', 'unlink',
	        'insertparagraphbeforetable', 'insertrow', 'insertcol', 'mergeright', 'mergedown', 'deleterow',
	        'deletecol', 'splittorows', 'splittocols', 'splittocells', 'mergecells', 'deletetable', 'drafts'];
	
	    for (var i = 0, ci; ci = btnCmds[i++];) {
	        ci = ci.toLowerCase();
	        editorui[ci] = function (cmd) {
	            return function (editor) {
	                var ui = new editorui.Button({
	                    className:'edui-for-' + cmd,
	                    title:editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd) || '',
	                    onclick:function () {
	                        editor.execCommand(cmd);
	                    },
	                    theme:editor.options.theme,
	                    showText:false
	                });
	                editorui.buttons[cmd] = ui;
	                editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	                    var state = editor.queryCommandState(cmd);
	                    if (state == -1) {
	                        ui.setDisabled(true);
	                        ui.setChecked(false);
	                    } else {
	                        if (!uiReady) {
	                            ui.setDisabled(false);
	                            ui.setChecked(state);
	                        }
	                    }
	                });
	                return ui;
	            };
	        }(ci);
	    }
	
	    //清除文档
	    editorui.cleardoc = function (editor) {
	        var ui = new editorui.Button({
	            className:'edui-for-cleardoc',
	            title:editor.options.labelMap.cleardoc || editor.getLang("labelMap.cleardoc") || '',
	            theme:editor.options.theme,
	            onclick:function () {
	                if (confirm(editor.getLang("confirmClear"))) {
	                    editor.execCommand('cleardoc');
	                }
	            }
	        });
	        editorui.buttons["cleardoc"] = ui;
	        editor.addListener('selectionchange', function () {
	            ui.setDisabled(editor.queryCommandState('cleardoc') == -1);
	        });
	        return ui;
	    };
	
	    //排版，图片排版，文字方向
	    var typeset = {
	        'justify':['left', 'right', 'center', 'justify'],
	        'imagefloat':['none', 'left', 'center', 'right'],
	        'directionality':['ltr', 'rtl']
	    };
	
	    for (var p in typeset) {
	
	        (function (cmd, val) {
	            for (var i = 0, ci; ci = val[i++];) {
	                (function (cmd2) {
	                    editorui[cmd.replace('float', '') + cmd2] = function (editor) {
	                        var ui = new editorui.Button({
	                            className:'edui-for-' + cmd.replace('float', '') + cmd2,
	                            title:editor.options.labelMap[cmd.replace('float', '') + cmd2] || editor.getLang("labelMap." + cmd.replace('float', '') + cmd2) || '',
	                            theme:editor.options.theme,
	                            onclick:function () {
	                                editor.execCommand(cmd, cmd2);
	                            }
	                        });
	                        editorui.buttons[cmd] = ui;
	                        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	                            ui.setDisabled(editor.queryCommandState(cmd) == -1);
	                            ui.setChecked(editor.queryCommandValue(cmd) == cmd2 && !uiReady);
	                        });
	                        return ui;
	                    };
	                })(ci)
	            }
	        })(p, typeset[p])
	    }
	
	    //字体颜色和背景颜色
	    for (var i = 0, ci; ci = ['backcolor', 'forecolor'][i++];) {
	        editorui[ci] = function (cmd) {
	            return function (editor) {
	                var ui = new editorui.ColorButton({
	                    className:'edui-for-' + cmd,
	                    color:'default',
	                    title:editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd) || '',
	                    editor:editor,
	                    onpickcolor:function (t, color) {
	                        editor.execCommand(cmd, color);
	                    },
	                    onpicknocolor:function () {
	                        editor.execCommand(cmd, 'default');
	                        this.setColor('transparent');
	                        this.color = 'default';
	                    },
	                    onbuttonclick:function () {
	                        editor.execCommand(cmd, this.color);
	                    }
	                });
	                editorui.buttons[cmd] = ui;
	                editor.addListener('selectionchange', function () {
	                    ui.setDisabled(editor.queryCommandState(cmd) == -1);
	                });
	                return ui;
	            };
	        }(ci);
	    }
	
	
	    var dialogBtns = {
	        noOk:['searchreplace', 'help', 'spechars', 'webapp','preview'],
	        ok:['attachment', 'anchor', 'link', 'insertimage', 'map', 'gmap', 'insertframe', 'wordimage',
	            'insertvideo', 'insertframe', 'edittip', 'edittable', 'edittd', 'scrawl', 'template', 'music', 'background', 'charts']
	    };
	
	    for (var p in dialogBtns) {
	        (function (type, vals) {
	            for (var i = 0, ci; ci = vals[i++];) {
	                //todo opera下存在问题
	                if (browser.opera && ci === "searchreplace") {
	                    continue;
	                }
	                (function (cmd) {
	                    editorui[cmd] = function (editor, iframeUrl, title) {
	                        iframeUrl = iframeUrl || (editor.options.iframeUrlMap || {})[cmd] || iframeUrlMap[cmd];
	                        title = editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd) || '';
	
	                        var dialog;
	                        //没有iframeUrl不创建dialog
	                        if (iframeUrl) {
	                            dialog = new editorui.Dialog(utils.extend({
	                                iframeUrl:editor.ui.mapUrl(iframeUrl),
	                                editor:editor,
	                                className:'edui-for-' + cmd,
	                                title:title,
	                                holdScroll: cmd === 'insertimage',
	                                fullscreen: /charts|preview/.test(cmd),
	                                closeDialog:editor.getLang("closeDialog")
	                            }, type == 'ok' ? {
	                                buttons:[
	                                    {
	                                        className:'edui-okbutton',
	                                        label:editor.getLang("ok"),
	                                        editor:editor,
	                                        onclick:function () {
	                                            dialog.close(true);
	                                        }
	                                    },
	                                    {
	                                        className:'edui-cancelbutton',
	                                        label:editor.getLang("cancel"),
	                                        editor:editor,
	                                        onclick:function () {
	                                            dialog.close(false);
	                                        }
	                                    }
	                                ]
	                            } : {}));
	
	                            editor.ui._dialogs[cmd + "Dialog"] = dialog;
	                        }
	
	                        var ui = new editorui.Button({
	                            className:'edui-for-' + cmd,
	                            title:title,
	                            onclick:function () {
	                                if (dialog) {
	                                    switch (cmd) {
	                                        case "wordimage":
	                                            var images = editor.execCommand("wordimage");
	                                            if (images && images.length) {
	                                                dialog.render();
	                                                dialog.open();
	                                            }
	                                            break;
	                                        case "scrawl":
	                                            if (editor.queryCommandState("scrawl") != -1) {
	                                                dialog.render();
	                                                dialog.open();
	                                            }
	
	                                            break;
	                                        default:
	                                            dialog.render();
	                                            dialog.open();
	                                    }
	                                }
	                            },
	                            theme:editor.options.theme,
	                            disabled:(cmd == 'scrawl' && editor.queryCommandState("scrawl") == -1) || ( cmd == 'charts' )
	                        });
	                        editorui.buttons[cmd] = ui;
	                        editor.addListener('selectionchange', function () {
	                            //只存在于右键菜单而无工具栏按钮的ui不需要检测状态
	                            var unNeedCheckState = {'edittable':1};
	                            if (cmd in unNeedCheckState)return;
	
	                            var state = editor.queryCommandState(cmd);
	                            if (ui.getDom()) {
	                                ui.setDisabled(state == -1);
	                                ui.setChecked(state);
	                            }
	
	                        });
	
	                        return ui;
	                    };
	                })(ci.toLowerCase())
	            }
	        })(p, dialogBtns[p]);
	    }
	
	    editorui.snapscreen = function (editor, iframeUrl, title) {
	        title = editor.options.labelMap['snapscreen'] || editor.getLang("labelMap.snapscreen") || '';
	        var ui = new editorui.Button({
	            className:'edui-for-snapscreen',
	            title:title,
	            onclick:function () {
	                editor.execCommand("snapscreen");
	            },
	            theme:editor.options.theme
	
	        });
	        editorui.buttons['snapscreen'] = ui;
	        iframeUrl = iframeUrl || (editor.options.iframeUrlMap || {})["snapscreen"] || iframeUrlMap["snapscreen"];
	        if (iframeUrl) {
	            var dialog = new editorui.Dialog({
	                iframeUrl:editor.ui.mapUrl(iframeUrl),
	                editor:editor,
	                className:'edui-for-snapscreen',
	                title:title,
	                buttons:[
	                    {
	                        className:'edui-okbutton',
	                        label:editor.getLang("ok"),
	                        editor:editor,
	                        onclick:function () {
	                            dialog.close(true);
	                        }
	                    },
	                    {
	                        className:'edui-cancelbutton',
	                        label:editor.getLang("cancel"),
	                        editor:editor,
	                        onclick:function () {
	                            dialog.close(false);
	                        }
	                    }
	                ]
	
	            });
	            dialog.render();
	            editor.ui._dialogs["snapscreenDialog"] = dialog;
	        }
	        editor.addListener('selectionchange', function () {
	            ui.setDisabled(editor.queryCommandState('snapscreen') == -1);
	        });
	        return ui;
	    };
	
	    editorui.insertcode = function (editor, list, title) {
	        list = editor.options['insertcode'] || [];
	        title = editor.options.labelMap['insertcode'] || editor.getLang("labelMap.insertcode") || '';
	       // if (!list.length) return;
	        var items = [];
	        utils.each(list,function(key,val){
	            items.push({
	                label:key,
	                value:val,
	                theme:editor.options.theme,
	                renderLabelHtml:function () {
	                    return '<div class="edui-label %%-label" >' + (this.label || '') + '</div>';
	                }
	            });
	        });
	
	        var ui = new editorui.Combox({
	            editor:editor,
	            items:items,
	            onselect:function (t, index) {
	                editor.execCommand('insertcode', this.items[index].value);
	            },
	            onbuttonclick:function () {
	                this.showPopup();
	            },
	            title:title,
	            initValue:title,
	            className:'edui-for-insertcode',
	            indexByValue:function (value) {
	                if (value) {
	                    for (var i = 0, ci; ci = this.items[i]; i++) {
	                        if (ci.value.indexOf(value) != -1)
	                            return i;
	                    }
	                }
	
	                return -1;
	            }
	        });
	        editorui.buttons['insertcode'] = ui;
	        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	            if (!uiReady) {
	                var state = editor.queryCommandState('insertcode');
	                if (state == -1) {
	                    ui.setDisabled(true);
	                } else {
	                    ui.setDisabled(false);
	                    var value = editor.queryCommandValue('insertcode');
	                    if(!value){
	                        ui.setValue(title);
	                        return;
	                    }
	                    //trace:1871 ie下从源码模式切换回来时，字体会带单引号，而且会有逗号
	                    value && (value = value.replace(/['"]/g, '').split(',')[0]);
	                    ui.setValue(value);
	
	                }
	            }
	
	        });
	        return ui;
	    };
	    editorui.fontfamily = function (editor, list, title) {
	
	        list = editor.options['fontfamily'] || [];
	        title = editor.options.labelMap['fontfamily'] || editor.getLang("labelMap.fontfamily") || '';
	        if (!list.length) return;
	        for (var i = 0, ci, items = []; ci = list[i]; i++) {
	            var langLabel = editor.getLang('fontfamily')[ci.name] || "";
	            (function (key, val) {
	                items.push({
	                    label:key,
	                    value:val,
	                    theme:editor.options.theme,
	                    renderLabelHtml:function () {
	                        return '<div class="edui-label %%-label" style="font-family:' +
	                            utils.unhtml(this.value) + '">' + (this.label || '') + '</div>';
	                    }
	                });
	            })(ci.label || langLabel, ci.val)
	        }
	        var ui = new editorui.Combox({
	            editor:editor,
	            items:items,
	            onselect:function (t, index) {
	                editor.execCommand('FontFamily', this.items[index].value);
	            },
	            onbuttonclick:function () {
	                this.showPopup();
	            },
	            title:title,
	            initValue:title,
	            className:'edui-for-fontfamily',
	            indexByValue:function (value) {
	                if (value) {
	                    for (var i = 0, ci; ci = this.items[i]; i++) {
	                        if (ci.value.indexOf(value) != -1)
	                            return i;
	                    }
	                }
	
	                return -1;
	            }
	        });
	        editorui.buttons['fontfamily'] = ui;
	        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	            if (!uiReady) {
	                var state = editor.queryCommandState('FontFamily');
	                if (state == -1) {
	                    ui.setDisabled(true);
	                } else {
	                    ui.setDisabled(false);
	                    var value = editor.queryCommandValue('FontFamily');
	                    //trace:1871 ie下从源码模式切换回来时，字体会带单引号，而且会有逗号
	                    value && (value = value.replace(/['"]/g, '').split(',')[0]);
	                    ui.setValue(value);
	
	                }
	            }
	
	        });
	        return ui;
	    };
	
	    editorui.fontsize = function (editor, list, title) {
	        title = editor.options.labelMap['fontsize'] || editor.getLang("labelMap.fontsize") || '';
	        list = list || editor.options['fontsize'] || [];
	        if (!list.length) return;
	        var items = [];
	        for (var i = 0; i < list.length; i++) {
	            var size = list[i] + 'px';
	            items.push({
	                label:size,
	                value:size,
	                theme:editor.options.theme,
	                renderLabelHtml:function () {
	                    return '<div class="edui-label %%-label" style="line-height:1;font-size:' +
	                        this.value + '">' + (this.label || '') + '</div>';
	                }
	            });
	        }
	        var ui = new editorui.Combox({
	            editor:editor,
	            items:items,
	            title:title,
	            initValue:title,
	            onselect:function (t, index) {
	                editor.execCommand('FontSize', this.items[index].value);
	            },
	            onbuttonclick:function () {
	                this.showPopup();
	            },
	            className:'edui-for-fontsize'
	        });
	        editorui.buttons['fontsize'] = ui;
	        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	            if (!uiReady) {
	                var state = editor.queryCommandState('FontSize');
	                if (state == -1) {
	                    ui.setDisabled(true);
	                } else {
	                    ui.setDisabled(false);
	                    ui.setValue(editor.queryCommandValue('FontSize'));
	                }
	            }
	
	        });
	        return ui;
	    };
	
	    editorui.paragraph = function (editor, list, title) {
	        title = editor.options.labelMap['paragraph'] || editor.getLang("labelMap.paragraph") || '';
	        list = editor.options['paragraph'] || [];
	        if (utils.isEmptyObject(list)) return;
	        var items = [];
	        for (var i in list) {
	            items.push({
	                value:i,
	                label:list[i] || editor.getLang("paragraph")[i],
	                theme:editor.options.theme,
	                renderLabelHtml:function () {
	                    return '<div class="edui-label %%-label"><span class="edui-for-' + this.value + '">' + (this.label || '') + '</span></div>';
	                }
	            })
	        }
	        var ui = new editorui.Combox({
	            editor:editor,
	            items:items,
	            title:title,
	            initValue:title,
	            className:'edui-for-paragraph',
	            onselect:function (t, index) {
	                editor.execCommand('Paragraph', this.items[index].value);
	            },
	            onbuttonclick:function () {
	                this.showPopup();
	            }
	        });
	        editorui.buttons['paragraph'] = ui;
	        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	            if (!uiReady) {
	                var state = editor.queryCommandState('Paragraph');
	                if (state == -1) {
	                    ui.setDisabled(true);
	                } else {
	                    ui.setDisabled(false);
	                    var value = editor.queryCommandValue('Paragraph');
	                    var index = ui.indexByValue(value);
	                    if (index != -1) {
	                        ui.setValue(value);
	                    } else {
	                        ui.setValue(ui.initValue);
	                    }
	                }
	            }
	
	        });
	        return ui;
	    };
	
	
	    //自定义标题
	    editorui.customstyle = function (editor) {
	        var list = editor.options['customstyle'] || [],
	            title = editor.options.labelMap['customstyle'] || editor.getLang("labelMap.customstyle") || '';
	        if (!list.length)return;
	        var langCs = editor.getLang('customstyle');
	        for (var i = 0, items = [], t; t = list[i++];) {
	            (function (t) {
	                var ck = {};
	                ck.label = t.label ? t.label : langCs[t.name];
	                ck.style = t.style;
	                ck.className = t.className;
	                ck.tag = t.tag;
	                items.push({
	                    label:ck.label,
	                    value:ck,
	                    theme:editor.options.theme,
	                    renderLabelHtml:function () {
	                        return '<div class="edui-label %%-label">' + '<' + ck.tag + ' ' + (ck.className ? ' class="' + ck.className + '"' : "")
	                            + (ck.style ? ' style="' + ck.style + '"' : "") + '>' + ck.label + "<\/" + ck.tag + ">"
	                            + '</div>';
	                    }
	                });
	            })(t);
	        }
	
	        var ui = new editorui.Combox({
	            editor:editor,
	            items:items,
	            title:title,
	            initValue:title,
	            className:'edui-for-customstyle',
	            onselect:function (t, index) {
	                editor.execCommand('customstyle', this.items[index].value);
	            },
	            onbuttonclick:function () {
	                this.showPopup();
	            },
	            indexByValue:function (value) {
	                for (var i = 0, ti; ti = this.items[i++];) {
	                    if (ti.label == value) {
	                        return i - 1
	                    }
	                }
	                return -1;
	            }
	        });
	        editorui.buttons['customstyle'] = ui;
	        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	            if (!uiReady) {
	                var state = editor.queryCommandState('customstyle');
	                if (state == -1) {
	                    ui.setDisabled(true);
	                } else {
	                    ui.setDisabled(false);
	                    var value = editor.queryCommandValue('customstyle');
	                    var index = ui.indexByValue(value);
	                    if (index != -1) {
	                        ui.setValue(value);
	                    } else {
	                        ui.setValue(ui.initValue);
	                    }
	                }
	            }
	
	        });
	        return ui;
	    };
	    editorui.inserttable = function (editor, iframeUrl, title) {
	        title = editor.options.labelMap['inserttable'] || editor.getLang("labelMap.inserttable") || '';
	        var ui = new editorui.TableButton({
	            editor:editor,
	            title:title,
	            className:'edui-for-inserttable',
	            onpicktable:function (t, numCols, numRows) {
	                editor.execCommand('InsertTable', {numRows:numRows, numCols:numCols, border:1});
	            },
	            onbuttonclick:function () {
	                this.showPopup();
	            }
	        });
	        editorui.buttons['inserttable'] = ui;
	        editor.addListener('selectionchange', function () {
	            ui.setDisabled(editor.queryCommandState('inserttable') == -1);
	        });
	        return ui;
	    };
	
	    editorui.lineheight = function (editor) {
	        var val = editor.options.lineheight || [];
	        if (!val.length)return;
	        for (var i = 0, ci, items = []; ci = val[i++];) {
	            items.push({
	                //todo:写死了
	                label:ci,
	                value:ci,
	                theme:editor.options.theme,
	                onclick:function () {
	                    editor.execCommand("lineheight", this.value);
	                }
	            })
	        }
	        var ui = new editorui.MenuButton({
	            editor:editor,
	            className:'edui-for-lineheight',
	            title:editor.options.labelMap['lineheight'] || editor.getLang("labelMap.lineheight") || '',
	            items:items,
	            onbuttonclick:function () {
	                var value = editor.queryCommandValue('LineHeight') || this.value;
	                editor.execCommand("LineHeight", value);
	            }
	        });
	        editorui.buttons['lineheight'] = ui;
	        editor.addListener('selectionchange', function () {
	            var state = editor.queryCommandState('LineHeight');
	            if (state == -1) {
	                ui.setDisabled(true);
	            } else {
	                ui.setDisabled(false);
	                var value = editor.queryCommandValue('LineHeight');
	                value && ui.setValue((value + '').replace(/cm/, ''));
	                ui.setChecked(state)
	            }
	        });
	        return ui;
	    };
	
	    var rowspacings = ['top', 'bottom'];
	    for (var r = 0, ri; ri = rowspacings[r++];) {
	        (function (cmd) {
	            editorui['rowspacing' + cmd] = function (editor) {
	                var val = editor.options['rowspacing' + cmd] || [];
	                if (!val.length) return null;
	                for (var i = 0, ci, items = []; ci = val[i++];) {
	                    items.push({
	                        label:ci,
	                        value:ci,
	                        theme:editor.options.theme,
	                        onclick:function () {
	                            editor.execCommand("rowspacing", this.value, cmd);
	                        }
	                    })
	                }
	                var ui = new editorui.MenuButton({
	                    editor:editor,
	                    className:'edui-for-rowspacing' + cmd,
	                    title:editor.options.labelMap['rowspacing' + cmd] || editor.getLang("labelMap.rowspacing" + cmd) || '',
	                    items:items,
	                    onbuttonclick:function () {
	                        var value = editor.queryCommandValue('rowspacing', cmd) || this.value;
	                        editor.execCommand("rowspacing", value, cmd);
	                    }
	                });
	                editorui.buttons[cmd] = ui;
	                editor.addListener('selectionchange', function () {
	                    var state = editor.queryCommandState('rowspacing', cmd);
	                    if (state == -1) {
	                        ui.setDisabled(true);
	                    } else {
	                        ui.setDisabled(false);
	                        var value = editor.queryCommandValue('rowspacing', cmd);
	                        value && ui.setValue((value + '').replace(/%/, ''));
	                        ui.setChecked(state)
	                    }
	                });
	                return ui;
	            }
	        })(ri)
	    }
	    //有序，无序列表
	    var lists = ['insertorderedlist', 'insertunorderedlist'];
	    for (var l = 0, cl; cl = lists[l++];) {
	        (function (cmd) {
	            editorui[cmd] = function (editor) {
	                var vals = editor.options[cmd],
	                    _onMenuClick = function () {
	                        editor.execCommand(cmd, this.value);
	                    }, items = [];
	                for (var i in vals) {
	                    items.push({
	                        label:vals[i] || editor.getLang()[cmd][i] || "",
	                        value:i,
	                        theme:editor.options.theme,
	                        onclick:_onMenuClick
	                    })
	                }
	                var ui = new editorui.MenuButton({
	                    editor:editor,
	                    className:'edui-for-' + cmd,
	                    title:editor.getLang("labelMap." + cmd) || '',
	                    'items':items,
	                    onbuttonclick:function () {
	                        var value = editor.queryCommandValue(cmd) || this.value;
	                        editor.execCommand(cmd, value);
	                    }
	                });
	                editorui.buttons[cmd] = ui;
	                editor.addListener('selectionchange', function () {
	                    var state = editor.queryCommandState(cmd);
	                    if (state == -1) {
	                        ui.setDisabled(true);
	                    } else {
	                        ui.setDisabled(false);
	                        var value = editor.queryCommandValue(cmd);
	                        ui.setValue(value);
	                        ui.setChecked(state)
	                    }
	                });
	                return ui;
	            };
	        })(cl)
	    }
	
	    editorui.fullscreen = function (editor, title) {
	        title = editor.options.labelMap['fullscreen'] || editor.getLang("labelMap.fullscreen") || '';
	        var ui = new editorui.Button({
	            className:'edui-for-fullscreen',
	            title:title,
	            theme:editor.options.theme,
	            onclick:function () {
	                if (editor.ui) {
	                    editor.ui.setFullScreen(!editor.ui.isFullScreen());
	                }
	                this.setChecked(editor.ui.isFullScreen());
	            }
	        });
	        editorui.buttons['fullscreen'] = ui;
	        editor.addListener('selectionchange', function () {
	            var state = editor.queryCommandState('fullscreen');
	            ui.setDisabled(state == -1);
	            ui.setChecked(editor.ui.isFullScreen());
	        });
	        return ui;
	    };
	
	    // 表情
	    editorui["emotion"] = function (editor, iframeUrl) {
	        var cmd = "emotion";
	        var ui = new editorui.MultiMenuPop({
	            title:editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd + "") || '',
	            editor:editor,
	            className:'edui-for-' + cmd,
	            iframeUrl:editor.ui.mapUrl(iframeUrl || (editor.options.iframeUrlMap || {})[cmd] || iframeUrlMap[cmd])
	        });
	        editorui.buttons[cmd] = ui;
	
	        editor.addListener('selectionchange', function () {
	            ui.setDisabled(editor.queryCommandState(cmd) == -1)
	        });
	        return ui;
	    };
	
	    editorui.autotypeset = function (editor) {
	        var ui = new editorui.AutoTypeSetButton({
	            editor:editor,
	            title:editor.options.labelMap['autotypeset'] || editor.getLang("labelMap.autotypeset") || '',
	            className:'edui-for-autotypeset',
	            onbuttonclick:function () {
	                editor.execCommand('autotypeset')
	            }
	        });
	        editorui.buttons['autotypeset'] = ui;
	        editor.addListener('selectionchange', function () {
	            ui.setDisabled(editor.queryCommandState('autotypeset') == -1);
	        });
	        return ui;
	    };
	
	    /* 简单上传插件 */
	    editorui["simpleupload"] = function (editor) {
	        var name = 'simpleupload',
	            ui = new editorui.Button({
	                className:'edui-for-' + name,
	                title:editor.options.labelMap[name] || editor.getLang("labelMap." + name) || '',
	                onclick:function () {},
	                theme:editor.options.theme,
	                showText:false
	            });
	        editorui.buttons[name] = ui;
	        editor.addListener('ready', function() {
	            var b = ui.getDom('body'),
	                iconSpan = b.children[0];
	            editor.fireEvent('simpleuploadbtnready', iconSpan);
	        });
	        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	            var state = editor.queryCommandState(name);
	            if (state == -1) {
	                ui.setDisabled(true);
	                ui.setChecked(false);
	            } else {
	                if (!uiReady) {
	                    ui.setDisabled(false);
	                    ui.setChecked(state);
	                }
	            }
	        });
	        return ui;
	    };
	
	})();
	
	
	// adapter/editor.js
	///import core
	///commands 全屏
	///commandsName FullScreen
	///commandsTitle  全屏
	(function () {
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        UIBase = baidu.editor.ui.UIBase,
	        domUtils = baidu.editor.dom.domUtils;
	    var nodeStack = [];
	
	    function EditorUI(options) {
	        this.initOptions(options);
	        this.initEditorUI();
	    }
	
	    EditorUI.prototype = {
	        uiName:'editor',
	        initEditorUI:function () {
	            this.editor.ui = this;
	            this._dialogs = {};
	            this.initUIBase();
	            this._initToolbars();
	            var editor = this.editor,
	                me = this;
	
	            editor.addListener('ready', function () {
	                //提供getDialog方法
	                editor.getDialog = function (name) {
	                    return editor.ui._dialogs[name + "Dialog"];
	                };
	                domUtils.on(editor.window, 'scroll', function (evt) {
	                    baidu.editor.ui.Popup.postHide(evt);
	                });
	                //提供编辑器实时宽高(全屏时宽高不变化)
	                editor.ui._actualFrameWidth = editor.options.initialFrameWidth;
	
	                UE.browser.ie && UE.browser.version === 6 && editor.container.ownerDocument.execCommand("BackgroundImageCache", false, true);
	
	                //display bottom-bar label based on config
	                if (editor.options.elementPathEnabled) {
	                    editor.ui.getDom('elementpath').innerHTML = '<div class="edui-editor-breadcrumb">' + editor.getLang("elementPathTip") + ':</div>';
	                }
	                if (editor.options.wordCount) {
	                    function countFn() {
	                        setCount(editor,me);
	                        domUtils.un(editor.document, "click", arguments.callee);
	                    }
	                    domUtils.on(editor.document, "click", countFn);
	                    editor.ui.getDom('wordcount').innerHTML = editor.getLang("wordCountTip");
	                }
	                editor.ui._scale();
	                if (editor.options.scaleEnabled) {
	                    if (editor.autoHeightEnabled) {
	                        editor.disableAutoHeight();
	                    }
	                    me.enableScale();
	                } else {
	                    me.disableScale();
	                }
	                if (!editor.options.elementPathEnabled && !editor.options.wordCount && !editor.options.scaleEnabled) {
	                    editor.ui.getDom('elementpath').style.display = "none";
	                    editor.ui.getDom('wordcount').style.display = "none";
	                    editor.ui.getDom('scale').style.display = "none";
	                }
	
	                if (!editor.selection.isFocus())return;
	                editor.fireEvent('selectionchange', false, true);
	
	
	            });
	
	            editor.addListener('mousedown', function (t, evt) {
	                var el = evt.target || evt.srcElement;
	                baidu.editor.ui.Popup.postHide(evt, el);
	                baidu.editor.ui.ShortCutMenu.postHide(evt);
	
	            });
	            editor.addListener("delcells", function () {
	                if (UE.ui['edittip']) {
	                    new UE.ui['edittip'](editor);
	                }
	                editor.getDialog('edittip').open();
	            });
	
	            var pastePop, isPaste = false, timer;
	            editor.addListener("afterpaste", function () {
	                if(editor.queryCommandState('pasteplain'))
	                    return;
	                if(baidu.editor.ui.PastePicker){
	                    pastePop = new baidu.editor.ui.Popup({
	                        content:new baidu.editor.ui.PastePicker({editor:editor}),
	                        editor:editor,
	                        className:'edui-wordpastepop'
	                    });
	                    pastePop.render();
	                }
	                isPaste = true;
	            });
	
	            editor.addListener("afterinserthtml", function () {
	                clearTimeout(timer);
	                timer = setTimeout(function () {
	                    if (pastePop && (isPaste || editor.ui._isTransfer)) {
	                        if(pastePop.isHidden()){
	                            var span = domUtils.createElement(editor.document, 'span', {
	                                    'style':"line-height:0px;",
	                                    'innerHTML':'\ufeff'
	                                }),
	                                range = editor.selection.getRange();
	                            range.insertNode(span);
	                            var tmp= getDomNode(span, 'firstChild', 'previousSibling');
	                            tmp && pastePop.showAnchor(tmp.nodeType == 3 ? tmp.parentNode : tmp);
	                            domUtils.remove(span);
	                        }else{
	                            pastePop.show();
	                        }
	                        delete editor.ui._isTransfer;
	                        isPaste = false;
	                    }
	                }, 200)
	            });
	            editor.addListener('contextmenu', function (t, evt) {
	                baidu.editor.ui.Popup.postHide(evt);
	            });
	            editor.addListener('keydown', function (t, evt) {
	                if (pastePop)    pastePop.dispose(evt);
	                var keyCode = evt.keyCode || evt.which;
	                if(evt.altKey&&keyCode==90){
	                    UE.ui.buttons['fullscreen'].onclick();
	                }
	            });
	            editor.addListener('wordcount', function (type) {
	                setCount(this,me);
	            });
	            function setCount(editor,ui) {
	                editor.setOpt({
	                    wordCount:true,
	                    maximumWords:10000,
	                    wordCountMsg:editor.options.wordCountMsg || editor.getLang("wordCountMsg"),
	                    wordOverFlowMsg:editor.options.wordOverFlowMsg || editor.getLang("wordOverFlowMsg")
	                });
	                var opt = editor.options,
	                    max = opt.maximumWords,
	                    msg = opt.wordCountMsg ,
	                    errMsg = opt.wordOverFlowMsg,
	                    countDom = ui.getDom('wordcount');
	                if (!opt.wordCount) {
	                    return;
	                }
	                var count = editor.getContentLength(true);
	                if (count > max) {
	                    countDom.innerHTML = errMsg;
	                    editor.fireEvent("wordcountoverflow");
	                } else {
	                    countDom.innerHTML = msg.replace("{#leave}", max - count).replace("{#count}", count);
	                }
	            }
	
	            editor.addListener('selectionchange', function () {
	                if (editor.options.elementPathEnabled) {
	                    me[(editor.queryCommandState('elementpath') == -1 ? 'dis' : 'en') + 'ableElementPath']()
	                }
	                if (editor.options.scaleEnabled) {
	                    me[(editor.queryCommandState('scale') == -1 ? 'dis' : 'en') + 'ableScale']();
	
	                }
	            });
	            var popup = new baidu.editor.ui.Popup({
	                editor:editor,
	                content:'',
	                className:'edui-bubble',
	                _onEditButtonClick:function () {
	                    this.hide();
	                    editor.ui._dialogs.linkDialog.open();
	                },
	                _onImgEditButtonClick:function (name) {
	                    this.hide();
	                    editor.ui._dialogs[name] && editor.ui._dialogs[name].open();
	
	                },
	                _onImgSetFloat:function (value) {
	                    this.hide();
	                    editor.execCommand("imagefloat", value);
	
	                },
	                _setIframeAlign:function (value) {
	                    var frame = popup.anchorEl;
	                    var newFrame = frame.cloneNode(true);
	                    switch (value) {
	                        case -2:
	                            newFrame.setAttribute("align", "");
	                            break;
	                        case -1:
	                            newFrame.setAttribute("align", "left");
	                            break;
	                        case 1:
	                            newFrame.setAttribute("align", "right");
	                            break;
	                    }
	                    frame.parentNode.insertBefore(newFrame, frame);
	                    domUtils.remove(frame);
	                    popup.anchorEl = newFrame;
	                    popup.showAnchor(popup.anchorEl);
	                },
	                _updateIframe:function () {
	                    var frame = editor._iframe = popup.anchorEl;
	                    if(domUtils.hasClass(frame, 'ueditor_baidumap')) {
	                        editor.selection.getRange().selectNode(frame).select();
	                        editor.ui._dialogs.mapDialog.open();
	                        popup.hide();
	                    } else {
	                        editor.ui._dialogs.insertframeDialog.open();
	                        popup.hide();
	                    }
	                },
	                _onRemoveButtonClick:function (cmdName) {
	                    editor.execCommand(cmdName);
	                    this.hide();
	                },
	                queryAutoHide:function (el) {
	                    if (el && el.ownerDocument == editor.document) {
	                        if (el.tagName.toLowerCase() == 'img' || domUtils.findParentByTagName(el, 'a', true)) {
	                            return el !== popup.anchorEl;
	                        }
	                    }
	                    return baidu.editor.ui.Popup.prototype.queryAutoHide.call(this, el);
	                }
	            });
	            popup.render();
	            if (editor.options.imagePopup) {
	                editor.addListener('mouseover', function (t, evt) {
	                    evt = evt || window.event;
	                    var el = evt.target || evt.srcElement;
	                    if (editor.ui._dialogs.insertframeDialog && /iframe/ig.test(el.tagName)) {
	                        var html = popup.formatHtml(
	                            '<nobr>' + editor.getLang("property") + ': <span onclick=$$._setIframeAlign(-2) class="edui-clickable">' + editor.getLang("default") + '</span>&nbsp;&nbsp;<span onclick=$$._setIframeAlign(-1) class="edui-clickable">' + editor.getLang("justifyleft") + '</span>&nbsp;&nbsp;<span onclick=$$._setIframeAlign(1) class="edui-clickable">' + editor.getLang("justifyright") + '</span>&nbsp;&nbsp;' +
	                                ' <span onclick="$$._updateIframe( this);" class="edui-clickable">' + editor.getLang("modify") + '</span></nobr>');
	                        if (html) {
	                            popup.getDom('content').innerHTML = html;
	                            popup.anchorEl = el;
	                            popup.showAnchor(popup.anchorEl);
	                        } else {
	                            popup.hide();
	                        }
	                    }
	                });
	                editor.addListener('selectionchange', function (t, causeByUi) {
	                    if (!causeByUi) return;
	                    var html = '', str = "",
	                        img = editor.selection.getRange().getClosedNode(),
	                        dialogs = editor.ui._dialogs;
	                    if (img && img.tagName == 'IMG') {
	                        var dialogName = 'insertimageDialog';
	                        if (img.className.indexOf("edui-faked-video") != -1 || img.className.indexOf("edui-upload-video") != -1) {
	                            dialogName = "insertvideoDialog"
	                        }
	                        if (img.className.indexOf("edui-faked-webapp") != -1) {
	                            dialogName = "webappDialog"
	                        }
	                        if (img.src.indexOf("http://api.map.baidu.com") != -1) {
	                            dialogName = "mapDialog"
	                        }
	                        if (img.className.indexOf("edui-faked-music") != -1) {
	                            dialogName = "musicDialog"
	                        }
	                        if (img.src.indexOf("http://maps.google.com/maps/api/staticmap") != -1) {
	                            dialogName = "gmapDialog"
	                        }
	                        if (img.getAttribute("anchorname")) {
	                            dialogName = "anchorDialog";
	                            html = popup.formatHtml(
	                                '<nobr>' + editor.getLang("property") + ': <span onclick=$$._onImgEditButtonClick("anchorDialog") class="edui-clickable">' + editor.getLang("modify") + '</span>&nbsp;&nbsp;' +
	                                    '<span onclick=$$._onRemoveButtonClick(\'anchor\') class="edui-clickable">' + editor.getLang("delete") + '</span></nobr>');
	                        }
	                        if (img.getAttribute("word_img")) {
	                            //todo 放到dialog去做查询
	                            editor.word_img = [img.getAttribute("word_img")];
	                            dialogName = "wordimageDialog"
	                        }
	                        if(domUtils.hasClass(img, 'loadingclass') || domUtils.hasClass(img, 'loaderrorclass')) {
	                            dialogName = "";
	                        }
	                        if (!dialogs[dialogName]) {
	                            return;
	                        }
	                        str = '<nobr>' + editor.getLang("property") + ': '+
	                            '<span onclick=$$._onImgSetFloat("none") class="edui-clickable">' + editor.getLang("default") + '</span>&nbsp;&nbsp;' +
	                            '<span onclick=$$._onImgSetFloat("left") class="edui-clickable">' + editor.getLang("justifyleft") + '</span>&nbsp;&nbsp;' +
	                            '<span onclick=$$._onImgSetFloat("right") class="edui-clickable">' + editor.getLang("justifyright") + '</span>&nbsp;&nbsp;' +
	                            '<span onclick=$$._onImgSetFloat("center") class="edui-clickable">' + editor.getLang("justifycenter") + '</span>&nbsp;&nbsp;'+
	                            '<span onclick="$$._onImgEditButtonClick(\'' + dialogName + '\');" class="edui-clickable">' + editor.getLang("modify") + '</span></nobr>';
	
	                        !html && (html = popup.formatHtml(str))
	
	                    }
	                    if (editor.ui._dialogs.linkDialog) {
	                        var link = editor.queryCommandValue('link');
	                        var url;
	                        if (link && (url = (link.getAttribute('_href') || link.getAttribute('href', 2)))) {
	                            var txt = url;
	                            if (url.length > 30) {
	                                txt = url.substring(0, 20) + "...";
	                            }
	                            if (html) {
	                                html += '<div style="height:5px;"></div>'
	                            }
	                            html += popup.formatHtml(
	                                '<nobr>' + editor.getLang("anthorMsg") + ': <a target="_blank" href="' + url + '" title="' + url + '" >' + txt + '</a>' +
	                                    ' <span class="edui-clickable" onclick="$$._onEditButtonClick();">' + editor.getLang("modify") + '</span>' +
	                                    ' <span class="edui-clickable" onclick="$$._onRemoveButtonClick(\'unlink\');"> ' + editor.getLang("clear") + '</span></nobr>');
	                            popup.showAnchor(link);
	                        }
	                    }
	
	                    if (html) {
	                        popup.getDom('content').innerHTML = html;
	                        popup.anchorEl = img || link;
	                        popup.showAnchor(popup.anchorEl);
	                    } else {
	                        popup.hide();
	                    }
	                });
	            }
	
	        },
	        _initToolbars:function () {
	            var editor = this.editor;
	            var toolbars = this.toolbars || [];
	            var toolbarUis = [];
	            for (var i = 0; i < toolbars.length; i++) {
	                var toolbar = toolbars[i];
	                var toolbarUi = new baidu.editor.ui.Toolbar({theme:editor.options.theme});
	                for (var j = 0; j < toolbar.length; j++) {
	                    var toolbarItem = toolbar[j];
	                    var toolbarItemUi = null;
	                    if (typeof toolbarItem == 'string') {
	                        toolbarItem = toolbarItem.toLowerCase();
	                        if (toolbarItem == '|') {
	                            toolbarItem = 'Separator';
	                        }
	                        if(toolbarItem == '||'){
	                            toolbarItem = 'Breakline';
	                        }
	                        if (baidu.editor.ui[toolbarItem]) {
	                            toolbarItemUi = new baidu.editor.ui[toolbarItem](editor);
	                        }
	
	                        //fullscreen这里单独处理一下，放到首行去
	                        if (toolbarItem == 'fullscreen') {
	                            if (toolbarUis && toolbarUis[0]) {
	                                toolbarUis[0].items.splice(0, 0, toolbarItemUi);
	                            } else {
	                                toolbarItemUi && toolbarUi.items.splice(0, 0, toolbarItemUi);
	                            }
	
	                            continue;
	
	
	                        }
	                    } else {
	                        toolbarItemUi = toolbarItem;
	                    }
	                    if (toolbarItemUi && toolbarItemUi.id) {
	
	                        toolbarUi.add(toolbarItemUi);
	                    }
	                }
	                toolbarUis[i] = toolbarUi;
	            }
	
	            //接受外部定制的UI
	
	            utils.each(UE._customizeUI,function(obj,key){
	                var itemUI,index;
	                if(obj.id && obj.id != editor.key){
	                   return false;
	                }
	                itemUI = obj.execFn.call(editor,editor,key);
	                if(itemUI){
	                    index = obj.index;
	                    if(index === undefined){
	                        index = toolbarUi.items.length;
	                    }
	                    toolbarUi.add(itemUI,index)
	                }
	            });
	
	            this.toolbars = toolbarUis;
	        },
	        getHtmlTpl:function () {
	            return '<div id="##" class="%%">' +
	                '<div id="##_toolbarbox" class="%%-toolbarbox">' +
	                (this.toolbars.length ?
	                    '<div id="##_toolbarboxouter" class="%%-toolbarboxouter"><div class="%%-toolbarboxinner">' +
	                        this.renderToolbarBoxHtml() +
	                        '</div></div>' : '') +
	                '<div id="##_toolbarmsg" class="%%-toolbarmsg" style="display:none;">' +
	                '<div id = "##_upload_dialog" class="%%-toolbarmsg-upload" onclick="$$.showWordImageDialog();">' + this.editor.getLang("clickToUpload") + '</div>' +
	                '<div class="%%-toolbarmsg-close" onclick="$$.hideToolbarMsg();">x</div>' +
	                '<div id="##_toolbarmsg_label" class="%%-toolbarmsg-label"></div>' +
	                '<div style="height:0;overflow:hidden;clear:both;"></div>' +
	                '</div>' +
	                '<div id="##_message_holder" class="%%-messageholder"></div>' +
	                '</div>' +
	                '<div id="##_iframeholder" class="%%-iframeholder">' +
	                '</div>' +
	                //modify wdcount by matao
	                '<div id="##_bottombar" class="%%-bottomContainer"><table><tr>' +
	                '<td id="##_elementpath" class="%%-bottombar"></td>' +
	                '<td id="##_wordcount" class="%%-wordcount"></td>' +
	                '<td id="##_scale" class="%%-scale"><div class="%%-icon"></div></td>' +
	                '</tr></table></div>' +
	                '<div id="##_scalelayer"></div>' +
	                '</div>';
	        },
	        showWordImageDialog:function () {
	            this._dialogs['wordimageDialog'].open();
	        },
	        renderToolbarBoxHtml:function () {
	            var buff = [];
	            for (var i = 0; i < this.toolbars.length; i++) {
	                buff.push(this.toolbars[i].renderHtml());
	            }
	            return buff.join('');
	        },
	        setFullScreen:function (fullscreen) {
	
	            var editor = this.editor,
	                container = editor.container.parentNode.parentNode;
	            if (this._fullscreen != fullscreen) {
	                this._fullscreen = fullscreen;
	                this.editor.fireEvent('beforefullscreenchange', fullscreen);
	                if (baidu.editor.browser.gecko) {
	                    var bk = editor.selection.getRange().createBookmark();
	                }
	                if (fullscreen) {
	                    while (container.tagName != "BODY") {
	                        var position = baidu.editor.dom.domUtils.getComputedStyle(container, "position");
	                        nodeStack.push(position);
	                        container.style.position = "static";
	                        container = container.parentNode;
	                    }
	                    this._bakHtmlOverflow = document.documentElement.style.overflow;
	                    this._bakBodyOverflow = document.body.style.overflow;
	                    this._bakAutoHeight = this.editor.autoHeightEnabled;
	                    this._bakScrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);
	
	                    this._bakEditorContaninerWidth = editor.iframe.parentNode.offsetWidth;
	                    if (this._bakAutoHeight) {
	                        //当全屏时不能执行自动长高
	                        editor.autoHeightEnabled = false;
	                        this.editor.disableAutoHeight();
	                    }
	
	                    document.documentElement.style.overflow = 'hidden';
	                    //修复，滚动条不收起的问题
	
	                    window.scrollTo(0,window.scrollY);
	                    this._bakCssText = this.getDom().style.cssText;
	                    this._bakCssText1 = this.getDom('iframeholder').style.cssText;
	                    editor.iframe.parentNode.style.width = '';
	                    this._updateFullScreen();
	                } else {
	                    while (container.tagName != "BODY") {
	                        container.style.position = nodeStack.shift();
	                        container = container.parentNode;
	                    }
	                    this.getDom().style.cssText = this._bakCssText;
	                    this.getDom('iframeholder').style.cssText = this._bakCssText1;
	                    if (this._bakAutoHeight) {
	                        editor.autoHeightEnabled = true;
	                        this.editor.enableAutoHeight();
	                    }
	
	                    document.documentElement.style.overflow = this._bakHtmlOverflow;
	                    document.body.style.overflow = this._bakBodyOverflow;
	                    editor.iframe.parentNode.style.width = this._bakEditorContaninerWidth + 'px';
	                    window.scrollTo(0, this._bakScrollTop);
	                }
	                if (browser.gecko && editor.body.contentEditable === 'true') {
	                    var input = document.createElement('input');
	                    document.body.appendChild(input);
	                    editor.body.contentEditable = false;
	                    setTimeout(function () {
	                        input.focus();
	                        setTimeout(function () {
	                            editor.body.contentEditable = true;
	                            editor.fireEvent('fullscreenchanged', fullscreen);
	                            editor.selection.getRange().moveToBookmark(bk).select(true);
	                            baidu.editor.dom.domUtils.remove(input);
	                            fullscreen && window.scroll(0, 0);
	                        }, 0)
	                    }, 0)
	                }
	
	                if(editor.body.contentEditable === 'true'){
	                    this.editor.fireEvent('fullscreenchanged', fullscreen);
	                    this.triggerLayout();
	                }
	
	            }
	        },
	        _updateFullScreen:function () {
	            if (this._fullscreen) {
	                var vpRect = uiUtils.getViewportRect();
	                this.getDom().style.cssText = 'border:0;position:absolute;left:0;top:' + (this.editor.options.topOffset || 0) + 'px;width:' + vpRect.width + 'px;height:' + vpRect.height + 'px;z-index:' + (this.getDom().style.zIndex * 1 + 100);
	                uiUtils.setViewportOffset(this.getDom(), { left:0, top:this.editor.options.topOffset || 0 });
	                this.editor.setHeight(vpRect.height - this.getDom('toolbarbox').offsetHeight - this.getDom('bottombar').offsetHeight - (this.editor.options.topOffset || 0),true);
	                //不手动调一下，会导致全屏失效
	                if(browser.gecko){
	                    try{
	                        window.onresize();
	                    }catch(e){
	
	                    }
	
	                }
	            }
	        },
	        _updateElementPath:function () {
	            var bottom = this.getDom('elementpath'), list;
	            if (this.elementPathEnabled && (list = this.editor.queryCommandValue('elementpath'))) {
	
	                var buff = [];
	                for (var i = 0, ci; ci = list[i]; i++) {
	                    buff[i] = this.formatHtml('<span unselectable="on" onclick="$$.editor.execCommand(&quot;elementpath&quot;, &quot;' + i + '&quot;);">' + ci + '</span>');
	                }
	                bottom.innerHTML = '<div class="edui-editor-breadcrumb" onmousedown="return false;">' + this.editor.getLang("elementPathTip") + ': ' + buff.join(' &gt; ') + '</div>';
	
	            } else {
	                bottom.style.display = 'none'
	            }
	        },
	        disableElementPath:function () {
	            var bottom = this.getDom('elementpath');
	            bottom.innerHTML = '';
	            bottom.style.display = 'none';
	            this.elementPathEnabled = false;
	
	        },
	        enableElementPath:function () {
	            var bottom = this.getDom('elementpath');
	            bottom.style.display = '';
	            this.elementPathEnabled = true;
	            this._updateElementPath();
	        },
	        _scale:function () {
	            var doc = document,
	                editor = this.editor,
	                editorHolder = editor.container,
	                editorDocument = editor.document,
	                toolbarBox = this.getDom("toolbarbox"),
	                bottombar = this.getDom("bottombar"),
	                scale = this.getDom("scale"),
	                scalelayer = this.getDom("scalelayer");
	
	            var isMouseMove = false,
	                position = null,
	                minEditorHeight = 0,
	                minEditorWidth = editor.options.minFrameWidth,
	                pageX = 0,
	                pageY = 0,
	                scaleWidth = 0,
	                scaleHeight = 0;
	
	            function down() {
	                position = domUtils.getXY(editorHolder);
	
	                if (!minEditorHeight) {
	                    minEditorHeight = editor.options.minFrameHeight + toolbarBox.offsetHeight + bottombar.offsetHeight;
	                }
	
	                scalelayer.style.cssText = "position:absolute;left:0;display:;top:0;background-color:#41ABFF;opacity:0.4;filter: Alpha(opacity=40);width:" + editorHolder.offsetWidth + "px;height:"
	                    + editorHolder.offsetHeight + "px;z-index:" + (editor.options.zIndex + 1);
	
	                domUtils.on(doc, "mousemove", move);
	                domUtils.on(editorDocument, "mouseup", up);
	                domUtils.on(doc, "mouseup", up);
	            }
	
	            var me = this;
	            //by xuheng 全屏时关掉缩放
	            this.editor.addListener('fullscreenchanged', function (e, fullScreen) {
	                if (fullScreen) {
	                    me.disableScale();
	
	                } else {
	                    if (me.editor.options.scaleEnabled) {
	                        me.enableScale();
	                        var tmpNode = me.editor.document.createElement('span');
	                        me.editor.body.appendChild(tmpNode);
	                        me.editor.body.style.height = Math.max(domUtils.getXY(tmpNode).y, me.editor.iframe.offsetHeight - 20) + 'px';
	                        domUtils.remove(tmpNode)
	                    }
	                }
	            });
	            function move(event) {
	                clearSelection();
	                var e = event || window.event;
	                pageX = e.pageX || (doc.documentElement.scrollLeft + e.clientX);
	                pageY = e.pageY || (doc.documentElement.scrollTop + e.clientY);
	                scaleWidth = pageX - position.x;
	                scaleHeight = pageY - position.y;
	
	                if (scaleWidth >= minEditorWidth) {
	                    isMouseMove = true;
	                    scalelayer.style.width = scaleWidth + 'px';
	                }
	                if (scaleHeight >= minEditorHeight) {
	                    isMouseMove = true;
	                    scalelayer.style.height = scaleHeight + "px";
	                }
	            }
	
	            function up() {
	                if (isMouseMove) {
	                    isMouseMove = false;
	                    editor.ui._actualFrameWidth = scalelayer.offsetWidth - 2;
	                    editorHolder.style.width = editor.ui._actualFrameWidth + 'px';
	
	                    editor.setHeight(scalelayer.offsetHeight - bottombar.offsetHeight - toolbarBox.offsetHeight - 2,true);
	                }
	                if (scalelayer) {
	                    scalelayer.style.display = "none";
	                }
	                clearSelection();
	                domUtils.un(doc, "mousemove", move);
	                domUtils.un(editorDocument, "mouseup", up);
	                domUtils.un(doc, "mouseup", up);
	            }
	
	            function clearSelection() {
	                if (browser.ie)
	                    doc.selection.clear();
	                else
	                    window.getSelection().removeAllRanges();
	            }
	
	            this.enableScale = function () {
	                //trace:2868
	                if (editor.queryCommandState("source") == 1)    return;
	                scale.style.display = "";
	                this.scaleEnabled = true;
	                domUtils.on(scale, "mousedown", down);
	            };
	            this.disableScale = function () {
	                scale.style.display = "none";
	                this.scaleEnabled = false;
	                domUtils.un(scale, "mousedown", down);
	            };
	        },
	        isFullScreen:function () {
	            return this._fullscreen;
	        },
	        postRender:function () {
	            UIBase.prototype.postRender.call(this);
	            for (var i = 0; i < this.toolbars.length; i++) {
	                this.toolbars[i].postRender();
	            }
	            var me = this;
	            var timerId,
	                domUtils = baidu.editor.dom.domUtils,
	                updateFullScreenTime = function () {
	                    clearTimeout(timerId);
	                    timerId = setTimeout(function () {
	                        me._updateFullScreen();
	                    });
	                };
	            domUtils.on(window, 'resize', updateFullScreenTime);
	
	            me.addListener('destroy', function () {
	                domUtils.un(window, 'resize', updateFullScreenTime);
	                clearTimeout(timerId);
	            })
	        },
	        showToolbarMsg:function (msg, flag) {
	            this.getDom('toolbarmsg_label').innerHTML = msg;
	            this.getDom('toolbarmsg').style.display = '';
	            //
	            if (!flag) {
	                var w = this.getDom('upload_dialog');
	                w.style.display = 'none';
	            }
	        },
	        hideToolbarMsg:function () {
	            this.getDom('toolbarmsg').style.display = 'none';
	        },
	        mapUrl:function (url) {
	            return url ? url.replace('~/', this.editor.options.UEDITOR_HOME_URL || '') : ''
	        },
	        triggerLayout:function () {
	            var dom = this.getDom();
	            if (dom.style.zoom == '1') {
	                dom.style.zoom = '100%';
	            } else {
	                dom.style.zoom = '1';
	            }
	        }
	    };
	    utils.inherits(EditorUI, baidu.editor.ui.UIBase);
	
	
	    var instances = {};
	
	
	    UE.ui.Editor = function (options) {
	        var editor = new UE.Editor(options);
	        editor.options.editor = editor;
	        utils.loadFile(document, {
	            href:editor.options.themePath + editor.options.theme + "/css/ueditor.css",
	            tag:"link",
	            type:"text/css",
	            rel:"stylesheet"
	        });
	
	        var oldRender = editor.render;
	        editor.render = function (holder) {
	            if (holder.constructor === String) {
	                editor.key = holder;
	                instances[holder] = editor;
	            }
	            utils.domReady(function () {
	                editor.langIsReady ? renderUI() : editor.addListener("langReady", renderUI);
	                function renderUI() {
	                    editor.setOpt({
	                        labelMap:editor.options.labelMap || editor.getLang('labelMap')
	                    });
	                    new EditorUI(editor.options);
	                    if (holder) {
	                        if (holder.constructor === String) {
	                            holder = document.getElementById(holder);
	                        }
	                        holder && holder.getAttribute('name') && ( editor.options.textarea = holder.getAttribute('name'));
	                        if (holder && /script|textarea/ig.test(holder.tagName)) {
	                            var newDiv = document.createElement('div');
	                            holder.parentNode.insertBefore(newDiv, holder);
	                            var cont = holder.value || holder.innerHTML;
	                            editor.options.initialContent = /^[\t\r\n ]*$/.test(cont) ? editor.options.initialContent :
	                                cont.replace(/>[\n\r\t]+([ ]{4})+/g, '>')
	                                    .replace(/[\n\r\t]+([ ]{4})+</g, '<')
	                                    .replace(/>[\n\r\t]+</g, '><');
	                            holder.className && (newDiv.className = holder.className);
	                            holder.style.cssText && (newDiv.style.cssText = holder.style.cssText);
	                            if (/textarea/i.test(holder.tagName)) {
	                                editor.textarea = holder;
	                                editor.textarea.style.display = 'none';
	
	
	                            } else {
	                                holder.parentNode.removeChild(holder);
	
	
	                            }
	                            if(holder.id){
	                                newDiv.id = holder.id;
	                                domUtils.removeAttributes(holder,'id');
	                            }
	                            holder = newDiv;
	                            holder.innerHTML = '';
	                        }
	
	                    }
	                    domUtils.addClass(holder, "edui-" + editor.options.theme);
	                    editor.ui.render(holder);
	                    var opt = editor.options;
	                    //给实例添加一个编辑器的容器引用
	                    editor.container = editor.ui.getDom();
	                    var parents = domUtils.findParents(holder,true);
	                    var displays = [];
	                    for(var i = 0 ,ci;ci=parents[i];i++){
	                        displays[i] = ci.style.display;
	                        ci.style.display = 'block'
	                    }
	                    if (opt.initialFrameWidth) {
	                        opt.minFrameWidth = opt.initialFrameWidth;
	                    } else {
	                        opt.minFrameWidth = opt.initialFrameWidth = holder.offsetWidth;
	                        var styleWidth = holder.style.width;
	                        if(/%$/.test(styleWidth)) {
	                            opt.initialFrameWidth = styleWidth;
	                        }
	                    }
	                    if (opt.initialFrameHeight) {
	                        opt.minFrameHeight = opt.initialFrameHeight;
	                    } else {
	                        opt.initialFrameHeight = opt.minFrameHeight = holder.offsetHeight;
	                    }
	                    for(var i = 0 ,ci;ci=parents[i];i++){
	                        ci.style.display =  displays[i]
	                    }
	                    //编辑器最外容器设置了高度，会导致，编辑器不占位
	                    //todo 先去掉，没有找到原因
	                    if(holder.style.height){
	                        holder.style.height = ''
	                    }
	                    editor.container.style.width = opt.initialFrameWidth + (/%$/.test(opt.initialFrameWidth) ? '' : 'px');
	                    editor.container.style.zIndex = opt.zIndex;
	                    oldRender.call(editor, editor.ui.getDom('iframeholder'));
	                    editor.fireEvent("afteruiready");
	                }
	            })
	        };
	        return editor;
	    };
	
	
	    /**
	     * @file
	     * @name UE
	     * @short UE
	     * @desc UEditor的顶部命名空间
	     */
	    /**
	     * @name getEditor
	     * @since 1.2.4+
	     * @grammar UE.getEditor(id,[opt])  =>  Editor实例
	     * @desc 提供一个全局的方法得到编辑器实例
	     *
	     * * ''id''  放置编辑器的容器id, 如果容器下的编辑器已经存在，就直接返回
	     * * ''opt'' 编辑器的可选参数
	     * @example
	     *  UE.getEditor('containerId',{onready:function(){//创建一个编辑器实例
	     *      this.setContent('hello')
	     *  }});
	     *  UE.getEditor('containerId'); //返回刚创建的实例
	     *
	     */
	    UE.getEditor = function (id, opt) {
	        var editor = instances[id];
	        if (!editor) {
	            editor = instances[id] = new UE.ui.Editor(opt);
	            editor.render(id);
	        }
	        return editor;
	    };
	
	
	    UE.delEditor = function (id) {
	        var editor;
	        if (editor = instances[id]) {
	            editor.key && editor.destroy();
	            delete instances[id]
	        }
	    };
	
	    UE.registerUI = function(uiName,fn,index,editorId){
	        utils.each(uiName.split(/\s+/), function (name) {
	            UE._customizeUI[name] = {
	                id : editorId,
	                execFn:fn,
	                index:index
	            };
	        })
	
	    }
	
	})();
	
	// adapter/message.js
	UE.registerUI('message', function(editor) {
	
	    var editorui = baidu.editor.ui;
	    var Message = editorui.Message;
	    var holder;
	    var _messageItems = [];
	    var me = editor;
	
	    me.addListener('ready', function(){
	        holder = document.getElementById(me.ui.id + '_message_holder');
	        updateHolderPos();
	        setTimeout(function(){
	            updateHolderPos();
	        }, 500);
	    });
	
	    me.addListener('showmessage', function(type, opt){
	        opt = utils.isString(opt) ? {
	            'content': opt
	        } : opt;
	        var message = new Message({
	                'timeout': opt.timeout,
	                'type': opt.type,
	                'content': opt.content,
	                'keepshow': opt.keepshow,
	                'editor': me
	            }),
	            mid = opt.id || ('msg_' + (+new Date()).toString(36));
	        message.render(holder);
	        _messageItems[mid] = message;
	        message.reset(opt);
	        updateHolderPos();
	        return mid;
	    });
	
	    me.addListener('updatemessage',function(type, id, opt){
	        opt = utils.isString(opt) ? {
	            'content': opt
	        } : opt;
	        var message = _messageItems[id];
	        message.render(holder);
	        message && message.reset(opt);
	    });
	
	    me.addListener('hidemessage',function(type, id){
	        var message = _messageItems[id];
	        message && message.hide();
	    });
	
	    function updateHolderPos(){
	        var toolbarbox = me.ui.getDom('toolbarbox');
	        if (toolbarbox) {
	            holder.style.top = toolbarbox.offsetHeight + 3 + 'px';
	        }
	        holder.style.zIndex = Math.max(me.options.zIndex, me.iframe.style.zIndex) + 1;
	    }
	
	});
	
	
	// adapter/autosave.js
	UE.registerUI('autosave', function(editor) {
	    var timer = null,uid = null;
	    editor.on('afterautosave',function(){
	        clearTimeout(timer);
	
	        timer = setTimeout(function(){
	            if(uid){
	                editor.trigger('hidemessage',uid);
	            }
	            uid = editor.trigger('showmessage',{
	                content : editor.getLang('autosave.success'),
	                timeout : 2000
	            });
	
	        },2000)
	    })
	
	});
	
	
	
	})();


/***/ },
/* 37 */
/***/ function(module, exports) {

	/**
	 * Created with JetBrains PhpStorm.
	 * User: taoqili
	 * Date: 12-6-12
	 * Time: 下午5:02
	 * To change this template use File | Settings | File Templates.
	 */
	UE.I18N['zh-cn'] = {
	    'labelMap':{
	        'anchor':'锚点', 'undo':'撤销', 'redo':'重做', 'bold':'加粗', 'indent':'首行缩进', 'snapscreen':'截图',
	        'italic':'斜体', 'underline':'下划线', 'strikethrough':'删除线', 'subscript':'下标','fontborder':'字符边框',
	        'superscript':'上标', 'formatmatch':'格式刷', 'source':'源代码', 'blockquote':'引用',
	        'pasteplain':'纯文本粘贴模式', 'selectall':'全选', 'print':'打印', 'preview':'预览',
	        'horizontal':'分隔线', 'removeformat':'清除格式', 'time':'时间', 'date':'日期',
	        'unlink':'取消链接', 'insertrow':'前插入行', 'insertcol':'前插入列', 'mergeright':'右合并单元格', 'mergedown':'下合并单元格',
	        'deleterow':'删除行', 'deletecol':'删除列', 'splittorows':'拆分成行',
	        'splittocols':'拆分成列', 'splittocells':'完全拆分单元格','deletecaption':'删除表格标题','inserttitle':'插入标题',
	        'mergecells':'合并多个单元格', 'deletetable':'删除表格', 'cleardoc':'清空文档','insertparagraphbeforetable':"表格前插入行",'insertcode':'代码语言',
	        'fontfamily':'字体', 'fontsize':'字号', 'paragraph':'段落格式', 'simpleupload':'单图上传', 'insertimage':'多图上传','edittable':'表格属性','edittd':'单元格属性', 'link':'超链接',
	        'emotion':'表情', 'spechars':'特殊字符', 'searchreplace':'查询替换', 'map':'Baidu地图', 'gmap':'Google地图',
	        'insertvideo':'视频', 'help':'帮助', 'justifyleft':'居左对齐', 'justifyright':'居右对齐', 'justifycenter':'居中对齐',
	        'justifyjustify':'两端对齐', 'forecolor':'字体颜色', 'backcolor':'背景色', 'insertorderedlist':'有序列表',
	        'insertunorderedlist':'无序列表', 'fullscreen':'全屏', 'directionalityltr':'从左向右输入', 'directionalityrtl':'从右向左输入',
	        'rowspacingtop':'段前距', 'rowspacingbottom':'段后距',  'pagebreak':'分页', 'insertframe':'插入Iframe', 'imagenone':'默认',
	        'imageleft':'左浮动', 'imageright':'右浮动', 'attachment':'附件', 'imagecenter':'居中', 'wordimage':'图片转存',
	        'lineheight':'行间距','edittip' :'编辑提示','customstyle':'自定义标题', 'autotypeset':'自动排版',
	        'webapp':'百度应用','touppercase':'字母大写', 'tolowercase':'字母小写','background':'背景','template':'模板','scrawl':'涂鸦',
	        'music':'音乐','inserttable':'插入表格','drafts': '从草稿箱加载', 'charts': '图表'
	    },
	    'insertorderedlist':{
	        'num':'1,2,3...',
	        'num1':'1),2),3)...',
	        'num2':'(1),(2),(3)...',
	        'cn':'一,二,三....',
	        'cn1':'一),二),三)....',
	        'cn2':'(一),(二),(三)....',
	        'decimal':'1,2,3...',
	        'lower-alpha':'a,b,c...',
	        'lower-roman':'i,ii,iii...',
	        'upper-alpha':'A,B,C...',
	        'upper-roman':'I,II,III...'
	    },
	    'insertunorderedlist':{
	        'circle':'○ 大圆圈',
	        'disc':'● 小黑点',
	        'square':'■ 小方块 ',
	        'dash' :'— 破折号',
	        'dot':' 。 小圆圈'
	    },
	    'paragraph':{'p':'段落', 'h1':'标题 1', 'h2':'标题 2', 'h3':'标题 3', 'h4':'标题 4', 'h5':'标题 5', 'h6':'标题 6'},
	    'fontfamily':{
	        'songti':'宋体',
	        'kaiti':'楷体',
	        'heiti':'黑体',
	        'lishu':'隶书',
	        'yahei':'微软雅黑',
	        'andaleMono':'andale mono',
	        'arial': 'arial',
	        'arialBlack':'arial black',
	        'comicSansMs':'comic sans ms',
	        'impact':'impact',
	        'timesNewRoman':'times new roman'
	    },
	    'customstyle':{
	        'tc':'标题居中',
	        'tl':'标题居左',
	        'im':'强调',
	        'hi':'明显强调'
	    },
	    'autoupload': {
	        'exceedSizeError': '文件大小超出限制',
	        'exceedTypeError': '文件格式不允许',
	        'jsonEncodeError': '服务器返回格式错误',
	        'loading':"正在上传...",
	        'loadError':"上传错误",
	        'errorLoadConfig': '后端配置项没有正常加载，上传插件不能正常使用！'
	    },
	    'simpleupload':{
	        'exceedSizeError': '文件大小超出限制',
	        'exceedTypeError': '文件格式不允许',
	        'jsonEncodeError': '服务器返回格式错误',
	        'loading':"正在上传...",
	        'loadError':"上传错误",
	        'errorLoadConfig': '后端配置项没有正常加载，上传插件不能正常使用！'
	    },
	    'elementPathTip':"元素路径",
	    'wordCountTip':"字数统计",
	    'wordCountMsg':'当前已输入{#count}个字符, 您还可以输入{#leave}个字符。 ',
	    'wordOverFlowMsg':'<span style="color:red;">字数超出最大允许值，服务器可能拒绝保存！</span>',
	    'ok':"确认",
	    'cancel':"取消",
	    'closeDialog':"关闭对话框",
	    'tableDrag':"表格拖动必须引入uiUtils.js文件！",
	    'autofloatMsg':"工具栏浮动依赖编辑器UI，您首先需要引入UI文件!",
	    'loadconfigError': '获取后台配置项请求出错，上传功能将不能正常使用！',
	    'loadconfigFormatError': '后台配置项返回格式出错，上传功能将不能正常使用！',
	    'loadconfigHttpError': '请求后台配置项http错误，上传功能将不能正常使用！',
	    'snapScreen_plugin':{
	        'browserMsg':"仅支持IE浏览器！",
	        'callBackErrorMsg':"服务器返回数据有误，请检查配置项之后重试。",
	        'uploadErrorMsg':"截图上传失败，请检查服务器端环境! "
	    },
	    'insertcode':{
	        'as3':'ActionScript 3',
	        'bash':'Bash/Shell',
	        'cpp':'C/C++',
	        'css':'CSS',
	        'cf':'ColdFusion',
	        'c#':'C#',
	        'delphi':'Delphi',
	        'diff':'Diff',
	        'erlang':'Erlang',
	        'groovy':'Groovy',
	        'html':'HTML',
	        'java':'Java',
	        'jfx':'JavaFX',
	        'js':'JavaScript',
	        'pl':'Perl',
	        'php':'PHP',
	        'plain':'Plain Text',
	        'ps':'PowerShell',
	        'python':'Python',
	        'ruby':'Ruby',
	        'scala':'Scala',
	        'sql':'SQL',
	        'vb':'Visual Basic',
	        'xml':'XML'
	    },
	    'confirmClear':"确定清空当前文档么？",
	    'contextMenu':{
	        'delete':"删除",
	        'selectall':"全选",
	        'deletecode':"删除代码",
	        'cleardoc':"清空文档",
	        'confirmclear':"确定清空当前文档么？",
	        'unlink':"删除超链接",
	        'paragraph':"段落格式",
	        'edittable':"表格属性",
	        'aligntd':"单元格对齐方式",
	        'aligntable':'表格对齐方式',
	        'tableleft':'左浮动',
	        'tablecenter':'居中显示',
	        'tableright':'右浮动',
	        'edittd':"单元格属性",
	        'setbordervisible':'设置表格边线可见',
	        'justifyleft':'左对齐',
	        'justifyright':'右对齐',
	        'justifycenter':'居中对齐',
	        'justifyjustify':'两端对齐',
	        'table':"表格",
	        'inserttable':'插入表格',
	        'deletetable':"删除表格",
	        'insertparagraphbefore':"前插入段落",
	        'insertparagraphafter':'后插入段落',
	        'deleterow':"删除当前行",
	        'deletecol':"删除当前列",
	        'insertrow':"前插入行",
	        'insertcol':"左插入列",
	        'insertrownext':'后插入行',
	        'insertcolnext':'右插入列',
	        'insertcaption':'插入表格名称',
	        'deletecaption':'删除表格名称',
	        'inserttitle':'插入表格标题行',
	        'deletetitle':'删除表格标题行',
	        'inserttitlecol':'插入表格标题列',
	        'deletetitlecol':'删除表格标题列',
	        'averageDiseRow':'平均分布各行',
	        'averageDisCol':'平均分布各列',
	        'mergeright':"向右合并",
	        'mergeleft':"向左合并",
	        'mergedown':"向下合并",
	        'mergecells':"合并单元格",
	        'splittocells':"完全拆分单元格",
	        'splittocols':"拆分成列",
	        'splittorows':"拆分成行",
	        'tablesort':'表格排序',
	        'enablesort':'设置表格可排序',
	        'disablesort':'取消表格可排序',
	        'reversecurrent':'逆序当前',
	        'orderbyasc':'按ASCII字符升序',
	        'reversebyasc':'按ASCII字符降序',
	        'orderbynum':'按数值大小升序',
	        'reversebynum':'按数值大小降序',
	        'borderbk':'边框底纹',
	        'setcolor':'表格隔行变色',
	        'unsetcolor':'取消表格隔行变色',
	        'setbackground':'选区背景隔行',
	        'unsetbackground':'取消选区背景',
	        'redandblue':'红蓝相间',
	        'threecolorgradient':'三色渐变',
	        'copy':"复制(Ctrl + c)",
	        'copymsg': "浏览器不支持,请使用 'Ctrl + c'",
	        'paste':"粘贴(Ctrl + v)",
	         'pastemsg': "浏览器不支持,请使用 'Ctrl + v'"
	    },
	    'copymsg': "浏览器不支持,请使用 'Ctrl + c'",
	    'pastemsg': "浏览器不支持,请使用 'Ctrl + v'",
	    'anthorMsg':"链接",
	    'clearColor':'清空颜色',
	    'standardColor':'标准颜色',
	    'themeColor':'主题颜色',
	    'property':'属性',
	    'default':'默认',
	    'modify':'修改',
	    'justifyleft':'左对齐',
	    'justifyright':'右对齐',
	    'justifycenter':'居中',
	    'justify':'默认',
	    'clear':'清除',
	    'anchorMsg':'锚点',
	    'delete':'删除',
	    'clickToUpload':"点击上传",
	    'unset':'尚未设置语言文件',
	    't_row':'行',
	    't_col':'列',
	    'more':'更多',
	    'pasteOpt':'粘贴选项',
	    'pasteSourceFormat':"保留源格式",
	    'tagFormat':'只保留标签',
	    'pasteTextFormat':'只保留文本',
	    'autoTypeSet':{
	        'mergeLine':"合并空行",
	        'delLine':"清除空行",
	        'removeFormat':"清除格式",
	        'indent':"首行缩进",
	        'alignment':"对齐方式",
	        'imageFloat':"图片浮动",
	        'removeFontsize':"清除字号",
	        'removeFontFamily':"清除字体",
	        'removeHtml':"清除冗余HTML代码",
	        'pasteFilter':"粘贴过滤",
	        'run':"执行",
	        'symbol':'符号转换',
	        'bdc2sb':'全角转半角',
	        'tobdc':'半角转全角'
	    },
	
	    'background':{
	        'static':{
	            'lang_background_normal':'背景设置',
	            'lang_background_local':'在线图片',
	            'lang_background_set':'选项',
	            'lang_background_none':'无背景色',
	            'lang_background_colored':'有背景色',
	            'lang_background_color':'颜色设置',
	            'lang_background_netimg':'网络图片',
	            'lang_background_align':'对齐方式',
	            'lang_background_position':'精确定位',
	            'repeatType':{'options':["居中", "横向重复", "纵向重复", "平铺","自定义"]}
	
	        },
	        'noUploadImage':"当前未上传过任何图片！",
	        'toggleSelect':"单击可切换选中状态\n原图尺寸: "
	    },
	    //===============dialog i18N=======================
	    'insertimage':{
	        'static':{
	            'lang_tab_remote':"插入图片", //节点
	            'lang_tab_upload':"本地上传",
	            'lang_tab_online':"在线管理",
	            'lang_tab_search':"图片搜索",
	            'lang_input_url':"地 址：",
	            'lang_input_size':"大 小：",
	            'lang_input_width':"宽度",
	            'lang_input_height':"高度",
	            'lang_input_border':"边 框：",
	            'lang_input_vhspace':"边 距：",
	            'lang_input_title':"描 述：",
	            'lang_input_align':'图片浮动方式：',
	            'lang_imgLoading':"　图片加载中……",
	            'lang_start_upload':"开始上传",
	            'lock':{'title':"锁定宽高比例"}, //属性
	            'searchType':{'title':"图片类型", 'options':["新闻", "壁纸", "表情", "头像"]}, //select的option
	            'searchTxt':{'value':"请输入搜索关键词"},
	            'searchBtn':{'value':"百度一下"},
	            'searchReset':{'value':"清空搜索"},
	            'noneAlign':{'title':'无浮动'},
	            'leftAlign':{'title':'左浮动'},
	            'rightAlign':{'title':'右浮动'},
	            'centerAlign':{'title':'居中独占一行'}
	        },
	        'uploadSelectFile':'点击选择图片',
	        'uploadAddFile':'继续添加',
	        'uploadStart':'开始上传',
	        'uploadPause':'暂停上传',
	        'uploadContinue':'继续上传',
	        'uploadRetry':'重试上传',
	        'uploadDelete':'删除',
	        'uploadTurnLeft':'向左旋转',
	        'uploadTurnRight':'向右旋转',
	        'uploadPreview':'预览中',
	        'uploadNoPreview':'不能预览',
	        'updateStatusReady': '选中_张图片，共_KB。',
	        'updateStatusConfirm': '已成功上传_张照片，_张照片上传失败',
	        'updateStatusFinish': '共_张（_KB），_张上传成功',
	        'updateStatusError': '，_张上传失败。',
	        'errorNotSupport': 'WebUploader 不支持您的浏览器！如果你使用的是IE浏览器，请尝试升级 flash 播放器。',
	        'errorLoadConfig': '后端配置项没有正常加载，上传插件不能正常使用！',
	        'errorExceedSize':'文件大小超出',
	        'errorFileType':'文件格式不允许',
	        'errorInterrupt':'文件传输中断',
	        'errorUploadRetry':'上传失败，请重试',
	        'errorHttp':'http请求错误',
	        'errorServerUpload':'服务器返回出错',
	        'remoteLockError':"宽高不正确,不能所定比例",
	        'numError':"请输入正确的长度或者宽度值！例如：123，400",
	        'imageUrlError':"不允许的图片格式或者图片域！",
	        'imageLoadError':"图片加载失败！请检查链接地址或网络状态！",
	        'searchRemind':"请输入搜索关键词",
	        'searchLoading':"图片加载中，请稍后……",
	        'searchRetry':" :( ，抱歉，没有找到图片！请重试一次！"
	    },
	    'attachment':{
	        'static':{
	            'lang_tab_upload': '上传附件',
	            'lang_tab_online': '在线附件',
	            'lang_start_upload':"开始上传",
	            'lang_drop_remind':"可以将文件拖到这里，单次最多可选100个文件"
	        },
	        'uploadSelectFile':'点击选择文件',
	        'uploadAddFile':'继续添加',
	        'uploadStart':'开始上传',
	        'uploadPause':'暂停上传',
	        'uploadContinue':'继续上传',
	        'uploadRetry':'重试上传',
	        'uploadDelete':'删除',
	        'uploadTurnLeft':'向左旋转',
	        'uploadTurnRight':'向右旋转',
	        'uploadPreview':'预览中',
	        'updateStatusReady': '选中_个文件，共_KB。',
	        'updateStatusConfirm': '已成功上传_个文件，_个文件上传失败',
	        'updateStatusFinish': '共_个（_KB），_个上传成功',
	        'updateStatusError': '，_张上传失败。',
	        'errorNotSupport': 'WebUploader 不支持您的浏览器！如果你使用的是IE浏览器，请尝试升级 flash 播放器。',
	        'errorLoadConfig': '后端配置项没有正常加载，上传插件不能正常使用！',
	        'errorExceedSize':'文件大小超出',
	        'errorFileType':'文件格式不允许',
	        'errorInterrupt':'文件传输中断',
	        'errorUploadRetry':'上传失败，请重试',
	        'errorHttp':'http请求错误',
	        'errorServerUpload':'服务器返回出错'
	    },
	    'insertvideo':{
	        'static':{
	            'lang_tab_insertV':"插入视频",
	            'lang_tab_searchV':"搜索视频",
	            'lang_tab_uploadV':"上传视频",
	            'lang_video_url':"视频网址",
	            'lang_video_size':"视频尺寸",
	            'lang_videoW':"宽度",
	            'lang_videoH':"高度",
	            'lang_alignment':"对齐方式",
	            'videoSearchTxt':{'value':"请输入搜索关键字！"},
	            'videoType':{'options':["全部", "热门", "娱乐", "搞笑", "体育", "科技", "综艺"]},
	            'videoSearchBtn':{'value':"百度一下"},
	            'videoSearchReset':{'value':"清空结果"},
	
	            'lang_input_fileStatus':' 当前未上传文件',
	            'startUpload':{'style':"background:url(upload.png) no-repeat;"},
	
	            'lang_upload_size':"视频尺寸",
	            'lang_upload_width':"宽度",
	            'lang_upload_height':"高度",
	            'lang_upload_alignment':"对齐方式",
	            'lang_format_advice':"建议使用mp4格式."
	
	        },
	        'numError':"请输入正确的数值，如123,400",
	        'floatLeft':"左浮动",
	        'floatRight':"右浮动",
	        '"default"':"默认",
	        'block':"独占一行",
	        'urlError':"输入的视频地址有误，请检查后再试！",
	        'loading':" &nbsp;视频加载中，请等待……",
	        'clickToSelect':"点击选中",
	        'goToSource':'访问源视频',
	        'noVideo':" &nbsp; &nbsp;抱歉，找不到对应的视频，请重试！",
	
	        'browseFiles':'浏览文件',
	        'uploadSuccess':'上传成功!',
	        'delSuccessFile':'从成功队列中移除',
	        'delFailSaveFile':'移除保存失败文件',
	        'statusPrompt':' 个文件已上传！ ',
	        'flashVersionError':'当前Flash版本过低，请更新FlashPlayer后重试！',
	        'flashLoadingError':'Flash加载失败!请检查路径或网络状态',
	        'fileUploadReady':'等待上传……',
	        'delUploadQueue':'从上传队列中移除',
	        'limitPrompt1':'单次不能选择超过',
	        'limitPrompt2':'个文件！请重新选择！',
	        'delFailFile':'移除失败文件',
	        'fileSizeLimit':'文件大小超出限制！',
	        'emptyFile':'空文件无法上传！',
	        'fileTypeError':'文件类型不允许！',
	        'unknownError':'未知错误！',
	        'fileUploading':'上传中，请等待……',
	        'cancelUpload':'取消上传',
	        'netError':'网络错误',
	        'failUpload':'上传失败!',
	        'serverIOError':'服务器IO错误！',
	        'noAuthority':'无权限！',
	        'fileNumLimit':'上传个数限制',
	        'failCheck':'验证失败，本次上传被跳过！',
	        'fileCanceling':'取消中，请等待……',
	        'stopUploading':'上传已停止……',
	
	        'uploadSelectFile':'点击选择文件',
	        'uploadAddFile':'继续添加',
	        'uploadStart':'开始上传',
	        'uploadPause':'暂停上传',
	        'uploadContinue':'继续上传',
	        'uploadRetry':'重试上传',
	        'uploadDelete':'删除',
	        'uploadTurnLeft':'向左旋转',
	        'uploadTurnRight':'向右旋转',
	        'uploadPreview':'预览中',
	        'updateStatusReady': '选中_个文件，共_KB。',
	        'updateStatusConfirm': '成功上传_个，_个失败',
	        'updateStatusFinish': '共_个(_KB)，_个成功上传',
	        'updateStatusError': '，_张上传失败。',
	        'errorNotSupport': 'WebUploader 不支持您的浏览器！如果你使用的是IE浏览器，请尝试升级 flash 播放器。',
	        'errorLoadConfig': '后端配置项没有正常加载，上传插件不能正常使用！',
	        'errorExceedSize':'文件大小超出',
	        'errorFileType':'文件格式不允许',
	        'errorInterrupt':'文件传输中断',
	        'errorUploadRetry':'上传失败，请重试',
	        'errorHttp':'http请求错误',
	        'errorServerUpload':'服务器返回出错'
	    },
	    'webapp':{
	        'tip1':"本功能由百度APP提供，如看到此页面，请各位站长首先申请百度APPKey!",
	        'tip2':"申请完成之后请至ueditor.config.js中配置获得的appkey! ",
	        'applyFor':"点此申请",
	        'anthorApi':"百度API"
	    },
	    'template':{
	        'static':{
	            'lang_template_bkcolor':'背景颜色',
	            'lang_template_clear' : '保留原有内容',
	            'lang_template_select' : '选择模板'
	        },
	        'blank':"空白文档",
	        'blog':"博客文章",
	        'resume':"个人简历",
	        'richText':"图文混排",
	        'sciPapers':"科技论文"
	
	
	    },
	    'scrawl':{
	        'static':{
	            'lang_input_previousStep':"上一步",
	            'lang_input_nextsStep':"下一步",
	            'lang_input_clear':'清空',
	            'lang_input_addPic':'添加背景',
	            'lang_input_ScalePic':'缩放背景',
	            'lang_input_removePic':'删除背景',
	            'J_imgTxt':{title:'添加背景图片'}
	        },
	        'noScarwl':"尚未作画，白纸一张~",
	        'scrawlUpLoading':"涂鸦上传中,别急哦~",
	        'continueBtn':"继续",
	        'imageError':"糟糕，图片读取失败了！",
	        'backgroundUploading':'背景图片上传中,别急哦~'
	    },
	    'music':{
	        'static':{
	            'lang_input_tips':"输入歌手/歌曲/专辑，搜索您感兴趣的音乐！",
	            'J_searchBtn':{value:'搜索歌曲'}
	        },
	        'emptyTxt':'未搜索到相关音乐结果，请换一个关键词试试。',
	        'chapter':'歌曲',
	        'singer':'歌手',
	        'special':'专辑',
	        'listenTest':'试听'
	    },
	    'anchor':{
	        'static':{
	            'lang_input_anchorName':'锚点名字：'
	        }
	    },
	    'charts':{
	        'static':{
	            'lang_data_source':'数据源：',
	            'lang_chart_format': '图表格式：',
	            'lang_data_align': '数据对齐方式',
	            'lang_chart_align_same': '数据源与图表X轴Y轴一致',
	            'lang_chart_align_reverse': '数据源与图表X轴Y轴相反',
	            'lang_chart_title': '图表标题',
	            'lang_chart_main_title': '主标题：',
	            'lang_chart_sub_title': '子标题：',
	            'lang_chart_x_title': 'X轴标题：',
	            'lang_chart_y_title': 'Y轴标题：',
	            'lang_chart_tip': '提示文字',
	            'lang_cahrt_tip_prefix': '提示文字前缀：',
	            'lang_cahrt_tip_description': '仅饼图有效， 当鼠标移动到饼图中相应的块上时，提示框内的文字的前缀',
	            'lang_chart_data_unit': '数据单位',
	            'lang_chart_data_unit_title': '单位：',
	            'lang_chart_data_unit_description': '显示在每个数据点上的数据的单位， 比如： 温度的单位 ℃',
	            'lang_chart_type': '图表类型：',
	            'lang_prev_btn': '上一个',
	            'lang_next_btn': '下一个'
	        }
	    },
	    'emotion':{
	        'static':{
	            'lang_input_choice':'精选',
	            'lang_input_Tuzki':'兔斯基',
	            'lang_input_BOBO':'BOBO',
	            'lang_input_lvdouwa':'绿豆蛙',
	            'lang_input_babyCat':'baby猫',
	            'lang_input_bubble':'泡泡',
	            'lang_input_youa':'有啊'
	        }
	    },
	    'gmap':{
	        'static':{
	            'lang_input_address':'地址',
	            'lang_input_search':'搜索',
	            'address':{value:"北京"}
	        },
	        searchError:'无法定位到该地址!'
	    },
	    'help':{
	        'static':{
	            'lang_input_about':'关于UEditor',
	            'lang_input_shortcuts':'快捷键',
	            'lang_input_introduction':'UEditor是由百度web前端研发部开发的所见即所得富文本web编辑器，具有轻量，可定制，注重用户体验等特点。开源基于BSD协议，允许自由使用和修改代码。',
	            'lang_Txt_shortcuts':'快捷键',
	            'lang_Txt_func':'功能',
	            'lang_Txt_bold':'给选中字设置为加粗',
	            'lang_Txt_copy':'复制选中内容',
	            'lang_Txt_cut':'剪切选中内容',
	            'lang_Txt_Paste':'粘贴',
	            'lang_Txt_undo':'重新执行上次操作',
	            'lang_Txt_redo':'撤销上一次操作',
	            'lang_Txt_italic':'给选中字设置为斜体',
	            'lang_Txt_underline':'给选中字加下划线',
	            'lang_Txt_selectAll':'全部选中',
	            'lang_Txt_visualEnter':'软回车',
	            'lang_Txt_fullscreen':'全屏'
	        }
	    },
	    'insertframe':{
	        'static':{
	            'lang_input_address':'地址：',
	            'lang_input_width':'宽度：',
	            'lang_input_height':'高度：',
	            'lang_input_isScroll':'允许滚动条：',
	            'lang_input_frameborder':'显示框架边框：',
	            'lang_input_alignMode':'对齐方式：',
	            'align':{title:"对齐方式", options:["默认", "左对齐", "右对齐", "居中"]}
	        },
	        'enterAddress':'请输入地址!'
	    },
	    'link':{
	        'static':{
	            'lang_input_text':'文本内容：',
	            'lang_input_url':'链接地址：',
	            'lang_input_title':'标题：',
	            'lang_input_target':'是否在新窗口打开：'
	        },
	        'validLink':'只支持选中一个链接时生效',
	        'httpPrompt':'您输入的超链接中不包含http等协议名称，默认将为您添加http://前缀'
	    },
	    'map':{
	        'static':{
	            lang_city:"城市",
	            lang_address:"地址",
	            city:{value:"北京"},
	            lang_search:"搜索",
	            lang_dynamicmap:"插入动态地图"
	        },
	        cityMsg:"请选择城市",
	        errorMsg:"抱歉，找不到该位置！"
	    },
	    'searchreplace':{
	        'static':{
	            lang_tab_search:"查找",
	            lang_tab_replace:"替换",
	            lang_search1:"查找",
	            lang_search2:"查找",
	            lang_replace:"替换",
	            lang_searchReg:'支持正则表达式，添加前后斜杠标示为正则表达式，例如“/表达式/”',
	            lang_searchReg1:'支持正则表达式，添加前后斜杠标示为正则表达式，例如“/表达式/”',
	            lang_case_sensitive1:"区分大小写",
	            lang_case_sensitive2:"区分大小写",
	            nextFindBtn:{value:"下一个"},
	            preFindBtn:{value:"上一个"},
	            nextReplaceBtn:{value:"下一个"},
	            preReplaceBtn:{value:"上一个"},
	            repalceBtn:{value:"替换"},
	            repalceAllBtn:{value:"全部替换"}
	        },
	        getEnd:"已经搜索到文章末尾！",
	        getStart:"已经搜索到文章头部",
	        countMsg:"总共替换了{#count}处！"
	    },
	    'snapscreen':{
	        'static':{
	            lang_showMsg:"截图功能需要首先安装UEditor截图插件！ ",
	            lang_download:"点此下载",
	            lang_step1:"第一步，下载UEditor截图插件并运行安装。",
	            lang_step2:"第二步，插件安装完成后即可使用，如不生效，请重启浏览器后再试！"
	        }
	    },
	    'spechars':{
	        'static':{},
	        tsfh:"特殊字符",
	        lmsz:"罗马字符",
	        szfh:"数学字符",
	        rwfh:"日文字符",
	        xlzm:"希腊字母",
	        ewzm:"俄文字符",
	        pyzm:"拼音字母",
	        yyyb:"英语音标",
	        zyzf:"其他"
	    },
	    'edittable':{
	        'static':{
	            'lang_tableStyle':'表格样式',
	            'lang_insertCaption':'添加表格名称行',
	            'lang_insertTitle':'添加表格标题行',
	            'lang_insertTitleCol':'添加表格标题列',
	            'lang_orderbycontent':"使表格内容可排序",
	            'lang_tableSize':'自动调整表格尺寸',
	            'lang_autoSizeContent':'按表格文字自适应',
	            'lang_autoSizePage':'按页面宽度自适应',
	            'lang_example':'示例',
	            'lang_borderStyle':'表格边框',
	            'lang_color':'颜色:'
	        },
	        captionName:'表格名称',
	        titleName:'标题',
	        cellsName:'内容',
	        errorMsg:'有合并单元格，不可排序'
	    },
	    'edittip':{
	        'static':{
	            lang_delRow:'删除整行',
	            lang_delCol:'删除整列'
	        }
	    },
	    'edittd':{
	        'static':{
	            lang_tdBkColor:'背景颜色:'
	        }
	    },
	    'formula':{
	        'static':{
	        }
	    },
	    'wordimage':{
	        'static':{
	            lang_resave:"转存步骤",
	            uploadBtn:{src:"upload.png",alt:"上传"},
	            clipboard:{style:"background: url(copy.png) -153px -1px no-repeat;"},
	            lang_step:"1、点击顶部复制按钮，将地址复制到剪贴板；2、点击添加照片按钮，在弹出的对话框中使用Ctrl+V粘贴地址；3、点击打开后选择图片上传流程。"
	        },
	        'fileType':"图片",
	        'flashError':"FLASH初始化失败，请检查FLASH插件是否正确安装！",
	        'netError':"网络连接错误，请重试！",
	        'copySuccess':"图片地址已经复制！",
	        'flashI18n':{} //留空默认中文
	    },
	    'autosave': {
	        'saving':'保存中...',
	        'success':'本地保存成功'
	    }
	};


/***/ },
/* 38 */
/***/ function(module, exports) {

	module.exports = "// removed by extract-text-webpack-plugin"

/***/ },
/* 39 */
/***/ function(module, exports) {

	module.exports = "// removed by extract-text-webpack-plugin"

/***/ },
/* 40 */
/***/ function(module, exports) {

	module.exports = "<div class=\"attribute-wrap\">\r\n    <ul class=\"attribute-tab\">\r\n        <li ms-click=\"@showPanel('attribute-default')\">外观</li>\r\n        <li ms-if=\"@moduleSet.moduleTitle !== null\" ms-click=\"@showPanel('attribute-default-title')\">标题栏</li>\r\n        <li ms-if=\"@moduleSet.moduleContent !== null\" ms-click=\"@showPanel('attribute-default-content')\">内容区</li>\r\n        <li ms-click=\"@showPanel('attribute-advanced')\">高级设置</li>\r\n    </ul>\r\n    <!--外观-->\r\n    <div class=\"attribute-default\">\r\n        <div class=\"attribute-title\">默认状态</div>\r\n        <div class=\"attribute-content\">\r\n            <!--字体-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">文字:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"outword\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.beforeHover,@moduleSet.outLook.beforeHover],[@defaultObj.outLook.beforeHover.fontSize,@defaultObj.outLook.beforeHover.fontFamily],['fontSize','fontFamily'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"outword\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">字号:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.beforeHover.fontSize\">\r\n                            <option value=\"12\">12px</option>\r\n                            <option value=\"13\">13px</option>\r\n                            <option value=\"14\">14px</option>\r\n                            <option value=\"15\">15px</option>\r\n                            <option value=\"16\">16px</option>\r\n                            <option value=\"17\">17px</option>\r\n                            <option value=\"18\">18px</option>\r\n                            <option value=\"19\">19px</option>\r\n                            <option value=\"20\">20px</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">字体:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.beforeHover.fontFamily\">\r\n                            <option value=\"SimSun\">宋体</option>\r\n                            <option value=\"PMingLiU\">新细明体</option>\r\n                            <option value=\"FangSong_GB2312\">仿宋_GB2312</option>\r\n                            <option value=\"微软雅黑\">微软雅黑</option>\r\n                            <option value=\"隶书\">隶书</option>\r\n                            <option value=\"幼圆\">幼圆</option>\r\n                            <option value=\"STKaiti\">华文楷体</option>\r\n                            <option value=\"方正舒体\">方正舒体</option>\r\n                            <option value=\"华文彩云\">华文彩云</option>\r\n                            <option value=\"华文行楷\">华文行楷</option>\r\n                            <option value=\"华文宋体\">华文宋体</option>\r\n                            <option value=\"Arial\">Arial</option>\r\n                            <option value=\"Tahoma\">Tahoma</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--宽高-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">宽高:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"widhei\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.styles,@moduleSet.outLook.styles],[@defaultObj.outLook.styles.width,@defaultObj.outLook.styles.height],['width','height'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"widhei\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">宽度:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.outLook.styles.width\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.outLook.styles.height\">\r\n                        像素\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--外边距-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">外边距:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"outmargin\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.styles,@moduleSet.outLook.styles,@moduleSet.outLook.styles,@moduleSet.outLook.styles],[@defaultObj.outLook.styles.marginTop,@defaultObj.outLook.styles.marginBottom,@defaultObj.outLook.styles.marginLeft,@defaultObj.outLook.styles.marginRight],['marginTop','marginBottom','marginLeft','marginRight'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"outmargin\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">上:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.outLook.styles.marginTop\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">下:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.outLook.styles.marginBottom\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">左:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.outLook.styles.marginLeft\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">右:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.outLook.styles.marginRight\">\r\n                        像素\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--内边距-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">内边距:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"innerpadding\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.styles,@moduleSet.outLook.styles,@moduleSet.outLook.styles,@moduleSet.outLook.styles],[@defaultObj.outLook.styles.paddingTop,@defaultObj.outLook.styles.paddingBottom,@defaultObj.outLook.styles.paddingLeft,@defaultObj.outLook.styles.paddingRight],['paddingTop','paddingBottom','paddingLeft','paddingRight'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"innerpadding\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">上:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.outLook.styles.paddingTop\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">下:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.outLook.styles.paddingBottom\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">左:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.outLook.styles.paddingLeft\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">右:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.outLook.styles.paddingRight\">\r\n                        像素\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--背景-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">背景:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"background\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.beforeHover,@moduleSet.outLook.beforeHover,@moduleSet.outLook.beforeHover,@moduleSet.outLook.beforeHover],[@defaultObj.outLook.beforeHover.backgroundColor,@defaultObj.outLook.beforeHover.backgroundImage,@defaultObj.outLook.beforeHover.backgroundPosition,@defaultObj.outLook.beforeHover.backgroundRepeat],['backgroundColor','backgroundImage','backgroundPosition','backgroundRepeat'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"background\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"background\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <p class=\"attribute-remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\" valName=\"moduleSet.outLook.beforeHover.backgroundColor\"\r\n                               ms-duplex=\"@moduleSet.outLook.beforeHover.backgroundColor\">\r\n                        <button ms-click=\"@setFliter\">取消背景</button>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景图片:</span>\r\n                        <input type=\"text\" disabled ms-attr=\"{value:@moduleSet.outLook.beforeHover.backgroundImage}\">\r\n                        <button>上传</button>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景位置:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.beforeHover.backgroundPosition\">\r\n                            <option value=\"left top\">左上</option>\r\n                            <option value=\"left center\">左中</option>\r\n                            <option value=\"left bottom\">左下</option>\r\n                            <option value=\"center top\">中上</option>\r\n                            <option value=\"center\">居中</option>\r\n                            <option value=\"center bottom\">中下</option>\r\n                            <option value=\"right top\">右上</option>\r\n                            <option value=\"right center\">右中</option>\r\n                            <option value=\"right bottom\">右下</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">平铺:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.beforeHover.backgroundRepeat\">\r\n                            <option value=\"no-repeat\">不平铺</option>\r\n                            <option value=\"repeat\">平铺</option>\r\n                            <option value=\"repeat-x\">横向平铺</option>\r\n                            <option value=\"repeat-y\">纵向平铺</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--圆角-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">圆角设置:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"fillet\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.styles],[@defaultObj.outLook.styles.borderRadius],['borderRadius'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"fillet\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <p class=\"remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">圆角边度:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.styles.borderRadius\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"11\">11</option>\r\n                            <option value=\"12\">12</option>\r\n                            <option value=\"13\">13</option>\r\n                            <option value=\"14\">14</option>\r\n                            <option value=\"15\">15</option>\r\n                            <option value=\"16\">16</option>\r\n                            <option value=\"17\">17</option>\r\n                            <option value=\"18\">18</option>\r\n                            <option value=\"19\">19</option>\r\n                            <option value=\"20\">20</option>\r\n                            <option value=\"100%\">100%</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--上边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">上边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderTop\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.beforeHover,@moduleSet.outLook.beforeHover,@moduleSet.outLook.beforeHover],[@defaultObj.outLook.beforeHover.borderTopColor,@defaultObj.outLook.beforeHover.borderTopWidth,@defaultObj.outLook.beforeHover.borderTopStyle],['borderTopColor','borderTopWidth','borderTopStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderTop\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderTop\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\" valName=\"moduleSet.outLook.beforeHover.borderTopColor\"\r\n                               ms-attr=\"{value:@moduleSet.outLook.beforeHover.borderTopColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.beforeHover.borderTopWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.beforeHover.borderTopStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--下边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">下边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderBottom\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.beforeHover,@moduleSet.outLook.beforeHover,@moduleSet.outLook.beforeHover],[@defaultObj.outLook.beforeHover.borderBottomColor,@defaultObj.outLook.beforeHover.borderBottomWidth,@defaultObj.outLook.beforeHover.borderBottomStyle],['borderBottomColor','borderBottomWidth','borderBottomStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderBottom\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderBottom\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\" valName=\"moduleSet.outLook.beforeHover.borderBottomColor\"\r\n                               ms-attr=\"{value:@moduleSet.outLook.beforeHover.borderBottomColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.beforeHover.borderBottomWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.beforeHover.borderBottomStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--左边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">左边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderLeft\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.beforeHover,@moduleSet.outLook.beforeHover,@moduleSet.outLook.beforeHover],[@defaultObj.outLook.beforeHover.borderLeftColor,@defaultObj.outLook.beforeHover.borderLeftWidth,@defaultObj.outLook.beforeHover.borderLeftStyle],['borderLeftColor','borderLeftWidth','borderLeftStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderLeft\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderLeft\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\" valName=\"moduleSet.outLook.beforeHover.borderLeftColor\"\r\n                               ms-attr=\"{value:@moduleSet.outLook.beforeHover.borderLeftColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.beforeHover.borderLeftWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.beforeHover.borderLeftStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--右边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">右边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderRight\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.beforeHover,@moduleSet.outLook.beforeHover,@moduleSet.outLook.beforeHover],[@defaultObj.outLook.beforeHover.borderRightColor,@defaultObj.outLook.beforeHover.borderRightWidth,@defaultObj.outLook.beforeHover.borderRightStyle],['borderRightColor','borderRightWidth','borderRightStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderRight\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderRight\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\" valName=\"moduleSet.outLook.beforeHover.borderRightColor\"\r\n                               ms-attr=\"{value:@moduleSet.outLook.beforeHover.borderRightColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.beforeHover.borderRightWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.beforeHover.borderRightStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--透明度-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">透明度:</span>\r\n                <input type=\"range\" min=\"0\" max=\"10\" ms-duplex-number=\"@moduleSet.outLook.styles.opacity\">\r\n            </div>\r\n        </div>\r\n        <div class=\"attribute-title\">鼠标经过状态</div>\r\n        <div class=\"attribute-content\">\r\n            <!--背景-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">背景:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"backgroundHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.hoverStyle,@moduleSet.outLook.hoverStyle,@moduleSet.outLook.hoverStyle,@moduleSet.outLook.hoverStyle],[@defaultObj.outLook.hoverStyle.backgroundColor,@defaultObj.outLook.hoverStyle.backgroundImage,@defaultObj.outLook.hoverStyle.backgroundPosition,@defaultObj.outLook.hoverStyle.borderLeftStyle],['backgroundColor','backgroundImage','backgroundPosition','borderLeftStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"backgroundHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"backgroundHover\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <p class=\"attribute-remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\" valName=\"moduleSet.outLook.hoverStyle.backgroundColor\"\r\n                               ms-attr=\"{value:@moduleSet.outLook.hoverStyle.backgroundColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景图片:</span>\r\n                        <input type=\"text\" disabled ms-attr=\"{value:@moduleSet.outLook.hoverStyle.backgroundImage}\">\r\n                        <button>上传</button>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景位置:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.hoverStyle.backgroundPosition\">\r\n                            <option value=\"left top\">左上</option>\r\n                            <option value=\"left center\">左中</option>\r\n                            <option value=\"left bottom\">左下</option>\r\n                            <option value=\"center top\">中上</option>\r\n                            <option value=\"center\">居中</option>\r\n                            <option value=\"center bottom\">中下</option>\r\n                            <option value=\"right top\">右上</option>\r\n                            <option value=\"right center\">右中</option>\r\n                            <option value=\"right bottom\">右下</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">平铺:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.hoverStyle.borderLeftStyle\">\r\n                            <option value=\"no-repeat\">不平铺</option>\r\n                            <option value=\"repeat\">平铺</option>\r\n                            <option value=\"repeat-x\">横向平铺</option>\r\n                            <option value=\"repeat-y\">纵向平铺</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--上边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">上边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderTopHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.hoverStyle,@moduleSet.outLook.hoverStyle,@moduleSet.outLook.hoverStyle],[@defaultObj.outLook.hoverStyle.borderTopColor,@defaultObj.outLook.hoverStyle.borderTopWidth,@defaultObj.outLook.hoverStyle.borderTopStyle],['borderTopColor','borderTopColor','borderTopStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderTopHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderTopHover\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\" valName=\"moduleSet.outLook.hoverStyle.borderTopColor\"\r\n                               ms-attr=\"{value:@moduleSet.outLook.hoverStyle.borderTopColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.hoverStyle.borderTopWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.hoverStyle.borderTopStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--下边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">下边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.hoverStyle,@moduleSet.outLook.hoverStyle,@moduleSet.outLook.hoverStyle],[@defaultObj.outLook.hoverStyle.borderBottomColor,@defaultObj.outLook.hoverStyle.borderBottomWidth,@defaultObj.outLook.hoverStyle.borderBottomStyle],['borderBottomColor','borderBottomWidth','borderBottomStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHover\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\" valName=\"moduleSet.outLook.hoverStyle.borderBottomColor\"\r\n                               ms-attr=\"{value:@moduleSet.outLook.hoverStyle.borderBottomColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.hoverStyle.borderBottomWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.hoverStyle.borderBottomStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--左边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">左边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.hoverStyle,@moduleSet.outLook.hoverStyle,@moduleSet.outLook.hoverStyle],[@defaultObj.outLook.hoverStyle.borderLeftColor,@defaultObj.outLook.hoverStyle.borderLeftWidth,@defaultObj.outLook.hoverStyle.borderLeftStyle],['borderLeftColor','borderLeftWidth','borderLeftStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHover\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\" valName=\"moduleSet.outLook.hoverStyle.borderLeftColor\"\r\n                               ms-attr=\"{value:@moduleSet.outLook.hoverStyle.borderLeftColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.hoverStyle.borderLeftWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.hoverStyle.borderLeftStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--右边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">右边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderRightHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.outLook.hoverStyle,@moduleSet.outLook.hoverStyle,@moduleSet.outLook.hoverStyle],[@defaultObj.outLook.hoverStyle.borderRightColor,@defaultObj.outLook.hoverStyle.borderRightWidth,@defaultObj.outLook.hoverStyle.borderRightStyle],['borderRightColor','borderRightWidth','borderRightStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderRightHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"borderRightHover\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\" valName=\"moduleSet.outLook.hoverStyle.borderRightColor\"\r\n                               ms-attr=\"{value:@moduleSet.outLook.hoverStyle.borderRightColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.hoverStyle.borderRightWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.outLook.hoverStyle.borderRightStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <!--标题栏-->\r\n    <div class=\"attribute-default-title\">\r\n        <div class=\"attribute-title\">默认状态</div>\r\n        <div class=\"attribute-content\">\r\n            <!--显隐-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">显隐:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"showHide\" checked value=\"default\"\r\n                       ms-on-click=\"@hideTitle(true)\">显示\r\n                <input type=\"radio\" class=\"radio-box\" name=\"showHide\" value=\"custom\" ms-on-click=\"@hideTitle(false)\">隐藏\r\n            </div>\r\n            <!--字体-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">文字:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title\"\r\n                       checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.beforeHover,@moduleSet.moduleTitle.beforeHover],[@defaultObj.moduleTitle.beforeHover.fontSize,@defaultObj.moduleTitle.beforeHover.fontFamily],['fontSize','fontFamily'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">字号:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.beforeHover.fontSize\">\r\n                            <option value=\"12\">12px</option>\r\n                            <option value=\"13\">13px</option>\r\n                            <option value=\"14\">14px</option>\r\n                            <option value=\"15\">15px</option>\r\n                            <option value=\"16\">16px</option>\r\n                            <option value=\"17\">17px</option>\r\n                            <option value=\"18\">18px</option>\r\n                            <option value=\"19\">19px</option>\r\n                            <option value=\"20\">20px</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">字体:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.beforeHover.fontFamily\">\r\n                            <option value=\"SimSun\">宋体</option>\r\n                            <option value=\"PMingLiU\">新细明体</option>\r\n                            <option value=\"FangSong_GB2312\">仿宋_GB2312</option>\r\n                            <option value=\"微软雅黑\">微软雅黑</option>\r\n                            <option value=\"隶书\">隶书</option>\r\n                            <option value=\"幼圆\">幼圆</option>\r\n                            <option value=\"STKaiti\">华文楷体</option>\r\n                            <option value=\"方正舒体\">方正舒体</option>\r\n                            <option value=\"华文彩云\">华文彩云</option>\r\n                            <option value=\"华文行楷\">华文行楷</option>\r\n                            <option value=\"华文宋体\">华文宋体</option>\r\n                            <option value=\"Arial\">Arial</option>\r\n                            <option value=\"Tahoma\">Tahoma</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--宽高-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">宽高:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_widhei\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.styles,@moduleSet.moduleTitle.styles],[@defaultObj.moduleTitle.styles.width,@defaultObj.moduleTitle.styles.height],['width','height'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_widhei\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">宽度:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.moduleTitle.styles.width\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.moduleTitle.styles.height\">\r\n                        像素\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--行高-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">行高:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_lineHeight\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.styles],[@defaultObj.moduleTitle.styles.lineHeight],['lineHeight'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_lineHeight\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">行高:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.moduleTitle.styles.lineHeight\">\r\n                        像素\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--外边距-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">外边距:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_outmargin\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.styles,@moduleSet.moduleTitle.styles,@moduleSet.moduleTitle.styles,@moduleSet.moduleTitle.styles],[@defaultObj.moduleTitle.styles.marginTop,@defaultObj.moduleTitle.styles.marginBottom,@defaultObj.moduleTitle.styles.marginLeft,@defaultObj.moduleTitle.styles.marginRight],['marginTop','marginBottom','marginLeft','marginRight'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_outmargin\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">上:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.moduleTitle.styles.marginTop\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">下:</span>\r\n                        <input class=\"numbers\" type=\"text\"\r\n                               ms-duplex-number=\"@moduleSet.moduleTitle.styles.marginBottom\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">左:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.moduleTitle.styles.marginLeft\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">右:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.moduleTitle.styles.marginRight\">\r\n                        像素\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--内边距-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">内边距:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_innerpadding\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.styles,@moduleSet.moduleTitle.styles,@moduleSet.moduleTitle.styles,@moduleSet.moduleTitle.styles],[@defaultObj.moduleTitle.styles.paddingTop,@defaultObj.moduleTitle.styles.paddingBottom,@defaultObj.moduleTitle.styles.paddingLeft,@defaultObj.moduleTitle.styles.paddingRight],['paddingTop','paddingBottom','paddingLeft','paddingRight'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_innerpadding\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">上:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.moduleTitle.styles.paddingTop\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">下:</span>\r\n                        <input class=\"numbers\" type=\"text\"\r\n                               ms-duplex-number=\"@moduleSet.moduleTitle.styles.paddingBottom\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">左:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.moduleTitle.styles.paddingLeft\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">右:</span>\r\n                        <input class=\"numbers\" type=\"text\"\r\n                               ms-duplex-number=\"@moduleSet.moduleTitle.styles.paddingRight\">\r\n                        像素\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--背景-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">背景:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_background\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.beforeHover,@moduleSet.moduleTitle.beforeHover,@moduleSet.moduleTitle.beforeHover,@moduleSet.moduleTitle.beforeHover],[@defaultObj.moduleTitle.beforeHover.backgroundColor,@defaultObj.moduleTitle.beforeHover.backgroundImage,@defaultObj.moduleTitle.beforeHover.backgroundPosition,@defaultObj.moduleTitle.beforeHover.backgroundRepeat],['backgroundColor','backgroundImage','backgroundPosition','backgroundRepeat'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_background\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_background\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <p class=\"attribute-remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleTitle.beforeHover.backgroundColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleTitle.beforeHover.backgroundColor}\">\r\n                        <button ms-click=\"@setFliter\">取消背景</button>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景图片:</span>\r\n                        <input type=\"text\" disabled\r\n                               ms-attr=\"{value:@moduleSet.moduleTitle.beforeHover.backgroundImage}\">\r\n                        <button>上传</button>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景位置:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.beforeHover.backgroundPosition\">\r\n                            <option value=\"left top\">左上</option>\r\n                            <option value=\"left center\">左中</option>\r\n                            <option value=\"left bottom\">左下</option>\r\n                            <option value=\"center top\">中上</option>\r\n                            <option value=\"center\">居中</option>\r\n                            <option value=\"center bottom\">中下</option>\r\n                            <option value=\"right top\">右上</option>\r\n                            <option value=\"right center\">右中</option>\r\n                            <option value=\"right bottom\">右下</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">平铺:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.beforeHover.backgroundRepeat\">\r\n                            <option value=\"no-repeat\">不平铺</option>\r\n                            <option value=\"repeat\">平铺</option>\r\n                            <option value=\"repeat-x\">横向平铺</option>\r\n                            <option value=\"repeat-y\">纵向平铺</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--圆角-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">圆角设置:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_fillet\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.styles],[@defaultObj.moduleTitle.styles.borderRadius],['borderRadius'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_fillet\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <p class=\"remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">圆角边度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.styles.borderRadius\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"11\">11</option>\r\n                            <option value=\"12\">12</option>\r\n                            <option value=\"13\">13</option>\r\n                            <option value=\"14\">14</option>\r\n                            <option value=\"15\">15</option>\r\n                            <option value=\"16\">16</option>\r\n                            <option value=\"17\">17</option>\r\n                            <option value=\"18\">18</option>\r\n                            <option value=\"19\">19</option>\r\n                            <option value=\"20\">20</option>\r\n                            <option value=\"100%\">100%</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--上边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">上边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderTop\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.beforeHover,@moduleSet.moduleTitle.beforeHover,@moduleSet.moduleTitle.beforeHover],[@defaultObj.moduleTitle.beforeHover.borderTopColor,@defaultObj.moduleTitle.beforeHover.borderTopWidth,@defaultObj.moduleTitle.beforeHover.borderTopStyle],['borderTopColor','borderTopWidth','borderTopStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderTop\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderTop\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\" valName=\"moduleSet.moduleTitle.beforeHover.borderTopColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleTitle.beforeHover.borderTopColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.beforeHover.borderTopWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.beforeHover.borderTopStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--下边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">下边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderBottom\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.beforeHover,@moduleSet.moduleTitle.beforeHover,@moduleSet.moduleTitle.beforeHover],[@defaultObj.moduleTitle.beforeHover.borderBottomColor,@defaultObj.moduleTitle.beforeHover.borderBottomWidth,@defaultObj.moduleTitle.beforeHover.borderBottomStyle],['borderBottomColor','borderBottomWidth','borderBottomStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderBottom\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderBottom\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleTitle.beforeHover.borderBottomColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleTitle.beforeHover.borderBottomColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.beforeHover.borderBottomWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.beforeHover.borderBottomStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--左边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">左边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderLeft\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.beforeHover,@moduleSet.moduleTitle.beforeHover,@moduleSet.moduleTitle.beforeHover],[@defaultObj.moduleTitle.beforeHover.borderLeftColor,@defaultObj.moduleTitle.beforeHover.borderLeftWidth,@defaultObj.moduleTitle.beforeHover.borderLeftStyle],['borderLeftColor','borderLeftWidth','borderLeftStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderLeft\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderLeft\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleTitle.beforeHover.borderLeftColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleTitle.beforeHover.borderLeftColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.beforeHover.borderLeftWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.beforeHover.borderLeftStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--右边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">右边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderRight\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.beforeHover,@moduleSet.moduleTitle.beforeHover,@moduleSet.moduleTitle.beforeHover],[@defaultObj.moduleTitle.beforeHover.borderRightColor,@defaultObj.moduleTitle.beforeHover.borderRightWidth,@defaultObj.moduleTitle.beforeHover.borderRightStyle],['borderRightColor','borderRightWidth','borderRightStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderRight\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderRight\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleTitle.beforeHover.borderRightColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleTitle.beforeHover.borderRightColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.beforeHover.borderRightWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.beforeHover.borderRightStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--透明度-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">透明度:</span>\r\n                <input type=\"range\" min=\"0\" max=\"10\" ms-duplex-number=\"@moduleSet.moduleTitle.styles.opacity\">\r\n            </div>\r\n        </div>\r\n        <div class=\"attribute-title\">鼠标经过状态</div>\r\n        <div class=\"attribute-content\">\r\n            <!--背景-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">背景:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_backgroundHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.hoverStyle,@moduleSet.moduleTitle.hoverStyle,@moduleSet.moduleTitle.hoverStyle,@moduleSet.moduleTitle.hoverStyle],[@defaultObj.moduleTitle.hoverStyle.backgroundColor,@defaultObj.moduleTitle.hoverStyle.backgroundImage,@defaultObj.moduleTitle.hoverStyle.backgroundPosition,@defaultObj.moduleTitle.hoverStyle.borderLeftStyle],['backgroundColor','backgroundImage','backgroundPosition','borderLeftStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_backgroundHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_backgroundHover\" value=\"custom\"\r\n                       ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <p class=\"attribute-remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\" valName=\"moduleSet.moduleTitle.hoverStyle.backgroundColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleTitle.hoverStyle.backgroundColor}\">\r\n                        <button ms-click=\"@setFliter\">取消背景</button>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景图片:</span>\r\n                        <input type=\"text\" disabled ms-attr=\"{value:@moduleSet.moduleTitle.hoverStyle.backgroundImage}\">\r\n                        <button>上传</button>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景位置:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.hoverStyle.backgroundPosition\">\r\n                            <option value=\"left top\">左上</option>\r\n                            <option value=\"left center\">左中</option>\r\n                            <option value=\"left bottom\">左下</option>\r\n                            <option value=\"center top\">中上</option>\r\n                            <option value=\"center\">居中</option>\r\n                            <option value=\"center bottom\">中下</option>\r\n                            <option value=\"right top\">右上</option>\r\n                            <option value=\"right center\">右中</option>\r\n                            <option value=\"right bottom\">右下</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">平铺:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.hoverStyle.borderLeftStyle\">\r\n                            <option value=\"no-repeat\">不平铺</option>\r\n                            <option value=\"repeat\">平铺</option>\r\n                            <option value=\"repeat-x\">横向平铺</option>\r\n                            <option value=\"repeat-y\">纵向平铺</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--上边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">上边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderTopHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.hoverStyle,@moduleSet.moduleTitle.hoverStyle,@moduleSet.moduleTitle.hoverStyle],[@defaultObj.moduleTitle.hoverStyle.borderTopColor,@defaultObj.moduleTitle.hoverStyle.borderTopWidth,@defaultObj.moduleTitle.hoverStyle.borderTopStyle],['borderTopColor','borderTopColor','borderTopStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderTopHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderTopHover\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\" valName=\"moduleSet.moduleTitle.hoverStyle.borderTopColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleTitle.hoverStyle.borderTopColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.hoverStyle.borderTopWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.hoverStyle.borderTopStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--下边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">下边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderBottomHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.hoverStyle,@moduleSet.moduleTitle.hoverStyle,@moduleSet.moduleTitle.hoverStyle],[@defaultObj.moduleTitle.hoverStyle.borderBottomColor,@defaultObj.moduleTitle.hoverStyle.borderBottomWidth,@defaultObj.moduleTitle.hoverStyle.borderBottomStyle],['borderBottomColor','borderBottomWidth','borderBottomStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderBottomHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderBottomHover\" value=\"custom\"\r\n                       ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleTitle.hoverStyle.borderBottomColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleTitle.hoverStyle.borderBottomColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.hoverStyle.borderBottomWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.hoverStyle.borderBottomStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--左边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">左边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderLeftHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.hoverStyle,@moduleSet.moduleTitle.hoverStyle,@moduleSet.moduleTitle.hoverStyle],[@defaultObj.moduleTitle.hoverStyle.borderLeftColor,@defaultObj.moduleTitle.hoverStyle.borderLeftWidth,@defaultObj.moduleTitle.hoverStyle.borderLeftStyle],['borderLeftColor','borderLeftWidth','borderLeftStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderLeftHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderLeftHover\" value=\"custom\"\r\n                       ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\" valName=\"moduleSet.moduleTitle.hoverStyle.borderLeftColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleTitle.hoverStyle.borderLeftColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.hoverStyle.borderLeftWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.hoverStyle.borderLeftStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--右边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">右边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderRightHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleTitle.hoverStyle,@moduleSet.moduleTitle.hoverStyle,@moduleSet.moduleTitle.hoverStyle],[@defaultObj.moduleTitle.hoverStyle.borderRightColor,@defaultObj.moduleTitle.hoverStyle.borderRightWidth,@defaultObj.moduleTitle.hoverStyle.borderRightStyle],['borderRightColor','borderRightWidth','borderRightStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderRightHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"title_borderRightHover\" value=\"custom\"\r\n                       ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleTitle.hoverStyle.borderRightColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleTitle.hoverStyle.borderRightColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.hoverStyle.borderRightWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleTitle.hoverStyle.borderRightStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <!--内容区-->\r\n    <div class=\"attribute-default-content\">\r\n        <div class=\"attribute-title\">默认状态</div>\r\n        <div class=\"attribute-content\">\r\n            <!--字体-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">文字:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_outword\"\r\n                       checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover],[@defaultObj.moduleContent.beforeHover.fontSize,@defaultObj.moduleContent.beforeHover.fontFamily],['fontSize','fontFamily'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_outword\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">字号:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.fontSize\">\r\n                            <option value=\"12\">12px</option>\r\n                            <option value=\"13\">13px</option>\r\n                            <option value=\"14\">14px</option>\r\n                            <option value=\"15\">15px</option>\r\n                            <option value=\"16\">16px</option>\r\n                            <option value=\"17\">17px</option>\r\n                            <option value=\"18\">18px</option>\r\n                            <option value=\"19\">19px</option>\r\n                            <option value=\"20\">20px</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">字体:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.fontFamily\">\r\n                            <option value=\"SimSun\">宋体</option>\r\n                            <option value=\"PMingLiU\">新细明体</option>\r\n                            <option value=\"FangSong_GB2312\">仿宋_GB2312</option>\r\n                            <option value=\"微软雅黑\">微软雅黑</option>\r\n                            <option value=\"隶书\">隶书</option>\r\n                            <option value=\"幼圆\">幼圆</option>\r\n                            <option value=\"STKaiti\">华文楷体</option>\r\n                            <option value=\"方正舒体\">方正舒体</option>\r\n                            <option value=\"华文彩云\">华文彩云</option>\r\n                            <option value=\"华文行楷\">华文行楷</option>\r\n                            <option value=\"华文宋体\">华文宋体</option>\r\n                            <option value=\"Arial\">Arial</option>\r\n                            <option value=\"Tahoma\">Tahoma</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--宽高-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">宽高:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_widhei\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.styles,@moduleSet.moduleContent.styles],[@defaultObj.moduleContent.styles.width,@defaultObj.moduleContent.styles.height],['width','height'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_widhei\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">宽度:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.moduleContent.styles.width\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.moduleContent.styles.height\">\r\n                        像素\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--行高-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">行高:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_lineHeight\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.styles],[@defaultObj.moduleContent.styles.lineHeight],['lineHeight'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_lineHeight\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">行高:</span>\r\n                        <input class=\"numbers\" type=\"text\"\r\n                               ms-duplex-number=\"@moduleSet.moduleContent.styles.lineHeight\">\r\n                        像素\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--外边距-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">外边距:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_outmargin\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.styles,@moduleSet.moduleContent.styles,@moduleSet.moduleContent.styles,@moduleSet.moduleContent.styles],[@defaultObj.moduleContent.styles.marginTop,@defaultObj.moduleContent.styles.marginBottom,@defaultObj.moduleContent.styles.marginLeft,@defaultObj.moduleContent.styles.marginRight],['marginTop','marginBottom','marginLeft','marginRight'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_outmargin\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">上:</span>\r\n                        <input class=\"numbers\" type=\"text\" ms-duplex-number=\"@moduleSet.moduleContent.styles.marginTop\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">下:</span>\r\n                        <input class=\"numbers\" type=\"text\"\r\n                               ms-duplex-number=\"@moduleSet.moduleContent.styles.marginBottom\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">左:</span>\r\n                        <input class=\"numbers\" type=\"text\"\r\n                               ms-duplex-number=\"@moduleSet.moduleContent.styles.marginLeft\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">右:</span>\r\n                        <input class=\"numbers\" type=\"text\"\r\n                               ms-duplex-number=\"@moduleSet.moduleContent.styles.marginRight\">\r\n                        像素\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--内边距-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">内边距:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_innerpadding\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.styles,@moduleSet.moduleContent.styles,@moduleSet.moduleContent.styles,@moduleSet.moduleContent.styles],[@defaultObj.moduleContent.styles.paddingTop,@defaultObj.moduleContent.styles.paddingBottom,@defaultObj.moduleContent.styles.paddingLeft,@defaultObj.moduleContent.styles.paddingRight],['paddingTop','paddingBottom','paddingLeft','paddingRight'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_innerpadding\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">上:</span>\r\n                        <input class=\"numbers\" type=\"text\"\r\n                               ms-duplex-number=\"@moduleSet.moduleContent.styles.paddingTop\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">下:</span>\r\n                        <input class=\"numbers\" type=\"text\"\r\n                               ms-duplex-number=\"@moduleSet.moduleContent.styles.paddingBottom\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">左:</span>\r\n                        <input class=\"numbers\" type=\"text\"\r\n                               ms-duplex-number=\"@moduleSet.moduleContent.styles.paddingLeft\">\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">右:</span>\r\n                        <input class=\"numbers\" type=\"text\"\r\n                               ms-duplex-number=\"@moduleSet.moduleContent.styles.paddingRight\">\r\n                        像素\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--背景-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">背景:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_background\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover],[@defaultObj.moduleContent.beforeHover.backgroundColor,@defaultObj.moduleContent.beforeHover.backgroundImage,@defaultObj.moduleContent.beforeHover.backgroundPosition,@defaultObj.moduleContent.beforeHover.backgroundRepeat],['backgroundColor','backgroundImage','backgroundPosition','backgroundRepeat'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_background\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_background\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <p class=\"attribute-remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleContent.beforeHover.backgroundColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleContent.beforeHover.backgroundColor}\">\r\n                        <button ms-click=\"@setFliter\">取消背景</button>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景图片:</span>\r\n                        <input type=\"text\" disabled\r\n                               ms-attr=\"{value:@moduleSet.moduleContent.beforeHover.backgroundImage}\">\r\n                        <button>上传</button>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景位置:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.backgroundPosition\">\r\n                            <option value=\"left top\">左上</option>\r\n                            <option value=\"left center\">左中</option>\r\n                            <option value=\"left bottom\">左下</option>\r\n                            <option value=\"center top\">中上</option>\r\n                            <option value=\"center\">居中</option>\r\n                            <option value=\"center bottom\">中下</option>\r\n                            <option value=\"right top\">右上</option>\r\n                            <option value=\"right center\">右中</option>\r\n                            <option value=\"right bottom\">右下</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">平铺:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.backgroundRepeat\">\r\n                            <option value=\"no-repeat\">不平铺</option>\r\n                            <option value=\"repeat\">平铺</option>\r\n                            <option value=\"repeat-x\">横向平铺</option>\r\n                            <option value=\"repeat-y\">纵向平铺</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--圆角-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">圆角设置:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_fillet\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.styles],[@defaultObj.moduleContent.styles.borderRadius],['borderRadius'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_fillet\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <p class=\"remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">圆角边度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.styles.borderRadius\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"11\">11</option>\r\n                            <option value=\"12\">12</option>\r\n                            <option value=\"13\">13</option>\r\n                            <option value=\"14\">14</option>\r\n                            <option value=\"15\">15</option>\r\n                            <option value=\"16\">16</option>\r\n                            <option value=\"17\">17</option>\r\n                            <option value=\"18\">18</option>\r\n                            <option value=\"19\">19</option>\r\n                            <option value=\"20\">20</option>\r\n                            <option value=\"100%\">100%</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--上边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">上边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderTop\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover],[@defaultObj.moduleContent.beforeHover.borderTopColor,@defaultObj.moduleContent.beforeHover.borderTopWidth,@defaultObj.moduleContent.beforeHover.borderTopStyle],['borderTopColor','borderTopWidth','borderTopStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderTop\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderTop\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleContent.beforeHover.borderTopColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleContent.beforeHover.borderTopColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderTopWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderTopStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--下边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">下边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderBottom\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover],[@defaultObj.moduleContent.beforeHover.borderBottomColor,@defaultObj.moduleContent.beforeHover.borderBottomWidth,@defaultObj.moduleContent.beforeHover.borderBottomStyle],['borderBottomColor','borderBottomWidth','borderBottomStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderBottom\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderBottom\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleContent.beforeHover.borderBottomColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleContent.beforeHover.borderBottomColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderBottomWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderBottomStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--左边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">左边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderLeft\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover],[@defaultObj.moduleContent.beforeHover.borderLeftColor,@defaultObj.moduleContent.beforeHover.borderLeftWidth,@defaultObj.moduleContent.beforeHover.borderLeftStyle],['borderLeftColor','borderLeftWidth','borderLeftStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderLeft\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderLeft\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleContent.beforeHover.borderLeftColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleContent.beforeHover.borderLeftColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderLeftWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderLeftStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--右边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">右边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderRight\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover],[@defaultObj.moduleContent.beforeHover.borderRightColor,@defaultObj.moduleContent.beforeHover.borderRightWidth,@defaultObj.moduleContent.beforeHover.borderRightStyle],['borderRightColor','borderRightWidth','borderRightStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderRight\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderRight\" value=\"custom\" ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleContent.beforeHover.borderRightColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleContent.beforeHover.borderRightColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderRightWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderRightStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--透明度-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">透明度:</span>\r\n                <input type=\"range\" min=\"0\" max=\"10\" ms-duplex-number=\"@moduleSet.moduleContent.styles.opacity\">\r\n            </div>\r\n        </div>\r\n        <div class=\"attribute-title\">鼠标经过状态</div>\r\n        <div class=\"attribute-content\">\r\n            <!--背景-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">背景:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_backgroundHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.hoverStyle,@moduleSet.moduleContent.hoverStyle,@moduleSet.moduleContent.hoverStyle,@moduleSet.moduleContent.hoverStyle],[@defaultObj.moduleContent.hoverStyle.backgroundColor,@defaultObj.moduleContent.hoverStyle.backgroundImage,@defaultObj.moduleContent.hoverStyle.backgroundPosition,@defaultObj.moduleContent.hoverStyle.borderLeftStyle],['backgroundColor','backgroundImage','backgroundPosition','borderLeftStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_backgroundHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_backgroundHover\" value=\"custom\"\r\n                       ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <p class=\"attribute-remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleContent.hoverStyle.backgroundColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleContent.hoverStyle.backgroundColor}\">\r\n                        <button ms-click=\"@setFliter\">取消背景</button>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景图片:</span>\r\n                        <input type=\"text\" disabled\r\n                               ms-attr=\"{value:@moduleSet.moduleContent.hoverStyle.backgroundImage}\">\r\n                        <button>上传</button>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">背景位置:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.hoverStyle.backgroundPosition\">\r\n                            <option value=\"left top\">左上</option>\r\n                            <option value=\"left center\">左中</option>\r\n                            <option value=\"left bottom\">左下</option>\r\n                            <option value=\"center top\">中上</option>\r\n                            <option value=\"center\">居中</option>\r\n                            <option value=\"center bottom\">中下</option>\r\n                            <option value=\"right top\">右上</option>\r\n                            <option value=\"right center\">右中</option>\r\n                            <option value=\"right bottom\">右下</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">平铺:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.hoverStyle.borderLeftStyle\">\r\n                            <option value=\"no-repeat\">不平铺</option>\r\n                            <option value=\"repeat\">平铺</option>\r\n                            <option value=\"repeat-x\">横向平铺</option>\r\n                            <option value=\"repeat-y\">纵向平铺</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--上边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">上边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderTopHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.hoverStyle,@moduleSet.moduleContent.hoverStyle,@moduleSet.moduleContent.hoverStyle],[@defaultObj.moduleContent.hoverStyle.borderTopColor,@defaultObj.moduleContent.hoverStyle.borderTopWidth,@defaultObj.moduleContent.hoverStyle.borderTopStyle],['borderTopColor','borderTopColor','borderTopStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderTopHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderTopHover\" value=\"custom\"\r\n                       ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleContent.hoverStyle.borderTopColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleContent.hoverStyle.borderTopColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.hoverStyle.borderTopWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.hoverStyle.borderTopStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--下边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">下边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderBottomHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.hoverStyle,@moduleSet.moduleContent.hoverStyle,@moduleSet.moduleContent.hoverStyle],[@defaultObj.moduleContent.hoverStyle.borderBottomColor,@defaultObj.moduleContent.hoverStyle.borderBottomWidth,@defaultObj.moduleContent.hoverStyle.borderBottomStyle],['borderBottomColor','borderBottomWidth','borderBottomStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderBottomHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderBottomHover\" value=\"custom\"\r\n                       ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleContent.hoverStyle.borderBottomColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleContent.hoverStyle.borderBottomColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.hoverStyle.borderBottomWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.hoverStyle.borderBottomStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--左边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">左边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderLeftHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.hoverStyle,@moduleSet.moduleContent.hoverStyle,@moduleSet.moduleContent.hoverStyle],[@defaultObj.moduleContent.hoverStyle.borderLeftColor,@defaultObj.moduleContent.hoverStyle.borderLeftWidth,@defaultObj.moduleContent.hoverStyle.borderLeftStyle],['borderLeftColor','borderLeftWidth','borderLeftStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderLeftHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderLeftHover\" value=\"custom\"\r\n                       ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleContent.hoverStyle.borderLeftColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleContent.hoverStyle.borderLeftColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.hoverStyle.borderLeftWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.hoverStyle.borderLeftStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!--右边线-->\r\n            <div class=\"attribute-content-item\">\r\n                <span class=\"attribute-name\">右边线:</span>\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderRightHover\" checked value=\"default\"\r\n                       ms-click=\"@setDefault([@moduleSet.moduleContent.hoverStyle,@moduleSet.moduleContent.hoverStyle,@moduleSet.moduleContent.hoverStyle],[@defaultObj.moduleContent.hoverStyle.borderRightColor,@defaultObj.moduleContent.hoverStyle.borderRightWidth,@defaultObj.moduleContent.hoverStyle.borderRightStyle],['borderRightColor','borderRightWidth','borderRightStyle'])\">默认\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderRightHover\" value=\"hidden\">隐藏\r\n                <input type=\"radio\" class=\"radio-box\" name=\"detail_borderRightHover\" value=\"custom\"\r\n                       ms-click=\"@showCustom\">自定义\r\n                <div class=\"attribute-custom\">\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">颜色:</span>\r\n                        <input type=\"text\" class=\"color-pick\"\r\n                               valName=\"moduleSet.moduleContent.hoverStyle.borderRightColor\"\r\n                               ms-attr=\"{value:@moduleSet.moduleContent.hoverStyle.borderRightColor}\">\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">高度:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.hoverStyle.borderRightWidth\">\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\">6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                        </select>\r\n                        像素\r\n                    </div>\r\n                    <div class=\"attribute-custom-item\">\r\n                        <span class=\"attribute-custom-name\">样式:</span>\r\n                        <select ms-duplex=\"@moduleSet.moduleContent.hoverStyle.borderRightStyle\">\r\n                            <option value=\"solid\">实线</option>\r\n                            <option value=\"dashed\">虚线</option>\r\n                            <option value=\"dotted\">点状</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <!--高级设置面板-->\r\n    <div class=\"attribute-advanced\">\r\n        <div class=\"attribute-content\">\r\n            <!--图片模块-->\r\n            <div class=\"attribute-content-item\" ms-if=\"@moduleSet.advancedSetting.picturesrc !== undefined\">\r\n                <span class=\"attribute-name\">图片:</span>\r\n                <img class=\"img-preview\" ms-attr=\"{src:@moduleSet.advancedSetting.picturesrc}\"/>\r\n                <button>上传</button>\r\n            </div>\r\n            <div class=\"attribute-content-item\" ms-if=\"@moduleSet.advancedSetting.picturetarget !== undefined\">\r\n                <span class=\"attribute-name\">打开方式:</span>\r\n                <select ms-duplex=\"@moduleSet.advancedSetting.picturetarget\">\r\n                    <option value=\"_blank\">新页面打开</option>\r\n                    <option value=\"_self\">本页打开</option>\r\n                </select>\r\n            </div>\r\n            <div class=\"attribute-content-item\" ms-if=\"@moduleSet.advancedSetting.picturehref !== undefined\">\r\n                <span class=\"attribute-name\">链接:</span>\r\n                <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.picturehref\">\r\n            </div>\r\n            <!--文字模块-->\r\n            <div class=\"attribute-content-item\" ms-if=\"@moduleSet.advancedSetting.worddetails !== undefined\">\r\n                <span class=\"attribute-name\">文本内容:</span>\r\n                <!--<textarea type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.worddetails\"></textarea>-->\r\n                <!-- 加载编辑器的容器 -->\r\n                <script id=\"container\" name=\"content\" type=\"text/plain\"></script>\r\n                <!-- 加载编辑器的容器 -->\r\n            </div>\r\n            <!--图文模块-->\r\n            <!--图文模块-图片地址-->\r\n            <div class=\"attribute-content-item\" ms-if=\"@moduleSet.advancedSetting.graphicDetles !== undefined\">\r\n                <span class=\"attribute-name\">图片地址:</span>\r\n                <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicDetles.src\">\r\n                <button>上传</button>\r\n            </div>\r\n            <!--图文模块-链接地址-->\r\n            <div class=\"attribute-content-item\" ms-if=\"@moduleSet.advancedSetting.graphicDetles !== undefined\">\r\n                <span class=\"attribute-name\">链接地址:</span>\r\n                <input type=\"text\" disabled ms-attr=\"{value:@moduleSet.advancedSetting.graphicDetles.href}\">\r\n                <button>上传</button>\r\n            </div>\r\n            <div class=\"attribute-content-item\" ms-if=\"@moduleSet.advancedSetting.graphicDetles !== undefined\">\r\n                <span class=\"attribute-name\">样式:</span>\r\n                <div class=\"attribute-custom-item\">\r\n                    <span class=\"attribute-custom-name\">样式:</span>\r\n                    <select ms-duplex=\"@moduleSet.advancedSetting.graphicClassStyle.default\">\r\n                        <option value=\"styleType_1\" selected>样式1</option>\r\n                        <option value=\"styleType_2\">样式2</option>\r\n                        <option value=\"styleType_3\">样式3</option>\r\n                    </select>\r\n                    <div ms-visible=\"@moduleSet.advancedSetting.graphicClassStyle.default=='styleType_1'\">\r\n                        <span class=\"attribute-custom-name\">图片宽度:</span>\r\n                        <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicImgStyle_1.width\">\r\n                        <div style=\"clear:both\"></div>\r\n                        <span class=\"attribute-custom-name\">图片高度:</span>\r\n                        <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicImgStyle_1.height\">\r\n                    </div>\r\n\r\n                    <div ms-visible=\"@moduleSet.advancedSetting.graphicClassStyle.default=='styleType_2'\">\r\n                        <span class=\"attribute-custom-name\">图片宽度:</span>\r\n                        <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicImgStyle_2.width\">\r\n                        <div style=\"clear:both\"></div>\r\n                        <span class=\"attribute-custom-name\">图片高度:</span>\r\n                        <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicImgStyle_2.height\">\r\n                    </div>\r\n\r\n                    <div ms-visible=\"@moduleSet.advancedSetting.graphicClassStyle.default=='styleType_3'\">\r\n                        <span class=\"attribute-custom-name\">图片宽度:</span>\r\n                        <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicImgStyle_3.width\">\r\n                        <div style=\"clear:both\"></div>\r\n                        <span class=\"attribute-custom-name\">图片高度:</span>\r\n                        <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicImgStyle_3.height\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style=\"clear:both\"></div>\r\n            <!--图文模块-文字描述-->\r\n            <div class=\"attribute-content-item\" ms-if=\"@moduleSet.advancedSetting.graphicDetles !== undefined\">\r\n                <span class=\"attribute-name\">文字描述:</span>\r\n                <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicDetles.des\"\r\n                       style=\"width:200px; height: 200px\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/**
	 * Created by puchunjie on 16/7/7.
	 */
	var avalon = __webpack_require__(3)
	__webpack_require__(42)
	
	avalon.component('ms-graphic', {
	    template: __webpack_require__(43),
	    defaults: {
	        onReady: function () {
	            var _this = this
	            $(this.$element).draggable({
	                containment: ".bst-main-view",
	                stack: ".bst-banner-content .bst-module",
	                snap: true,
	                start: function (event, ui) {
	                    //开始移动模块的时候,关闭工具条
	                    avalon.vmodels.toolbar.ishide = false
	                },
	                stop: function () {
	                    _this.moduleSet.outLook.styles.left = Number($(this).css("left").replace("px", ""))
	                    _this.moduleSet.outLook.styles.top = Number($(this).css("top").replace("px", ""))
	                }
	            }).resizable({
	                autoHide: true,
	                stop: function () {
	                    _this.moduleSet.outLook.styles.width = Number($(this).css("width").replace("px", ""))
	                    _this.moduleSet.outLook.styles.height = Number($(this).css("height").replace("px", ""))
	                    //如果模块超出了通栏,则把通栏的高度自适应
	                    var moduleHeight = $(this).outerHeight(true)
	                    var moduleTop = Number($(this).css("top").replace("px", ""))
	                    var banner = $(this).parent()
	                    var bannerId = $(this).parent().attr("wid").split("_")[1]
	                    if ((moduleHeight + moduleTop) > banner.height()) {
	                        banner.height(moduleHeight + moduleTop)
	                        var old = avalon.vmodels.app.$model.layouts[bannerId]
	                        old.styles.height = moduleHeight + moduleTop
	                        avalon.vmodels.app.layouts[bannerId] = old
	                    }
	                }
	            }) //真是dom生成后绑定拖动函数
	        },
	        flag: true,
	        addHoverStyle: function () {
	            this.flag = !this.flag
	        },
	        removeHoverStyle: function () {
	            this.flag = !this.flag
	        },
	        "moduleName": "graphic",
	        "moduleId": "",
	        "tools": [
	            {
	                "name": "设置",
	                "type": "settings",
	                "icon": "icon-shezhi"
	            },
	            {
	                "name": "删除",
	                "type": "delete",
	                "icon": "icon-shanchu"
	            },
	            {
	                "name": "复制",
	                "type": "copy",
	                "icon": "icon-fuzhi"
	            }
	        ],
	        "moduleSet": {
	            "styleType": {
	                "name": "皮肤选择"
	            },
	            "outLook": {
	                "width": 500,
	                "height": 500,
	                "backgroundColor": "#ccc",
	                "left": 0,
	                "top": 0,
	                "margin": 10,
	                "color": "#000",
	                "display": "inline-block",
	                "overflow": "hidden",
	                "cursor": "move",
	                "position": "absolute"
	            },
	            "moduleTitle": {
	                "isShow": true,
	                "styles": {}
	            },
	            "moduleContent": {
	                "title": "产品1",
	                "href": "http://www.baidu.com",
	                "picSrc": "http://wxxy.swun.edu.cn/_mediafile/wxxy/2014/10/31/28jskyf7zt.jpg",
	                "des": "产品描述1产品描述1产品描述1产品描述1产品描述1产品描述1产品描述1产品描述1产品描述1产品描述1"
	            },
	            "advancedSetting": {
	                "details": "sdadsadsadasd"
	            }
	        }
	    }
	})
	avalon.component('ms-graphicset', {
	//高级设置面板
	    template: __webpack_require__(44),
	    defaults: {
	        "src": "http://ftp.ytbbs.com/attachments/forum/201404/14/165935vfzw45q2574ggvii.gif",
	        "href":{
	            "outer":"www.baidu.com",
	            "innerPage":[
	                {"page":"网站首页","href":"bst.index.html"},
	                {"page":"关于我们","href":"bst.aboutus.html"},
	                {"page":"产品介绍","href":"bst.products.html"}
	            ]
	        },
	        "detles": {
	            "src": "http://ftp.ytbbs.com/attachments/forum/201404/14/165935vfzw45q2574ggvii.gif",
	            "des":"描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1描述1",
	            "href":"www.baidu1.com"
	        },
	        "classStyle":{
	            "default":"styleType_1"
	        },
	        "imgStyle":{
	            "width":50,
	            "height":80
	        },
	        "imgStyle_1":{
	            "width":50,
	            "height":80
	        },
	        "imgStyle_2":{
	            "width":300,
	            "height":60
	        },
	        "imgStyle_3":{
	            "width":100,
	            "height":100
	        }
	
	    }
	})
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 42 */
/***/ function(module, exports) {

	module.exports = "// removed by extract-text-webpack-plugin"

/***/ },
/* 43 */
/***/ function(module, exports) {

	module.exports = "<div class=\"bst-module draggle-module graphic-module\"\r\n     ms-css=\"@moduleSet.outLook.styles\"\r\n     ms-css-1=\"@flag?@moduleSet.outLook.beforeHover:@moduleSet.outLook.hoverStyle\"\r\n     ms-mouseenter=\"@addHoverStyle\"\r\n     ms-mouseleave=\"@removeHoverStyle\">\r\n    <div ms-attr=\"{id:@moduleId}\"\r\n         ms-css=\"@moduleSet.moduleTitle.styles\"\r\n         ms-css-1=\"@flag?@moduleSet.moduleTitle.beforeHover:@moduleSet.moduleTitle.hoverStyle\"\r\n         ms-mouseenter=\"@addHoverStyle\"\r\n         ms-mouseleave=\"@removeHoverStyle\" ms-if=\"@moduleSet.moduleTitle.isShow\">{{@moduleName}}</div>\r\n    <div style=\"clear:both\"></div>\r\n    <div class=\"content\" ms-css=\"@moduleSet.moduleContent.styles\" ms-class=\"@moduleSet.advancedSetting.graphicClassStyle.default\">\r\n        <!--内容区开始-->\r\n                <a ms-attr=\"{href:@moduleSet.advancedSetting.graphicDetles.href}\">\r\n                    <img ms-attr=\"{src:@moduleSet.advancedSetting.graphicDetles.src}\" alt=\"\" ms-css=\"@moduleSet.advancedSetting.graphicImgStyle\">\r\n                </a>\r\n                <div ms-html=\"@moduleSet.advancedSetting.graphicDetles.des\"></div>\r\n        <!--内容区结束-->\r\n    </div>\r\n    </div>\r\n"

/***/ },
/* 44 */
/***/ function(module, exports) {

	module.exports = "<div class=\"attribute-content\">\r\n    <!--宽高-->\r\n    <div class=\"attribute-content-item\">\r\n        <span class=\"attribute-name\">图片地址:</span>\r\n        <input type=\"radio\" class=\"radio-box\" name=\"picPath\" checked value=\"default\">默认\r\n        <input type=\"radio\" class=\"radio-box\" name=\"picPath\" value=\"custom\">自定义\r\n        <div class=\"attribute-custom\">\r\n            <div class=\"attribute-custom-item\">\r\n                <span class=\"attribute-custom-name\">地址:</span>\r\n\r\n                <span class=\"attribute-custom-name\">更改图片:</span>\r\n                <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicDetles.src\">\r\n                <button>上传</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"attribute-content-item\">\r\n        <span class=\"attribute-name\">链接地址:</span>\r\n        <input type=\"radio\" class=\"radio-box\" name=\"hrefPath\" checked value=\"default\">默认\r\n        <input type=\"radio\" class=\"radio-box\" name=\"hrefPath\" value=\"custom\">自定义\r\n        <div class=\"attribute-custom\">\r\n            <div class=\"attribute-custom-item\">\r\n                <span class=\"attribute-custom-name\">站外地址:</span>\r\n                <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicDetles.href\">\r\n            </div>\r\n            <div class=\"attribute-custom-item\">\r\n                <span class=\"attribute-custom-name\">站内地址:</span>\r\n                <select>\r\n                    <option ms-for=\"(index,el) in @href.innerPage\" value=\"el.href\">{{ el.page }}</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"attribute-content-item\">\r\n        <span class=\"attribute-name\">样式:</span>\r\n        <input type=\"radio\" class=\"radio-box\" name=\"advancedSetting_style_type\" checked value=\"default\">默认\r\n        <input type=\"radio\" class=\"radio-box\" name=\"advancedSetting_style_type\" value=\"custom\">自定义\r\n        <div class=\"attribute-custom\">\r\n            <div class=\"attribute-custom-item\">\r\n                <span class=\"attribute-custom-name\">样式:</span>\r\n                <select ms-duplex=\"@moduleSet.advancedSetting.graphicClassStyle.default\">\r\n                    <option value=\"styleType_1\" selected>样式1</option>\r\n                    <option value=\"styleType_2\">样式2</option>\r\n                    <option value=\"styleType_3\">样式3</option>\r\n                </select>\r\n                <div style=\"clear:both\"></div>\r\n\r\n                <div ms-visible=\"@moduleSet.advancedSetting.graphicClassStyle.default=='styleType_1'\">\r\n                <span class=\"attribute-custom-name\">图片宽度:</span>\r\n                <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicImgStyle_1.width\">\r\n                <div style=\"clear:both\"></div>\r\n                <span class=\"attribute-custom-name\">图片高度:</span>\r\n                <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicImgStyle_1.height\">\r\n                </div>\r\n\r\n                <div ms-visible=\"@moduleSet.advancedSetting.graphicClassStyle.default=='styleType_2'\">\r\n                    <span class=\"attribute-custom-name\">图片宽度:</span>\r\n                    <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicImgStyle_2.width\">\r\n                    <div style=\"clear:both\"></div>\r\n                    <span class=\"attribute-custom-name\">图片高度:</span>\r\n                    <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicImgStyle_2.height\">\r\n                </div>\r\n\r\n                <div ms-visible=\"@moduleSet.advancedSetting.graphicClassStyle.default=='styleType_3'\">\r\n                    <span class=\"attribute-custom-name\">图片宽度:</span>\r\n                    <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicImgStyle_3.width\">\r\n                    <div style=\"clear:both\"></div>\r\n                    <span class=\"attribute-custom-name\">图片高度:</span>\r\n                    <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicImgStyle_3.height\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div style=\"clear:both\"></div>\r\n    <div class=\"attribute-content-item\">\r\n        <span class=\"attribute-name\">文字描述:</span>\r\n        <input type=\"radio\" class=\"radio-box\" name=\"advancedSetting_des\" checked value=\"default\">默认\r\n        <input type=\"radio\" class=\"radio-box\" name=\"advancedSetting_des\" value=\"custom\">自定义\r\n        <div class=\"attribute-custom\">\r\n            <div class=\"attribute-custom-item\">\r\n                <span class=\"attribute-custom-name\">文字描述:</span>\r\n                <input type=\"text\" ms-duplex=\"@moduleSet.advancedSetting.graphicDetles.des\" style=\"width:200px; height: 200px\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n   </div>"

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/**
	 * Created by puchunjie on 16/7/6.
	 */
	var avalon = __webpack_require__(3)
	
	avalon.component('ms-navtabs', {
	    template: __webpack_require__(46),
	    defaults: {
	        onReady: function () {
	            $(".attribute-wrap").on("click",".radio-box", function () {
	                //如果是自定义,显示自定义面板
	                if($(this).val() == 'custom'){
	                    $(this).siblings(".attribute-custom").show()
	                }else{
	                    hiddenCustom($(this))
	                }
	            })
	        },
	        checkbox1:function (obj,e,name,o) {
	            if($(e.target).is(":checked")){
	              obj[name] = $(e.target).val()
	            }else{
	              obj[name] = o
	            }
	        },
	        checkedF:function (obj,e) {
	            if($(e.target).siblings(".attribute-custom").find("input:eq(0)").val()==obj.fontWeight){
	              $(e.target).siblings(".attribute-custom").find("input:eq(0)").attr("checked",true);
	            }else{
	              $(e.target).siblings(".attribute-custom").find("input:eq(0)").attr("checked",false);
	            }
	            if($(e.target).siblings(".attribute-custom").find("input:eq(1)").val()==obj.fontStyle){
	              $(e.target).siblings(".attribute-custom").find("input:eq(1)").attr("checked",true);
	            }else{
	              $(e.target).siblings(".attribute-custom").find("input:eq(1)").attr("checked",false);
	            }
	            if($(e.target).siblings(".attribute-custom").find("input:eq(2)").val()==obj.textDecoration){
	              $(e.target).siblings(".attribute-custom").find("input:eq(2)").attr("checked",true);
	            }else{
	              $(e.target).siblings(".attribute-custom").find("input:eq(2)").attr("checked",false);
	            }
	        },
	        showPanel:function(target){
	            $(".attribute-wrap > div").fadeOut(300)
	            $('.'+target).fadeIn(300)
	        },
	        setDefault: function (val,oldVal,key) {
	            //批量恢复默认属性
	           for(var i=0;i<val.length;i++){
	               val[i][key[i]] = oldVal[i]
	           }
	           //avalon.scan(avalon.vmodels.navPanel.settingObj= avalon.vmodels.app.layouts[avalon.vmodels.navPanel.layoutKey].slotModeules[avalon.vmodels.navPanel.slotModeulesKey].$model)
	           //avalon.vmodels.navPanel.settingObj= avalon.vmodels.app.layouts[avalon.vmodels.navPanel.layoutKey].slotModeules[avalon.vmodels.navPanel.slotModeulesKey].$model
	        },
	        // dxfont:function(a){
	        //             console.log(a)
	        //             a.flag = !a.flag
	        //             // console.log("qqqqq")
	        // },
	        addnavshow:function(e){
	             $(".add-nav").hide()
	             var t = e.target;
	             $(t).siblings("ul").children("li.add-nav").show()
	    
	        },
	        updatelick:function(){
	              avalon.vmodels.app.layouts[avalon.vmodels.navPanel.layoutKey].slotModeules[avalon.vmodels.navPanel.slotModeulesKey] = avalon.vmodels.navPanel.$model.settingObj
	              avalon.vmodels[avalon.vmodels.navPanel.slotModeulesKey] = avalon.vmodels.navPanel.$model.settingObj
	        },
	        addDataclick:function(){
	              var tt="nav"+new Date().getTime();
	              var old = avalon.vmodels.navPanel.settingObj.moduleSet.navData.$model;
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.cid = new Date().getTime();
	              old[tt] = avalon.vmodels.navPanel.settingObj.moduleSet.addData.$model;
	
	
	
	              avalon.vmodels.navPanel.settingObj.moduleSet.navData =old;
	
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.name = "";
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.ename = "";
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.url = "";
	
	              avalon.vmodels.app.layouts[avalon.vmodels.navPanel.layoutKey].slotModeules[avalon.vmodels.navPanel.slotModeulesKey] = avalon.vmodels.navPanel.$model.settingObj
	              avalon.vmodels[avalon.vmodels.navPanel.slotModeulesKey] = avalon.vmodels.navPanel.$model.settingObj
	        },
	        delDataclick:function(a){
	                var navdata = avalon.vmodels.navPanel.settingObj.moduleSet.navData.$model;
	                delete navdata[a];
	                avalon.vmodels.navPanel.settingObj.moduleSet.navData = navdata
	
	
	                avalon.vmodels.app.layouts[avalon.vmodels.navPanel.layoutKey].slotModeules[avalon.vmodels.navPanel.slotModeulesKey] = avalon.vmodels.navPanel.$model.settingObj
	                avalon.vmodels[avalon.vmodels.navPanel.slotModeulesKey] = avalon.vmodels.navPanel.$model.settingObj
	              //console.log(avalon.vmodels.navPanel.settingObj.moduleSet.navData)
	        },
	        add2Dataclick:function(a){
	              
	              var tt="nav"+new Date().getTime();
	              var old = avalon.vmodels.navPanel.settingObj.moduleSet.navData.$model;
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.cid = new Date().getTime();
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.cj = "2";
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.pid = a ;
	              //alert(avalon.vmodels.navPanel.settingObj.moduleSet.addData.pid)
	              old[tt] = avalon.vmodels.navPanel.settingObj.moduleSet.addData.$model;
	
	              avalon.vmodels.navPanel.settingObj.moduleSet.navData =old;
	
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.name = "";
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.ename = "";
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.url = "";
	
	              avalon.vmodels.app.layouts[avalon.vmodels.navPanel.layoutKey].slotModeules[avalon.vmodels.navPanel.slotModeulesKey] = avalon.vmodels.navPanel.$model.settingObj
	              avalon.vmodels[avalon.vmodels.navPanel.slotModeulesKey] = avalon.vmodels.navPanel.$model.settingObj
	        },
	        add3Dataclick:function(a){
	              
	              var tt="nav"+new Date().getTime();
	              var old = avalon.vmodels.navPanel.settingObj.moduleSet.navData.$model;
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.cid = new Date().getTime();
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.cj = "3";
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.pid = a ;
	              //alert(avalon.vmodels.navPanel.settingObj.moduleSet.addData.pid)
	              old[tt] = avalon.vmodels.navPanel.settingObj.moduleSet.addData.$model;
	
	              avalon.vmodels.navPanel.settingObj.moduleSet.navData =old;
	
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.name = "";
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.ename = "";
	              avalon.vmodels.navPanel.settingObj.moduleSet.addData.url = "";
	              
	              avalon.vmodels.app.layouts[avalon.vmodels.navPanel.layoutKey].slotModeules[avalon.vmodels.navPanel.slotModeulesKey] = avalon.vmodels.navPanel.$model.settingObj
	              avalon.vmodels[avalon.vmodels.navPanel.slotModeulesKey] = avalon.vmodels.navPanel.$model.settingObj
	        }
	    }
	})
	
	
	function hiddenCustom(item){
	    if(!$(item).siblings(".attribute-custom").is(":hidden")){
	        $(item).siblings(".attribute-custom").hide()
	    }
	}
	// function checkbox1(){
	//    // if($('.cbjc').is(':checked')) {
	//         alert("1111")
	// //    }
	// }
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 46 */
/***/ function(module, exports) {

	module.exports = "<div class=\"attribute-wrap\">\n    <ul class=\"attribute-tab\">\n        <li ms-click=\"@showPanel('attribute-style')\">样式选择</li>\n        <li ms-click=\"@showPanel('attribute-outlook')\">导航外观</li>\n        <li ms-click=\"@showPanel('attribute-navli')\">顶级导航栏目项</li>\n        <li ms-click=\"@showPanel('attribute-navli2')\">二级导航栏目项</li>\n        <li ms-click=\"@showPanel('attribute-navli3')\">三级导航栏目项</li>\n        <li ms-click=\"@showPanel('attribute-add')\">栏目管理</li>\n    </ul>\n    <div class=\"attribute-style\">\n        <div class=\"attribute-title\">样式选择</div>\n        呵呵呵呵，还没做！\n\n    </div>\n    <div class=\"attribute-outlook\">\n        <div class=\"attribute-title\">导航外观</div>\n        <div class=\"attribute-content\">\n            <!--宽-->\n            <div class=\"attribute-content-item\">\n                <span class=\"attribute-name\">导航宽度:</span>\n                <input type=\"radio\" class=\"radio-box\" name=\"navwidth\" checked value=\"default\"\n                ms-click=\"@setDefault([@moduleSet.outLook.styles],[@defaultObj.outLook.styles.width],['width'])\"\n                >默认\n                <input type=\"radio\" class=\"radio-box\" name=\"navwidth\" value=\"custom\">自定义\n                <div class=\"attribute-custom\">\n                导航宽度：<input type=\"text\" ms-duplex-number=\"@moduleSet.outLook.styles.width\"/><br/>\n                </div>\n            </div>\n            <!--高-->\n            <div class=\"attribute-content-item\">\n                <span class=\"attribute-name\">导航高度:</span>\n                <input type=\"radio\" class=\"radio-box\" name=\"navheight\" checked value=\"default\"\n                ms-click=\"@setDefault([@moduleSet.outLook.styles],[@defaultObj.outLook.styles.height],['height'])\"\n                >默认\n                <input type=\"radio\" class=\"radio-box\" name=\"navheight\" value=\"custom\">自定义\n                <div class=\"attribute-custom\">\n                导航高度：<input type=\"text\" ms-duplex-number=\"@moduleSet.outLook.styles.height\"/><br/>\n                </div>\n            </div>\n            <!--上下距离-->\n            <div class=\"attribute-content-item\">\n                <span class=\"attribute-name\">上下距离:</span>\n                <input type=\"radio\" class=\"radio-box\" name=\"navmargin\" checked value=\"default\"\n                ms-click=\"@setDefault([@moduleSet.outLook.styles,@moduleSet.outLook.styles],[@defaultObj.outLook.styles.marginTop,@defaultObj.outLook.styles.marginBottom],['marginTop','marginBottom'])\"\n                >默认\n                <input type=\"radio\" class=\"radio-box\" name=\"navmargin\" value=\"custom\">自定义\n                <div class=\"attribute-custom\">\n                上高度：<input type=\"text\" ms-duplex-number=\"@moduleSet.outLook.styles.marginTop\"/><br/>\n                下高度：<input type=\"text\" ms-duplex-number=\"@moduleSet.outLook.styles.marginBottom\"/>\n                </div>\n            </div>\n            <!--背景-->\n            <div class=\"attribute-content-item\">\n\n                <span class=\"attribute-name\">背景:</span>\n                <input type=\"radio\" class=\"radio-box\" name=\"background\" checked value=\"default\"\n                ms-click=\"@setDefault([@moduleSet.outLook.styles,@moduleSet.outLook.styles,@moduleSet.outLook.styles,@moduleSet.outLook.styles],[@defaultObj.outLook.styles.backgroundColor,@defaultObj.outLook.styles.backgroundImage,@defaultObj.outLook.styles.backgroundPosition,@defaultObj.outLook.styles.backgroundRepeat],['backgroundColor','backgroundImage','backgroundPosition','backgroundRepeat'])\"\n                >默认\n                <input type=\"radio\" class=\"radio-box\" name=\"background\" value=\"hidden\"\n                ms-click=\"@setDefault([@moduleSet.outLook.styles,@moduleSet.outLook.styles],['inherit','none'],['backgroundColor','backgroundImage'])\"\n                >隐藏\n                <input type=\"radio\" class=\"radio-box\" name=\"background\" value=\"custom\">自定义\n                <div class=\"attribute-custom\">\n                    <p class=\"attribute-remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">背景颜色:</span>\n                        <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.outLook.styles.backgroundColor}\"></div>\n                        <button>取消背景颜色</button>\n                    </div>\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">背景图片:</span>\n                        <input type=\"text\" disabled ms-attr=\"{value:@moduleSet.outLook.styles.backgroundImage}\">\n                        <button>上传</button>\n                    </div>\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">背景位置:</span>{{@moduleSet.outLook.styles.backgroundPosition}}\n                        <select ms-duplex=\"@moduleSet.outLook.styles.backgroundPosition\">\n                            <option value=\"left top\">左上</option>\n                            <option value=\"left center\">左中</option>\n                            <option value=\"left top\">左下</option>\n                            <option value=\"center top\">中上</option>\n                            <option value=\"center\">居中</option>\n                            <option value=\"center bottom\">中下</option>\n                            <option value=\"right top\">右上</option>\n                            <option value=\"right center\">右中</option>\n                            <option value=\"right bottom\">右下</option>\n                        </select>\n                    </div>\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">平铺:</span>{{@moduleSet.outLook.styles.backgroundRepeat}}\n                        <select ms-duplex=\"@moduleSet.outLook.styles.backgroundRepeat\">\n                            <option value=\"no-repeat\">不平铺</option>\n                            <option value=\"repeat\">平铺</option>\n                            <option value=\"repeat-x\">横向平铺</option>\n                            <option value=\"repeat-y\">纵向平铺</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n            <!--圆角-->\n            <div class=\"attribute-content-item\">\n                <span class=\"attribute-name\">圆角设置:</span>\n                <input type=\"radio\" class=\"radio-box\" name=\"fillet\" checked value=\"default\"\n                ms-click=\"@setDefault([@moduleSet.outLook.styles],[@defaultObj.outLook.styles.borderRadius],['borderRadius'])\"\n                >默认\n                <input type=\"radio\" class=\"radio-box\" name=\"fillet\" value=\"custom\">自定义\n                <p class=\"remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\n                <div class=\"attribute-custom\">\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">圆角边度:</span>\n                        <select ms-duplex-number=\"@moduleSet.outLook.styles.borderRadius\">\n                            <option value=\"0\">0</option>\n                            <option value=\"1\">1</option>\n                            <option value=\"2\">2</option>\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"6\">6</option>\n                            <option value=\"7\">7</option>\n                            <option value=\"8\">8</option>\n                            <option value=\"9\">9</option>\n                            <option value=\"10\">10</option>\n                            <option value=\"11\">11</option>\n                            <option value=\"12\">12</option>\n                            <option value=\"13\">13</option>\n                            <option value=\"14\">14</option>\n                            <option value=\"15\">15</option>\n                            <option value=\"16\">16</option>\n                            <option value=\"17\">17</option>\n                            <option value=\"18\">18</option>\n                            <option value=\"19\">19</option>\n                            <option value=\"20\">20</option>\n                        </select>\n                        像素\n                    </div>\n                </div>\n            </div>\n            <!--上边线-->\n            <div class=\"attribute-content-item\">\n                <span class=\"attribute-name\">上边线:</span>\n                <input type=\"radio\" class=\"radio-box\" name=\"borderTop\" checked value=\"default\"\n                ms-click=\"@setDefault([@moduleSet.outLook.styles,@moduleSet.outLook.styles,@moduleSet.outLook.styles],[@defaultObj.outLook.styles.borderTopColor,@defaultObj.outLook.styles.borderTopWidth,@defaultObj.outLook.styles.borderTopStyle],['borderTopColor','borderTopWidth','borderTopStyle'])\"\n                >默认\n                <input type=\"radio\" class=\"radio-box\" name=\"borderTop\" value=\"hidden\"  \n                ms-click=\"@setDefault([@moduleSet.outLook.styles],[0],['borderTopWidth'])\"\n                >隐藏\n                <input type=\"radio\" class=\"radio-box\" name=\"borderTop\" value=\"custom\">自定义\n                <div class=\"attribute-custom\">\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">颜色:</span>{{@moduleSet.outLook.styles.borderTopColor}}\n                        <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.outLook.styles.borderTopColor}\"></div>\n                    </div>\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">高度:</span>\n                        <select ms-duplex=\"@moduleSet.outLook.styles.borderTopWidth\">\n                            <option value=\"0\">0</option>\n                            <option value=\"1\">1</option>\n                            <option value=\"2\">2</option>\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"6\">6</option>\n                            <option value=\"7\">7</option>\n                            <option value=\"8\">8</option>\n                            <option value=\"9\">9</option>\n                            <option value=\"10\">10</option>\n                        </select>\n                        像素\n                    </div>\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">样式:</span>\n                        <select ms-duplex=\"@moduleSet.outLook.styles.borderTopStyle\">\n                            <option value=\"solid\">实线</option>\n                            <option value=\"dashed\">虚线</option>\n                            <option value=\"dotted\">点状</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n            <!--下边线-->\n            <div class=\"attribute-content-item\">\n                <span class=\"attribute-name\">下边线:</span>\n                <input type=\"radio\" class=\"radio-box\" name=\"borderBottom\" checked value=\"default\"\n                ms-click=\"@setDefault([@moduleSet.outLook.styles,@moduleSet.outLook.styles,@moduleSet.outLook.styles],[@defaultObj.outLook.styles.borderBottomColor,@defaultObj.outLook.styles.borderBottomWidth,@defaultObj.outLook.styles.borderBottomStyle],['borderBottomColor','borderBottomWidth','borderBottomStyle'])\"\n                >默认\n                <input type=\"radio\" class=\"radio-box\" name=\"borderBottom\" value=\"hidden\"\n                ms-click=\"@setDefault([@moduleSet.outLook.styles],[0],['borderBottomWidth'])\"\n                >隐藏\n                <input type=\"radio\" class=\"radio-box\" name=\"borderBottom\" value=\"custom\">自定义\n                <div class=\"attribute-custom\">\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\"  >颜色:</span>\n                        <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.outLook.styles.borderBottomColor}\"></div>\n                    </div>\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">高度:</span>\n                        <select ms-duplex=\"@moduleSet.outLook.styles.borderBottomWidth\">\n                            <option value=\"0\">0</option>\n                            <option value=\"1\">1</option>\n                            <option value=\"2\">2</option>\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"6\">6</option>\n                            <option value=\"7\">7</option>\n                            <option value=\"8\">8</option>\n                            <option value=\"9\">9</option>\n                            <option value=\"10\">10</option>\n                        </select>\n                        像素\n                    </div>\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">样式:</span>\n                        <select ms-duplex=\"@moduleSet.outLook.styles.borderBottomStyle\">\n                            <option value=\"solid\">实线</option>\n                            <option value=\"dashed\">虚线</option>\n                            <option value=\"dotted\">点状</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n            <!--左边线-->\n            <div class=\"attribute-content-item\">\n                <span class=\"attribute-name\">左边线:</span>\n                <input type=\"radio\" class=\"radio-box\" name=\"borderLeft\" checked value=\"default\"\n                ms-click=\"@setDefault([@moduleSet.outLook.styles,@moduleSet.outLook.styles,@moduleSet.outLook.styles],[@defaultObj.outLook.styles.borderLeftColor,@defaultObj.outLook.styles.borderLeftWidth,@defaultObj.outLook.styles.borderLeftStyle],['borderLeftColor','borderLeftWidth','borderLeftStyle'])\"\n                >默认\n                <input type=\"radio\" class=\"radio-box\" name=\"borderLeft\" value=\"hidden\"\n                ms-click=\"@setDefault([@moduleSet.outLook.styles],[0],['borderLeftWidth'])\"\n                >隐藏\n                <input type=\"radio\" class=\"radio-box\" name=\"borderLeft\" value=\"custom\">自定义\n                <div class=\"attribute-custom\">\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">颜色:</span>\n                        <div class=\"color-pick\"  ms-css=\"{backgroundColor:@moduleSet.outLook.styles.borderLeftColor}\"></div>\n                    </div>\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">高度:</span>\n                        <select ms-duplex=\"@moduleSet.outLook.styles.borderLeftWidth\">\n                            <option value=\"0\">0</option>\n                            <option value=\"1\">1</option>\n                            <option value=\"2\">2</option>\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"6\">6</option>\n                            <option value=\"7\">7</option>\n                            <option value=\"8\">8</option>\n                            <option value=\"9\">9</option>\n                            <option value=\"10\">10</option>\n                        </select>\n                        像素\n                    </div>\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">样式:</span>\n                        <select ms-duplex=\"@moduleSet.outLook.styles.borderLeftStyle\">\n                            <option value=\"solid\">实线</option>\n                            <option value=\"dashed\">虚线</option>\n                            <option value=\"dotted\">点状</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n            <!--右边线-->\n            <div class=\"attribute-content-item\">\n                <span class=\"attribute-name\">右边线:</span>\n                <input type=\"radio\" class=\"radio-box\" name=\"borderRight\" checked value=\"default\"\n                ms-click=\"@setDefault([@moduleSet.outLook.styles,@moduleSet.outLook.styles,@moduleSet.outLook.styles],[@defaultObj.outLook.styles.borderRightColor,@defaultObj.outLook.styles.borderRightWidth,@defaultObj.outLook.styles.borderRightStyle],['borderRightColor','borderRightWidth','borderRightStyle'])\"\n                >默认\n                <input type=\"radio\" class=\"radio-box\" name=\"borderRight\" value=\"hidden\"\n                ms-click=\"@setDefault([@moduleSet.outLook.styles],[0],['borderRightWidth'])\"\n                >隐藏\n                <input type=\"radio\" class=\"radio-box\" name=\"borderRight\" value=\"custom\">自定义\n                <div class=\"attribute-custom\">\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\" >颜色:</span>\n                        <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.outLook.styles.borderRightColor}\" ></div>\n                    </div>\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">高度:</span>\n                        <select ms-duplex=\"@moduleSet.outLook.styles.borderRightWidth\">\n                            <option value=\"0\">0</option>\n                            <option value=\"1\">1</option>\n                            <option value=\"2\">2</option>\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"6\">6</option>\n                            <option value=\"7\">7</option>\n                            <option value=\"8\">8</option>\n                            <option value=\"9\">9</option>\n                            <option value=\"10\">10</option>\n                        </select>\n                        像素\n                    </div>\n                    <div class=\"attribute-custom-item\">\n                        <span class=\"attribute-custom-name\">样式:</span>\n                        <select ms-duplex=\"@moduleSet.outLook.styles.borderRightStyle\">\n                            <option value=\"solid\">实线</option>\n                            <option value=\"dashed\">虚线</option>\n                            <option value=\"dotted\">点状</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n            <!--透明度-->\n            <div class=\"attribute-content-item\">\n                <span class=\"attribute-name\">透明度:</span>\n                <input type=\"range\" min=\"0\" max=\"10\" ms-duplex-number=\"@moduleSet.outLook.styles.opacity\">\n            </div>\n        </div>\n\n    </div>\n    <div class=\"attribute-navli\">\n            <div class=\"attribute-title\">顶级导航栏目项</div>\n            <div class=\"attribute-content\">\n                <!--宽-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">导航栏目宽度:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliwidthx1\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.defstyles],[@defaultObj.moduleContent.defstyles.width],['width'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliwidthx1\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                    导航栏目宽度：<input type=\"text\" ms-duplex-number=\"@moduleSet.moduleContent.defstyles.width\"/><br/>\n                    </div>\n                </div>\n                <!--高-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">导航栏目高度:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliheightx2\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.defstyles],[@defaultObj.moduleContent.defstyles.height],['height'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliheightx2\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                    导航栏目高度：<input type=\"text\" ms-duplex-number=\"@moduleSet.moduleContent.defstyles.height\"/><br/>\n                    </div>\n                </div>\n                <!--行高-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">导航栏目行高:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlineheight\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.defstylesAlink],[@defaultObj.moduleContent.defstylesAlink.lineHeight],['lineHeight'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlineheight\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                    导航栏目行高：<input type=\"text\" ms-duplex-number=\"@moduleSet.moduleContent.defstylesAlink.lineHeight\"/><br/>\n                    </div>\n                </div>\n                <!--背景-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">背景:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundLix3\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover],[@defaultObj.moduleContent.beforeHover.backgroundColor,@defaultObj.moduleContent.beforeHover.backgroundImage,@defaultObj.moduleContent.beforeHover.backgroundPosition,@defaultObj.moduleContent.beforeHover.backgroundRepeat],['backgroundColor','backgroundImage','backgroundPosition','backgroundRepeat'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundLix3\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover],['inherit','none'],['backgroundColor','backgroundImage'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundLix3\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <p class=\"attribute-remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHover.backgroundColor}\" ></div>\n                            <button>取消背景颜色</button>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景图片:</span>\n                            <input type=\"text\" disabled>\n                            <button>上传</button>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景位置:</span>{{@moduleSet.moduleContent.beforeHover.backgroundPosition}}\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.backgroundPosition\">\n                                <option value=\"left top\">左上</option>\n                                <option value=\"left center\">左中</option>\n                                <option value=\"left top\">左下</option>\n                                <option value=\"center top\">中上</option>\n                                <option value=\"center\">居中</option>\n                                <option value=\"center bottom\">中下</option>\n                                <option value=\"right top\">右上</option>\n                                <option value=\"right center\">右中</option>\n                                <option value=\"right bottom\">右下</option>\n                                <option value=\"bottom\">下</option>\n                            </select>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">平铺:</span>{{@moduleSet.moduleContent.beforeHover.backgroundRepeat}}\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.backgroundRepeat\">\n                                <option value=\"no-repeat\">不平铺</option>\n                                <option value=\"repeat\">平铺</option>\n                                <option value=\"repeat-x\">横向平铺</option>\n                                <option value=\"repeat-y\">纵向平铺</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--栏目项文字：-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">栏目项文字:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliztx4\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover],[@defaultObj.moduleContent.beforeHover.color,@defaultObj.moduleContent.beforeHover.fontSize,@defaultObj.moduleContent.beforeHover.fontWeight,@defaultObj.moduleContent.beforeHover.fontStyle,@defaultObj.moduleContent.beforeHover.textDecoration,@defaultObj.moduleContent.beforeHover.fontFamily,@defaultObj.moduleContent.beforeHover.textAlign],['color','fontSize','fontWeight','fontStyle','textDecoration','fontFamily','textAlign'])\"\n                    >默认\n                    <input type=\"radio\" ms-click=\"@checkedF(@moduleSet.moduleContent.beforeHover,$event)\" class=\"radio-box\" name=\"navliztx4\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">字体颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHover.color}\" ></div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">文字大小:</span>{{@moduleSet.moduleContent.beforeHover.fontSize}}\n                                <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.fontSize\">\n                                    <option value=\"0\">无</option>\n                                    <option value=\"10\">10</option>\n                                    <option value=\"12\">12</option>\n                                    <option value=\"14\">14</option>\n                                    <option value=\"16\">16</option>\n                                    <option value=\"18\">18</option>\n                                    <option value=\"20\">20</option>\n                                    <option value=\"22\">22</option>\n                                    <option value=\"24\">24</option>\n                                    <option value=\"26\">26</option>\n                                    <option value=\"28\">28</option>\n                                    <option value=\"30\">30</option>\n                                    <option value=\"32\">32</option>\n                                    <option value=\"34\">34</option>\n                                    <option value=\"36\">36</option>\n                                    <option value=\"38\">38</option>\n                                    <option value=\"40\">40</option>\n                                    <option value=\"42\">42</option>\n                                    <option value=\"44\">44</option>\n                                    <option value=\"46\">46</option>\n                                    <option value=\"48\">48</option>\n                                </select>\n                            </div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">文字样式:</span>\n                                <label><input class=\"cbjc\" ms-click=\"@checkbox1(@moduleSet.moduleContent.beforeHover,$event,'fontWeight',500)\" ms-attr=\"{checked:@moduleSet.moduleContent.beforeHover.fontWeight==700}\" name=\"fontst\" type=\"checkbox\"  value=\"700\" />加粗 </label> \n                                <label><input class=\"cbjc\" ms-click=\"@checkbox1(@moduleSet.moduleContent.beforeHover,$event,'fontStyle','normal')\" ms-attr=\"{checked:@moduleSet.moduleContent.beforeHover.fontStyle==italic}\"  name=\"fontst\" type=\"checkbox\" value=\"italic\" />斜体 </label> \n                                <label><input class=\"cbjc\" ms-click=\"@checkbox1(@moduleSet.moduleContent.beforeHover,$event,'textDecoration','none')\" ms-attr=\"{checked:@moduleSet.moduleContent.beforeHover.textDecoration==underline}\" name=\"fontst\" type=\"checkbox\" value=\"underline\" />下划线 </label> \n                            </div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">文字字体:</span>\n                                <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.fontFamily\">\n                                    <option value=\"SimSun\">宋体</option>\n                                    <option value=\"FangSong_GB2312\">仿宋_GB2312</option>\n                                </select>\n                            </div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">对齐方式:</span>\n                                <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.textAlign\">\n                                    <option value=\"center\">居中</option>\n                                    <option value=\"left\">居左</option>\n                                    <option value=\"right\">居右</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n\n                <!--栏目项英文-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">栏目项英文:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliztx5\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.estyles,@moduleSet.moduleContent.estyles],[@defaultObj.moduleContent.estyles.color,@defaultObj.moduleContent.estyles.fontSize],['color','fontSize'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliztx5\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                 \n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">英文颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.estyles.color}\" ></div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">英文大小:</span>{{@moduleSet.moduleContent.estyles.fontSize}}\n                                <select ms-duplex=\"@moduleSet.moduleContent.estyles.fontSize\">\n                                    <option value=\"10\">10</option>\n                                    <option value=\"12\">12</option>\n                                    <option value=\"14\">14</option>\n                                    <option value=\"16\">16</option>\n                                    <option value=\"18\">18</option>\n                                    <option value=\"20\">20</option>\n                                    <option value=\"22\">22</option>\n                                    <option value=\"24\">24</option>\n                                    <option value=\"26\">26</option>\n                                    <option value=\"28\">28</option>\n                                    <option value=\"30\">30</option>\n                                    <option value=\"32\">32</option>\n                                    <option value=\"34\">34</option>\n                                    <option value=\"36\">36</option>\n                                    <option value=\"38\">38</option>\n                                    <option value=\"40\">40</option>\n                                    <option value=\"42\">42</option>\n                                    <option value=\"44\">44</option>\n                                    <option value=\"46\">46</option>\n                                    <option value=\"48\">48</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <!--上边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">上边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHoverx6\" checked value=\"default\" \n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover],[@defaultObj.moduleContent.beforeHover.borderTopColor,@defaultObj.moduleContent.beforeHover.borderTopWidth,@defaultObj.moduleContent.beforeHover.borderTopStyle],['borderTopColor','borderTopWidth','borderTopStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHoverx6\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover],[0],['borderTopWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHoverx6\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHover.borderTopColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderTopWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderTopStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--下边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">下边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHoverx7\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover],[@defaultObj.moduleContent.beforeHover.borderBottomColor,@defaultObj.moduleContent.beforeHover.borderBottomWidth,@defaultObj.moduleContent.beforeHover.borderBottomStyle],['borderBottomColor','borderBottomWidth','borderBottomStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHoverx7\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover],[0],['borderBottomWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHoverx7\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHover.borderBottomColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderBottomWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderBottomStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--左边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">左边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoverx8\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover],[@defaultObj.moduleContent.beforeHover.borderLeftColor,@defaultObj.moduleContent.beforeHover.borderLeftWidth,@defaultObj.moduleContent.beforeHover.borderLeftStyle],['borderLeftColor','borderLeftWidth','borderLeftStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoverx8\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover],[0],['borderLeftWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoverx8\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHover.borderLeftColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderLeftWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderLeftStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--右边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">上边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoverx9\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover,@moduleSet.moduleContent.beforeHover],[@defaultObj.moduleContent.beforeHover.borderRightColor,@defaultObj.moduleContent.beforeHover.borderRightWidth,@defaultObj.moduleContent.beforeHover.borderRightStyle],['borderRightColor','borderRightWidth','borderRightStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoverx9\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHover],[0],['borderRightWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoverx9\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHover.borderRightColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderRightWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHover.borderRightStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--栏目项间隔：-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">外间距:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlimarginLx10\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.defstyles,@moduleSet.moduleContent.defstyles,@moduleSet.moduleContent.defstyles,@moduleSet.moduleContent.defstyles],[@defaultObj.moduleContent.defstyles.marginLeft,@defaultObj.moduleContent.defstyles.marginRight,@defaultObj.moduleContent.defstyles.marginTop,@defaultObj.moduleContent.defstyles.marginBottom],['marginLeft','marginRight','marginTop','marginBottom'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlimarginLx10\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        左：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstyles.marginLeft\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        右：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstyles.marginRight\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        上：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstyles.marginTop\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        下：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstyles.marginBottom\"/>\n                    </div>\n                </div>\n\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">内间距:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlipaddingLx11\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.defstyles,@moduleSet.moduleContent.defstyles,@moduleSet.moduleContent.defstyles,@moduleSet.moduleContent.defstyles],[@defaultObj.moduleContent.defstyles.paddingLeft,@defaultObj.moduleContent.defstyles.paddingRight,@defaultObj.moduleContent.defstyles.paddingTop,@defaultObj.moduleContent.defstyles.paddingBottom],['paddingLeft','paddingRight','paddingTop','paddingBottom'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlipaddingLx11\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        左：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstyles.paddingLeft\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        右：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstyles.paddingRight\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        上：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstyles.paddingTop\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        下：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstyles.paddingBottom\"/>\n                    </div>\n                </div>\n                <div class=\"attribute-content-item\" ms-if=\"@moduleSet.advancedSetting.visible==true \">\n                    <span class=\"attribute-name\">导航偏移:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlipaddingBx12\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.defstylesAlink],[@defaultObj.moduleContent.defstylesAlink.paddingLeft],['marginLeft'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlipaddingBx12\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        偏移量<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesAlink.marginLeft\"/>\n                    </div>\n                </div>\n            </div>\n            <div class=\"attribute-title\">鼠标经过状态</div>\n            <div class=\"attribute-content\">\n                <!--背景-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">背景:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundHoverx13\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles],[@defaultObj.moduleContent.hoverstyles.backgroundColor,@defaultObj.moduleContent.hoverstyles.backgroundImage,@defaultObj.moduleContent.hoverstyles.backgroundPosition,@defaultObj.moduleContent.hoverstyles.backgroundRepeat],['backgroundColor','backgroundImage','backgroundPosition','backgroundRepeat'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundHoverx13\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles],['inherit','none'],['backgroundColor','backgroundImage'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundHoverx13\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <p class=\"attribute-remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstyles.backgroundColor}\" ></div>\n                            <button>取消背景颜色</button>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景图片:</span>\n                            <input type=\"text\" disabled>\n                            <button>上传</button>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景位置:</span>{{@moduleSet.moduleContent.hoverstyles.backgroundPosition}}\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstyles.backgroundPosition\">\n                                <option value=\"left top\">左上</option>\n                                <option value=\"left center\">左中</option>\n                                <option value=\"left top\">左下</option>\n                                <option value=\"center top\">中上</option>\n                                <option value=\"center\">居中</option>\n                                <option value=\"center bottom\">中下</option>\n                                <option value=\"right top\">右上</option>\n                                <option value=\"right center\">右中</option>\n                                <option value=\"right bottom\">右下</option>\n                                <option value=\"bottom\">下</option>\n                            </select>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">平铺:</span>{{@moduleSet.moduleContent.hoverstyles.backgroundRepeat}}\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstyles.backgroundRepeat\">\n                                <option value=\"no-repeat\">不平铺</option>\n                                <option value=\"repeat\">平铺</option>\n                                <option value=\"repeat-x\">横向平铺</option>\n                                <option value=\"repeat-y\">纵向平铺</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--栏目项文字：-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">栏目项文字:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlihvztx14\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles],[@defaultObj.moduleContent.hoverstyles.color,@defaultObj.moduleContent.hoverstyles.fontSize,@defaultObj.moduleContent.hoverstyles.fontWeight,@defaultObj.moduleContent.hoverstyles.fontStyle,@defaultObj.moduleContent.hoverstyles.textDecoration,@defaultObj.moduleContent.hoverstyles.fontFamily,@defaultObj.moduleContent.hoverstyles.textAlign],['color','fontSize','fontWeight','fontStyle','textDecoration','fontFamily','textAlign'])\"  \n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlihvztx14\" ms-click=\"@checkedF(@moduleSet.moduleContent.hoverstyles,$event)\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">字体颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstyles.color}\" ></div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">文字大小:</span>{{@moduleSet.moduleContent.hoverstyles.fontSize}}\n                                <select ms-duplex=\"@moduleSet.moduleContent.hoverstyles.fontSize\">\n                                    <option value=\"10\">10</option>\n                                    <option value=\"12\">12</option>\n                                    <option value=\"14\">14</option>\n                                    <option value=\"16\">16</option>\n                                    <option value=\"18\">18</option>\n                                    <option value=\"20\">20</option>\n                                    <option value=\"22\">22</option>\n                                    <option value=\"24\">24</option>\n                                    <option value=\"26\">26</option>\n                                    <option value=\"28\">28</option>\n                                    <option value=\"30\">30</option>\n                                    <option value=\"32\">32</option>\n                                    <option value=\"34\">34</option>\n                                    <option value=\"36\">36</option>\n                                    <option value=\"38\">38</option>\n                                    <option value=\"40\">40</option>\n                                    <option value=\"42\">42</option>\n                                    <option value=\"44\">44</option>\n                                    <option value=\"46\">46</option>\n                                    <option value=\"48\">48</option>\n                                </select>\n                            </div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">文字样式:</span>\n                                <label><input class=\"cbjc\" ms-click=\"@checkbox1(@moduleSet.moduleContent.hoverstyles,$event,'fontWeight',500)\" ms-attr=\"{checked:@moduleSet.moduleContent.hoverstyles.fontWeight==700}\" name=\"fontstcc\" type=\"checkbox\"  value=\"700\" />加粗 </label> \n                                <label><input class=\"cbjc\" ms-click=\"@checkbox1(@moduleSet.moduleContent.hoverstyles,$event,'fontStyle','normal')\" ms-attr=\"{checked:@moduleSet.moduleContent.hoverstyles.fontStyle==italic}\"  name=\"fontstcc\" type=\"checkbox\" value=\"italic\" />斜体 </label> \n                                <label><input class=\"cbjc\" ms-click=\"@checkbox1(@moduleSet.moduleContent.hoverstyles,$event,'textDecoration','none')\" ms-attr=\"{checked:@moduleSet.moduleContent.hoverstyles.textDecoration==underline}\" name=\"fontstcc\" type=\"checkbox\" value=\"underline\" />下划线 </label> \n                            </div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">文字字体:</span>{{@moduleSet.moduleContent.hoverstyles.fontFamily}}\n                                <select ms-duplex=\"@moduleSet.moduleContent.hoverstyles.fontFamily\">\n                                    <option value=\"SimSun\">宋体</option>\n                                    <option value=\"FangSong_GB2312\">仿宋_GB2312</option>\n                                </select>\n                            </div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">对齐方式:</span>{{@moduleSet.moduleContent.hoverstyles.textAlign}}\n                                <select ms-duplex=\"@moduleSet.moduleContent.hoverstyles.textAlign\">\n                                    <option value=\"center\">居中</option>\n                                    <option value=\"left\">居左</option>\n                                    <option value=\"right\">居右</option>\n                                </select>\n                            </div>\n                        </div>\n                        \n                    </div>\n\n                </div>\n                <!--栏目项英文-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">栏目项英文:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlihvztx15\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.ehovstyles,@moduleSet.moduleContent.ehovstyles],[@defaultObj.moduleContent.ehovstyles.color,@defaultObj.moduleContent.ehovstyles.fontSize],['color','fontSize'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlihvztx15\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">字体颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.ehovstyles.color}\" ></div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">文字大小:</span>{{@moduleSet.moduleContent.ehovstyles.fontSize}}\n                                <select ms-duplex=\"@moduleSet.moduleContent.ehovstyles.fontSize\">\n                                    <option value=\"0\">无</option>\n                                    <option value=\"10\">10</option>\n                                    <option value=\"12\">12</option>\n                                    <option value=\"14\">14</option>\n                                    <option value=\"16\">16</option>\n                                    <option value=\"18\">18</option>\n                                    <option value=\"20\">20</option>\n                                    <option value=\"22\">22</option>\n                                    <option value=\"24\">24</option>\n                                    <option value=\"26\">26</option>\n                                    <option value=\"28\">28</option>\n                                    <option value=\"30\">30</option>\n                                    <option value=\"32\">32</option>\n                                    <option value=\"34\">34</option>\n                                    <option value=\"36\">36</option>\n                                    <option value=\"38\">38</option>\n                                    <option value=\"40\">40</option>\n                                    <option value=\"42\">42</option>\n                                    <option value=\"44\">44</option>\n                                    <option value=\"46\">46</option>\n                                    <option value=\"48\">48</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n                <!--上边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">上边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHoverx16\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles],[@defaultObj.moduleContent.hoverstyles.borderTopColor,@defaultObj.moduleContent.hoverstyles.borderTopWidth,@defaultObj.moduleContent.hoverstyles.borderTopStyle],['borderTopColor','borderTopWidth','borderTopStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoverx16\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstyles],[0],['borderTopWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHoverx16\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstyles.borderTopColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstyles.borderTopWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstyles.borderTopStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--下边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">下边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHoverx17\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles],[@defaultObj.moduleContent.hoverstyles.borderBottomColor,@defaultObj.moduleContent.hoverstyles.borderBottomWidth,@defaultObj.moduleContent.hoverstyles.borderBottomStyle],['borderBottomColor','borderBottomWidth','borderBottomStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoverx17\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstyles],[0],['borderBottomWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHoverx17\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstyles.borderBottomColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstyles.borderBottomWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstyles.borderBottomStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--左边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">左边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoverx18\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles],[@defaultObj.moduleContent.hoverstyles.borderLeftColor,@defaultObj.moduleContent.hoverstyles.borderLeftWidth,@defaultObj.moduleContent.hoverstyles.borderLeftStyle],['borderLeftColor','borderLeftWidth','borderLeftStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoverx18\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstyles],[0],['borderLeftWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoverx18\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstyles.borderLeftColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstyles.borderLeftWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstyles.borderLeftStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--右边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">上边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoverx19\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles,@moduleSet.moduleContent.hoverstyles],[@defaultObj.moduleContent.hoverstyles.borderRightColor,@defaultObj.moduleContent.hoverstyles.borderRightWidth,@defaultObj.moduleContent.hoverstyles.borderRightStyle],['borderRightColor','borderRightWidth','borderRightStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoverx19\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstyles],[0],['borderRightWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoverx19\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstyles.borderRightColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstyles.borderRightWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstyles.borderRightStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"attribute-title\">当前状态</div>\n            <div class=\"attribute-content\">\n                啊啊啊啊啊\n\n\n            </div>\n    </div>\n\n\n\n    <div class=\"attribute-navli2\">\n            <div class=\"attribute-title\">二级导航栏目项</div>\n            <div class=\"attribute-content\">\n                <!--宽-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">导航栏目宽度:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliwidthk1\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.defstylesul2],[@defaultObj.moduleContent.defstylesul2.width],['width'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliwidthk1\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                    导航栏目宽度：<input type=\"text\" ms-duplex-number=\"@moduleSet.moduleContent.defstylesul2.width\"/><br/>\n                    </div>\n                </div>\n                <!--高-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">导航栏目高度:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliheightk2\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.defstylesul2],[@defaultObj.moduleContent.defstylesul2.height],['height'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliheightk2\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                    导航栏目高度：<input type=\"text\" ms-duplex-number=\"@moduleSet.moduleContent.defstylesul2.height\"/><br/>\n                    </div>\n                </div>\n                <!--背景-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">背景:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundLik3\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2],[@defaultObj.moduleContent.beforeHoverul2.backgroundColor,@defaultObj.moduleContent.beforeHoverul2.backgroundImage,@defaultObj.moduleContent.beforeHoverul2.backgroundPosition,@defaultObj.moduleContent.beforeHoverul2.backgroundRepeat],['backgroundColor','backgroundImage','backgroundPosition','backgroundRepeat'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundLik3\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2],['inherit','none'],['backgroundColor','backgroundImage'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundLik3\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <p class=\"attribute-remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHoverul2.backgroundColor}\" ></div>\n                            <button>取消背景颜色</button>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景图片:</span>\n                            <input type=\"text\" disabled>\n                            <button>上传</button>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景位置:</span>{{@moduleSet.moduleContent.beforeHoverul2.backgroundPosition}}\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul2.backgroundPosition\">\n                                <option value=\"left top\">左上</option>\n                                <option value=\"left center\">左中</option>\n                                <option value=\"left top\">左下</option>\n                                <option value=\"center top\">中上</option>\n                                <option value=\"center\">居中</option>\n                                <option value=\"center bottom\">中下</option>\n                                <option value=\"right top\">右上</option>\n                                <option value=\"right center\">右中</option>\n                                <option value=\"right bottom\">右下</option>\n                                <option value=\"bottom\">下</option>\n                            </select>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">平铺:</span>{{@moduleSet.moduleContent.beforeHoverul2.backgroundRepeat}}\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul2.backgroundRepeat\">\n                                <option value=\"no-repeat\">不平铺</option>\n                                <option value=\"repeat\">平铺</option>\n                                <option value=\"repeat-x\">横向平铺</option>\n                                <option value=\"repeat-y\">纵向平铺</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--栏目项文字：-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">栏目项文字:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliztk4\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2],[@defaultObj.moduleContent.beforeHoverul2.color,@defaultObj.moduleContent.beforeHoverul2.fontSize,@defaultObj.moduleContent.beforeHoverul2.fontWeight,@defaultObj.moduleContent.beforeHoverul2.fontStyle,@defaultObj.moduleContent.beforeHoverul2.textDecoration,@defaultObj.moduleContent.beforeHoverul2.fontFamily,@defaultObj.moduleContent.beforeHoverul2.textAlign],['color','fontSize','fontWeight','fontStyle','textDecoration','fontFamily','textAlign'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliztk4\" ms-click=\"@checkedF(@moduleSet.moduleContent.beforeHoverul2,$event)\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">字体颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHoverul2.color}\" ></div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">文字大小:</span>{{@moduleSet.moduleContent.beforeHoverul2.fontSize}}\n                                <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul2.fontSize\">\n                                    <option value=\"10\">10</option>\n                                    <option value=\"12\">12</option>\n                                    <option value=\"14\">14</option>\n                                    <option value=\"16\">16</option>\n                                    <option value=\"18\">18</option>\n                                    <option value=\"20\">20</option>\n                                    <option value=\"22\">22</option>\n                                    <option value=\"24\">24</option>\n                                    <option value=\"26\">26</option>\n                                    <option value=\"28\">28</option>\n                                    <option value=\"30\">30</option>\n                                    <option value=\"32\">32</option>\n                                    <option value=\"34\">34</option>\n                                    <option value=\"36\">36</option>\n                                    <option value=\"38\">38</option>\n                                    <option value=\"40\">40</option>\n                                    <option value=\"42\">42</option>\n                                    <option value=\"44\">44</option>\n                                    <option value=\"46\">46</option>\n                                    <option value=\"48\">48</option>\n                                </select>\n                            </div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">文字样式:</span>\n                                <label><input class=\"cbjc\" ms-click=\"@checkbox1(@moduleSet.moduleContent.beforeHoverul2,$event,'fontWeight',500)\" ms-attr=\"{checked:@moduleSet.moduleContent.beforeHoverul2.fontWeight==700}\" name=\"fontst\" type=\"checkbox\"  value=\"700\" />加粗 </label> \n                                <label><input class=\"cbjc\" ms-click=\"@checkbox1(@moduleSet.moduleContent.beforeHoverul2,$event,'fontStyle','normal')\" ms-attr=\"{checked:@moduleSet.moduleContent.beforeHoverul2.fontStyle==italic}\" name=\"fontst\" type=\"checkbox\" value=\"italic\" />斜体 </label> \n                                <label><input class=\"cbjc\" ms-click=\"@checkbox1(@moduleSet.moduleContent.beforeHoverul2,$event,'textDecoration','none')\" ms-attr=\"{checked:@moduleSet.moduleContent.beforeHoverul2.textDecoration==underline}\" name=\"fontst\" type=\"checkbox\" value=\"underline\" />下划线 </label> \n                            </div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">文字字体:</span>{{@moduleSet.moduleContent.beforeHoverul2.fontFamily}}\n                                <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul2.fontFamily\">\n                                    <option value=\"SimSun\">宋体</option>\n                                    <option value=\"FangSong_GB2312\">仿宋_GB2312</option>\n                                </select>\n                            </div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">对齐方式:</span>{{@moduleSet.moduleContent.beforeHoverul2.textAlign}}\n                                <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul2.textAlign\">\n                                    <option value=\"center\">居中</option>\n                                    <option value=\"left\">居左</option>\n                                    <option value=\"right\">居右</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <!--上边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">上边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHoverk5\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2],[@defaultObj.moduleContent.beforeHoverul2.borderTopColor,@defaultObj.moduleContent.beforeHoverul2.borderTopWidth,@defaultObj.moduleContent.beforeHoverul2.borderTopStyle],['borderTopColor','borderTopWidth','borderTopStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHoverk5\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul2],[0],['borderTopWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHoverk5\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHoverul2.borderTopColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul2.borderTopWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul2.borderTopStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--下边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">下边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHoverk6\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2],[@defaultObj.moduleContent.beforeHoverul2.borderBottomColor,@defaultObj.moduleContent.beforeHoverul2.borderBottomWidth,@defaultObj.moduleContent.beforeHoverul2.borderBottomStyle],['borderBottomColor','borderBottomWidth','borderBottomStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHoverk6\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul2],[0],['borderBottomWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHoverk6\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHoverul2.borderBottomColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul2.borderBottomWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul2.borderBottomStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--左边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">左边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoverk7\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2],[@defaultObj.moduleContent.beforeHoverul2.borderLeftColor,@defaultObj.moduleContent.beforeHoverul2.borderLeftWidth,@defaultObj.moduleContent.beforeHoverul2.borderLeftStyle],['borderLeftColor','borderLeftWidth','borderLeftStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoverk7\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul2],[0],['borderLeftWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoverk7\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHoverul2.borderLeftColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul2.borderLeftWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul2.borderLeftStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--右边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">右边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoverk8\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2,@moduleSet.moduleContent.beforeHoverul2],[@defaultObj.moduleContent.beforeHoverul2.borderRightColor,@defaultObj.moduleContent.beforeHoverul2.borderRightWidth,@defaultObj.moduleContent.beforeHoverul2.borderRightStyle],['borderRightColor','borderRightWidth','borderRightStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoverk8\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul2],[0],['borderRightWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoverk8\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHoverul2.borderRightColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul2.borderRightWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul2.borderRightStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--栏目项间隔：-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">外间距:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlimarginLk9\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.defstylesul2,@moduleSet.moduleContent.defstylesul2,@moduleSet.moduleContent.defstylesul2,@moduleSet.moduleContent.defstylesul2],[@defaultObj.moduleContent.defstylesul2.marginLeft,@defaultObj.moduleContent.defstylesul2.marginRight,@defaultObj.moduleContent.defstylesul2.marginTop,@defaultObj.moduleContent.defstylesul2.marginBottom],['marginLeft','marginRight','marginTop','marginBottom'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlimarginLk9\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        左：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul2.marginLeft\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        右：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul2.marginRight\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        上：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul2.marginTop\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        下：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul2.marginBottom\"/>\n                    </div>\n                </div>\n\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">内间距:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlipaddingLk10\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.defstylesul2,@moduleSet.moduleContent.defstylesul2,@moduleSet.moduleContent.defstylesul2,@moduleSet.moduleContent.defstylesul2],[@defaultObj.moduleContent.defstylesul2.paddingLeft,@defaultObj.moduleContent.defstylesul2.paddingRight,@defaultObj.moduleContent.defstylesul2.paddingTop,@defaultObj.moduleContent.defstylesul2.paddingBottom],['paddingLeft','paddingRight','paddingTop','paddingBottom'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlipaddingLk10\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        左：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul2.paddingLeft\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        右：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul2.paddingRight\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        上：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul2.paddingTop\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        下：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul2.paddingBottom\"/>\n                    </div>\n                </div>\n            </div>\n            <div class=\"attribute-title\">鼠标经过状态</div>\n            <div class=\"attribute-content\">\n                <!--背景-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">背景:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundHoverk11\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul2,@moduleSet.moduleContent.hoverstylesul2,@moduleSet.moduleContent.hoverstylesul2,@moduleSet.moduleContent.hoverstylesul2],[@defaultObj.moduleContent.hoverstylesul2.backgroundColor,@defaultObj.moduleContent.hoverstylesul2.backgroundImage,@defaultObj.moduleContent.hoverstylesul2.backgroundPosition,@defaultObj.moduleContent.hoverstylesul2.backgroundRepeat],['backgroundColor','backgroundImage','backgroundPosition','backgroundRepeat'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundHoverk11\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul2,@moduleSet.moduleContent.hoverstylesul2],['inherit','none'],['backgroundColor','backgroundImage'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundHoverk11\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <p class=\"attribute-remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstylesul2.backgroundColor}\" ></div>\n                            <button>取消背景颜色</button>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景图片:</span>\n                            <input type=\"text\" disabled>\n                            <button>上传</button>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景位置:</span>{{@moduleSet.moduleContent.hoverstylesul2.backgroundPosition}}\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul2.backgroundPosition\">\n                                <option value=\"left top\">左上</option>\n                                <option value=\"left center\">左中</option>\n                                <option value=\"left top\">左下</option>\n                                <option value=\"center top\">中上</option>\n                                <option value=\"center\">居中</option>\n                                <option value=\"center bottom\">中下</option>\n                                <option value=\"right top\">右上</option>\n                                <option value=\"right center\">右中</option>\n                                <option value=\"right bottom\">右下</option>\n                                <option value=\"bottom\">下</option>\n                            </select>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">平铺:</span>{{@moduleSet.moduleContent.hoverstylesul2.backgroundRepeat}}\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul2.backgroundRepeat\">\n                                <option value=\"no-repeat\">不平铺</option>\n                                <option value=\"repeat\">平铺</option>\n                                <option value=\"repeat-x\">横向平铺</option>\n                                <option value=\"repeat-y\">纵向平铺</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--上边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">上边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHoverk12\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul2,@moduleSet.moduleContent.hoverstylesul2,@moduleSet.moduleContent.hoverstylesul2],[@defaultObj.moduleContent.hoverstylesul2.borderTopColor,@defaultObj.moduleContent.hoverstylesul2.borderTopWidth,@defaultObj.moduleContent.hoverstylesul2.borderTopStyle],['borderTopColor','borderTopWidth','borderTopStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHoverk12\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul2],[0],['borderTopWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHoverk12\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstylesul2.borderTopColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul2.borderTopWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul2.borderTopStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--下边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">下边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHoverk13\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul2,@moduleSet.moduleContent.hoverstylesul2,@moduleSet.moduleContent.hoverstylesul2],[@defaultObj.moduleContent.hoverstylesul2.borderBottomColor,@defaultObj.moduleContent.hoverstylesul2.borderBottomWidth,@defaultObj.moduleContent.hoverstylesul2.borderBottomStyle],['borderBottomColor','borderBottomWidth','borderBottomStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHoverk13\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul2],[0],['borderBottomWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHoverk13\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstylesul2.borderBottomColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul2.borderBottomWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul2.borderBottomStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--左边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">左边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoverk14\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul2,@moduleSet.moduleContent.hoverstylesul2,@moduleSet.moduleContent.hoverstylesul2],[@defaultObj.moduleContent.hoverstylesul2.borderLeftColor,@defaultObj.moduleContent.hoverstylesul2.borderLeftWidth,@defaultObj.moduleContent.hoverstylesul2.borderLeftStyle],['borderLeftColor','borderLeftWidth','borderLeftStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoverk14\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul2],[0],['borderLeftWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoverk14\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstylesul2.borderLeftColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul2.borderLeftWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul2.borderLeftStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--右边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">上边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoverk15\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul2,@moduleSet.moduleContent.hoverstylesul2,@moduleSet.moduleContent.hoverstylesul2],[@defaultObj.moduleContent.hoverstylesul2.borderRightColor,@defaultObj.moduleContent.hoverstylesul2.borderRightWidth,@defaultObj.moduleContent.hoverstylesul2.borderRightStyle],['borderRightColor','borderRightWidth','borderRightStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoverk14\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul2],[0],['borderRightWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoverk15\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstylesul2.borderRightColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul2.borderRightWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul2.borderRightStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    </div>\n\n    <div class=\"attribute-navli3\">\n            <div class=\"attribute-title\">三级导航栏目项</div>\n            <div class=\"attribute-content\">\n                <!--宽-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">导航栏目宽度:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliwidth\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.defstylesul3],[@defaultObj.moduleContent.defstylesul3.width],['width'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliwidth\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                    导航栏目宽度：<input type=\"text\" ms-duplex-number=\"@moduleSet.moduleContent.defstylesul3.width\"/><br/>\n                    </div>\n                </div>\n                <!--高-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">导航栏目高度:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliheight\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.defstylesul3],[@defaultObj.moduleContent.defstylesul3.height],['height'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navliheight\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                    导航栏目高度：<input type=\"text\" ms-duplex-number=\"@moduleSet.moduleContent.defstylesul3.height\"/><br/>\n                    </div>\n                </div>\n                <!--背景-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">背景:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundLi\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3],[@defaultObj.moduleContent.beforeHoverul3.backgroundColor,@defaultObj.moduleContent.beforeHoverul3.backgroundImage,@defaultObj.moduleContent.beforeHoverul3.backgroundPosition,@defaultObj.moduleContent.beforeHoverul3.backgroundRepeat],['backgroundColor','backgroundImage','backgroundPosition','backgroundRepeat'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundLi\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3],['inherit','none'],['backgroundColor','backgroundImage'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundLi\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <p class=\"attribute-remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHoverul3.backgroundColor}\" ></div>\n                            <button>取消背景颜色</button>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景图片:</span>\n                            <input type=\"text\" disabled>\n                            <button>上传</button>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景位置:</span>{{@moduleSet.moduleContent.beforeHoverul3.backgroundPosition}}\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul3.backgroundPosition\">\n                                <option value=\"left top\">左上</option>\n                                <option value=\"left center\">左中</option>\n                                <option value=\"left top\">左下</option>\n                                <option value=\"center top\">中上</option>\n                                <option value=\"center\">居中</option>\n                                <option value=\"center bottom\">中下</option>\n                                <option value=\"right top\">右上</option>\n                                <option value=\"right center\">右中</option>\n                                <option value=\"right bottom\">右下</option>\n                                <option value=\"bottom\">下</option>\n                            </select>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">平铺:</span>{{@moduleSet.moduleContent.beforeHoverul3.backgroundRepeat}}\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul3.backgroundRepeat\">\n                                <option value=\"no-repeat\">不平铺</option>\n                                <option value=\"repeat\">平铺</option>\n                                <option value=\"repeat-x\">横向平铺</option>\n                                <option value=\"repeat-y\">纵向平铺</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--栏目项文字：-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">栏目项文字:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlizt\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3],[@defaultObj.moduleContent.beforeHoverul3.color,@defaultObj.moduleContent.beforeHoverul3.fontSize,@defaultObj.moduleContent.beforeHoverul3.fontWeight,@defaultObj.moduleContent.beforeHoverul3.fontStyle,@defaultObj.moduleContent.beforeHoverul3.textDecoration,@defaultObj.moduleContent.beforeHoverul3.fontFamily,@defaultObj.moduleContent.beforeHoverul3.textAlign],['color','fontSize','fontWeight','fontStyle','textDecoration','fontFamily','textAlign'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlizt\" ms-click=\"@checkedF(@moduleSet.moduleContent.beforeHoverul3,$event)\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">字体颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHoverul3.color}\" ></div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">文字大小:</span>{{@moduleSet.moduleContent.beforeHoverul3.fontSize}}\n                                <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul3.fontSize\">\n                                    <option value=\"10\">10</option>\n                                    <option value=\"12\">12</option>\n                                    <option value=\"14\">14</option>\n                                    <option value=\"16\">16</option>\n                                    <option value=\"18\">18</option>\n                                    <option value=\"20\">20</option>\n                                    <option value=\"22\">22</option>\n                                    <option value=\"24\">24</option>\n                                    <option value=\"26\">26</option>\n                                    <option value=\"28\">28</option>\n                                    <option value=\"30\">30</option>\n                                    <option value=\"32\">32</option>\n                                    <option value=\"34\">34</option>\n                                    <option value=\"36\">36</option>\n                                    <option value=\"38\">38</option>\n                                    <option value=\"40\">40</option>\n                                    <option value=\"42\">42</option>\n                                    <option value=\"44\">44</option>\n                                    <option value=\"46\">46</option>\n                                    <option value=\"48\">48</option>\n                                </select>\n                            </div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">文字样式:</span>\n                                <label><input class=\"cbjc\" ms-click=\"@checkbox1(@moduleSet.moduleContent.beforeHoverul3,$event,'fontWeight',500)\" ms-attr=\"{checked:@moduleSet.moduleContent.beforeHoverul3.fontWeight==700}\" name=\"fontst\" type=\"checkbox\"  value=\"700\" />加粗 </label> \n                                <label><input class=\"cbjc\" ms-click=\"@checkbox1(@moduleSet.moduleContent.beforeHoverul3,$event,'fontStyle','normal')\" ms-attr=\"{checked:@moduleSet.moduleContent.beforeHoverul3.fontStyle==italic}\" name=\"fontst\" type=\"checkbox\" value=\"italic\" />斜体 </label> \n                                <label><input class=\"cbjc\" ms-click=\"@checkbox1(@moduleSet.moduleContent.beforeHoverul3,$event,'textDecoration','none')\" ms-attr=\"{checked:@moduleSet.moduleContent.beforeHoverul3.textDecoration==underline}\" name=\"fontst\" type=\"checkbox\" value=\"underline\" />下划线 </label> \n                            </div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">文字字体:</span>{{@moduleSet.moduleContent.beforeHoverul3.fontFamily}}\n                                <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul3.fontFamily\">\n                                    <option value=\"SimSun\">宋体</option>\n                                    <option value=\"FangSong_GB2312\">仿宋_GB2312</option>\n                                </select>\n                            </div>\n                            <div class=\"attribute-custom-item\">\n                                <span class=\"attribute-custom-name\">对齐方式:</span>{{@moduleSet.moduleContent.beforeHoverul3.textAlign}}\n                                <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul3.textAlign\">\n                                    <option value=\"center\">居中</option>\n                                    <option value=\"left\">居左</option>\n                                    <option value=\"right\">居右</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <!--上边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">上边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHoveru1\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3],[@defaultObj.moduleContent.beforeHoverul3.borderTopColor,@defaultObj.moduleContent.beforeHoverul3.borderTopWidth,@defaultObj.moduleContent.beforeHoverul3.borderTopStyle],['borderTopColor','borderTopWidth','borderTopStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHoveru1\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul3],[0],['borderTopWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHoveru1\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHoverul3.borderTopColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul3.borderTopWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul3.borderTopStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--下边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">下边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHoveru2\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3],[@defaultObj.moduleContent.beforeHoverul3.borderBottomColor,@defaultObj.moduleContent.beforeHoverul3.borderBottomWidth,@defaultObj.moduleContent.beforeHoverul3.borderBottomStyle],['borderBottomColor','borderBottomWidth','borderBottomStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHoveru2\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul3],[0],['borderBottomWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHoveru2\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHoverul3.borderBottomColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul3.borderBottomWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul3.borderBottomStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--左边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">左边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoveru3\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3],[@defaultObj.moduleContent.beforeHoverul3.borderLeftColor,@defaultObj.moduleContent.beforeHoverul3.borderLeftWidth,@defaultObj.moduleContent.beforeHoverul3.borderLeftStyle],['borderLeftColor','borderLeftWidth','borderLeftStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoveru3\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul3],[0],['borderLeftWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHoveru3\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHoverul3.borderLeftColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul3.borderLeftWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul3.borderLeftStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--右边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">右边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoveru4\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3,@moduleSet.moduleContent.beforeHoverul3],[@defaultObj.moduleContent.beforeHoverul3.borderRightColor,@defaultObj.moduleContent.beforeHoverul3.borderRightWidth,@defaultObj.moduleContent.beforeHoverul3.borderRightStyle],['borderRightColor','borderRightWidth','borderRightStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoveru4\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.beforeHoverul3],[0],['borderRightWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHoveru4\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.beforeHoverul3.borderRightColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul3.borderRightWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.beforeHoverul3.borderRightStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--栏目项间隔：-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">外间距:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlimarginL\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.defstylesul3,@moduleSet.moduleContent.defstylesul3,@moduleSet.moduleContent.defstylesul3,@moduleSet.moduleContent.defstylesul3],[@defaultObj.moduleContent.defstylesul3.marginLeft,@defaultObj.moduleContent.defstylesul3.marginRight,@defaultObj.moduleContent.defstylesul3.marginTop,@defaultObj.moduleContent.defstylesul3.marginBottom],['marginLeft','marginRight','marginTop','marginBottom'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlimarginL\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        左：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul3.marginLeft\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        右：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul3.marginRight\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        上：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul3.marginTop\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        下：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul3.marginBottom\"/>\n                    </div>\n                </div>\n\n\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">内间距:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlipaddingL\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.defstylesul3,@moduleSet.moduleContent.defstylesul3,@moduleSet.moduleContent.defstylesul3,@moduleSet.moduleContent.defstylesul3],[@defaultObj.moduleContent.defstylesul3.paddingLeft,@defaultObj.moduleContent.defstylesul3.paddingRight,@defaultObj.moduleContent.defstylesul3.paddingTop,@defaultObj.moduleContent.defstylesul3.paddingBottom],['paddingLeft','paddingRight','paddingTop','paddingBottom'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"navlipaddingL\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        左：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul3.paddingLeft\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        右：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul3.paddingRight\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        上：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul3.paddingTop\"/>\n                    </div>\n                    <div class=\"attribute-custom\">\n                        下：<input type=\"text\" ms-duplex=\"@moduleSet.moduleContent.defstylesul3.paddingBottom\"/>\n                    </div>\n                </div>\n            </div>\n            <div class=\"attribute-title\">鼠标经过状态</div>\n            <div class=\"attribute-content\">\n                <!--背景-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">背景:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundHover\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul3,@moduleSet.moduleContent.hoverstylesul3,@moduleSet.moduleContent.hoverstylesul3,@moduleSet.moduleContent.hoverstylesul3],[@defaultObj.moduleContent.hoverstylesul3.backgroundColor,@defaultObj.moduleContent.hoverstylesul3.backgroundImage,@defaultObj.moduleContent.hoverstylesul3.backgroundPosition,@defaultObj.moduleContent.hoverstylesul3.backgroundRepeat],['backgroundColor','backgroundImage','backgroundPosition','backgroundRepeat'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundHover\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul3,@moduleSet.moduleContent.hoverstylesul3],['inherit','none'],['backgroundColor','backgroundImage'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"backgroundHover\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <p class=\"attribute-remarks\">注：需将标题栏和内容区的背景清除，才可以看到效果</p>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstylesul3.backgroundColor}\" ></div>\n                            <button>取消背景颜色</button>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景图片:</span>\n                            <input type=\"text\" disabled>\n                            <button>上传</button>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">背景位置:</span>{{@moduleSet.moduleContent.hoverstylesul3.backgroundPosition}}\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul3.backgroundPosition\">\n                                <option value=\"left top\">左上</option>\n                                <option value=\"left center\">左中</option>\n                                <option value=\"left top\">左下</option>\n                                <option value=\"center top\">中上</option>\n                                <option value=\"center\">居中</option>\n                                <option value=\"center bottom\">中下</option>\n                                <option value=\"right top\">右上</option>\n                                <option value=\"right center\">右中</option>\n                                <option value=\"right bottom\">右下</option>\n                                <option value=\"bottom\">下</option>\n                            </select>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">平铺:</span>{{@moduleSet.moduleContent.hoverstylesul3.backgroundRepeat}}\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul3.backgroundRepeat\">\n                                <option value=\"no-repeat\">不平铺</option>\n                                <option value=\"repeat\">平铺</option>\n                                <option value=\"repeat-x\">横向平铺</option>\n                                <option value=\"repeat-y\">纵向平铺</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--上边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">上边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHover\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul3,@moduleSet.moduleContent.hoverstylesul3,@moduleSet.moduleContent.hoverstylesul3],[@defaultObj.moduleContent.hoverstylesul3.borderTopColor,@defaultObj.moduleContent.hoverstylesul3.borderTopWidth,@defaultObj.moduleContent.hoverstylesul3.borderTopStyle],['borderTopColor','borderTopWidth','borderTopStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHover\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul3],[0],['borderTopWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHover\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstylesul3.borderTopColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul3.borderTopWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul3.borderTopStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--下边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">下边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHover\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul3,@moduleSet.moduleContent.hoverstylesul3,@moduleSet.moduleContent.hoverstylesul3],[@defaultObj.moduleContent.hoverstylesul3.borderBottomColor,@defaultObj.moduleContent.hoverstylesul3.borderBottomWidth,@defaultObj.moduleContent.hoverstylesul3.borderBottomStyle],['borderBottomColor','borderBottomWidth','borderBottomStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHover\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul3],[0],['borderBottomWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderBottomHover\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstylesul3.borderBottomColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul3.borderBottomWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul3.borderBottomStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--左边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">左边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHover\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul3,@moduleSet.moduleContent.hoverstylesul3,@moduleSet.moduleContent.hoverstylesul3],[@defaultObj.moduleContent.hoverstylesul3.borderLeftColor,@defaultObj.moduleContent.hoverstylesul3.borderLeftWidth,@defaultObj.moduleContent.hoverstylesul3.borderLeftStyle],['borderLeftColor','borderLeftWidth','borderLeftStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHover\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul3],[0],['borderLeftWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderLeftHover\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstylesul3.borderLeftColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul3.borderLeftWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul3.borderLeftStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!--右边线-->\n                <div class=\"attribute-content-item\">\n                    <span class=\"attribute-name\">右边线:</span>\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHover\" checked value=\"default\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul3,@moduleSet.moduleContent.hoverstylesul3,@moduleSet.moduleContent.hoverstylesul3],[@defaultObj.moduleContent.hoverstylesul3.borderRightColor,@defaultObj.moduleContent.hoverstylesul3.borderRightWidth,@defaultObj.moduleContent.hoverstylesul3.borderRightStyle],['borderRightColor','borderRightWidth','borderRightStyle'])\"\n                    >默认\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderTopHover\" value=\"hidden\"\n                    ms-click=\"@setDefault([@moduleSet.moduleContent.hoverstylesul3],[0],['borderRightWidth'])\"\n                    >隐藏\n                    <input type=\"radio\" class=\"radio-box\" name=\"borderRightHover\" value=\"custom\">自定义\n                    <div class=\"attribute-custom\">\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">颜色:</span>\n                            <div class=\"color-pick\" ms-css=\"{backgroundColor:@moduleSet.moduleContent.hoverstylesul3.borderRightColor}\"></div>\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">高度:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul3.borderRightWidth\">\n                                <option value=\"0\">0</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            像素\n                        </div>\n                        <div class=\"attribute-custom-item\">\n                            <span class=\"attribute-custom-name\">样式:</span>\n                            <select ms-duplex=\"@moduleSet.moduleContent.hoverstylesul3.borderRightStyle\">\n                                <option value=\"solid\">实线</option>\n                                <option value=\"dashed\">虚线</option>\n                                <option value=\"dotted\">点状</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    </div>\n\n\n\n    <div class=\"attribute-add\">\n            <div class=\"attribute-title\">栏目管理</div>\n            <ul>\n                <li ms-if=\"b.cj == '1'\" ms-for=\"(a,b) in @moduleSet.navData\" ms-attr=\"{id:a}\">\n                1.--<input type=\"text\" ms-duplex=\"b.name\"  /><input type=\"text\" ms-duplex=\"b.ename\"  /><input type=\"text\" ms-duplex=\"b.url\"  /><span ms-if=\"@moduleSet.advancedSetting.visible==true \">单独背景：<input type=\"text\" ms-duplex=\"b.befimg\"  />鼠标移入背景：<input type=\"text\" ms-duplex=\"b.hovimg\"  /></span><span ms-click=\"@delDataclick(a)\">X</span><span ms-click=\"@addnavshow($event)\">+</span>\n                    <ul style=\"padding-left: 30px\">\n                        <li ms-for=\"(c,d) in @moduleSet.navData\" ms-if=\"d.cj == '2' && b.cid == d.pid\">\n                        2.--<input type=\"text\" ms-duplex=\"d.name\"/><input type=\"text\" ms-duplex=\"d.url\"/><span ms-click=\"@delDataclick(c)\">X</span><span ms-click=\"@addnavshow($event)\">+</span>\n                            <ul style=\"padding-left: 30px\">\n                                <li  ms-if=\"f.cj == '3' && d.cid == f.pid\"  ms-for=\"(e,f) in @moduleSet.navData\">\n                                    3.--<input type=\"text\" ms-duplex=\"f.name\"/><input type=\"text\" ms-duplex=\"f.ename\"/><span ms-click=\"@delDataclick(e)\">X</span>\n                                </li>\n                                <li  class=\"add-nav\">添加3级.\n                                    导航：<input type=\"text\" ms-duplex=\"@moduleSet.addData.name\"/>\n                                    英文名：<input type=\"text\" ms-duplex=\"@moduleSet.addData.ename\"/>\n                                    链接：<input type=\"text\" ms-duplex=\"@moduleSet.addData.url\"/>\n                                    <a ms-click=\"@add3Dataclick(d.cid)\">添加</a>\n                                </li>\n                            </ul>\n                        </li>\n                        <li  class=\"add-nav\">添加2级.\n                            导航：<input type=\"text\" ms-duplex=\"@moduleSet.addData.name\"/>\n                            英文名：<input type=\"text\" ms-duplex=\"@moduleSet.addData.ename\"/>\n                            链接：<input type=\"text\" ms-duplex=\"@moduleSet.addData.url\"/>\n                            <a ms-click=\"@add2Dataclick(b.cid)\">添加</a>\n                        </li>\n                    </ul> \n                </li>\n                <li class=\"add-nav\">\n                    添加1级.\n                    导航：<input type=\"text\" ms-duplex=\"@moduleSet.addData.name\"/><br/>\n                    英文名：<input type=\"text\" ms-duplex=\"@moduleSet.addData.ename\"/><br/>\n                    链接：<input type=\"text\" ms-duplex=\"@moduleSet.addData.url\"/><br/>\n                    单独背景：<input type=\"text\" ms-duplex=\"@moduleSet.addData.befimg\"/><br/>\n                    鼠标移入单独背景：<input type=\"text\" ms-duplex=\"@moduleSet.addData.hovimg\"/>\n\n                    <a ms-click=\"@addDataclick\">添加</a>\n\n                </li>\n            </ul>\n            <span ms-click=\"@addnavshow($event)\">增加主导航</span>\n            <div><a ms-click=\"@updatelick\">提交</a></div>\n    </div>\n</div>\n"

/***/ }
]);
//# sourceMappingURL=build.js.map